<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>八尺妖剑</title>
      <link>https://ilikexff.cn</link>
      <description>简单是效率的灵魂</description>
      <generator>Zola</generator>
      <language>zh</language>
      <atom:link href="https://ilikexff.cn/rss.xml" rel="self" type="application/rss+xml"/>
      <lastBuildDate>Thu, 19 Jun 2025 00:00:00 +0000</lastBuildDate>
      <item>
          <title>[C++游戏开发基础]:地址传递详解</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-di-zhi-chuan-di-xiang-jie/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-di-zhi-chuan-di-xiang-jie/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-di-zhi-chuan-di-xiang-jie/">&lt;h3 id=&quot;2025-3-1-geng-xin&quot;&gt;2025-3-1 更新:&lt;a class=&quot;zola-anchor&quot; href=&quot;#2025-3-1-geng-xin&quot; aria-label=&quot;Anchor link for: 2025-3-1-geng-xin&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对原有内容的补充和完善&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;在阅读本文的同时,默认你已经了解了&lt;code&gt;C++&lt;&#x2F;code&gt;中参数传递的其他两种方式:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;按值传递&lt;&#x2F;li&gt;
&lt;li&gt;引用传递&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;下面的程序对这俩中 传递方式做了一个简单的使用演示:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数参数是 str 的一个副本
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过副本打印值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByReference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数参数是一个引用，绑定到 str
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过引用打印值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按值传递 str，创建 str 的副本
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByReference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按引用传递 str，不创建 str 的副本
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;当我们使用值传递参数&lt;code&gt;str&lt;&#x2F;code&gt;时,函数参数&lt;code&gt;val&lt;&#x2F;code&gt;接收参数的一个副本。所以每次对传递进来的参数的修改都不会直接影响原始参数,因为它修改的其实是原始参数的副本而已。&lt;&#x2F;li&gt;
&lt;li&gt;通过引用传递参数时,引用参数&lt;code&gt;ref&lt;&#x2F;code&gt;绑定到实际参数。这避免了复制参数,因为我们的引用参数是&lt;code&gt;const&lt;&#x2F;code&gt;修饰的,因此不允许修改&lt;code&gt;ref&lt;&#x2F;code&gt;,但是如果没有这个常量修复符,那么我们对&lt;code&gt;ref&lt;&#x2F;code&gt;所做的任何修改都会影响&lt;code&gt;str&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以上两种 情况下,函数的调用者都提供了实际的对象&lt;code&gt;str&lt;&#x2F;code&gt;作为函数调用的参数。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;di-zhi-chuan-di&quot;&gt;地址传递&lt;a class=&quot;zola-anchor&quot; href=&quot;#di-zhi-chuan-di&quot; aria-label=&quot;Anchor link for: di-zhi-chuan-di&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;C++&lt;&#x2F;code&gt;提供了一种将值传递给函数的第三种方式，称为按地址传递。在按地址传递中，调用者不是提供对象作为参数，而是提供对象的地址（通过指针）。这个指针（包含对象的地址）被复制到被调用函数的指针参数中（现在也包含对象的地址）。然后函数可以取消引用该指针以访问传递的地址的对象。&lt;&#x2F;p&gt;
&lt;p&gt;基于此,考虑下面的程序,在上面示例方法的基础上新增了按地址传递版本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数参数是 str 的副本
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过副本打印值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByReference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数参数是一个引用，绑定到 str
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过引用打印值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数参数是一个指针，保存 str 的地址
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过解引用指针打印值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按值传递 str，创建 str 的副本
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByReference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按引用传递 str，不创建 str 的副本
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按地址传递 str，不创建 str 的副本
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;首先、由于我们希望&lt;code&gt;printByAddress()&lt;&#x2F;code&gt;函数使用地址传递,所以需要把函数的参数调整为一个名为&lt;code&gt;ptr&lt;&#x2F;code&gt;的指针。再者,考虑到该函数将以只读的方式使用这个&lt;code&gt;ptr&lt;&#x2F;code&gt;指针,所以该指针声明为一个指向常量值的指针。如果你是直接点开的本文,对指针类型尚未学习,建议查看这篇文章:&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;articles&#x2F;150#google_vignette&quot;&gt;[通俗易懂C++]:指针和const&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;其次、当调用函数时,我们不仅不能直接传入&lt;code&gt;str&lt;&#x2F;code&gt;对象,还需要传入&lt;code&gt;str&lt;&#x2F;code&gt;的地址,你可能也想到了,可以使用取地址运算符(&lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;)来获取包含&lt;code&gt;str&lt;&#x2F;code&gt;的=地址的指针。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当执行调用时,&lt;code&gt;&amp;amp;str&lt;&#x2F;code&gt;将会创建一个持有&lt;code&gt;str&lt;&#x2F;code&gt;地址的指针。然后,该地址呗复制到函数参数&lt;code&gt;ptr&lt;&#x2F;code&gt;作为函数调用的一部分。因为该指针&lt;code&gt;ptr&lt;&#x2F;code&gt;持有&lt;code&gt;str&lt;&#x2F;code&gt;的地址,当函数使用&lt;code&gt;*&lt;&#x2F;code&gt;解引用&lt;code&gt;ptr&lt;&#x2F;code&gt;时,它将获取&lt;code&gt;str&lt;&#x2F;code&gt;的值,该值通过函数的调用会被打印到控制台上。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当我们使用 &lt;code&gt;operator&amp;amp;&lt;&#x2F;code&gt; 将变量的地址作为参数传递时，我们说变量是通过地址传递的。&lt;&#x2F;li&gt;
&lt;li&gt;当我们有一个指针变量持有对象的地址，并且我们将指针作为相同类型的参数传递时，我们说对象是通过地址传递的，指针是通过值传递的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;di-zhi-chuan-di-bu-hui-fu-zhi-suo-zhi-xiang-de-dui-xiang&quot;&gt;地址传递不会复制所指向的对象&lt;a class=&quot;zola-anchor&quot; href=&quot;#di-zhi-chuan-di-bu-hui-fu-zhi-suo-zhi-xiang-de-dui-xiang&quot; aria-label=&quot;Anchor link for: di-zhi-chuan-di-bu-hui-fu-zhi-suo-zhi-xiang-de-dui-xiang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用取地址操作符 (&amp;amp;) 获取一个指针，指向 str 的地址
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;你需要知道的是,一味的通过复制形式的传递,那个复制的成本是比较高的,特别是&lt;code&gt;sstd::tring&lt;&#x2F;code&gt;,因此尽可能的避免使用基于复制的值传递,当我们通过地址传递&lt;code&gt;std::string&lt;&#x2F;code&gt;时,我们并不需要复制实际的&lt;code&gt;std::string&lt;&#x2F;code&gt;对象,而只是在调用者到被调用者之间复制指针(该指针持有对象的地址)。由于地址通常只有4或者8个字节,指针也只有4或8个字节,因此复制指针的成本很低,速度也很快。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，就像按引用传递一样，按地址传递速度快，且避免了复制参数对象。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;di-zhi-chuan-di-yun-xu-han-shu-xiu-gai-can-shu-de-zhi&quot;&gt;地址传递允许函数修改参数的值&lt;a class=&quot;zola-anchor&quot; href=&quot;#di-zhi-chuan-di-yun-xu-han-shu-xiu-gai-can-shu-de-zhi&quot; aria-label=&quot;Anchor link for: di-zhi-chuan-di-yun-xu-han-shu-xiu-gai-can-shu-de-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;当我们通过地址传递一个对象时,函数接收传递对象的地址,他可以通过解引用来访问。&lt;&#x2F;p&gt;
&lt;p&gt;因为这是实际参数对象的地址而不是副本,如果函数参数是指向非&lt;code&gt;const&lt;&#x2F;code&gt;的指针,则函数可以通过指针参数修改参数的值:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;changeValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 注意：ptr 在这个例子中是一个指向非 const 类型的指针
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将值修改为 6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x = &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 x 的初始值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;changeValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将 x 的地址传递给函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x = &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印修改后的 x 的值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202502231826546.png&quot; alt=&quot;image-20250223182608419&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果一个函数不应该修改传入的对象，则函数参数应该是一个指向常量的指针：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;changeValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 注意：ptr 现在是一个指向 const 的指针
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误：不能修改 const 值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于和通常不为普通（非指针、非引用）函数参数添加 &lt;code&gt;const&lt;&#x2F;code&gt; 关键字,我们也通常不会为指针函数参数添加&lt;code&gt; const&lt;&#x2F;code&gt; 关键字。&lt;&#x2F;p&gt;
&lt;p&gt;一下是两个说明:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;将 const 关键字用于指针函数参数&lt;&#x2F;strong&gt;，使其成为 &lt;strong&gt;常量指针&lt;&#x2F;strong&gt;，几乎没有什么价值（因为它对调用者没有影响，且主要作为文档说明指针不会改变）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;将 const 关键字用于区分指向常量的指针与可以修改传入对象的非常量指针&lt;&#x2F;strong&gt;，则非常重要（因为调用者需要知道函数是否可能修改传入参数的值）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果我们只使用非&lt;code&gt; const&lt;&#x2F;code&gt; 的指针函数参数，那么所有 &lt;code&gt;const&lt;&#x2F;code&gt; 的使用都是有意义的。一旦我们开始为指针函数参数使用 &lt;code&gt;const&lt;&#x2F;code&gt;，就会变得更加难以判断 &lt;code&gt;const&lt;&#x2F;code&gt; 的使用是否真的有意义。更重要的是，这也会使得难以察觉 &lt;strong&gt;指向非 const 参数&lt;&#x2F;strong&gt;。例如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用非 const 指针，所有的 const 都是有意义的。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;source&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用 const 指针，`dest` 是指向非 const 的指针，可能会在大量无关紧要的 const 中被忽略。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在前一种情况中，很容易看出 &lt;code&gt;source&lt;&#x2F;code&gt; 是指向常量的指针，而 &lt;code&gt;dest&lt;&#x2F;code&gt; 是指向非常量的指针。 在后一种情况下，就很难看出 &lt;code&gt;dest&lt;&#x2F;code&gt; 是一个常量指针指向非常量的对象，而函数可以修改它所指向的对象！&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优先使用指向常量的函数参数，而不是指向非常量的函数参数，除非函数需要修改传入的对象。&lt;&#x2F;li&gt;
&lt;li&gt;不要在没有特定原因的情况下将函数参数设置为常量指针。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;&quot;&gt;空指针检查&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;考虑下面这个看似人畜无害的代码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;myPtr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;myPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当运行此程序时，它将打印值 &lt;code&gt;5&lt;&#x2F;code&gt; 然后很可能会崩溃。&lt;&#x2F;p&gt;
&lt;p&gt;在调用 &lt;code&gt;print(myPtr)&lt;&#x2F;code&gt; 时， &lt;code&gt;myPtr&lt;&#x2F;code&gt; 是一个空指针，因此函数参数 &lt;code&gt;ptr&lt;&#x2F;code&gt; 也将是一个空指针。当在这个函数体中解引用这个空指针时，将产生未定义行为。&lt;&#x2F;p&gt;
&lt;p&gt;在通过地址传递参数时，在解引用值之前应确保指针不是空指针关于空指针的检查,之前的文章也是提到过的,这里就不再赘述。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 检查空指针
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;虽然这对于这样一个简单的函数来说是可以的，但在更复杂的函数中，这可能会导致冗余的逻辑（多次测试指针是否为空）或函数主要逻辑的嵌套冗余。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在大多数情况下,采取下面的写法更为建议:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果 ptr 是空指针，提前返回到调用者
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果执行到这里，我们可以假设 ptr 是有效的
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 所以不需要再进行测试或嵌套检查
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印指针指向的值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 传递 x 的地址，打印 5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 传递空指针，不会打印任何内容
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;优先使用const引用传递&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过引用传递具有与通过地址传递相同的优点，而不存在意外解除空指针的风险。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;const&lt;&#x2F;code&gt; 引用传递有一些比通过地址传递的优势。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;首先，因为通过地址传递的对象必须有一个地址，所以只有左值可以按地址传递（因为右值没有地址）。按 const 引用传递更灵活，因为它可以接受左值和右值：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数参数是参数的副本
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过副本打印值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByReference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数参数是一个绑定到参数的引用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过引用打印值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数参数是一个指针，持有参数的地址
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过解引用指针打印值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 有效（但会创建一个副本）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByReference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 有效（因为参数是常量引用）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printByAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误：不能对右值取地址
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其次，按引用传递的语法很自然，因为我们只需传递字面量或对象。使用按地址传递，我们的代码最终会充斥着与号&lt;code&gt;（&amp;amp;）&lt;&#x2F;code&gt;和星号&lt;code&gt;（*）&lt;&#x2F;code&gt;。代码量很大的情况下,会让你看的头皮发麻我给你讲!!!&lt;&#x2F;p&gt;
&lt;p&gt;在现代 &lt;code&gt;C++&lt;&#x2F;code&gt;中，大多数可以用按地址传递完成的事情，通过其他方法做得更好。遵循这个常见的原则：“&lt;strong&gt;能通过引用传递时就传递引用，必须时才传递地址&lt;&#x2F;strong&gt;”。&lt;&#x2F;p&gt;
&lt;p&gt;所以最佳实践是:&lt;strong&gt;优先使用引用传递而非地址传递，除非你有特定理由使用地址传递。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-2&quot;&gt;通过地址传递可选参数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;函数通过地址传递的一个更加常见的用途是允许函数接受一个“可选”参数。看个例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果 id 不为 null，则输出 ID 号码
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your ID number is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果 id 为 null，则表示 ID 未知
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your ID number is not known.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用时不传入参数，ID 未知
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;userid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;userid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 传入 userid 的地址，ID 已知
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这个程序中， &lt;code&gt;printIDNumber()&lt;&#x2F;code&gt; 函数有一个参数，通过地址传递并默认为 &lt;code&gt;nullptr&lt;&#x2F;code&gt; 。在 &lt;code&gt;main()&lt;&#x2F;code&gt; 中，我们调用这个函数两次。第一次调用时，我们不知道用户的 ID，所以不带参数调用 &lt;code&gt;printIDNumber()&lt;&#x2F;code&gt; 。 &lt;code&gt;id&lt;&#x2F;code&gt; 参数默认为 &lt;code&gt;nullptr&lt;&#x2F;code&gt; ，函数打印 &lt;code&gt;Your ID number is not known.&lt;&#x2F;code&gt; 。第二次调用时，我们现在有一个有效的 ID，所以调用 &lt;code&gt;printIDNumber(&amp;amp;userid)&lt;&#x2F;code&gt; 。 &lt;code&gt;id&lt;&#x2F;code&gt; 参数接收 &lt;code&gt;userid&lt;&#x2F;code&gt; 的地址，因此函数打印 &lt;code&gt;Your ID number is 34.&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;然而,在许多情况下,使用函数重载可以达到相同的目的,这是一个不更好的替代方案:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数版本1：无参数版本
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your ID is not known&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果没有提供 ID，则打印此消息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 函数版本2：接收一个整数类型的参数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your ID is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 ID
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用无参数版本，输出 &amp;quot;Your ID is not known&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;userid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;userid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用带整数参数的版本，输出 &amp;quot;Your ID is 34&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;62&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 直接传递一个整数值作为参数，输出 &amp;quot;Your ID is 62&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;除此之外,使用函数重载的实现方式,我们不再需要担心空指针解引的问题,并且可以传递字面量或者其他右值作为参数。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;改变指针参数指向的内容&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;当我们从函数传递一个地址时,该地址从参数(实参)复制到指针参数(形参)中。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; [[maybe_unused]] 用来防止编译器因为 ptr2 设置但没有使用而发出警告
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[[&lt;&#x2F;span&gt;&lt;span&gt;maybe_unused&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]] int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ptr2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    ptr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将函数参数指针设置为 null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个整型变量 x，初始化为 5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个指针 ptr，指向 x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ptr is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; (&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;non-null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 判断 ptr 是否为空指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用 nullify 函数，尝试将 ptr 设置为 nullptr
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 判断 ptr 是否为空指针
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ptr is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; (&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;non-null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如你所见，改变指针参数所持有的地址对参数（ &lt;code&gt;ptr&lt;&#x2F;code&gt; 仍然指向 &lt;code&gt;x&lt;&#x2F;code&gt; ）没有影响。当调用函数 &lt;code&gt;nullify()&lt;&#x2F;code&gt; 时， &lt;code&gt;ptr2&lt;&#x2F;code&gt; 接收了传入地址的副本（在这种情况下， &lt;code&gt;ptr&lt;&#x2F;code&gt; 所持有的地址，即 &lt;code&gt;x&lt;&#x2F;code&gt; 的地址）。当函数改变 &lt;code&gt;ptr2&lt;&#x2F;code&gt; 所指向的内容时，这只会影响 &lt;code&gt;ptr2&lt;&#x2F;code&gt; 所持有的副本。&lt;&#x2F;p&gt;
&lt;p&gt;就像我们可以通过引用传递一个普通变量时一样,我们可以通过引用来传递指针。下面是将上面程序中的&lt;code&gt;ptr2&lt;&#x2F;code&gt;更改为地址引用的版本:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;refptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; refptr 是一个指向指针的引用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    refptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将函数参数指针修改为 null
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个整型变量 x，初始化为 5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个指针 ptr，指向 x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ptr is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; (&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;non-null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 判断 ptr 是否为空指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用 nullify 函数，传递 ptr 的引用，修改 ptr 的值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ptr is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; (&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;non-null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 判断 ptr 是否为空指针
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为 &lt;code&gt;refptr&lt;&#x2F;code&gt; 现在是一个指向指针的引用，当 &lt;code&gt;ptr&lt;&#x2F;code&gt; 作为参数传递时， &lt;code&gt;refptr&lt;&#x2F;code&gt; 绑定到 &lt;code&gt;ptr&lt;&#x2F;code&gt; 。这意味着对 &lt;code&gt;refptr&lt;&#x2F;code&gt; 的任何更改都会应用到 &lt;code&gt;ptr&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢阅读,欢迎指正!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>[C++游戏开发基础]:构造函数浅析(8000字)</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-gou-zao-han-shu-qian-xi-8000zi/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-gou-zao-han-shu-qian-xi-8000zi/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-gou-zao-han-shu-qian-xi-8000zi/">&lt;h2 id=&quot;gou-zao-han-shu&quot;&gt;构造函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#gou-zao-han-shu&quot; aria-label=&quot;Anchor link for: gou-zao-han-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;构造函数是一种特殊的成员函数,在创建非聚合类类型对象后会自动被调用。当定义一个非聚合类类型对象时,编译器会检查是否能找到一个可以访问的构造函数,该构造函数与调用者提供的初始化值(如果有的情况下)相匹配。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果找到一个可访问的匹配构造函数，将为该对象分配内存，然后调用构造函数。&lt;&#x2F;li&gt;
&lt;li&gt;如果找不到合适的构造函数，则会生成编译错误。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;许多新手程序员可能不太清楚构造函数是否创建对象。实际上,它们不会创建对象,编译器在调用构造函数之前为对象分配内存,然后在未初始化的对象上调用构造函数。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;然后,如果一组初始化参数找不到匹配的构造函数,则会出现编译错误。因此,虽然构造函数不创建对象,但是缺少匹配的构造函数将阻止对象的创建。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;除了确定对象如何创建之外,构造函数通常还执行下面两个功能:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;它们通常通过成员初始化列表初始化任何成员。&lt;&#x2F;li&gt;
&lt;li&gt;可能执行其他操作,比如检查初始化值,打开文件或数据库等。 这些都是构造函数可以实现的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;构造函数执行完毕之后,我们说该对象已经被“构造”完成,并且对象现在处于一致可用的状态。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;gou-zao-han-shu-de-ming-ming&quot;&gt;构造函数的命名&lt;a class=&quot;zola-anchor&quot; href=&quot;#gou-zao-han-shu-de-ming-ming&quot; aria-label=&quot;Anchor link for: gou-zao-han-shu-de-ming-ming&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;与普通函数不同,构造函数必须遵循严格的命名规则:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数必须与类同名,这里的同名是严格意义上的,比如大小写一致。这个名称不包括模版参数。&lt;&#x2F;li&gt;
&lt;li&gt;构造函数没有返回类型,甚至没有&lt;code&gt;void&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;由于构造函数通常是类接口的一部分,因此它们通常是公共的。&lt;&#x2F;p&gt;
&lt;p&gt;下面演示为一个程序添加一个基本的构造函数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    foo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503201750356.png&quot; alt=&quot;image-20250320175001076&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当编译器看到定义&lt;code&gt;Foo foo{6,7}&lt;&#x2F;code&gt;时,它会寻找一个匹配的&lt;code&gt;Foo&lt;&#x2F;code&gt;构造函数,该构造函数可以接受两个&lt;code&gt;int&lt;&#x2F;code&gt;参数,在运行时，当 &lt;code&gt;foo&lt;&#x2F;code&gt; 被实例化时，会为 &lt;code&gt;foo&lt;&#x2F;code&gt; 分配内存，并调用 &lt;code&gt;Foo(int, int)&lt;&#x2F;code&gt; 构造函数，其中参数 &lt;code&gt;x&lt;&#x2F;code&gt; 被初始化为 &lt;code&gt;6&lt;&#x2F;code&gt; ，参数 &lt;code&gt;y&lt;&#x2F;code&gt; 被初始化为 &lt;code&gt;7&lt;&#x2F;code&gt; 。然后构造函数的主体执行并打印 &lt;code&gt;Foo(6, 7) constructed&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;当我们调用 &lt;code&gt;print()&lt;&#x2F;code&gt; 成员函数时，你会发现成员 &lt;code&gt;m_x&lt;&#x2F;code&gt; 和 &lt;code&gt;m_y&lt;&#x2F;code&gt; 的值为 0。这是因为虽然我们的 &lt;code&gt;Foo(int, int)&lt;&#x2F;code&gt; 构造函数被调用了，但它实际上并没有初始化成员。别急,后文会逐步体现。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;构造函数不能是const&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;构造函数需要初始化正在构造的对象,因此,构造函数不能是&lt;code&gt;const&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 私有成员变量 m_x，默认初始化为 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Something&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 构造函数必须是非常量（non-const）的
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 在非常量构造函数中可以修改成员变量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 常成员函数，不能修改成员变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Something &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义常量对象 s，并隐式调用（非常量的）构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出 5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;const&lt;&#x2F;code&gt; 对象仍然可以调用非 &lt;code&gt;const&lt;&#x2F;code&gt; 构造函数，因为 &lt;code&gt;const&lt;&#x2F;code&gt; 限制只影响对象创建后，&lt;strong&gt;不影响初始化&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;通过成员初始化列表进行成员初始化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;为了让构造函数初始化成员，我们使用成员初始化列表（通常称为“成员初始化列表”）来完成。不要将这个与用于用值列表初始化聚合体的同名“初始化列表”混淆。&lt;&#x2F;p&gt;
&lt;p&gt;成员初始化列表最好通过示例来学习。在下面的例子中，我们的 &lt;code&gt;Foo(int, int)&lt;&#x2F;code&gt; 构造函数已经被更新为使用成员初始化列表来初始化 &lt;code&gt;m_x&lt;&#x2F;code&gt; 和 &lt;code&gt;m_y&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; here&amp;#39;s our member initialization list
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;) constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    foo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;成员初始化列表定义在构造函数参数之后。它以冒号（:）开始，然后列出每个要初始化的成员及其对应的初始化值，用逗号分隔。&lt;&#x2F;p&gt;
&lt;p&gt;这里必须使用&lt;strong&gt;直接初始化形式&lt;&#x2F;strong&gt;（最好使用花括号，但圆括号也可以）——使用拷贝初始化（带有等号）在这里不起作用。另外请注意，&lt;strong&gt;成员初始化列表不以分号结尾&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;当 &lt;code&gt;foo&lt;&#x2F;code&gt; 被实例化时，初始化列表中的成员将使用指定的初始化值进行初始化。在这种情况下，成员初始化列表将 &lt;code&gt;m_x&lt;&#x2F;code&gt; 初始化为 &lt;code&gt;x&lt;&#x2F;code&gt; 的值（ &lt;code&gt;x&lt;&#x2F;code&gt; 的值是 &lt;code&gt;6&lt;&#x2F;code&gt; ），并将 &lt;code&gt;m_y&lt;&#x2F;code&gt; 初始化为 &lt;code&gt;y&lt;&#x2F;code&gt; 的值（ &lt;code&gt;y&lt;&#x2F;code&gt; 的值是 &lt;code&gt;7&lt;&#x2F;code&gt; ）。然后构造函数的主体运行。&lt;&#x2F;p&gt;
&lt;p&gt;当调用 &lt;code&gt;print()&lt;&#x2F;code&gt; 成员函数时，你可以看到 &lt;code&gt;m_x&lt;&#x2F;code&gt; 仍然具有值 &lt;code&gt;6&lt;&#x2F;code&gt; ， &lt;code&gt;m_y&lt;&#x2F;code&gt; 仍然具有值 &lt;code&gt;7&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;成员初始化列表格式化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;C++提供类很多自由来格式化你的成员初始化列表,因为它们并不关心你在冒号、逗号或空格位置上做了什么。所以一下样式都是有效的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;推荐使用上面第三种格式:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数名称后面跟一个冒号,这样可以干净的将成员初始化列表与函数原型分开。&lt;&#x2F;li&gt;
&lt;li&gt;缩进的成员初始化列表以便于更容易看到函数名称。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果成员初始化列表简短的情况下, 所有的初始化项可以放在一行上:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;否则（或者如果你更喜欢），每个成员和初始化器可以分别放在单独的行上（以逗号开头以保持对齐）：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;成员初始化顺序&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;因为C++标准规定,成员初始化列表中的成员总是按照类中定义的顺序进行初始化。 在上面的例子中,由于 &lt;code&gt;m_x&lt;&#x2F;code&gt; 在类定义中定义在 &lt;code&gt;m_y&lt;&#x2F;code&gt; 之前， &lt;code&gt;m_x&lt;&#x2F;code&gt; 将首先被初始化（即使它在成员初始化列表中没有被列出在最前面）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;成员在成员初始化列表中应该按照它们在类中定义的顺序列出。一些编译器会在成员初始化顺序不正确时发出警告。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;另外，最好避免使用其他成员的值来初始化成员（如果可能的话）。这样，即使你在初始化顺序上犯了错误，也不会有太大影响，因为初始化值之间没有依赖关系。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;成员初始化列表和默认成员初始化器&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;成员可以一下几种不同的方式初始化:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果成员在成员初始化列表中列出,将优先使用该初始化值。&lt;&#x2F;li&gt;
&lt;li&gt;否则,如果成员具有默认的成员初始化器,则使用该默认值进行初始化。&lt;&#x2F;li&gt;
&lt;li&gt;否则该成员将使用默认初始化。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这意味着如果成员既有默认成员初始化器，又在构造函数的成员初始化列表中列出，那么成员初始化列表中的值将优先。&lt;&#x2F;p&gt;
&lt;p&gt;看代码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认成员初始化（将被构造函数初始化列表覆盖）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认成员初始化（如果未在构造函数中显式初始化，将使用此值）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_z&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 没有初始化，值不确定（未定义行为）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 成员初始化列表，m_x 被初始化为 x（覆盖默认初始化）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出构造函数被调用的提示
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出对象的成员变量值
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建 Foo 对象，m_x 被初始化为 6，m_y 仍然是 2，m_z 未初始化（值不确定）
&lt;&#x2F;span&gt;&lt;span&gt;    foo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用 print() 打印成员变量的值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-5&quot;&gt;构造函数的函数体&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;构造函数的函数体通常留空。这是因为我们主要使用构造函数进行初始化,这是通过成员初始化列表完成的。如果仅需要进行这些初始化操作,那么构造函数函数体中就不需要任何语句。&lt;&#x2F;p&gt;
&lt;p&gt;然而,因为构造函数体内语句的执行是在成员初始化列表之后,所以我们可以在其中添加语句来完成任何其他初始化任务。&lt;&#x2F;p&gt;
&lt;p&gt;在上述示例中，我们向控制台打印一些内容以显示构造函数已执行，但我们也可以执行其他操作，例如打开文件或数据库、分配内存等…&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;优先在构造函数成员初始化列表中初始化成员，而不是在构造函数体中赋值。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-6&quot;&gt;检测和处理构造函数中的无效参数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;考虑下面的程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为分数是由分子除以分母得到的，所以分数的分母不能为零（否则会得到除以零，这是数学上未定义的）。换句话说，这个类中 &lt;code&gt;m_denominator&lt;&#x2F;code&gt; 不能为 &lt;code&gt;0&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;当用户尝试创建一个分母为零的分数（例如 &lt;code&gt;Fraction f { 1, 0 };&lt;&#x2F;code&gt; ）时，我们应该怎么做？&lt;&#x2F;p&gt;
&lt;p&gt;在成员初始化列表中，我们检测和处理错误的工具相当有限。我们可以使用条件运算符来检测错误，但接下来呢？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: ??? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 然后呢,接下来怎么做?
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;你可能会想到,我们可以将分母改为一个有效的值,但是这样用户得到的结果就不会包含它们要求的值了,而且我们也没有办法通知他们做了非法操作。&lt;&#x2F;p&gt;
&lt;p&gt;因此,我们通常不会在成员初始化列表中尝试进行任何类型的验证,在大多数情况下,我们没有足够的信息支持我们完全在狗仔函数内部解决这些问题,因此在狗仔构造函数内部修复这些问题显然不是什么好主意。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于非成员函数和非特殊成员函数，我们可以将错误传递给调用者处理。但是构造函数没有返回值，所以我们没有好的方法来做这一点。在某些情况下，我们可以添加一个 &lt;code&gt;isValid()&lt;&#x2F;code&gt; 成员函数（或重载转换为 &lt;code&gt;bool&lt;&#x2F;code&gt; ），返回对象当前是否处于有效状态。例如，一个 &lt;code&gt;isValid()&lt;&#x2F;code&gt; 函数对于 &lt;code&gt;Fraction&lt;&#x2F;code&gt; 会返回 &lt;code&gt;true&lt;&#x2F;code&gt; 当 &lt;code&gt;m_denominator != 0.0&lt;&#x2F;code&gt; 。但这意味着调用者必须记住每次创建新的 Fraction 对象时都调用该函数。并且使语义上无效的对象可访问可能会导致错误。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在某些类型的程序中，我们可以直接停止整个程序，并让用户重新运行程序并输入正确的数据……但在大多数情况下，这根本不可接受。&lt;&#x2F;li&gt;
&lt;li&gt;异常会完全终止构造的过程,这意味着用户永远不会获得一个语义上无效的对象。因此,大多数情况下,抛出异常是最好的做法。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;当然,如果无法或者不想使用异常抛出的方式,我们还有一个合理的选择:&lt;&#x2F;p&gt;
&lt;p&gt;那就是不让用户直接创建类,可以提供一个函数,该函数要么返回一个实例,要么返回一个表示失败的值。&lt;&#x2F;p&gt;
&lt;p&gt;在下面的例子中，我们的 &lt;code&gt;createFraction()&lt;&#x2F;code&gt; 函数返回一个 &lt;code&gt;std::optional&amp;lt;Fraction&amp;gt;&lt;&#x2F;code&gt; ，该 &lt;code&gt;std::optional&amp;lt;Fraction&amp;gt;&lt;&#x2F;code&gt; 可能包含一个有效的 &lt;code&gt;Fraction&lt;&#x2F;code&gt; 。如果包含，则我们可以使用该 &lt;code&gt;Fraction&lt;&#x2F;code&gt;。如果不包含，则调用者可以检测到并处理这种情况。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分子，默认为 0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分母，默认为 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 私有构造函数，外部无法直接调用
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 允许该友元函数访问私有成员
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;friend&lt;&#x2F;span&gt;&lt;span&gt; std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; createFraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; numerator, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 负责创建 Fraction 实例的函数，返回 std::optional&amp;lt;Fraction&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createFraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分母不能为 0，否则返回空 optional
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;numerator, denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 否则返回合法的 Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createFraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) }&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建合法分数 0&#x2F;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;f1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 检查是否成功创建
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fraction created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出 &amp;quot;Fraction created&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createFraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) }&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 试图创建非法分数 0&#x2F;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span&gt;f2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 检查创建是否失败
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bad fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出 &amp;quot;Bad fraction&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-7&quot;&gt;默认构造函数以及参数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;默认构造函数是一个不需要参数的构造函数,通常,这是一个没有参数定义的构造函数。
看个示例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo default constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 没有初始化值，调用foo的默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果一个类类型&lt;strong&gt;有默认构造函数&lt;&#x2F;strong&gt;，那么&lt;strong&gt;值初始化（value initialization）&lt;&#x2F;strong&gt; 和 &lt;strong&gt;默认初始化（default initialization）&lt;&#x2F;strong&gt; 都会调用默认构造函数。因此，对于这样的类（比如示例中的 Foo 类），以下两种写法本质上是等价的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 值初始化，调用 Foo() 默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;Foo foo2;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认初始化，调用 Foo() 默认构造函数
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;对于所有类类型，优先使用值初始化而不是默认初始化。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-8&quot;&gt;带有默认参数的构造函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;与所有函数一样,构造函数的最右侧参数可以有默认参数。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 带有默认参数的构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;) constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用Foo(int,int)构造函数并使用默认参数初始化
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用Foo(int,int) 构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503211803678.png&quot; alt=&quot;image-20250321180326324&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果一个构造函数&lt;strong&gt;所有参数&lt;&#x2F;strong&gt;都有默认值，那么它就可以像默认构造函数一样工作，&lt;strong&gt;可以在不传递任何参数的情况下调用&lt;&#x2F;strong&gt;，因此它就是一个&lt;strong&gt;默认构造函数&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-9&quot;&gt;构造函数重载&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;由于构造函数也是函数,因此也可以被重载。也就是说,我们可以有多个构造函数,以便以不同的方式创建对象。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo() constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 非默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;) constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用Foo()构造函数并使用默认参数初始化
&lt;&#x2F;span&gt;&lt;span&gt;        Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用Foo(int,int) 构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以上结论的一个推论是,一个类应该只有一个默认构造函数。如果提供了多个默认构造函数,编译器将无法区分应该选择使用哪个构造函数而报错。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; default constructor
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; default constructor
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;) constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 编译错误:不知道选用哪个默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上述示例中，我们使用无参数的方式实例化 &lt;code&gt;foo&lt;&#x2F;code&gt; ，因此编译器将查找默认构造函数。它会找到两个，并且无法区分应该使用哪个构造函数。这将导致编译错误。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-10&quot;&gt;隐式默认构造函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;如果非聚合类类型的对象没有用户声明的构造函数,编译器会生成一个公共的默认构造函数,这样类可以进行值初始化或默认初始化。这个构造函数就是隐式的默认构造函数。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 没有声明的构造函数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这个类没有用户声明的构造函数，所以编译器将为我们生成一个隐式默认构造函数。这个构造函数将用于实例化 &lt;code&gt;foo{}&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;隐式默认构造函数等同于一个没有参数、没有成员初始化列表且构造函数体内没有语句的构造函数。换句话说，对于上述 &lt;code&gt;Foo&lt;&#x2F;code&gt; 类，编译器生成如下内容：&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 隐式生成默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;隐式默认构造函数&lt;&#x2F;strong&gt;（implicit default constructor）在&lt;strong&gt;类没有数据成员&lt;&#x2F;strong&gt;的情况下通常比较有用。但&lt;strong&gt;如果一个类有数据成员&lt;&#x2F;strong&gt;，我们通常希望它们可以用&lt;strong&gt;用户提供的值进行初始化&lt;&#x2F;strong&gt;，而&lt;strong&gt;隐式默认构造函数无法满足这个需求&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在某些情况下，我们可能会手动编写一个&lt;strong&gt;默认构造函数&lt;&#x2F;strong&gt;，但它的行为实际上和&lt;strong&gt;编译器隐式生成的默认构造函数&lt;&#x2F;strong&gt;完全一样。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;在这种情况下，我们可以使用 = default 告诉编译器生成默认构造函数，而不必自己写一个。&lt;strong&gt;这种构造函数被称为&lt;&#x2F;strong&gt;显式默认化的默认构造函数&lt;&#x2F;strong&gt;（explicitly defaulted default constructor）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 生成一个显式默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;) constructed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用 Foo() 默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上述示例中，由于我们声明了一个用户自定义构造函数（ &lt;code&gt;Foo(int, int)&lt;&#x2F;code&gt; ），通常不会生成隐式默认构造函数。然而，因为我们告诉编译器需要为我们生成这样的构造函数，那么它将会生成。这个构造函数随后将被我们对 &lt;code&gt;foo{}&lt;&#x2F;code&gt; 的实例化使用。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;优先使用显式默认构造函数(&lt;code&gt;=default)&lt;&#x2F;code&gt;,而不是空主体的默认构造函数。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-11&quot;&gt;显式默认化的默认构造函数与空的用户定义构造函数区别&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当使用值初始化一个类时,如果该类具有用户定义的默认构造函数,对象将会进行默认初始化。但是如果该类有一个未由用户提供的默认构造函数即，一个隐式定义的默认构造函数，或者使用 &lt;code&gt;= default&lt;&#x2F;code&gt; 定义的默认构造函数）,那么在默认初始化之前,该对象将被进行零初始化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_a&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 注意：没有默认初始化值
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认初始化为 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 用户定义的空构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_a&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_b&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Default
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_a&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 注意：没有默认初始化值
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认初始化为 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Default&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 显式默认化的默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_a&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_b&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Implicit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_a&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 注意：没有默认初始化值
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认初始化为 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 隐式默认构造函数（编译器自动生成）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_a&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_b&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认初始化（m_a 未初始化，m_b 初始化为 0）
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Default &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 先零初始化（m_a、m_b 设为 0），然后默认初始化
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; def.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; def.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Implicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;imp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 先零初始化（m_a、m_b 设为 0），然后默认初始化
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; imp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; imp.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面程序在我的电脑上的打印结果:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503211834070.png&quot; alt=&quot;image-20250321183413006&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在 C++20 之前，如果一个类具有用户定义的默认构造函数（即使它的函数体为空），那么该类就不再被视为聚合类型（aggregate）。然而，如果使用 = default 语法显式地默认化默认构造函数，则不会影响该类仍然被视为聚合类型。&lt;&#x2F;p&gt;
&lt;p&gt;假设该类在其他方面符合聚合类型的要求，前者（用户定义的默认构造函数）会导致类使用&lt;strong&gt;列表初始化（list initialization）&lt;&#x2F;strong&gt;，而不是&lt;strong&gt;聚合初始化（aggregate initialization）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;从 C++20 开始，这个不一致性被修正了，使得&lt;strong&gt;无论是用户定义的空默认构造函数，还是显式默认化的默认构造函数，都会使类变为非聚合类型&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-12&quot;&gt;创建默认构造函数的时机&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;默认构造函数允许我们在没有提供初始化值的情况下创建&lt;strong&gt;非聚合类&lt;&#x2F;strong&gt;类型的对象。因此，&lt;strong&gt;只有当一个类的对象在默认情况下可以合理地被创建时，才应该提供默认构造函数&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;换句话说，如果一个类的所有成员变量都可以有一个合理的默认值（例如 0、nullptr、空字符串等），那么提供默认构造函数是合适的。否则，类应该要求用户提供必要的初始化值，以确保对象在创建时处于有效的状态。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分子，默认初始化为 0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分母，默认初始化为 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 显式声明默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fraction(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用带参数的构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    f1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 由于 `= default`，使用默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    f2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于表示&lt;strong&gt;分数（Fraction）的类来说，允许用户不提供初始化值&lt;&#x2F;strong&gt;来创建 Fraction 对象是合理的。在这种情况下，用户会得到默认的分数 0&#x2F;1。&lt;&#x2F;p&gt;
&lt;p&gt;现在考虑下面这个类:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Joe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    e1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;编译错误：无匹配的构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    e2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现实中，一个员工对象&lt;strong&gt;必须有名字&lt;&#x2F;strong&gt;，否则不合理。因此，我们&lt;strong&gt;不应该提供默认构造函数&lt;&#x2F;strong&gt;，这样如果用户尝试创建无名员工，就会&lt;strong&gt;导致编译错误&lt;&#x2F;strong&gt;，提醒用户必须提供参数。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-13&quot;&gt;委托构造函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在 C++ 中，&lt;strong&gt;委托构造函数&lt;&#x2F;strong&gt;（&lt;strong&gt;Delegating Constructors&lt;&#x2F;strong&gt;）允许一个构造函数&lt;strong&gt;调用同一个类中的另一个构造函数&lt;&#x2F;strong&gt;，以减少代码重复，提高可维护性。&lt;&#x2F;p&gt;
&lt;p&gt;当一个类包含多个构造函数时，每个构造函数中的代码通常非常相似，甚至完全相同，有大量的重复。我们同样希望尽可能去除构造函数中的冗余代码。&lt;&#x2F;p&gt;
&lt;p&gt;看这个例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    std::string m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认名称为 &amp;quot;???&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认 ID 为 0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; m_isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认不是经理
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 员工必须要有姓名和 ID
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出员工创建信息
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool isManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 员工可以选择是否是经理
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出员工创建信息
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;James&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建普通员工 &amp;quot;James&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dave&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建经理 &amp;quot;Dave&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;你会发现,两个构造函数主体中都打印了完全相同的语句。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通常来说，让构造函数打印内容（除了用于调试目的外）并不是一个好的做法，我们的文章中经常这样做,目的是为了更好的阐述观点,实际开发中不建议这样做,望悉知!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;由于构造函数允许调用其他函数,包括类的其他成员函数,那么我们可以这样重构:&lt;&#x2F;p&gt;
&lt;p&gt;+++
title = “[C++游戏开发基础]:构造函数浅析(8000字)”
date = 2025-06-19
tags = [“C++”, “游戏开发”, “构造函数”]
description = “深入解析C++构造函数的原理、使用方法及最佳实践”
+++&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    std::string m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认名称为 &amp;quot;???&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认 ID 为 0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; m_isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认不是经理
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printCreated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 辅助函数：打印员工创建信息
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 构造函数：指定姓名和 ID
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printCreated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用辅助函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool isManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 构造函数：指定姓名、ID 以及是否为经理
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printCreated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用辅助函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;James&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建普通员工 &amp;quot;James&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dave&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建经理 &amp;quot;Dave&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;虽然这比之前的版本好（冗余语句被冗余函数调用所取代），但它需要引入一个新的函数。而且，我们的两个构造函数也在初始化 &lt;code&gt;m_name&lt;&#x2F;code&gt; 和 &lt;code&gt;m_id&lt;&#x2F;code&gt; 。理想情况下，我们也希望去除这种冗余。&lt;&#x2F;p&gt;
&lt;p&gt;你可能会想到,在一个构造函数中调用对外一个构造函数来实现,比如下面这样的:&lt;&#x2F;p&gt;
&lt;p&gt;+++
title = “[C++游戏开发基础]:构造函数浅析(8000字)”
date = 2025-06-19
tags = [“C++”, “游戏开发”, “构造函数”]
description = “深入解析C++构造函数的原理、使用方法及最佳实践”
+++&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    std::string m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; m_isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 此构造函数用于初始化 m_name 和 m_id
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这里重新加入了打印语句
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool isManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 此构造函数仅初始化 m_isManager
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 试图调用 Employee(std::string_view, int) 来初始化 m_name 和 m_id
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;name, id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这段代码不会按预期工作！
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dave&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;e2 has name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; e2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 e2.m_name
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;遗憾的是,类似这样的调用不会正常运行,你可以自己运行看看。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;不应在另一个函数的主体中直接调用构造函数。这样做要么会导致编译错误，要么会直接初始化一个临时对象。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;那么如果不能在另一个构造函数的主体中调用构造函数，我们该如何解决这个问题？&lt;&#x2F;p&gt;
&lt;p&gt;这就引出了 &lt;strong&gt;委托构造函数&lt;&#x2F;strong&gt;的概念。&lt;&#x2F;p&gt;
&lt;p&gt;构造函数允许将初始化责任(委托)转移给同一个类类型的另一个构造函数。这个过程有时候也称为构造函数链式调用,这样的构造函数称为委托构造函数。&lt;&#x2F;p&gt;
&lt;p&gt;要使一个构造函数委托初始化给另一个构造函数,只需要在成员初始化列表中调用构造函数即可:&lt;&#x2F;p&gt;
&lt;p&gt;+++
title = “[C++游戏开发基础]:构造函数浅析(8000字)”
date = 2025-06-19
tags = [“C++”, “游戏开发”, “构造函数”]
description = “深入解析C++构造函数的原理、使用方法及最佳实践”
+++&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    std::string m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将初始化委托给 Employee(std::string_view, int) 构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 实际上初始化成员变量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;James&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dave&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;针对中这个示例,简单看一下初始化的流程:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;当 &lt;code&gt;e1 { &quot;James&quot; }&lt;&#x2F;code&gt; 被初始化时，匹配的构造函数 &lt;code&gt;Employee(std::string_view)&lt;&#x2F;code&gt; 将被调用，其中参数 &lt;code&gt;name&lt;&#x2F;code&gt; 设置为 &lt;code&gt;&quot;James&quot;&lt;&#x2F;code&gt; 。&lt;&#x2F;li&gt;
&lt;li&gt;这个构造函数的成员初始化列表委托初始化给另一个构造函数，因此 &lt;code&gt;Employee(std::string_view, int)&lt;&#x2F;code&gt; 随后被调用。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;name&lt;&#x2F;code&gt; （ &lt;code&gt;&quot;James&quot;&lt;&#x2F;code&gt; ）的值作为第一个参数传递，字面量 &lt;code&gt;0&lt;&#x2F;code&gt; 作为第二个参数传递。被委托构造函数的成员初始化列表初始化成员，然后被委托构造函数的主体运行。&lt;&#x2F;li&gt;
&lt;li&gt;然后控制权返回到初始构造函数，其（空）主体运行。&lt;&#x2F;li&gt;
&lt;li&gt;最后,控制权返回给调用者。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这种方法的缺点是有时候需要重复初始化值。在委托给&lt;code&gt;mployee(std::string_view, int)&lt;&#x2F;code&gt; 构造函数时，我们需要为 &lt;code&gt;int&lt;&#x2F;code&gt; 参数提供一个初始化值。我们不得不&lt;strong&gt;硬编码&lt;&#x2F;strong&gt;字面量 &lt;code&gt;0&lt;&#x2F;code&gt; ，因为没有方法可以引用默认成员初始化器。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;记住,硬编码不是什么好习惯!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;关于委托构造函数的几点额外说明。首先，委托给另一个构造函数的构造函数不允许自己进行任何成员初始化。所以你的构造函数可以委托或初始化，但不能两者都做。&lt;&#x2F;p&gt;
&lt;p&gt;换句话说就是,你既然委托了别人进行初始化的操作,那么你自己就别再做同样的初始化操作了。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;请注意，我们让 &lt;code&gt;Employee(std::string_view)&lt;&#x2F;code&gt;（参数较少的构造函数）委托（delegate）给 &lt;code&gt;Employee(std::string_view name, int id)&lt;&#x2F;code&gt;（参数较多的构造函数）。通常，参数较少的构造函数会委托给参数较多的构造函数。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;如果反过来,让&lt;code&gt;Employee(std::string_view name, int id)&lt;&#x2F;code&gt;委托给 &lt;code&gt;Employee(std::string_view)&lt;&#x2F;code&gt;，那么我们将无法使用 &lt;code&gt;id&lt;&#x2F;code&gt; 来初始化&lt;code&gt; m_id&lt;&#x2F;code&gt;，因为构造函数只能&lt;strong&gt;要么委托给另一个构造函数，要么自己进行初始化&lt;&#x2F;strong&gt;，但不能同时执行这两种操作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;警告⚠️&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个构造函数委托给另一个构造函数,而那个被委托的构造函数又委托回第一个构造函数。这样会形成一个无限循环,从而导致程序耗尽栈空间而崩溃。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-14&quot;&gt;使用默认参数来减少构造函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;默认值有时也可以将多个构造函数减少到一定数量。例如,就上面的例子来说,通过在&lt;code&gt;id&lt;&#x2F;code&gt;参数上设置一个默认值,我们可以创建一个单个&lt;code&gt;Employee&lt;&#x2F;code&gt;构造函数,该构造函数只需要一个名称参数,此时&lt;code&gt;id&lt;&#x2F;code&gt;参数就是可选而非必须的。&lt;&#x2F;p&gt;
&lt;p&gt;+++
title = “[C++游戏开发基础]:构造函数浅析(8000字)”
date = 2025-06-19
tags = [“C++”, “游戏开发”, “构造函数”]
description = “深入解析C++构造函数的原理、使用方法及最佳实践”
+++&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认成员初始化（default member initializer）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 为 id 提供默认参数（default argument）
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;James&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 由于 id 没有提供，使用默认值 0
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dave&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 提供了 id，使用 42 进行初始化
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用户必须提供初始化值的成员应该首先定义(并且作为构造函数的左侧参数)。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;用户可以提供初始化值的成员应该第二定义(且作为构造函数的右侧参数)。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 必须提供
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_id&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 必须提供
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool m_isManager&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 可选（有默认值）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; isManager 在最右侧
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_isManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; isManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;当&lt;strong&gt;某个初始化值&lt;&#x2F;strong&gt;（例如默认成员初始化值和构造函数参数的默认值）在&lt;strong&gt;多个地方被使用&lt;&#x2F;strong&gt;时，&lt;strong&gt;建议定义一个命名常量&lt;&#x2F;strong&gt;，并在需要的地方使用它。&lt;&#x2F;p&gt;
&lt;p&gt;这样做的好处是：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;统一管理初始化值&lt;&#x2F;strong&gt;，只需在一个地方修改，就能影响所有使用该值的地方。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;避免魔法数字（magic numbers）&lt;&#x2F;strong&gt;，提高代码的可读性和可维护性。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;尽管可以使用 &lt;strong&gt;constexpr 全局变量&lt;&#x2F;strong&gt; 来存储这些默认值，但更好的做法是&lt;strong&gt;在类中使用 static constexpr 成员变量&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;+++
title = “[C++游戏开发基础]:构造函数浅析(8000字)”
date = 2025-06-19
tags = [“C++”, “游戏开发”, “构造函数”]
description = “深入解析C++构造函数的原理、使用方法及最佳实践”
+++&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; default_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个命名常量，表示默认的 ID 值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::string m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; default_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 在这里使用命名常量进行默认初始化
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; default_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 在构造函数的默认参数中也使用该命名常量
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; created&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;James&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ID 默认使用 default_id（即 0）
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Dave&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;42 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ID 显式指定为 42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;为什么 static constexpr 更优？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;使用 static 关键字，使 default_id 成为&lt;strong&gt;所有 Employee 对象共享的静态成员&lt;&#x2F;strong&gt;。如果不使用&lt;code&gt;static&lt;&#x2F;code&gt;,每个 Employee 对象都会有&lt;strong&gt;自己独立的 default_id 成员&lt;&#x2F;strong&gt;，这虽然不会影响功能，但会&lt;strong&gt;浪费内存&lt;&#x2F;strong&gt;，因为所有 default_id 变量的值都是相同的。&lt;&#x2F;p&gt;
&lt;p&gt;使用这种方式,&lt;code&gt;default_id &lt;&#x2F;code&gt;&lt;strong&gt;存储在类的静态区域&lt;&#x2F;strong&gt;，而不是每个对象都存一份。这样所有 &lt;code&gt;Employee&lt;&#x2F;code&gt; 对象都能&lt;strong&gt;共享一个 default_id&lt;&#x2F;strong&gt;，提高效率并减少内存浪费&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;这种方式的缺点&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;增加类的复杂度&lt;&#x2F;strong&gt;：每增加一个&lt;strong&gt;命名常量&lt;&#x2F;strong&gt;，都会给类添加一个额外的名称，可能会使类变得稍微复杂。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;是否值得使用取决于场景&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果默认值只在一个地方使用，&lt;strong&gt;直接写死&lt;&#x2F;strong&gt;即可（比如 m_id { 0 }）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;如果默认值在多个地方使用&lt;&#x2F;strong&gt;，则使用 &lt;strong&gt;static constexpr&lt;&#x2F;strong&gt; 更合适。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
</description>
      </item>
      <item>
          <title>C++游戏开发基础-类模版和参数推导指南</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-lei-mo-ban-he-can-shu-tui-dao-zhi-nan/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-lei-mo-ban-he-can-shu-tui-dao-zhi-nan/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-lei-mo-ban-he-can-shu-tui-dao-zhi-nan/">&lt;p&gt;考虑下面这样一个问题,假设我们正在编写一个程序,需要处理成对的&lt;code&gt;int&lt;&#x2F;code&gt;值.并且需要确定两个数字中的最大值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;is larger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;后来.你那尊贵的狗策划需求一变,需要新增一个&lt;code&gt;double&lt;&#x2F;code&gt;类型的Pair,所以你的程序又改成下面这样;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; is larger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3.4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; is larger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些代码看起来人畜无害,但其实存在问题:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，与函数不同，类型定义不能被重载。编译器会将 Pair 的第二个定义视为对第一个 Pair 定义的错误性重新声明。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;其次，尽管函数可以被重载，但这里的&lt;code&gt; max(Pair)&lt;&#x2F;code&gt; 函数仅在返回类型上有所不同，而函数重载不能仅通过返回类型来区分。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;第三，这里存在大量的冗余。每个 &lt;code&gt;Pair&lt;&#x2F;code&gt; 结构体都是相同的（除了数据类型不同），而 &lt;code&gt;max(Pair)&lt;&#x2F;code&gt; 函数也是如此（除了返回类型不同）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;基于这个问题,引出了本文的主题,类模版。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lei-mo-ban-ji-ben-ding-yi&quot;&gt;类模版基本定义&lt;a class=&quot;zola-anchor&quot; href=&quot;#lei-mo-ban-ji-ben-ding-yi&quot; aria-label=&quot;Anchor link for: lei-mo-ban-ji-ben-ding-yi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;就像函数模板是用于实例化函数的模板定义一样，类模板是用于实例化类类型的模板定义。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;“类类型”指的是&lt;code&gt; struct、class&lt;&#x2F;code&gt; 或&lt;code&gt; union&lt;&#x2F;code&gt; 类型。尽管我们为了简单起见会在 &lt;code&gt;struct&lt;&#x2F;code&gt; 上演示“类模板”，但这里的内容同样适用于 &lt;code&gt;class&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;现在我们将上面第一个示例代码改写为类模版的形式:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    T first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    T second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;p1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3.2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5.4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;p2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就像函数模版一样,我们用以模版参数声明开始类模版的定义。接下来在&lt;code&gt;&amp;lt;&amp;gt;&lt;&#x2F;code&gt;内指定模版将使用的所有模版类型。对于我们需要的每个模板类型，使用关键字 &lt;code&gt;typename&lt;&#x2F;code&gt;（首选）或 &lt;code&gt;class&lt;&#x2F;code&gt;，后跟模板类型的名称（例如 &lt;code&gt;T&lt;&#x2F;code&gt;）。在这种情况下，由于我们的两个成员将是相同的类型，我们只需要一个模板类型。”&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;code&gt;main&lt;&#x2F;code&gt;中，我们可以使用我们想要的任何类型来实例化&lt;code&gt;Pair&lt;&#x2F;code&gt;对象。首先，实例化一&lt;code&gt;个Pair&amp;lt;int&amp;gt;&lt;&#x2F;code&gt;类型的对象。由于&lt;code&gt;Pair&amp;lt;int&amp;gt;&lt;&#x2F;code&gt;的类型定义尚不存在，因此编译器使用类模板实例化名为&lt;code&gt;Pair&amp;lt;int&amp;gt;&lt;&#x2F;code&gt;的结构类型定义，其中模板类型&lt;code&gt;T&lt;&#x2F;code&gt;的所有出现都被类型&lt;code&gt;int&lt;&#x2F;code&gt;替换。其他类型同理。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zai-han-shu-zhong-shi-yong-lei-mo-ban&quot;&gt;在函数中使用类模版&lt;a class=&quot;zola-anchor&quot; href=&quot;#zai-han-shu-zhong-shi-yong-lei-mo-ban&quot; aria-label=&quot;Anchor link for: zai-han-shu-zhong-shi-yong-lei-mo-ban&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;对于之前的&lt;code&gt;max&lt;&#x2F;code&gt;函数,由于编译器会将&lt;code&gt;Pair&amp;lt;int&amp;gt;&lt;&#x2F;code&gt;,&lt;code&gt;Pair&amp;lt;double&amp;gt;&lt;&#x2F;code&gt;视为单独的类型,因此我们可以按照参数类型的区分,对该函数进行重载。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6e2e32;color:#839496;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6e2e32;color:#839496;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;虽然可以正常编译,但是这样并没有解决代码冗余的问题。我们真正想要的是一个可以接受任何类型的函数。换句话说,我们需要一个接受&lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;类型参数的函数。其中的&lt;code&gt;T&lt;&#x2F;code&gt;是模版类型参数。所以暗示的够明显了吧,我们需要一个函数模版来解决这个问题。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    T first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    T second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;is larger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3.5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;is larger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;max()&lt;&#x2F;code&gt; 函数模板的逻辑非常直观。由于我们希望传入一个 &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;&#x2F;code&gt;，我们需要让编译器知道 T 的具体类型。因此，我们需要在函数前面添加 &lt;strong&gt;模板参数声明&lt;&#x2F;strong&gt;，用于定义模板类型 T。&lt;&#x2F;p&gt;
&lt;p&gt;这样，我们就可以在返回类型和 &lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; 的模板类型中使用 &lt;code&gt;T&lt;&#x2F;code&gt;，从而使 &lt;code&gt;max()&lt;&#x2F;code&gt; 适用于不同的数据类型。&lt;&#x2F;p&gt;
&lt;p&gt;当&lt;code&gt;max（）&lt;&#x2F;code&gt;函数用&lt;code&gt;Pair&amp;lt;int&amp;gt;&lt;&#x2F;code&gt;参数调用时，编译器将从函数模板实例化函数&lt;code&gt;int max&amp;lt;int&amp;gt;（Pair&amp;lt;int&amp;gt;）&lt;&#x2F;code&gt;，其中模板类型&lt;code&gt;T&lt;&#x2F;code&gt;被替换为&lt;code&gt;int&lt;&#x2F;code&gt;。下面的代码片段显示了在这种情况下编译器实际实例化的内容：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;与所有对函数模板的调用一样，我们可以显式地使用模板类型参数（例如&lt;code&gt;max&amp;lt;int&amp;gt;（p1）&lt;&#x2F;code&gt;），也可以隐式地使用（例如&lt;code&gt;max（p2）&lt;&#x2F;code&gt;），让编译器使用模板参数推导来确定模板类型参数应该是什么。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ju-you-mo-ban-lei-xing-cheng-yuan-he-fei-mo-ban-lei-xing-cheng-yuan-de-lei-mo-ban&quot;&gt;具有模板类型成员和非模板类型成员的类模板&lt;a class=&quot;zola-anchor&quot; href=&quot;#ju-you-mo-ban-lei-xing-cheng-yuan-he-fei-mo-ban-lei-xing-cheng-yuan-de-lei-mo-ban&quot; aria-label=&quot;Anchor link for: ju-you-mo-ban-lei-xing-cheng-yuan-he-fei-mo-ban-lei-xing-cheng-yuan-de-lei-mo-ban&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;strong&gt;类模板（class templates）&lt;&#x2F;strong&gt; 中，我们不仅可以使用&lt;strong&gt;模板类型参数（template type parameter）&lt;&#x2F;strong&gt;，还可以包含&lt;strong&gt;非模板类型成员（non-template type members）&lt;&#x2F;strong&gt;。这意味着，类中的某些成员可以是通用类型（由模板参数决定），而其他成员可以是固定类型（例如 int、double 等）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  T first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 模版类型
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 非模版类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;类模版也可以有多个模版类型,例如,如果我们希望&lt;code&gt;Pair&lt;&#x2F;code&gt;类的两个成员能够有不同的类型,我们可以用脸肿莫办类型来定义这个类模版。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T, U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2.3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;      
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;为了定义多个模版类型,在模版参数声明中,我们用逗号分隔每一个所需类型。在上面的例子中,定义了两个不同的模版类型,分别为&lt;code&gt;T&lt;&#x2F;code&gt;和&lt;code&gt;U&lt;&#x2F;code&gt;,在实际使用时,两个模版类型我们可以随意安排,比如两个不同类型或者两个相同类型都是被允许的。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;mo-ban-han-shu-he-duo-ge-lei-lei-xing&quot;&gt;模版函数和多个类类型&lt;a class=&quot;zola-anchor&quot; href=&quot;#mo-ban-han-shu-he-duo-ge-lei-lei-xing&quot; aria-label=&quot;Anchor link for: mo-ban-han-shu-he-duo-ge-lei-lei-xing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;对于上面的例子,因为我们已经将函数参数显式定义为&lt;code&gt;Pair&amp;lt;T，U&amp;gt;&lt;&#x2F;code&gt;，所以只有&lt;code&gt;Pair&amp;lt;T，U&amp;gt;&lt;&#x2F;code&gt;类型的参数（或那些可以转换为&lt;code&gt;Pair&amp;lt;T，U&amp;gt;的&lt;&#x2F;code&gt;参数）才会匹配。如果我们只希望能够使用&lt;code&gt;Pair&amp;lt;T，U&amp;gt;&lt;&#x2F;code&gt;参数调用函数，这是没问题的。&lt;&#x2F;p&gt;
&lt;p&gt;但是在某些情况下,我们希望可以编写一个可以与任何类型一起使用的函数模版,只需要使用类型模版参数作为函数参数即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    T first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    U second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Point
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4.5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 匹配 print(Pair&amp;lt;double, int&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    Point &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 匹配 print(Point)
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面的例子中，我们重写了&lt;code&gt;print（）&lt;&#x2F;code&gt;，使它只有一个类型模板参数（&lt;code&gt;T&lt;&#x2F;code&gt;），它将匹配任何类型。对于任何具有&lt;code&gt;第一&lt;&#x2F;code&gt;个和&lt;code&gt;第二个&lt;&#x2F;code&gt;成员的类类型，函数体都将成功编译。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;biao-zhun-ku-zhong-de-std-pair&quot;&gt;标准库中的std::pair&lt;a class=&quot;zola-anchor&quot; href=&quot;#biao-zhun-ku-zhong-de-std-pair&quot; aria-label=&quot;Anchor link for: biao-zhun-ku-zhong-de-std-pair&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在C++标准库中包含了一个名为&lt;code&gt;std::pair&lt;&#x2F;code&gt;的类模版,它的定义与上面我们自己实现的原理相似,所以我们完全可以使用标准库提供的方法替换掉我们自己的实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T,U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4.3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2.71&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际开发中,一般建议直接使用标准库定义的&lt;code&gt;pair&lt;&#x2F;code&gt;而不是自己重新实现,除非标准库的实现无法满足需求。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zai-duo-ge-wen-jian-zhong-shi-yong-lei-mo-ban&quot;&gt;在多个文件中使用类模版&lt;a class=&quot;zola-anchor&quot; href=&quot;#zai-duo-ge-wen-jian-zhong-shi-yong-lei-mo-ban&quot; aria-label=&quot;Anchor link for: zai-duo-ge-wen-jian-zhong-shi-yong-lei-mo-ban&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;就像函数模版一样,类模版通常定义在头文件中,因此他们可以在任何需要他们的代码文件中,模版定义和类型定义都不受 &lt;strong&gt;ORD&lt;&#x2F;strong&gt;原则的限制。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;pair.h&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#ifndef&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; PAIR_H
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;PAIR_H
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    T first;
&lt;&#x2F;span&gt;&lt;span&gt;    T second;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; T  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#endif &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; PAIR_H
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;foo.cpp&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;pair.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;is large&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;main.cpp&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;pair.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;is larger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于上面的程序,如果你是使用命令单独编译的情况下,在编译&lt;code&gt;main.cpp&lt;&#x2F;code&gt;的同时务必记得编译&lt;code&gt;foo.cpp&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++ -&lt;&#x2F;span&gt;&lt;span&gt;std&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;17 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;o main main.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;cpp&lt;&#x2F;span&gt;&lt;span&gt; foo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;cpp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;mo-ban-can-shu-tui-dao&quot;&gt;模版参数推导&lt;a class=&quot;zola-anchor&quot; href=&quot;#mo-ban-can-shu-tui-dao&quot; aria-label=&quot;Anchor link for: mo-ban-can-shu-tui-dao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;从C++17开始,当从类模版实例化一个对象时,编译器可以从对象的初始化器的类型推导出模版类型,这称为 &lt;strong&gt;模版类型推导&lt;&#x2F;strong&gt;或者简称&lt;code&gt;CTAD.&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  std::pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这里用到了C++17的自动模版类型推导,不需要显式的声明
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;值得注意的是,这样的推导是有条件的,只有在没有显式声明模版参数的情况下才会执行。所以,下面两种方式是错误示范:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 模板参数太少，两个参数均未推导
&lt;&#x2F;span&gt;&lt;span&gt;  std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 模板参数太少，第二个参数未推导
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于 CTAD（类模板参数推导）是一种类型推导的形式，我们可以使用 &lt;strong&gt;字面量后缀&lt;&#x2F;strong&gt; 来改变推导出的类型：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3.4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5.6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 推导为 pair&amp;lt;float, float&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 推导为 pair&amp;lt;unsigned int, unsigned int&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大多数情况下,&lt;code&gt;CTAD&lt;&#x2F;code&gt;可以开箱即用,但是在某些情况下,编译器可能需要一些额外的帮助来理解如何正确推导模版参数。&lt;&#x2F;p&gt;
&lt;p&gt;比如下面的程序,如果你在C++17环境下编译,是无法正常编译成功的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    T first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    U second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;比如,我尝试编译这段代码时,就遇到了下面这样的错误提示:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503161556985.png&quot; alt=&quot;image-20250316155611729&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这是因为在C++17中,它不知道如何推导聚合类型的类模版参数,为了解决这个问题,我们需要手动的给编译器提供一个推导指南,它会告诉编译器如何推导给定类模版的模版参数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    T first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    U second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 推导指南
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;T,U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T,U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;关键的代码就两行:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;T,U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T,U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，我们使用与 &lt;code&gt;Pair&lt;&#x2F;code&gt; 类中相同的模板类型定义。这是合理的，因为如果我们的 &lt;strong&gt;推导指引（deduction guide）&lt;&#x2F;strong&gt; 要告诉编译器如何为 &lt;code&gt;Pair&amp;lt;T, U&amp;gt;&lt;&#x2F;code&gt; 推导类型，我们必须定义 &lt;code&gt;T&lt;&#x2F;code&gt; 和&lt;code&gt; U&lt;&#x2F;code&gt;（即模板类型）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;其次，在箭头 &lt;code&gt;-&amp;gt;&lt;&#x2F;code&gt; 右侧，我们指定了希望帮助编译器推导出的类型。在本例中，我们希望编译器能够推导出 &lt;code&gt;Pair&amp;lt;T, U&amp;gt;&lt;&#x2F;code&gt; 类型的模板参数，因此这里直接写 &lt;code&gt;Pair&amp;lt;T, U&amp;gt;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;最后，在箭头&lt;code&gt; -&amp;gt;&lt;&#x2F;code&gt; 左侧，我们告诉编译器要寻找哪种形式的声明。在本例中，我们指定了 &lt;code&gt;Pair&lt;&#x2F;code&gt; 对象的声明，且它接受两个参数（一个是 &lt;code&gt;T&lt;&#x2F;code&gt; 类型，另一个是 &lt;code&gt;U&lt;&#x2F;code&gt; 类型）。我们也可以写成 &lt;code&gt;Pair(T t, U u)&lt;&#x2F;code&gt;，其中 &lt;code&gt;t&lt;&#x2F;code&gt; 和&lt;code&gt; u&lt;&#x2F;code&gt; 是参数的名称，但由于在推导过程中不需要使用它们，因此可以省略名称。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;把所有这些放在一起，我们告诉编译器，如果它看到一个带有两个参数（分别是&lt;code&gt;T&lt;&#x2F;code&gt;和&lt;code&gt;U&lt;&#x2F;code&gt;类型）的&lt;code&gt;Pair&lt;&#x2F;code&gt;声明，它应该推断类型为&lt;code&gt;Pair&amp;lt;T，U&amp;gt;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;再看一个类似的例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个模板结构体 Pair，表示一对数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 第一个值
&lt;&#x2F;span&gt;&lt;span&gt;    T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 第二个值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这是 `Pair` 的一个推导指引（仅在 C++17 及以上版本需要）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 当 `Pair` 对象用两个 `T` 类型的参数初始化时，推导结果应为 `Pair&amp;lt;T&amp;gt;`
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;T, T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 显式指定类模板 `Pair&amp;lt;int&amp;gt;`（适用于 C++11 及更高版本）
&lt;&#x2F;span&gt;&lt;span&gt;    Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用类模板参数推导（CTAD），从初始化参数推导 `Pair&amp;lt;int&amp;gt;`（C++17）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Pair(T, T) -&amp;gt; Pair&amp;lt;T&amp;gt;;&lt;&#x2F;code&gt;告诉编译器，当 &lt;code&gt;Pair&lt;&#x2F;code&gt; 通过两个相同类型 T 的参数初始化时，&lt;code&gt;Pair&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; 应该被推导出来。&lt;&#x2F;p&gt;
&lt;p&gt;例如 &lt;code&gt;Pair p2{1, 2}&lt;&#x2F;code&gt;;，编译器会自动推导 &lt;code&gt;T=int&lt;&#x2F;code&gt;，最终等价于&lt;code&gt; Pair&amp;lt;int&amp;gt; p2{1, 2};&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;带默认值的类型模板参数&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;就像函数参数可以有默认参数一样，模板参数也可以有默认值。当模板参数没有明确指定并且无法推导时，将使用这些参数。&lt;&#x2F;p&gt;
&lt;p&gt;下面是对上面的&lt;code&gt;Pair&amp;lt;T，U&amp;gt;&lt;&#x2F;code&gt;类模板程序的修改，类型模板参数&lt;code&gt;T&lt;&#x2F;code&gt;和&lt;code&gt;U&lt;&#x2F;code&gt;默认为&lt;code&gt;int&lt;&#x2F;code&gt;类型：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个模板结构体 Pair，T 和 U 默认类型为 int
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认 T 和 U 都是 int 类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    T &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 第一个值
&lt;&#x2F;span&gt;&lt;span&gt;    U &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 第二个值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 推导指引，帮助编译器推导 Pair(T, U) -&amp;gt; Pair&amp;lt;T, U&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;T, U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T, U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 显式指定类模板 `Pair&amp;lt;int, int&amp;gt;`（C++11 及以上）
&lt;&#x2F;span&gt;&lt;span&gt;    Pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用 CTAD 推导 `Pair&amp;lt;int, int&amp;gt;`（C++17）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    Pair p3;                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用默认模板参数 `Pair&amp;lt;int, int&amp;gt;`
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们对&lt;code&gt;p3的&lt;&#x2F;code&gt;定义没有显式地指定类型模板参数的类型，也没有从这些类型推导出的初始化器。因此，编译器将使用默认值中指定的类型，这意味&lt;code&gt;着p3&lt;&#x2F;code&gt;将是&lt;code&gt;Pair&amp;lt;int，int&amp;gt;&lt;&#x2F;code&gt;类型。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;当使用&lt;strong&gt;非静态成员初始化&lt;&#x2F;strong&gt;（non-static member initialization）来初始化类类型的成员时，&lt;strong&gt;类模板参数推导（CTAD）&lt;&#x2F;strong&gt; 在这种情况下不会生效。所有的模板参数必须&lt;strong&gt;显式指定&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; for std::pair
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ OK，显式指定模板参数
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 编译错误，CTAD 在非静态成员初始化时不可用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ OK，CTAD 在此处可以使用
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;为什么 CTAD 不能用于非静态成员初始化？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;非静态成员初始化是在&lt;strong&gt;类定义时&lt;&#x2F;strong&gt;解析的，而 &lt;code&gt;CTAD&lt;&#x2F;code&gt; 需要在对象实际创建时推导类型，两者的时机不同。&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;Foo&lt;&#x2F;code&gt; 定义时，编译器必须确定 &lt;code&gt;p2&lt;&#x2F;code&gt; 的完整类型（包括模板参数）。如果没有显式指定模板参数，编译器无法在类定义阶段进行推导。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;CTAD&lt;&#x2F;code&gt; 主要用于变量初始化（如 &lt;code&gt;std::pair p{1, 2};&lt;&#x2F;code&gt;），而非静态成员初始化并不会直接调用 &lt;code&gt;CTAD&lt;&#x2F;code&gt; 规则。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;CTAD&lt;&#x2F;code&gt; 代表“类模板实参推导”（&lt;code&gt;Class Template Argument Deduction&lt;&#x2F;code&gt;），而不是“类模板参数推导”（&lt;code&gt;Class Template Parameter Deduction&lt;&#x2F;code&gt;），因此它只会推导模板的实参类型，而不会推导模板的参数。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CTAD 只能在变量定义时生效&lt;&#x2F;strong&gt;，但不能用于函数参数类型推导。因此,不能在函数中使用&lt;code&gt;CTAD&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 编译错误：CTAD 不能用于函数参数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ CTAD 在变量声明时有效，推导为 std::pair&amp;lt;int, int&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 编译错误
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这种情况下，应该使用模板来实现:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;utility&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;T, U&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; p.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 推导为 std::pair&amp;lt;int, int&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>[C++游戏开发基础]:类中的访问函数</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-lei-zhong-de-fang-wen-han-shu/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-lei-zhong-de-fang-wen-han-shu/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-lei-zhong-de-fang-wen-han-shu/">&lt;blockquote&gt;
&lt;p&gt;本节内容默认你已经掌握了C++中的&lt;code&gt;public&lt;&#x2F;code&gt;和&lt;code&gt;private&lt;&#x2F;code&gt;的作用。类通常将其数据成员设置为私有,而私有成员不能被公共部分直接访问。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;考虑下面程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Date
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2020 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_month&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;14 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_month &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建一个Date 对象
&lt;&#x2F;span&gt;&lt;span&gt;    d.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;尽管在程序中,我们提供了一个&lt;code&gt;print()&lt;&#x2F;code&gt;成员函数来打印整个日期信息,但这可能不足以满足用户需求。比如,如果一个&lt;code&gt;Date&lt;&#x2F;code&gt;对象的用户需要获取年份,或者将年份更改为不同的值,就程序目前的设计来说,他们无法做到这一点,因为类的数据成员都是&lt;code&gt;private&lt;&#x2F;code&gt;级别的。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;fang-wen-han-shu&quot;&gt;访问函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#fang-wen-han-shu&quot; aria-label=&quot;Anchor link for: fang-wen-han-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;访问函数是一个简单的公共成员函数,他们的作用就是获取或者更改成员变量的值。&lt;&#x2F;p&gt;
&lt;p&gt;访问函数有两种类型:获取器和设置器。获取函数(也可以称为访问函数)是公共的成员函数,用于返回私有成员的值。设置器(修改器函数)也是公共的成员函数,用来设置私有成员变量的值。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;getter()&lt;&#x2F;code&gt;通常被声明为&lt;code&gt;const&lt;&#x2F;code&gt;,这样它们就可以在&lt;code&gt;const&lt;&#x2F;code&gt;和非&lt;code&gt;const&lt;&#x2F;code&gt;对象上调用。&lt;code&gt;setter()&lt;&#x2F;code&gt;则应该是声明为非&lt;code&gt;const&lt;&#x2F;code&gt;的,这样才能修改数据成员。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;针对当前讨论的话题,我们尝试更新之前的示例程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Date
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2025&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_month &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_day &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_month &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 设置获取
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getYear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_year&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getMonth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_month&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getDay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setMonth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int month&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_month &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; month;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setDay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; day;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setYear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_year &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; year;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Date &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    d.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setYear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2026&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The year is:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; d.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getYear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;guan-yu-fang-wen-han-shu-de-ming-ming&quot;&gt;关于访问函数的命名&lt;a class=&quot;zola-anchor&quot; href=&quot;#guan-yu-fang-wen-han-shu-de-ming-ming&quot; aria-label=&quot;Anchor link for: guan-yu-fang-wen-han-shu-de-ming-ming&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在C++中并没有对于访问函数命名的明确约定,也就是说,你可以自由的为它们命名。但是,有一些在用的命名约定值的参考:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;以&lt;code&gt;get&lt;&#x2F;code&gt;和&lt;code&gt;set&lt;&#x2F;code&gt;开头&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getDay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; getter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setDay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; day; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; setter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用这样带前缀的命名约定的好处是,这使得我们可以很明显的知道这是访问函数。有见名知意的效果。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;无前缀命名&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; getter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; day; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; setter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;相对于这种命名风格,可能大部分人更加熟悉的是第一种,特别是学过&lt;code&gt;Java&lt;&#x2F;code&gt;的同学。这第二种风格使用相同的名称作为获取器和设置器,相对来说更加简洁,C++标准库使用的就是这种风格。&lt;&#x2F;p&gt;
&lt;p&gt;无前缀命名约定的缺点是,可能在 &lt;strong&gt;见名知意&lt;&#x2F;strong&gt; 这点上并不明显。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;还有,使用“&lt;code&gt;m_&lt;&#x2F;code&gt;”前缀来私有数据成员的一个最好的原因是避免数据成员和获取器具有相同名称（&lt;code&gt;C++&lt;&#x2F;code&gt;不支持这种情况，尽管像&lt;code&gt; Java&lt;&#x2F;code&gt; 这样的其他语言支持）。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;只针对设置器使用&lt;code&gt;set&lt;&#x2F;code&gt;前缀&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; getter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setDay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int day&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_day &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; day; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; setter
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面这三种方式的选择完全取决于你自己的喜好,但是,就我个人而言比较建议使用第二种(可能我也是Java畜生);&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;guan-yu-fang-wen-han-shu-getter-he-setter-zai-lei-she-ji-zhong-de-shi-yong-wen-ti&quot;&gt;关于 &lt;strong&gt;访问函数（getter 和 setter）&lt;&#x2F;strong&gt; 在类设计中的使用问题&lt;a class=&quot;zola-anchor&quot; href=&quot;#guan-yu-fang-wen-han-shu-getter-he-setter-zai-lei-she-ji-zhong-de-shi-yong-wen-ti&quot; aria-label=&quot;Anchor link for: guan-yu-fang-wen-han-shu-getter-he-setter-zai-lei-she-ji-zhong-de-shi-yong-wen-ti&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;当你在创建类时,不妨考虑下面几点建议;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;如果类没有不变式（invariants），并且需要大量访问函数&lt;&#x2F;strong&gt;，那么 &lt;strong&gt;考虑使用 struct 而不是 class&lt;&#x2F;strong&gt;，并且直接将成员变量设为 public。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不变式（invariants）&lt;&#x2F;strong&gt; 指的是 &lt;strong&gt;类的某些属性必须始终满足的规则&lt;&#x2F;strong&gt;，例如“日期类中的月份必须在 1-12 之间”。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果类的成员变量没有这样的规则限制，直接使用 &lt;code&gt;struct&lt;&#x2F;code&gt; 可能更简单和直观，而不需要访问函数。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优先实现行为（行为驱动设计），而不是单纯的访问函数&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，&lt;strong&gt;不要&lt;&#x2F;strong&gt; 设计 setAlive(bool) 这样简单的 setter，而是使用 kill() 和 revive() 这样的函数，这样代码的意图更清晰，逻辑也更集中。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;只有在公有接口真正需要访问某个成员变量时，才提供访问函数&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如，如果外部代码需要读取 id 或 name，那么 getId() 或 getName() 是合理的。但如果数据成员仅用于内部计算或管理，不要暴露 getter&#x2F;setter，而是让类自身管理数据。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;针对上面几点,下面给出一些正反面示例:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;反面示例,滥用访问函数&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; m_alive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setAlive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool alive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_alive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; alive; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 不推荐，外部能随意改动
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isAlive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_alive&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;正面示例,行为驱动&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Character
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span&gt; m_alive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;kill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_alive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 通过 kill() 明确角色死亡
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;revive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_alive &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 通过 revive() 复活角色
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isAlive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_alive&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这种方式更符合 &lt;strong&gt;封装&lt;&#x2F;strong&gt; 和 &lt;strong&gt;面向对象设计&lt;&#x2F;strong&gt; 原则，让 Character 类更具自我管理能力，而不是让外部代码随意修改其状态。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;tong-guo-zhi-fan-hui-shu-ju-cheng-yuan&quot;&gt;通过值返回数据成员&lt;a class=&quot;zola-anchor&quot; href=&quot;#tong-guo-zhi-fan-hui-shu-ju-cheng-yuan&quot; aria-label=&quot;Anchor link for: tong-guo-zhi-fan-hui-shu-ju-cheng-yuan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; name; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  getter returns by value
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;joe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	joe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Joe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; joe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这个例子中,&lt;code&gt;getName()&lt;&#x2F;code&gt;函数可以以&lt;code&gt;std::string m_name&lt;&#x2F;code&gt;的值返回,虽然这是最安全的做法,但是在之前的文章中提过,复制是一个高成本的操作,由于访问函数通常会被频繁的调用,因此这显然不是最佳的选择。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;tong-guo-lvalueyin-yong-fan-hui-shu-ju-cheng-yuan&quot;&gt;通过&lt;code&gt;lvalue&lt;&#x2F;code&gt;引用返回数据成员&lt;a class=&quot;zola-anchor&quot; href=&quot;#tong-guo-lvalueyin-yong-fan-hui-shu-ju-cheng-yuan&quot; aria-label=&quot;Anchor link for: tong-guo-lvalueyin-yong-fan-hui-shu-ju-cheng-yuan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;成员函数也可以通过&lt;code&gt;const&lt;&#x2F;code&gt;的左值返回数据成员。&lt;&#x2F;p&gt;
&lt;p&gt;数据成员与包含它们的对象具有相同的生命周期。&lt;&#x2F;p&gt;
&lt;p&gt;由于成员函数总是针对一个对象调用的,而该对象必须存在于调用者的作用域中因此通常情况下,成员函数可以通过&lt;code&gt;const&lt;&#x2F;code&gt;修饰的左值应用返回一个数据成员。&lt;&#x2F;p&gt;
&lt;p&gt;更新上面的示例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; name; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  getter returns by const reference
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;joe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; joe 直到函数结束,对象依旧存在
&lt;&#x2F;span&gt;&lt;span&gt;	joe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Joe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; joe.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过引用返回
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更新后的程序中,当&lt;code&gt;joe.getName()&lt;&#x2F;code&gt;被调用时,&lt;code&gt;m_name&lt;&#x2F;code&gt;将会通过引用返回给调用者,避免了复制操作。由于&lt;code&gt;joe&lt;&#x2F;code&gt;存在与调用者的范围会持续到&lt;code&gt;main&lt;&#x2F;code&gt;函数结束,所以&lt;code&gt;joe.m_name&lt;&#x2F;code&gt;的引用也具有等效的生命周期,因此,这样的调用没问题。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;rvalue-yin-shi-dui-xiang-yu-fan-hui-yin-yong&quot;&gt;&lt;strong&gt;Rvalue 隐式对象与返回引用&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#rvalue-yin-shi-dui-xiang-yu-fan-hui-yin-yong&quot; aria-label=&quot;Anchor link for: rvalue-yin-shi-dui-xiang-yu-fan-hui-yin-yong&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在 C++ 中，&lt;strong&gt;rvalue（右值）对象&lt;&#x2F;strong&gt; 是临时对象，它们的生命周期通常只存在于当前的&lt;strong&gt;完整表达式（full expression）&lt;&#x2F;strong&gt; 内。&lt;&#x2F;p&gt;
&lt;p&gt;一旦这个表达式执行完毕，rvalue 对象就会被销毁。如果我们返回对一个 rvalue 的成员的引用，该引用将指向一个已经销毁的对象，从而导致&lt;strong&gt;悬垂引用（dangling reference）&lt;&#x2F;strong&gt;，最终引发&lt;strong&gt;未定义行为（undefined behavior, UB）&lt;&#x2F;strong&gt;。
就像上面的例子,使用&lt;code&gt;Lvalue&lt;&#x2F;code&gt;返回引用是安全的,下面看一个&lt;code&gt;Rvalue&lt;&#x2F;code&gt;引用返回的错误例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Person &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createPerson&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Person&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Alice&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 返回一个临时对象（rvalue）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createPerson&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; name 变成悬垂引用
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 未定义行为！
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;看看发生了什么&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	1.&lt;code&gt;createPerson()&lt;&#x2F;code&gt; 返回一个 &lt;code&gt;Person{&quot;Alice&quot;}&lt;&#x2F;code&gt; &lt;strong&gt;临时对象（rvalue）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;​	2.&lt;code&gt;getName() &lt;&#x2F;code&gt;返回 &lt;code&gt;m_name&lt;&#x2F;code&gt; 的&lt;strong&gt;引用&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;​	3.但 &lt;code&gt;Person{&quot;Alice&quot;} &lt;&#x2F;code&gt;&lt;strong&gt;在表达式结束后立刻被销毁&lt;&#x2F;strong&gt;，其 &lt;code&gt;m_name&lt;&#x2F;code&gt; 也随之销毁。&lt;&#x2F;p&gt;
&lt;p&gt;​	4.&lt;code&gt;name&lt;&#x2F;code&gt; 仍然存储 &lt;code&gt;m_name &lt;&#x2F;code&gt;的引用，但这个引用已经悬空了！&lt;&#x2F;p&gt;
&lt;p&gt;​	5.访问 &lt;code&gt;name &lt;&#x2F;code&gt;时，程序会产生未定义行为（&lt;code&gt;UB&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;基于此,最佳的实践是:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;建议立即使用返回引用的成员函数的返回值,以避免在隐式对象为右值时出现悬空引用的问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bu-yao-fan-hui-si-you-shu-ju-cheng-yuan-de-fei-chang-liang-yin-yong&quot;&gt;不要返回私有数据成员的非常量引用&lt;a class=&quot;zola-anchor&quot; href=&quot;#bu-yao-fan-hui-si-you-shu-ju-cheng-yuan-de-fei-chang-liang-yin-yong&quot; aria-label=&quot;Anchor link for: bu-yao-fan-hui-si-you-shu-ju-cheng-yuan-de-fei-chang-liang-yin-yong&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;返回非常量引用的成员函数可以提供对该成员的直接访问,即使该成员是&lt;code&gt;private&lt;&#x2F;code&gt;私有的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 私有成员变量，初始值为 4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 返回 m_value 的 **非 const 引用**（不推荐这样做）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建 Foo 对象 f，m_value 被初始化为默认值 4
&lt;&#x2F;span&gt;&lt;span&gt;    f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 等价于 f.m_value = 5，直接修改私有成员变量
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出 5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为 &lt;code&gt;value()&lt;&#x2F;code&gt; 返回了一个非常量引用到 &lt;code&gt;m_value&lt;&#x2F;code&gt; ，调用者可以通过这个引用直接访问（并修改 &lt;code&gt;m_value&lt;&#x2F;code&gt; 的值）。这使得调用者可以绕过访问控制系统去随意修改私有数据,是非常危险的操作。&lt;&#x2F;p&gt;
&lt;p&gt;同时,&lt;strong&gt;常成员函数&lt;&#x2F;strong&gt;（const 修饰的成员函数）&lt;strong&gt;不允许返回成员变量的非常量引用&lt;&#x2F;strong&gt;。如果允许常成员函数返回成员变量的非常量引用，那么调用者就可以&lt;strong&gt;直接修改&lt;&#x2F;strong&gt;该成员变量。这将&lt;strong&gt;破坏常成员函数的初衷&lt;&#x2F;strong&gt;，违反 const 关键字的设计目的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;BankAccount
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double m_balance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 账户余额
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误：常成员函数返回非常量引用
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBalance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_balance&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 返回余额的非 const 引用
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; BankAccount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;account&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建一个常量对象
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这里违反了 const 规则，因为 `getBalance()` 居然能修改 `m_balance`
&lt;&#x2F;span&gt;&lt;span&gt;    account.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBalance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500.0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 逻辑错误：修改了 const 对象的成员变量
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Account balance: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; account.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBalance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>[C++游戏开发基础]:理解空指针</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-li-jie-kong-zhi-zhen/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-li-jie-kong-zhi-zhen/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-li-jie-kong-zhi-zhen/">&lt;p&gt;除了指向内存地址外,指针还可以指向一个空值(&lt;code&gt;null&lt;&#x2F;code&gt;),空值是一个特殊的值,可以理解为没有值。当一个指针持有空值时,意味着该指针没有指向任何东西,这样的指针被称为&lt;strong&gt;空指针&lt;&#x2F;strong&gt;!&lt;&#x2F;p&gt;
&lt;p&gt;创建空指针最简单的方法是使用值进行初始化:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; PTR现在是一个无效的指针，没有持有地址
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 等效的空指针初始化
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为我们可以使用赋值来改变指针所指向的内容，所以最初设置为 null 的指针后来可以被改变，指向一个有效的对象：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 初始化一个空指针
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;nullptrguan-jian-zi&quot;&gt;nullptr关键字&lt;a class=&quot;zola-anchor&quot; href=&quot;#nullptrguan-jian-zi&quot; aria-label=&quot;Anchor link for: nullptrguan-jian-zi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;与关键字 &lt;code&gt;true&lt;&#x2F;code&gt; 和 &lt;code&gt;false&lt;&#x2F;code&gt; 表示布尔字面值类似，&lt;code&gt;nullptr &lt;&#x2F;code&gt;关键字表示空指针字面值。我们可以使用 &lt;code&gt;nullptr&lt;&#x2F;code&gt; 来显式初始化或分配一个指针为空值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 可以使用 nullptr 将指针初始化为 null 指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr2 是一个有效的指针，指向 value
&lt;&#x2F;span&gt;&lt;span&gt;    ptr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 可以将 nullptr 赋给指针，来将指针变为 null 指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;someFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 我们也可以将 nullptr 作为参数传递给需要指针类型的函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;当需要为初始化、赋值或将空指针传递给函数时,最佳实践是使用&lt;code&gt;nullptr&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;jie-yin-yong-kong-zhi-zhen&quot;&gt;解引用空指针&lt;a class=&quot;zola-anchor&quot; href=&quot;#jie-yin-yong-kong-zhi-zhen&quot; aria-label=&quot;Anchor link for: jie-yin-yong-kong-zhi-zhen&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;和解引用野指针导致的为定义行为类似,对空指针解引用也会出现为定义行为。在大多数情况下,它会导致你的应用程序崩溃。以下程序可以帮你加深理解:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202502191835430.png&quot; alt=&quot;image-20250219183518231&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这也是作为C++开发者最常见的错误之一,也就是意外的解引用野指针和空指针导致的程序崩溃。因此:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;无论何时使用指针,都需要格外的关注这一点,确保你的代码没有解引用空指针或者悬空指针,这会导致为定义行为,进而使得应用程序崩溃,一旦程序崩溃导致严重线上问题,那么你的领导可能就用‘C’语言和你交流了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;空指针的检查&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;我们可以使用条件来测试指针是否为&lt;code&gt;nullptr&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ptr is null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ptr is non-null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullPtr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;nullPtr is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; (&lt;&#x2F;span&gt;&lt;span&gt;nullPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;non-null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;类似于0隐式转换为&lt;code&gt;false&lt;&#x2F;code&gt;,非0整数转为&lt;code&gt;true&lt;&#x2F;code&gt;一样,指针也会隐式转会为布尔值,空指针转换为布尔值的&lt;code&gt;false&lt;&#x2F;code&gt;,非空指针则是转为&lt;code&gt;true&lt;&#x2F;code&gt; ,基于这个规则,我们就可以简化上面代码中的条件判断写法:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 指针在为空时会转换为布尔值 false，非空时会转换为布尔值 true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 隐式转换为布尔值
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ptr is non-null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ptr is null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullPtr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; nullPtr 初始化为 nullptr
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;nullPtr is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; (&lt;&#x2F;span&gt;&lt;span&gt;nullPtr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;non-null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 隐式转换为布尔值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️条件语句只能用来区分空指针和非空指针。没有便捷的方法可以判断一个非空指针是指向有效对象还是悬空（指向无效对象）。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;避免悬空指针&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;解引用一个空指针或悬空指针将导致未定义行为。因此，我们需要确保我们的代码不做这两件事情之一。&lt;&#x2F;p&gt;
&lt;p&gt;我们可以通过使用条件语句来确保在尝试解引用之前指针不是空指针，从而轻松避免解引用空指针：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; todo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; todo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么对于悬空指针怎么处理?因为没有办法检测一个指针是否为悬空指针,因此,一个有效的方法就是在写每一行代码时,尽可能避免存在任何悬空指针,通过确保任何不指向有效对象的指针都将它设置为&lt;code&gt;nullptr&lt;&#x2F;code&gt;来做到这一点。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;最佳实践:一个指针应该持有有效对象的地址，或者设置为 nullptr。这样我们只需要测试指针是否为空，并且可以假设任何非空指针都是有效的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;当一个对象被销毁时，指向该已销毁对象的任何指针将悬空（它们不会自动设置为 &lt;code&gt;nullptr&lt;&#x2F;code&gt; ）。检测这些情况并确保这些指针随后被设置为 &lt;code&gt;nullptr&lt;&#x2F;code&gt; 是程序猿的责任。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;0和NULL&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在某些老版本代码中,你看会看到使用 0或者NULL这俩字面值来替代&lt;code&gt;nullptr&lt;&#x2F;code&gt;的情况。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr 现在是一个空指针（只是举个例子，实际中不要这样做）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr2; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr2 是未初始化的
&lt;&#x2F;span&gt;&lt;span&gt;    ptr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr2 现在是一个空指针（只是举个例子，实际中不要这样做）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此外,还有一个就是&lt;code&gt;NULL&lt;&#x2F;code&gt;的预处理宏。这个宏是从&lt;code&gt;C&lt;&#x2F;code&gt;语言中继承来的,在C中通常用于表示空指针。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cstddef&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 引入 NULL，NULL 是一个宏定义，表示空指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NULL &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr 是一个空指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr2; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr2 是未初始化的
&lt;&#x2F;span&gt;&lt;span&gt;    ptr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr2 现在是一个空指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;现在C++中应该避免使用上面两个字面值来表示空指针;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;优先使用引用而非指针&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;指针和引用都允许我们间接地访问其他对象。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;指针具有额外的功能，可以改变它们指向的对象，并且可以指向空（&lt;code&gt;null&lt;&#x2F;code&gt;）。然而，这些指针的功能也本质上是危险的：空指针有可能被解引用，而改变指针指向的对象会更容易导致悬空指针的产生：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将指针指向一个会被销毁的对象（引用无法做到这一点）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr 现在是悬空指针，指向了一个无效的对象
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 条件语句返回 true，因为 ptr 不是 nullptr
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 解引用悬空指针，导致未定义行为
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;引用不能像指针那样指向空（nullptr）。每次引用必须在创建时绑定到一个有效的对象，而且不能后期修改为引用另一个对象。因此，空引用的问题不会出现，也避免了因引用指向无效对象而导致的错误。&lt;&#x2F;p&gt;
&lt;p&gt;由于引用的绑定性和不可重新绑定的特性，使得引用相较于指针更安全。在大多数情况下，引用提供了更简洁、更安全的方式来访问对象，不会轻易出现如空引用、悬空引用等问题;&lt;&#x2F;p&gt;
&lt;p&gt;看个例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 引用ref绑定到x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::endl; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出10
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 下面这行代码将会报错，因为引用无法绑定为空
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; int&amp;amp; nullRef = nullptr; &#x2F;&#x2F; 错误：不能将引用绑定到nullptr
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在这个示例中，&lt;code&gt;int&amp;amp; ref = x;&lt;&#x2F;code&gt; 是将 &lt;code&gt;ref&lt;&#x2F;code&gt; 绑定到 &lt;code&gt;x&lt;&#x2F;code&gt;。引用总是绑定到一个有效对象。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果尝试使用 &lt;code&gt;nullptr&lt;&#x2F;code&gt; 来初始化引用，如 &lt;code&gt;int&amp;amp; nullRef = nullptr;&lt;&#x2F;code&gt;，会导致编译错误。因为引用不能指向空`（null），这就消除了空引用的风险。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; b;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 引用更加安全，因为它无法为null，也不会悬空
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x, y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::endl; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 正常工作，输出15
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用指针时需要显式地处理空指针的情况
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ptr1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; ptr2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::endl; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 可能崩溃，因为ptr1是空指针
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;add&lt;&#x2F;code&gt; 函数中，我们使用引用来传递 &lt;code&gt;a&lt;&#x2F;code&gt; 和&lt;code&gt; b&lt;&#x2F;code&gt;。引用的好处是，我们不需要检查指针是否为空，引用始终绑定到有效的对象。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果我们使用指针（如 &lt;code&gt;ptr1&lt;&#x2F;code&gt; 和 &lt;code&gt;ptr2&lt;&#x2F;code&gt;），我们必须显式检查指针是否为&lt;code&gt; nullptr&lt;&#x2F;code&gt;，否则可能会发生崩溃或未定义行为。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;引用避免了这种额外的检查，使得代码更加简洁和安全。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;所以:&lt;strong&gt;由于引用更安全，应该优先使用引用而非指针，除非指针提供的额外功能是必须的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢阅读,欢迎指正!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>C++游戏开发基础-枚举篇一：无范围枚举</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-mei-ju-pian-yi-wu-fan-wei-mei-ju/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-mei-ju-pian-yi-wu-fan-wei-mei-ju/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-mei-ju-pian-yi-wu-fan-wei-mei-ju/">&lt;p&gt;正片开始,假设你正在编写一个程序,需要用到一组颜色,并且在只有基本类型可用的情况下,你该如何去实现这一点?&lt;&#x2F;p&gt;
&lt;p&gt;其中一种做法是,我们可以将颜色存储为整数值,并用某种映射关系来说明每一个整数代表的颜色;比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;appleColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义苹果为0 代表红色
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirtCOlor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义衬衫为1 代表绿色
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;严格来说,这样的做法并没有什么错误之处,但是从程序的最佳实践上说,这样的做法并不直观,并且还用到了魔法数,不论是在C++还是其他编程语言中,尽可能避免在程序中使用魔法数字,这不是一个值的推荐的写法,因此,我们可以使用符号常量来对上面的写法进一步的优化,达到消除魔法数的目的:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; green &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;appleColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirtColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ok ,虽然这样写稍微好读一些，但程序员仍然需要推断 &lt;code&gt;appleColor&lt;&#x2F;code&gt; 和&lt;code&gt; shirtColor&lt;&#x2F;code&gt;（它们是 int 类型）应该保存颜色符号常量集合中的某个值（这些常量可能在其他地方定义，可能在一个单独的文件中）。&lt;&#x2F;p&gt;
&lt;p&gt;基于此,我们可以使用类型别名来进一步优化,使得这个程序更加清晰一点;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;using &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个名为颜色的类型别名
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;appleColor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirtColor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; green &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;阅读这段代码的人仍然需要理解这些颜色符号常量是与 Color 类型的变量一起使用的，但至少现在这个类型有一个独特的名字，这样如果有人搜索 Color，就能够找到相关的符号常量集合了。&lt;&#x2F;p&gt;
&lt;p&gt;但是这并不完美,依旧存在问题,因为Color只是int的别名,那么我们依旧可以像下面这样做;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Color otherColor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此外,当我们使用调试器来调试程序时,对于这些变量,我们只能看到我们用来表示某种颜色的整数值,而不是更加直观形象的颜色符号意义,如&lt;code&gt;red&lt;&#x2F;code&gt;,这可能会使得我们更加难以判断程序是否正确。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;mei-ju&quot;&gt;枚举&lt;a class=&quot;zola-anchor&quot; href=&quot;#mei-ju&quot; aria-label=&quot;Anchor link for: mei-ju&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;就上面讨论的内容,非常比特否的是,C++给我们提供了一种相对完美的解决方案,那就是使用枚举实现。&lt;&#x2F;p&gt;
&lt;p&gt;枚举也称为枚举类型(enum),是一种复合数据类型,其值被限制为一组命名的符号常量(枚举器);&lt;&#x2F;p&gt;
&lt;p&gt;C++中枚举分为范围枚举和无范围枚举,本文即将先介绍的是无范围枚举。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;wu-fan-wei-mei-ju&quot;&gt;无范围枚举&lt;a class=&quot;zola-anchor&quot; href=&quot;#wu-fan-wei-mei-ju&quot; aria-label=&quot;Anchor link for: wu-fan-wei-mei-ju&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;无范围枚举是通过&lt;code&gt;enum&lt;&#x2F;code&gt;关键字来定义的。&lt;&#x2F;p&gt;
&lt;p&gt;枚举类型最好通过例子来讲解,所以我们还是基于前面讨论的颜色定义的例子来定义一个无范围枚举,并存储一些颜色。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义枚举类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    red,
&lt;&#x2F;span&gt;&lt;span&gt;    green,
&lt;&#x2F;span&gt;&lt;span&gt;    blue,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;apple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;red&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;green&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cup &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;socks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;yellow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误：白色不是颜色的枚举
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误: 2不是颜色的枚举者
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的程序中,我们使用了&lt;code&gt;enum&lt;&#x2F;code&gt;关键字来定义了一个名为&lt;code&gt;Color&lt;&#x2F;code&gt;的枚举。 大括号内定义了几种&lt;code&gt;Color&lt;&#x2F;code&gt;类型的枚举项,每一项都是枚举类型,之间用逗号分隔,注意,尽管最后一项的枚举项后的逗号不是必须的,但是建议也加上,良好的编码习惯是非常重要的,而这些习惯不应该作为单独的课程来学习,而是在每一次编码时都刻意的去保持这种习惯,只有这样,日复一日后,不论何时何地,你所留下的每一行代码,都堪比徐志摩的诗!!!!&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;main()&lt;&#x2F;code&gt; 中，我们实例化了三个变量，类型为 &lt;code&gt;Color&lt;&#x2F;code&gt; ： &lt;code&gt;apple&lt;&#x2F;code&gt; 被初始化为颜色 &lt;code&gt;red&lt;&#x2F;code&gt; ， &lt;code&gt;shirt&lt;&#x2F;code&gt; 被初始化为颜色 &lt;code&gt;green&lt;&#x2F;code&gt; ， &lt;code&gt;cup&lt;&#x2F;code&gt; 被初始化为颜色 &lt;code&gt;blue&lt;&#x2F;code&gt; 。为这些对象分配了内存。请注意，枚举类型初始化器必须是该类型定义的枚举项之一。变量 &lt;code&gt;socks&lt;&#x2F;code&gt; 和 &lt;code&gt;hat&lt;&#x2F;code&gt; 会导致编译错误，因为初始化器 &lt;code&gt;yellow&lt;&#x2F;code&gt; 和 &lt;code&gt;2&lt;&#x2F;code&gt; 不是 &lt;code&gt;Color&lt;&#x2F;code&gt; 的枚举项。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;枚举器是隐式&lt;code&gt;constexpr&lt;&#x2F;code&gt;的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;ming-ming-mei-ju-he-mei-ju-yuan-su&quot;&gt;命名枚举和枚举元素&lt;a class=&quot;zola-anchor&quot; href=&quot;#ming-ming-mei-ju-he-mei-ju-yuan-su&quot; aria-label=&quot;Anchor link for: ming-ming-mei-ju-he-mei-ju-yuan-su&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;按照惯例,枚举类型的名字以大写字母开头(所有程序定义的类型都是如此)。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管在语义上,枚举可以不需要命名,但是在现代C ++中应该避免使用无名枚举。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;枚举器必须给出名称。不幸的是，目前来说并没有通用的枚举器命名约定。&lt;&#x2F;p&gt;
&lt;p&gt;下面是一些常见的命名风格选择:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;以小写字母开头（例如 red）&lt;&#x2F;li&gt;
&lt;li&gt;以大写字母开头（Red）&lt;&#x2F;li&gt;
&lt;li&gt;全部大写（RED）&lt;&#x2F;li&gt;
&lt;li&gt;以前缀开头的大写字母（COLOR_RED）&lt;&#x2F;li&gt;
&lt;li&gt;或以“k”开头并采用间断大写（kColorRed）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;个人比较倾向于小写字母开头的风格,当然,你可以选择一个自己喜欢的风格,一旦风格确定,尽可能在程序中保持一致,不建议在一个项目或者程序中同时使用多种风格的命名。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一些命名建议:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;现代C++规范通常建议避免使用全大写字母的命名约定,因为全大写字母通常用于预处理器宏,并且可能会产生冲突。&lt;&#x2F;li&gt;
&lt;li&gt;建议避免使用大写字母开头的命名约定,因为大写字母开头的名称通常保留给程序定义的类型。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;将枚举类型命名为首字母大写的名称。将枚举项命名为首字母小写的名称。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;有一个点需要了解的是,你创建的每个枚举类型都被认为是不同的类型，这意味着编译器可以将其与其他类型区分开来（与 &lt;code&gt;typedef&lt;&#x2F;code&gt; 或类型别名不同，它们被认为与它们所别名的类型没有区别）。&lt;&#x2F;p&gt;
&lt;p&gt;因为枚举类型是独立的，属于一个枚举类型的枚举器不能用于另一个枚举类型的对象：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat,
&lt;&#x2F;span&gt;&lt;span&gt;    dog,
&lt;&#x2F;span&gt;&lt;span&gt;    pig,
&lt;&#x2F;span&gt;&lt;span&gt;    whale,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    black,
&lt;&#x2F;span&gt;&lt;span&gt;    red,
&lt;&#x2F;span&gt;&lt;span&gt;    blue,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;myPet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; black &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 编译错误:black枚举项不属于Pet枚举类型
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; pig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 同理
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-yong-mei-ju-lei-xing&quot;&gt;使用枚举类型&lt;a class=&quot;zola-anchor&quot; href=&quot;#shi-yong-mei-ju-lei-xing&quot; aria-label=&quot;Anchor link for: shi-yong-mei-ju-lei-xing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;因为枚举器具有描述性，它们有助于增强代码文档和可读性。当您有一组相关的常量，并且对象每次只需要存储其中一个值时，使用枚举类型最为合适。&lt;&#x2F;p&gt;
&lt;p&gt;下面是一些常见的枚举使用例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;DaysOfWeek
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    sunday,
&lt;&#x2F;span&gt;&lt;span&gt;    monday,
&lt;&#x2F;span&gt;&lt;span&gt;    tuesday,
&lt;&#x2F;span&gt;&lt;span&gt;    wednesday,
&lt;&#x2F;span&gt;&lt;span&gt;    thursday,
&lt;&#x2F;span&gt;&lt;span&gt;    friday,
&lt;&#x2F;span&gt;&lt;span&gt;    saturday,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;CardinalDirections
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    north,
&lt;&#x2F;span&gt;&lt;span&gt;    east,
&lt;&#x2F;span&gt;&lt;span&gt;    south,
&lt;&#x2F;span&gt;&lt;span&gt;    west,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;CardSuits
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    clubs,
&lt;&#x2F;span&gt;&lt;span&gt;    diamonds,
&lt;&#x2F;span&gt;&lt;span&gt;    hearts,
&lt;&#x2F;span&gt;&lt;span&gt;    spades,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有时函数会返回一个状态码给调用者，以指示函数是否执行成功或遇到错误。传统上，使用不同的负小数值来表示可能的错误码。例如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readFileContents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;openFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; error 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; error 2
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parseFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; error 3
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; success
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然而,前面已经说过,使用魔法数字并不是最佳的选择,这里更推荐的方法是使用枚举类型:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FileReadResult
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    readResultSuccess,
&lt;&#x2F;span&gt;&lt;span&gt;    readResultErrorFileOpen,
&lt;&#x2F;span&gt;&lt;span&gt;    readResultErrorFileRead,
&lt;&#x2F;span&gt;&lt;span&gt;    readResultErrorFileParse,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;FileReadResult &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readFileContents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;openFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; readResultErrorFileOpen;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; readResultErrorFileRead;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parseFile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; readResultErrorFileParse;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; readResultSuccess;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后调用者可以将函数的返回值与相应的枚举值进行比较，这种方式比直接测试返回结果是否为特定整数值更容易理解。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readFileContents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() ==&lt;&#x2F;span&gt;&lt;span&gt; readResultSuccess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; do something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; print error message
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;枚举类型也可以在游戏中有很好的应用(后续会持续更新游戏开发领域的文章)，用于标识不同类型的物品、怪物或地形。基本上，任何小规模的相关对象都可以。&lt;&#x2F;p&gt;
&lt;p&gt;例如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ItemType
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	sword,
&lt;&#x2F;span&gt;&lt;span&gt;	torch,
&lt;&#x2F;span&gt;&lt;span&gt;	potion,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	ItemType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;holding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; torch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;枚举类型在用户需要在两个或多个选项中做出选择时，也可以作为有用的函数参数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;SortOrder
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    alphabetical,         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按字母顺序
&lt;&#x2F;span&gt;&lt;span&gt;    alphabeticalReverse,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按字母逆序
&lt;&#x2F;span&gt;&lt;span&gt;    numerical,            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按数值顺序
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sortData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;SortOrder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;order&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;order&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; alphabetical:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按字母顺序正向排序数据
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; alphabeticalReverse:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按字母顺序反向排序数据
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; numerical:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按数值顺序排序数据
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;枚举也可以用来定义一组相关的位标志位置，以便与 &lt;code&gt;std::bitset&lt;&#x2F;code&gt; 一起使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;bitset&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Flags
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;State
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        isHungry,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否饥饿
&lt;&#x2F;span&gt;&lt;span&gt;        isSad,      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否悲伤
&lt;&#x2F;span&gt;&lt;span&gt;        isMad,      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否生气
&lt;&#x2F;span&gt;&lt;span&gt;        isHappy,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否开心
&lt;&#x2F;span&gt;&lt;span&gt;        isLaughing, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否大笑
&lt;&#x2F;span&gt;&lt;span&gt;        isAsleep,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否睡着
&lt;&#x2F;span&gt;&lt;span&gt;        isDead,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否死亡
&lt;&#x2F;span&gt;&lt;span&gt;        isCrying,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否哭泣
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::bitset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建一个 8 位的 bitset，初始值为 0 (所有状态均为 false)
&lt;&#x2F;span&gt;&lt;span&gt;    me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Flags::isHappy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 设置“开心”状态为 true
&lt;&#x2F;span&gt;&lt;span&gt;    me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Flags::isLaughing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 设置“大笑”状态为 true
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::boolalpha; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将布尔值以 true&#x2F;false 形式输出
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 查询一些状态 (使用 test() 函数查看指定位是否为 true)
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I am happy? &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Flags::isHappy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否开心？
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;I am laughing? &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; me.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Flags::isLaughing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 是否大笑？
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;wu-fan-wei-mei-ju-de-zuo-yong-yu&quot;&gt;无范围枚举的作用域&lt;a class=&quot;zola-anchor&quot; href=&quot;#wu-fan-wei-mei-ju-de-zuo-yong-yu&quot; aria-label=&quot;Anchor link for: wu-fan-wei-mei-ju-de-zuo-yong-yu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;无作用域枚举之所以这样命名，是因为它们将其枚举器名称放置在与枚举定义本身相同的作用域中（而不是像命名空间那样创建一个新的作用域区域）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 该枚举 (enum) 定义在全局命名空间中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    red,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 因此 red 被放入全局命名空间中
&lt;&#x2F;span&gt;&lt;span&gt;    green, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 同理，green 也在全局命名空间中
&lt;&#x2F;span&gt;&lt;span&gt;    blue,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; blue 也一样
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;apple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 我的苹果是红色的 (直接使用 red，没有命名空间限定)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;枚举在全局作用域中定义。因此，所有枚举名称（ &lt;code&gt;red&lt;&#x2F;code&gt; 、 &lt;code&gt;green&lt;&#x2F;code&gt; 和 &lt;code&gt;blue&lt;&#x2F;code&gt; ）也进入全局作用域。这会污染全局作用域，并显著增加命名冲突的可能性。&lt;&#x2F;p&gt;
&lt;p&gt;这一后果是，枚举名在同一作用域内不能在多个枚举中使用：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    red,
&lt;&#x2F;span&gt;&lt;span&gt;    green,
&lt;&#x2F;span&gt;&lt;span&gt;    blue, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; blue 被放入全局命名空间中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Feeling
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    happy,
&lt;&#x2F;span&gt;&lt;span&gt;    tired,
&lt;&#x2F;span&gt;&lt;span&gt;    blue, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误: 与上面的 blue 命名冲突
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;apple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 我的苹果是红色的
&lt;&#x2F;span&gt;&lt;span&gt;    Feeling &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;me &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; happy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 我现在很开心（尽管我的程序无法编译）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面的示例中，两个未限定的枚举（ &lt;code&gt;Color&lt;&#x2F;code&gt; 和 &lt;code&gt;Feeling&lt;&#x2F;code&gt; ）将同名的枚举项 &lt;code&gt;blue&lt;&#x2F;code&gt; 放到了全局作用域中。这导致了命名冲突，并产生了编译错误。&lt;&#x2F;p&gt;
&lt;p&gt;无范围的枚举也为枚举器提供了一个命名作用域区域（就像命名空间为内部声明的名称提供一个命名作用域区域一样）。这意味着我们可以按照以下方式访问无范围枚举的枚举器：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    red,
&lt;&#x2F;span&gt;&lt;span&gt;    green,
&lt;&#x2F;span&gt;&lt;span&gt;    blue, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; blue 被放入全局命名空间中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;apple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 可以，直接从全局命名空间访问枚举器 red
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;raspberry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; Color::red &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 也可以，从 Color 枚举作用域中访问枚举器 red
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但是大多数情况下，未限定的枚举元素不使用作用域解析运算符来访问。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;bi-mian-mei-ju-xiang-ming-ming-chong-tu&quot;&gt;避免枚举项命名冲突&lt;a class=&quot;zola-anchor&quot; href=&quot;#bi-mian-mei-ju-xiang-ming-ming-chong-tu&quot; aria-label=&quot;Anchor link for: bi-mian-mei-ju-xiang-ming-ming-chong-tu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;防止未限定作用域枚举命名冲突有很多常见的做法;&lt;&#x2F;p&gt;
&lt;p&gt;一种是将每个枚举项都以前缀的形式加上枚举本身的名称:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    color_red,
&lt;&#x2F;span&gt;&lt;span&gt;    color_blue,
&lt;&#x2F;span&gt;&lt;span&gt;    color_green,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Feeling
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    feeling_happy,
&lt;&#x2F;span&gt;&lt;span&gt;    feeling_tired,
&lt;&#x2F;span&gt;&lt;span&gt;    feeling_blue, 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;paint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; color_blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Feeling &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;me &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; feeling_blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;尽管这种做法还是有空间污染的情况,但是大大减少了命名冲突的几率;&lt;&#x2F;p&gt;
&lt;p&gt;更好的选择是将枚举类型放在一个提供独立作用域区域的结构中，例如命名空间：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 名称颜色，红色，蓝色和绿色是在命名空间颜色内定义的
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        red,
&lt;&#x2F;span&gt;&lt;span&gt;        green,
&lt;&#x2F;span&gt;&lt;span&gt;        blue,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Feeling
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Feeling
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        happy,
&lt;&#x2F;span&gt;&lt;span&gt;        tired,
&lt;&#x2F;span&gt;&lt;span&gt;        blue, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 由于命名空间不同,这里的blue和Color中的blue不会产生冲突
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color::Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;paint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; Color::blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Feeling::Feeling &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;me&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; Feeling::blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽量将枚举放在命名的作用域区域（例如命名空间或类）中，以防止枚举器污染全局命名空间。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;mei-ju-zhi-de-bi-jiao&quot;&gt;枚举值的比较&lt;a class=&quot;zola-anchor&quot; href=&quot;#mei-ju-zhi-de-bi-jiao&quot; aria-label=&quot;Anchor link for: mei-ju-zhi-de-bi-jiao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;我们可以使用相等运算符（ &lt;code&gt;operator==&lt;&#x2F;code&gt; 和 &lt;code&gt;operator!=&lt;&#x2F;code&gt; ）来测试某个枚举是否具有特定枚举项的值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    red,
&lt;&#x2F;span&gt;&lt;span&gt;    green,
&lt;&#x2F;span&gt;&lt;span&gt;    blue,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; if the shirt is blue
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your shirt is blue!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your shirt is not blue!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;wu-fan-wei-mei-ju-zheng-shu-zhuan-huan&quot;&gt;无范围枚举整数转换&lt;a class=&quot;zola-anchor&quot; href=&quot;#wu-fan-wei-mei-ju-zheng-shu-zhuan-huan&quot; aria-label=&quot;Anchor link for: wu-fan-wei-mei-ju-zheng-shu-zhuan-huan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在上面的内容中,我们提到过枚举器是符号常量。但其实这些枚举器具有整型值。&lt;&#x2F;p&gt;
&lt;p&gt;当我们定义一个枚举时，每个枚举项会自动与一个整数值关联，该值基于其在枚举列表中的位置。默认情况下，第一个枚举项被赋予整数值 0，而每个后续的枚举项的值比前一个枚举项大 1.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    black,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 0
&lt;&#x2F;span&gt;&lt;span&gt;    red,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    blue,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    green,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span&gt;    white,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 4
&lt;&#x2F;span&gt;&lt;span&gt;    cyan,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 5
&lt;&#x2F;span&gt;&lt;span&gt;    yellow,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 6
&lt;&#x2F;span&gt;&lt;span&gt;    magenta, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; shirt实际存储的值是2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以显式的定义枚举器的值。这些整数值可以是正数或者负数,并且可以与其他枚举器共享相同的值。为定义的任何枚举器将被赋予比前一个枚举器大1的值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Animal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 
&lt;&#x2F;span&gt;&lt;span&gt;    dog,         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -2
&lt;&#x2F;span&gt;&lt;span&gt;    pig,         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -1
&lt;&#x2F;span&gt;&lt;span&gt;    horse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    giraffe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    chicken,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;请注意，在这个例子中，&lt;strong&gt;horse&lt;&#x2F;strong&gt;（马）和 &lt;strong&gt;giraffe&lt;&#x2F;strong&gt;（长颈鹿）被赋予了相同的值。当这种情况发生时，这两个&lt;strong&gt;枚举器 (enumerators)&lt;&#x2F;strong&gt; 将变得&lt;strong&gt;不再唯一 (non-distinct)&lt;&#x2F;strong&gt; —— 本质上，&lt;strong&gt;horse&lt;&#x2F;strong&gt; 和 &lt;strong&gt;giraffe&lt;&#x2F;strong&gt; 可以互换使用。&lt;&#x2F;p&gt;
&lt;p&gt;虽然 C++ &lt;strong&gt;允许&lt;&#x2F;strong&gt;在同一个&lt;strong&gt;枚举 (enumeration)&lt;&#x2F;strong&gt; 中为&lt;strong&gt;两个枚举器&lt;&#x2F;strong&gt;分配相同的值，但&lt;strong&gt;通常应尽量避免&lt;&#x2F;strong&gt;这样做。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;除非你有充分的理由,否则不要为枚举器显式的赋值。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;dui-mei-ju-jin-xing-zhi-chu-shi-hua&quot;&gt;对枚举进行值初始化&lt;a class=&quot;zola-anchor&quot; href=&quot;#dui-mei-ju-jin-xing-zhi-chu-shi-hua&quot; aria-label=&quot;Anchor link for: dui-mei-ju-jin-xing-zhi-chu-shi-hua&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;如果一个&lt;strong&gt;枚举类型 (enumeration)&lt;&#x2F;strong&gt; 被&lt;strong&gt;零初始化 (zero-initialized)&lt;&#x2F;strong&gt;（例如在进行&lt;strong&gt;值初始化 (value-initialization)&lt;&#x2F;strong&gt; 时发生这种情况），那么该枚举将被赋值为 0，即使枚举中&lt;strong&gt;并不存在&lt;&#x2F;strong&gt;值为 0 的&lt;strong&gt;枚举器 (enumerator)&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  注意:在此列表中没有具有值0的枚举器
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Animal
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -3
&lt;&#x2F;span&gt;&lt;span&gt;    dog,         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -2
&lt;&#x2F;span&gt;&lt;span&gt;    pig,         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -1
&lt;&#x2F;span&gt;&lt;span&gt;    horse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 5
&lt;&#x2F;span&gt;&lt;span&gt;    giraffe &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 5
&lt;&#x2F;span&gt;&lt;span&gt;    chicken,     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Animal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这里会将a初始化为0,即使在枚举项中并没有这个枚举
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; a; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; prints 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果存在值为 0 的枚举项，值初始化将枚举类型默认为该枚举项的意义。例如，使用前面的 &lt;code&gt;enum Color&lt;&#x2F;code&gt; 示例，值初始化的 &lt;code&gt;Color&lt;&#x2F;code&gt; 将默认为 &lt;code&gt;black&lt;&#x2F;code&gt; 。因此，最好考虑将值为 0 的枚举项设置为你的枚举的最佳默认意义。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;最佳实践:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用表示0的枚举项作为你枚举的最佳默认值。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果没有好的默认含义,可以考虑添加一个表示“无效”或者“未知”的枚举,其值为0 ,这样的状态可以明确记录并在适当的地方进行显式的处理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;wu-fan-wei-mei-ju-hui-yin-shi-zhuan-huan-wei-zheng-shu-zhi&quot;&gt;无范围枚举会隐式转换为整数值&lt;a class=&quot;zola-anchor&quot; href=&quot;#wu-fan-wei-mei-ju-hui-yin-shi-zhuan-huan-wei-zheng-shu-zhi&quot; aria-label=&quot;Anchor link for: wu-fan-wei-mei-ju-hui-yin-shi-zhuan-huan-wei-zheng-shu-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;尽管枚举存储整数值，但它们并不被视为整数类型（它们是复合类型）。然而，无范围枚举会隐式转换为整数值。&lt;&#x2F;p&gt;
&lt;p&gt;因为枚举器是编译时常量，因此这是一个 constexpr 转换,考虑下面程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    black, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  0
&lt;&#x2F;span&gt;&lt;span&gt;    red, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  1
&lt;&#x2F;span&gt;&lt;span&gt;    blue, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  2
&lt;&#x2F;span&gt;&lt;span&gt;    green, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  3
&lt;&#x2F;span&gt;&lt;span&gt;    white, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  4
&lt;&#x2F;span&gt;&lt;span&gt;    cyan, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  5
&lt;&#x2F;span&gt;&lt;span&gt;    yellow, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  6
&lt;&#x2F;span&gt;&lt;span&gt;    magenta, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;  7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your shirt is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; prints 2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当一个枚举类型在函数调用或与某个运算符一起使用时，编译器会首先尝试找到一个与该枚举类型匹配的函数或运算符。例如，当编译器尝试编译&lt;code&gt; std::cout &amp;lt;&amp;lt; shirt&lt;&#x2F;code&gt; 时，编译器会首先检查 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;&#x2F;code&gt; 是否知道如何将 &lt;code&gt;Color&lt;&#x2F;code&gt; 类型的对象（因为 shirt 是 Color 类型）输出到 &lt;code&gt;std::cout&lt;&#x2F;code&gt; 中。但它并不支持这种操作。&lt;&#x2F;p&gt;
&lt;p&gt;由于编译器找不到匹配的运算符，它接着会检查&lt;code&gt; operator&amp;lt;&amp;lt;&lt;&#x2F;code&gt; 是否知道如何打印非作用域枚举转换成的整型类型的对象。由于它确实支持这种操作，&lt;code&gt;shirt&lt;&#x2F;code&gt; 中的值会被转换为一个整型值，并以整型值 &lt;code&gt;2&lt;&#x2F;code&gt; 的形式打印出来。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;mei-ju-da-xiao-he-ji-chu-lei-xing&quot;&gt;枚举大小和基础类型&lt;a class=&quot;zola-anchor&quot; href=&quot;#mei-ju-da-xiao-he-ji-chu-lei-xing&quot; aria-label=&quot;Anchor link for: mei-ju-da-xiao-he-ji-chu-lei-xing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;枚举器具有整型值。但是具体是哪一种类型的整型呢?&lt;&#x2F;p&gt;
&lt;p&gt;对于无范围枚举类型,C++并没有标准规定使用哪一种具体的整数类型作为底层类型,因此该选择是由实现决定的。大多数编译器会使用&lt;code&gt;int&lt;&#x2F;code&gt;类型作为底层类型。&lt;&#x2F;p&gt;
&lt;p&gt;我们可以显式的指定枚举的底层类型,且必须是整数类型。例如,如果你的程序应用在一个对对带宽敏感的环境中,那么也许你会希望将枚举指定为一个较小的值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cstdint&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; for std::int8_t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 显式的指定枚举器的整数类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;std::int8_t
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    black,
&lt;&#x2F;span&gt;&lt;span&gt;    red,
&lt;&#x2F;span&gt;&lt;span&gt;    blue,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; black &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; prints 1 (byte)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;仅在必要时指定枚举的基本类型。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;zheng-shu-dao-wu-fan-wei-mei-ju-lei-xing-de-zhuan-huan&quot;&gt;整数到无范围枚举类型的转换&lt;a class=&quot;zola-anchor&quot; href=&quot;#zheng-shu-dao-wu-fan-wei-mei-ju-lei-xing-de-zhuan-huan&quot; aria-label=&quot;Anchor link for: zheng-shu-dao-wu-fan-wei-mei-ju-lei-xing-de-zhuan-huan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;编译器会隐式的将无范围枚举转为整数,但是这个过程反过来是不成立的,不会隐式的将整数转换为无范围枚举。所以下面的代码会产生编译错误:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 未指定基类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 0
&lt;&#x2F;span&gt;&lt;span&gt;    dog,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 1
&lt;&#x2F;span&gt;&lt;span&gt;    pig,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 2
&lt;&#x2F;span&gt;&lt;span&gt;    whale, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 编译错误：整数值 2 不能隐式转换为 Pet 类型
&lt;&#x2F;span&gt;&lt;span&gt;    pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 编译错误：整数值 3 不能隐式转换为 Pet 类型
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果确实需要进行转换,那么可以使用&lt;code&gt;static_cast&lt;&#x2F;code&gt;进行显式的转换&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 未指定基类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 0
&lt;&#x2F;span&gt;&lt;span&gt;    dog,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 1
&lt;&#x2F;span&gt;&lt;span&gt;    pig,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 2
&lt;&#x2F;span&gt;&lt;span&gt;    whale, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static_cast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) }&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static_cast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;      
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其次，从 C++17 开始，如果一个&lt;strong&gt;非作用域枚举 (unscoped enumeration)&lt;&#x2F;strong&gt; &lt;strong&gt;显式指定了基类型 (explicitly specified base)&lt;&#x2F;strong&gt;，那么编译器将允许你使用一个&lt;strong&gt;整型值 (integral value)&lt;&#x2F;strong&gt; 对该枚举进行&lt;strong&gt;列表初始化 (list initialization)&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pet&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 我们已经指定了基类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 0
&lt;&#x2F;span&gt;&lt;span&gt;    dog,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 1
&lt;&#x2F;span&gt;&lt;span&gt;    pig,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 2
&lt;&#x2F;span&gt;&lt;span&gt;    whale, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分配值 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pet1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 可以使用大括号初始化非作用域枚举 (C++17) ，因为指定了基类型
&lt;&#x2F;span&gt;&lt;span&gt;    Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pet2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 编译错误：不能使用圆括号直接初始化整数值
&lt;&#x2F;span&gt;&lt;span&gt;    Pet pet3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 编译错误：不能通过赋值初始化整数值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    pet1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 编译错误：不能直接赋值整数值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;mei-ju-he-zi-fu-chuan-de-xiang-hu-zhuan-huan&quot;&gt;枚举和字符串的相互转换&lt;a class=&quot;zola-anchor&quot; href=&quot;#mei-ju-he-zi-fu-chuan-de-xiang-hu-zhuan-huan&quot; aria-label=&quot;Anchor link for: mei-ju-he-zi-fu-chuan-de-xiang-hu-zhuan-huan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;基于上面讨论的枚举和整数转换的例子中,将枚举作为整数值打印出来并不难,但这并不是我们想要的,通常情况下,我们更希望打印的是枚举项名称,比如&lt;code&gt;blue&lt;&#x2F;code&gt; ;尽管C++并没有内置的实现方案,但是我们可以自己探索:&lt;&#x2F;p&gt;
&lt;p&gt;获取枚举值名称的典型方法是编写一个函数，允许我们传入一个枚举值，并返回该枚举值的名称作为字符串。但这样做需要某种方式来确定对于给定的枚举值应该返回哪个字符串。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    black,
&lt;&#x2F;span&gt;&lt;span&gt;    red,
&lt;&#x2F;span&gt;&lt;span&gt;    blue,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getColorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; black: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;black&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; red:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; blue:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;blue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your shirt is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getColorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;shirt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;该函数是 &lt;code&gt;constexpr&lt;&#x2F;code&gt; 的，这样我们就可以在常量表达式中使用颜色的名称。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;虽然这样可以让我们获取枚举项的名称，但如果我们要将这个名称打印到控制台，不得不使用 &lt;code&gt;std::cout &amp;lt;&amp;lt; getColorName(shirt)&lt;&#x2F;code&gt; 并不比 &lt;code&gt;std::cout &amp;lt;&amp;lt; shirt&lt;&#x2F;code&gt; 方便多少。我们将在后续的博文中学习通过I&#x2F;O操作符重载的方式使用 &lt;code&gt;std::cout&lt;&#x2F;code&gt; 打印枚举。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;wu-fan-wei-mei-ju-de-shu-ru&quot;&gt;无范围枚举的输入&lt;a class=&quot;zola-anchor&quot; href=&quot;#wu-fan-wei-mei-ju-de-shu-ru&quot; aria-label=&quot;Anchor link for: wu-fan-wei-mei-ju-de-shu-ru&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在以下示例中，我们定义了一个 &lt;code&gt;Pet&lt;&#x2F;code&gt; 枚举。因为 &lt;code&gt;Pet&lt;&#x2F;code&gt; 是用户定义的类型，语言不知道如何通过 &lt;code&gt;std::cin&lt;&#x2F;code&gt; 输入一个 &lt;code&gt;Pet&lt;&#x2F;code&gt; ：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 0
&lt;&#x2F;span&gt;&lt;span&gt;    dog,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    pig,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    whale, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; pig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; pet; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 编译错误
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一种简单的方式是读取一个整数,然后使用&lt;code&gt;static_cats&lt;&#x2F;code&gt;将整数转换为相应的枚举类型;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 0
&lt;&#x2F;span&gt;&lt;span&gt;    dog,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    pig,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    whale, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; cat:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; dog:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;dog&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; pig:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;pig&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; whale: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;whale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter a pet (0=cat, 1=dog, 2=pig, 3=whale): &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; input; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; input an integer
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You entered an invalid pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static_cast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) }&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You entered: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;与其输入一个数字，让用户输入一个表示枚举项的字符串（例如“pig”），然后我们将该字符串转换为相应的枚举项会更好。然而，做到这一点需要我们解决几个问题。&lt;&#x2F;p&gt;
&lt;p&gt;首先，我们不能使用字符串进行 switch 语句，因此我们需要使用其他方式来匹配用户传递的字符串。这里最简单的方法是使用一系列 if 语句。&lt;&#x2F;p&gt;
&lt;p&gt;其次，如果用户传递进一个无效的字符串，我们应该返回哪个枚举值？一种选择是添加一个表示&lt;code&gt;“none&#x2F;invalid”&lt;&#x2F;code&gt;的枚举值，并返回它。然而，更好的选择是使用 &lt;code&gt;std::optional&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;关于&lt;code&gt;std::optional&lt;&#x2F;code&gt;,在之前的博客中有介绍过,传送门:&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;articles&#x2F;153&quot;&gt;[通俗易懂C++]:std::optional&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; for std::optional
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 0
&lt;&#x2F;span&gt;&lt;span&gt;    dog,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    pig,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    whale, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; cat:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; dog:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;dog&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; pig:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;pig&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; whale: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;whale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetFromString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cat;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;dog&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; dog;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;pig&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; pig;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;whale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; whale;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter a pet: cat, dog, pig, or whale: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; s;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetFromString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You entered an invalid pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You entered: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>[C++游戏开发基础]:数据封装(隐藏)的好处</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-shu-ju-feng-zhuang-yin-cang-de-hao-chu/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-shu-ju-feng-zhuang-yin-cang-de-hao-chu/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-shu-ju-feng-zhuang-yin-cang-de-hao-chu/">&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在现代生活中，我们有许多机械或电子设备。你通过遥控器开关电视。你通过踩油门使汽车前进。你通过开关来打开灯。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;实际上这些设备是如何运作的对你来说是隐藏起来的。当你按下遥控器上的按钮时，你不需要知道遥控器是如何与电视进行通信的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当你踩下汽车的油门时，你不需要知道内燃机是如何让车轮转动的。当你拍照时，你不需要知道传感器是如何收集光线并将光线转换成像素图像的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;这种接口和实现的分离非常有用，因为它允许我们在不需要理解它们如何工作的情况下使用对象——我们只需要了解如何与它们交互。这大大减少了使用这些对象的复杂性，并增加了我们可以交互的对象数量。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lei-de-jie-kou-yu-shi-xian-de-fen-chi&quot;&gt;类的接口与实现的分离&lt;a class=&quot;zola-anchor&quot; href=&quot;#lei-de-jie-kou-yu-shi-xian-de-fen-chi&quot; aria-label=&quot;Anchor link for: lei-de-jie-kou-yu-shi-xian-de-fen-chi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在编程中，接口（interface）和实现（implementation）的分离是非常有用的概念。让我们先明确在类（class）类型中，这两个术语的含义。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;什么是接口&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;类的接口（也称为&lt;strong&gt;类接口&lt;&#x2F;strong&gt;）定义了类的用户如何与该类的对象进行交互。由于&lt;strong&gt;只有公有成员（public members）&lt;&#x2F;strong&gt; 可以被类外部访问，因此，&lt;strong&gt;类的公有成员构成了该类的接口&lt;&#x2F;strong&gt;。由于接口由公有成员组成，因此它有时也被称为&lt;strong&gt;公有接口（public interface）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;接口是&lt;strong&gt;类的作者&lt;&#x2F;strong&gt;和&lt;strong&gt;类的使用者&lt;&#x2F;strong&gt;之间的一种&lt;strong&gt;隐式契约（implicit contract）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;一旦类的接口被使用，就不能轻易修改&lt;&#x2F;strong&gt;，因为任何对接口的更改都可能导致依赖它的代码发生错误。&lt;&#x2F;li&gt;
&lt;li&gt;因此，我们应该&lt;strong&gt;确保类的接口设计良好且稳定&lt;&#x2F;strong&gt;，尽量减少不必要的更改。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;什么是实现&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;类的&lt;strong&gt;实现&lt;&#x2F;strong&gt;指的是&lt;strong&gt;使类按照预期行为运行的代码&lt;&#x2F;strong&gt;，它包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;成员变量（member variables）：&lt;&#x2F;strong&gt; 用于存储数据。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;成员函数的具体实现（bodies of member functions）：&lt;&#x2F;strong&gt; 包含程序逻辑并操作成员变量。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;换句话说，&lt;strong&gt;实现是支撑类功能的幕后代码&lt;&#x2F;strong&gt;，它决定了类的行为方式，而接口只是提供了与外部交互的方式。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shu-ju-feng-zhuang-shi-lei-geng-rong-yi-shi-yong-bing-jiang-di-liao-fu-za-xing&quot;&gt;数据封装使类更容易使用并降低了复杂性&lt;a class=&quot;zola-anchor&quot; href=&quot;#shu-ju-feng-zhuang-shi-lei-geng-rong-yi-shi-yong-bing-jiang-di-liao-fu-za-xing&quot; aria-label=&quot;Anchor link for: shu-ju-feng-zhuang-shi-lei-geng-rong-yi-shi-yong-bing-jiang-di-liao-fu-za-xing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;使用封装类时，你不需要知道它的实现细节。你只需要理解它的接口：哪些成员函数是公开的，它们接受什么参数，以及返回什么值。&lt;&#x2F;p&gt;
&lt;p&gt;比如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; sv.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这个简短的程序中，我们看不到 &lt;code&gt;std::string_view&lt;&#x2F;code&gt; 的实现细节。我们不知道 &lt;code&gt;std::string_view&lt;&#x2F;code&gt; 有多少个数据成员、它们的名字或类型是什么。我们也不知道 &lt;code&gt;length()&lt;&#x2F;code&gt; 成员函数是如何返回所查看字符串的长度的。&lt;&#x2F;p&gt;
&lt;p&gt;不必关心这些细节极大地降低了程序的复杂性，从而减少了错误。这是封装的关键优势，比其他任何原因都更为重要。&lt;&#x2F;p&gt;
&lt;p&gt;不妨想象一下:如果要使用 &lt;code&gt;std::string&lt;&#x2F;code&gt; 、 &lt;code&gt;std::vector&lt;&#x2F;code&gt; 或 &lt;code&gt;std::cout&lt;&#x2F;code&gt; ，就必须理解它们的实现细节，C++ 会变得多么复杂！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shu-ju-feng-zhuang-neng-geng-hao-de-wei-hu-bu-bian-liang&quot;&gt;数据封装能更好的维护不变量&lt;a class=&quot;zola-anchor&quot; href=&quot;#shu-ju-feng-zhuang-neng-geng-hao-de-wei-hu-bu-bian-liang&quot; aria-label=&quot;Anchor link for: shu-ju-feng-zhuang-neng-geng-hao-de-wei-hu-bu-bian-liang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;所谓不变量,即为了使对象在整个生命周期内保持有效状态而必须满足的条件。&lt;&#x2F;p&gt;
&lt;p&gt;考虑下面程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 结构体的成员默认是 public（公有的）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 员工姓名，默认值为 &amp;quot;John&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;firstInitial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;J&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 员工的首字母，默认值为 &amp;#39;J&amp;#39;（应与 name 的首字母匹配）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出员工信息
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; has first initial &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; firstInitial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用默认值初始化 Employee（name=&amp;quot;John&amp;quot;, firstInitial=&amp;#39;J&amp;#39;）
&lt;&#x2F;span&gt;&lt;span&gt;    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出：&amp;quot;Employee John has first initial J&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Mark&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 修改员工的姓名为 &amp;quot;Mark&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 由于 firstInitial 没有同步更新，此时仍然是 &amp;#39;J&amp;#39;，导致输出的首字母错误
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为 &lt;code&gt;name&lt;&#x2F;code&gt; 成员是公共的， &lt;code&gt;main()&lt;&#x2F;code&gt; 中的代码能够将 &lt;code&gt;e.name&lt;&#x2F;code&gt; 设置为 &lt;code&gt;&quot;Mark&quot;&lt;&#x2F;code&gt; ，而 &lt;code&gt;firstInitial&lt;&#x2F;code&gt; 成员没有被更新。我们的不变式被破坏了，所以对 &lt;code&gt;print()&lt;&#x2F;code&gt; 的第二次调用没有按预期工作。&lt;&#x2F;p&gt;
&lt;p&gt;如果我们直接给用户提供类的实现访问权限，他们就需要负责维护所有不变量,这显然不太现实。&lt;&#x2F;p&gt;
&lt;p&gt;让我们重写这个程序，将我们的成员变量设为私有，并暴露一个成员函数来设置 Employee 的名字：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char m_firstInitial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; name;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_firstInitial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; use std::string::front() to get first letter of `name`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; has first initial &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_firstInitial &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Mark&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的程序的变更,从用户的角度来看，唯一的变化是他们不再直接给 &lt;code&gt;name&lt;&#x2F;code&gt; 分配一个值，而是调用成员函数 &lt;code&gt;setName()&lt;&#x2F;code&gt; ，该函数负责同时设置 &lt;code&gt;m_name&lt;&#x2F;code&gt; 和 &lt;code&gt;m_firstInitial&lt;&#x2F;code&gt; 。用户不再需要维护这个不变量！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shu-ju-feng-zhuang-ke-yi-geng-hao-de-jin-xing-cuo-wu-jian-ce-he-chu-li&quot;&gt;数据封装可以更好的进行错误检测和处理&lt;a class=&quot;zola-anchor&quot; href=&quot;#shu-ju-feng-zhuang-ke-yi-geng-hao-de-jin-xing-cuo-wu-jian-ce-he-chu-li&quot; aria-label=&quot;Anchor link for: shu-ju-feng-zhuang-ke-yi-geng-hao-de-jin-xing-cuo-wu-jian-ce-he-chu-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在上述程序中， &lt;code&gt;m_firstInitial&lt;&#x2F;code&gt; 必须与 &lt;code&gt;m_name&lt;&#x2F;code&gt; 的第一个字符匹配这一不变量存在是因为 &lt;code&gt;m_firstInitial&lt;&#x2F;code&gt; 独立于 &lt;code&gt;m_name&lt;&#x2F;code&gt; 存在。我们可以通过将数据成员 &lt;code&gt;m_firstInitial&lt;&#x2F;code&gt; 替换为一个返回第一个字符的成员函数来移除这个特定的不变量。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Employee
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;John&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; name;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; use std::string::front() to get first letter of `m_name`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;firstInitial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;front&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Employee &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; has first initial &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;firstInitial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Employee &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; defaults to &amp;quot;John&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Mark&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于上面的程序,还存在一个问题,&lt;code&gt;m_name&lt;&#x2F;code&gt; 不应该是一个空字符串（因为每个 &lt;code&gt;Employee&lt;&#x2F;code&gt; 都应该有一个名称）。如果 &lt;code&gt;m_name&lt;&#x2F;code&gt; 被设置为空字符串，立即不会发生任何糟糕的事情。但如果随后调用了 &lt;code&gt;firstInitial()&lt;&#x2F;code&gt; ， &lt;code&gt;front()&lt;&#x2F;code&gt; 成员将会尝试获取空字符串的第一个字母，这会导致未定义行为。&lt;&#x2F;p&gt;
&lt;p&gt;如果用户对 &lt;code&gt;m_name&lt;&#x2F;code&gt; 成员有公共访问权限，他们可以直接设置 &lt;code&gt;m_name = &quot;&quot;&lt;&#x2F;code&gt; ，而我们无法阻止这种情况发生。&lt;&#x2F;p&gt;
&lt;p&gt;然而，因为我们要求用户通过公共接口函数 &lt;code&gt;setName()&lt;&#x2F;code&gt; 设置 &lt;code&gt;m_name&lt;&#x2F;code&gt; ，我们可以在 &lt;code&gt;setName()&lt;&#x2F;code&gt; 中验证用户传递的是一个有效的名称。如果名称非空，我们可以将其赋值给 &lt;code&gt;m_name&lt;&#x2F;code&gt; 。如果名称是空字符串，我们可以采取任何数量的措施进行响应：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;忽略将名称设置为“”的请求，并返回给调用者。&lt;&#x2F;li&gt;
&lt;li&gt;错误断言&lt;&#x2F;li&gt;
&lt;li&gt;抛出异常&lt;&#x2F;li&gt;
&lt;li&gt;其他&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yi-dian-jian-yi-you-xian-shi-yong-fei-cheng-yuan-han-shu-er-bu-shi-cheng-yuan-han-shu&quot;&gt;一点建议:优先使用非成员函数而不是成员函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#yi-dian-jian-yi-you-xian-shi-yong-fei-cheng-yuan-han-shu-er-bu-shi-cheng-yuan-han-shu&quot; aria-label=&quot;Anchor link for: yi-dian-jian-yi-you-xian-shi-yong-fei-cheng-yuan-han-shu-er-bu-shi-cheng-yuan-han-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在C++中,如果一个函数可以合理的作为非成员函数实现,应该优先将其实现为非成员函数,而不是成员函数。 这样做是有原因的:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;非成员函数不是你类接口的一部分,因此,类接口将会变得更小更简洁,使类更容易理解和维护。&lt;&#x2F;li&gt;
&lt;li&gt;非成员函数能够强化封装性，因为它们必须通过类的公共接口来工作。这样就不会因为方便而直接访问类的内部实现。&lt;&#x2F;li&gt;
&lt;li&gt;非成员函数通常更容易调试;&lt;&#x2F;li&gt;
&lt;li&gt;非成员函数可以帮助将应用特定的逻辑从类中分离出来，从而提高类的通用性和可复用性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果你之前有现代面向对象编程（OOP）语言的经验（比如 Java 或 C#），这种做法可能会让你感到意外。这些语言采用了不同的概念模型，在它们的设计中，&lt;strong&gt;类是核心&lt;&#x2F;strong&gt;，所有东西都围绕类展开。&lt;&#x2F;p&gt;
&lt;p&gt;因此，这些语言强调成员函数（member functions），并且实际上 &lt;strong&gt;Java 和 C# 甚至不支持非成员函数（non-member functions）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这里针对上面最后一条举个例子:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;反向示例:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector3D
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double m_x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector3D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 计算向量长度
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这个方法把游戏特定的逻辑放进了 Vector3D 中
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;applyGravity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 物理重力，属于游戏逻辑
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Vector(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3D &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;applyGravity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用物理引擎逻辑
&lt;&#x2F;span&gt;&lt;span&gt;    velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Vector(10, 10.19, 30) (不符合通用设计)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;applyGravity() 是&lt;strong&gt;游戏特定&lt;&#x2F;strong&gt;的逻辑，而 Vector3D 本身应该是一个通用的数学类。&lt;&#x2F;li&gt;
&lt;li&gt;如果未来需要在物理模拟、3D 渲染等不同场景使用 Vector3D，这个方法可能就不适用了。&lt;&#x2F;li&gt;
&lt;li&gt;这导致 Vector3D 变得&lt;strong&gt;不够通用，难以复用&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;使用非成员函数分离应用逻辑以改进&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector3D
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double m_x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector3D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 计算向量长度
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sqrt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Vector(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 提供访问和修改 y 分量的接口
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; y; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 应用层的游戏逻辑：用非成员函数实现重力影响
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;applyGravity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Vector3D&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9.81&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 物理引擎的重力影响
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3D &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;applyGravity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;velocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 现在 applyGravity() 只影响游戏逻辑
&lt;&#x2F;span&gt;&lt;span&gt;    velocity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Vector(10, 10.19, 30)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;guan-yu-lei-cheng-yuan-sheng-ming-shun-xu-de-tao-lun&quot;&gt;关于类成员声明顺序的讨论&lt;a class=&quot;zola-anchor&quot; href=&quot;#guan-yu-lei-cheng-yuan-sheng-ming-shun-xu-de-tao-lun&quot; aria-label=&quot;Anchor link for: guan-yu-lei-cheng-yuan-sheng-ming-shun-xu-de-tao-lun&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在类外部编写代码时,我们必须在使用变量和函数之前声明它们,然而,在类内部,这种限制并不存在。&lt;&#x2F;p&gt;
&lt;p&gt;关于如何排序,下面有两种观点:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;首先列出你的私有成员，然后列出你的公有成员函数。这遵循了先声明后使用的传统风格。任何查看你类代码的人可以看到你在使用数据成员之前是如何定义它们的，这可以使阅读和理解实现细节变得更加容易。&lt;&#x2F;li&gt;
&lt;li&gt;首先列出你的公共成员，然后将私有成员放在底部。因为使用你类的人关心的是公共接口，所以把公共成员放在前面可以让他们需要的信息放在顶部，而把实现细节（这些细节是最不重要的）放在最后。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在现代C++中,第二种方式更为推荐,尤其是在团队开发中。所以 &lt;strong&gt;最佳实践:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先声明公共成员,接着声明受保护成员,最后声明私有成员。这样可以突出公共接口并弱化实现细节。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在&lt;code&gt;Google C++&lt;&#x2F;code&gt;风格指南中对这部分有更加详细的阅读,可以自己看看[Google C++style guide](&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;google.github.io&#x2F;styleguide&#x2F;cppguide.html#Declaration_Order&quot;&gt;Google C++ style guide&lt;&#x2F;a&gt;:)&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>C++游戏开发基础-深入解析std::optional</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-std-optional/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-std-optional/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-std-optional/">&lt;p&gt;考虑下面这样一个函数:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;doIntDivision&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; y;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果调用者传入一个语义上无效的值（例如 &lt;code&gt;y&lt;&#x2F;code&gt; = &lt;code&gt;0&lt;&#x2F;code&gt; ），此函数无法计算一个返回值（因为除以 0 在数学上是未定义的）。在这种情况下我们该怎么办？&lt;&#x2F;p&gt;
&lt;p&gt;这种情况下,通常的做法是让函数检测错误,然后将错误返回给调用者以适当的方式处理。比如;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;函数返回一个bool值类型,表示成功或者失败!&lt;&#x2F;li&gt;
&lt;li&gt;让一个有返回值的函数返回一个哨兵值（一个特殊的值，该值不会出现在函数可能返回的其他值的集合中），以此来指示错误。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以下示例中， &lt;code&gt;reciprocal()&lt;&#x2F;code&gt; 函数在用户为 &lt;code&gt;x&lt;&#x2F;code&gt; 传递语义上无效的参数时返回值 &lt;code&gt;0.0&lt;&#x2F;code&gt; （这种情况在其他情况下不会发生）&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reciprocal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果x在语义上无效
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 返回0.0作为前哨指示发生错误的哨兵标识
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testReciprocal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reciprocal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;     std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The reciprocal of &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;         std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;         std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;undefined&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testReciprocal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testReciprocal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testReciprocal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;尽管这是一个不错的解决方案,但也存在一些潜在的不足:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;作为程序员必须知道函数使用哪个哨兵值来表示错误;&lt;&#x2F;li&gt;
&lt;li&gt;同一个函数的不同版本可能会使用不同的哨兵值;&lt;&#x2F;li&gt;
&lt;li&gt;此方法不适用于所有可能的哨兵值都是有效返回值的函数。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;再考虑我们上面的 &lt;code&gt;doIntDivision()&lt;&#x2F;code&gt; 函数。如果用户传入 &lt;code&gt;0&lt;&#x2F;code&gt; 作为 &lt;code&gt;y&lt;&#x2F;code&gt; 的值，它可能返回什么值？我们不能使用 &lt;code&gt;0&lt;&#x2F;code&gt; ，因为 &lt;code&gt;0&lt;&#x2F;code&gt; 除以任何数都不会得到 &lt;code&gt;0&lt;&#x2F;code&gt; 作为有效结果。实际上，并不存在我们无法返回且无法自然出现的值。&lt;&#x2F;p&gt;
&lt;p&gt;那么,如果要使用哨兵值表示法,我们可以选择一些不常见的返回值作为哨兵,并用它来表示错误信息的标识;比如,采用指定类型的极值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;doIntDivision&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int a&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; std::numeric_limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lowest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; b;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;::lowest()&lt;&#x2F;code&gt; 是一个返回类型 &lt;code&gt;T&lt;&#x2F;code&gt; 的最负值的函数,相对应的还有&lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;::max()&lt;&#x2F;code&gt; 对应函数（&lt;code&gt;std::numeric_limits&amp;lt;T&amp;gt;::max()&lt;&#x2F;code&gt; 函数返回类型 &lt;code&gt;T&lt;&#x2F;code&gt; 的最大正值）&lt;&#x2F;p&gt;
&lt;p&gt;在上面的实例中,如果 &lt;code&gt;doIntDivision()&lt;&#x2F;code&gt; 无法继续执行，我们返回 &lt;code&gt;std::numeric_limits&amp;lt;int&amp;gt;::lowest()&lt;&#x2F;code&gt; ，这将返回最负的整数值给调用者以指示函数执行失败。&lt;&#x2F;p&gt;
&lt;p&gt;虽然这是可行的一种方式,当它存在两个缺点:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;每次调用这个函数时，都需要测试返回值是否与 &lt;code&gt;std::numeric_limits&amp;lt;int&amp;gt;::lowest()&lt;&#x2F;code&gt; 相等以判断是否失败。这既繁琐又难看。&lt;&#x2F;li&gt;
&lt;li&gt;考虑这样一种情况,如果用户调用 &lt;code&gt;doIntDivision(std::numeric_limits&amp;lt;int&amp;gt;::lowest(), 1)&lt;&#x2F;code&gt; ，返回的结果 &lt;code&gt;std::numeric_limits&amp;lt;int&amp;gt;::lowest()&lt;&#x2F;code&gt; 将无法明确地表明函数是成功还是失败。当然这种问题的出现取决于实际的使用方式,也许出现的几率不是很大,但不得不作为一个可能导致程序出现一些潜在危险的途径。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;其次,你可能也想到了,我们可以放弃使用这种返回哨兵值的方式来标识错误返回,并使用异常机制来进行。然而,异常本身也有其复杂性和性能开销,并不一定合适每一种类似的场景,起码对于我们正在讨论的这种情况来说未免有些过于繁琐了。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;std-optional&quot;&gt;std::optional&lt;a class=&quot;zola-anchor&quot; href=&quot;#std-optional&quot; aria-label=&quot;Anchor link for: std-optional&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;基于上面讨论的情况和各种解决方案,你可能也想到了,既然使用返回单个哨兵值的方式存在局限,那么我们是不是可以考虑返回两个值呢?一个用来标识函数是否成功,一个用于存储实际的返回值(取决于函数的执行结果)。&lt;&#x2F;p&gt;
&lt;p&gt;在C++17中引入了&lt;code&gt;std::optional&lt;&#x2F;code&gt;,这是一个类模版类型,实现了 可选值。也即是说,一个 &lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; 可以有类型为T的值,或者没有值。我们可以使用这个特性来实现上面这种双返回值的方案。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; for std::optional (C++17)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;doIntDivision&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; or return std::nullopt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt; b;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;result1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;doIntDivision&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;result1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Result 1: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Result 1: failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;result2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;doIntDivision&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;result2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Result 2: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;result2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Result 2: failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用 &lt;code&gt;std::optional&lt;&#x2F;code&gt; 非常容易。我们可以使用下面三种方式来初始化构造一个 &lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; ：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; o1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; o2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; o3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;std::nullopt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;要检查一个&lt;code&gt;std::optional&lt;&#x2F;code&gt;是否有值,我们可以选择下面方式之一:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;o1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;has_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 1.使用has_value()函数检查
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;o2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;2.使用隐式转换进行bool以检查O2是否具有值  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同样,要从&lt;code&gt;std::optional&lt;&#x2F;code&gt;中获取值,我们可以选择以下方式之一:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;o1; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;1. 解引用以获取存储在 o1 中的值（如果 o1 中没有值，则会导致未定义行为）。
&lt;&#x2F;span&gt;&lt;span&gt;std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; o2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;2. 调用 value() 以获取存储在 o2 中的值（如果 o2 中没有值，则会抛出 std::bad_optional_access 异常）。
&lt;&#x2F;span&gt;&lt;span&gt;std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; o3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 3.调用 value_or() 以获取存储在 o3 中的值（如果 o3 中没有值，则返回一个指定的默认值,这里返回5）。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;std::optional&lt;&#x2F;code&gt;用法看起来和指针有些相似,但是从语义上讲,他们存在不小的差异:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;指针具有引用语义,意味着它引用其他对象,赋值时复制的是指针,而不是对象。如果我们通过地址返回指针,复制回去的是指针本身而不是被指向的对象。 这就意味着我们不能通过地址返回局部对象,因为这会将该对象的地址复制回调用者,然后该对象会被销毁,导致返回的指针成为悬空指针。下面是一个简单的例子:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; lovalVal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;localVal;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::optional&lt;&#x2F;code&gt; 具有值语义，意味着它实际上包含其值，并且赋值会复制该值。如果我们按值返回一个 &lt;code&gt;std::optional&lt;&#x2F;code&gt; ，那么 &lt;code&gt;std::optional&lt;&#x2F;code&gt; （包括其中包含的值）会被复制回调用者。这意味着我们可以使用 &lt;code&gt;std::optional&lt;&#x2F;code&gt; 从函数返回一个值给调用者。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;考虑到这一点，让我们看看我们的示例是如何工作的。我们的 &lt;code&gt;doIntDivision()&lt;&#x2F;code&gt; 现在返回一个 &lt;code&gt;std::optional&amp;lt;int&amp;gt;&lt;&#x2F;code&gt; ，而不是一个 &lt;code&gt;int&lt;&#x2F;code&gt; 。在函数体内，如果我们检测到错误，我们将返回 &lt;code&gt;{}&lt;&#x2F;code&gt; ，这会隐式返回一个 &lt;code&gt;std::optional&lt;&#x2F;code&gt; ，其中不包含任何值。如果我们有一个值，我们将返回该值，这会隐式返回一个 &lt;code&gt;std::optional&lt;&#x2F;code&gt; ，其中包含该值。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;main()&lt;&#x2F;code&gt; 中，我们使用隐式转换为 bool 来检查我们返回的 &lt;code&gt;std::optional&lt;&#x2F;code&gt; 是否有值。如果有值，我们解引用 &lt;code&gt;std::optional&lt;&#x2F;code&gt; 对象以获取值。如果没有值，我们执行错误条件。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;fan-hui-std-optionalde-you-que-dian&quot;&gt;返回&lt;code&gt;std::optional&lt;&#x2F;code&gt;的优缺点&lt;a class=&quot;zola-anchor&quot; href=&quot;#fan-hui-std-optionalde-you-que-dian&quot; aria-label=&quot;Anchor link for: fan-hui-std-optionalde-you-que-dian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;好处多多:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有效使用&lt;code&gt; std::optional&lt;&#x2F;code&gt; 可以明确地表示一个函数可能返回一个值，也可能不返回值。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不需要记住哪个值是作为哨兵值返回的;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;语法简洁直观。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;一些缺点:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;我们必须确保&lt;code&gt;std::optional&lt;&#x2F;code&gt;包含一个值再去执行获取的操作,否则解引用一个不包含值的&lt;code&gt;std::optional&lt;&#x2F;code&gt;将会发生为定义行为。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;std::optional&lt;&#x2F;code&gt;无法提供关于函数失败原因的信息。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果需要,请返回一个 &lt;code&gt;std::optional&lt;&#x2F;code&gt; （而不是哨兵值），除非你的函数需要返回有关失败原因的额外信息。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-yong-std-optional-zuo-wei-ke-xuan-han-shu-can-shu&quot;&gt;&lt;strong&gt;使用&lt;&#x2F;strong&gt; &lt;code&gt;std::optional&lt;&#x2F;code&gt; &lt;strong&gt;作为可选函数参数&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#shi-yong-std-optional-zuo-wei-ke-xuan-han-shu-can-shu&quot; aria-label=&quot;Anchor link for: shi-yong-std-optional-zuo-wei-ke-xuan-han-shu-can-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在之前的文章中提到过,如何使用通过地址传递来允许函数接受一个“可选”的参数（即调用者可以传递 &lt;code&gt;nullptr&lt;&#x2F;code&gt; 来表示“没有参数”或一个对象）。然而，这种方法的一个缺点是，非 nullptr 参数必须是 lvalue(左值)（以便其地址可以传递给函数）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;processValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Value: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;No value provided.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;processValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 传入一个左值的地址
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;processValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 传入 nullptr 表示无参数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误示例: 传入右值（临时值）的地址
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; processValue(&amp;amp;5); &#x2F;&#x2F; 编译错误，5 是一个右值，没有地址
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;更好的做法是,使用 &lt;code&gt;std::optional&lt;&#x2F;code&gt; 使参数可选，而不需要依赖 &lt;code&gt;nullptr&lt;&#x2F;code&gt; 和指针传递。例如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印用户的ID号，如果未提供ID号，则输出“未知”
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; std::nullopt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your ID number is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果提供了ID，解引用并打印
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your ID number is not known.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果没有提供ID，输出“未知”
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 我们还不知道用户的ID号
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;userid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;userid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 现在我们知道用户的ID号
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printIDNumber&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;62&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 我们也可以传递一个右值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这种用法有两个优点;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;它有效的说明了该参数是可选的。&lt;&#x2F;li&gt;
&lt;li&gt;我们以传递一个右值,因为&lt;code&gt;std::optional&lt;&#x2F;code&gt;会生成一个副本。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;然而，因为 &lt;code&gt;std::optional&lt;&#x2F;code&gt; 会复制其参数，当 &lt;code&gt;T&lt;&#x2F;code&gt; 是一个复制成本高的类型（比如 &lt;code&gt;std::string&lt;&#x2F;code&gt; ）时，这就会变得有问题。在使用普通函数参数时，我们通过将参数改为 &lt;code&gt;const lvalue reference&lt;&#x2F;code&gt; 的方式来解决这个问题，这样就不会进行复制。不幸的是，截至 C++23， &lt;code&gt;std::optional&lt;&#x2F;code&gt; 仍然不支持引用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; 适合用于小而简单的类型（如&lt;code&gt;int、float、enum&lt;&#x2F;code&gt;等）作为可选参数，因为它会将值直接存储在 &lt;code&gt;optional &lt;&#x2F;code&gt;对象内部。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于较大的对象或复杂类型（如大型结构体、类对象），按值传递（pass by value）会导致拷贝整个对象，可能影响性能。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;当 &lt;code&gt;T&lt;&#x2F;code&gt; 是复杂对象时，更好的选择是使用指针（&lt;code&gt;const T*&lt;&#x2F;code&gt;），这样只传递对象的地址，而不是对象本身，避免了不必要的拷贝。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;const T*&lt;&#x2F;code&gt; 同样可以使用 &lt;code&gt;nullptr&lt;&#x2F;code&gt; 表示“无值”的情况，实现可选参数的效果。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;因此，建议仅在通常会按值传递 &lt;code&gt;T&lt;&#x2F;code&gt; 时，使用 &lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; 作为可选参数。否则，请使用 &lt;code&gt;const T*&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;最佳实践:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;优先使用函数重载处理可选函数参数（如果可能）。否则，对于可选参数，使用 &lt;code&gt;std::optional&amp;lt;T&amp;gt;&lt;&#x2F;code&gt; 。如果 &lt;code&gt;T&lt;&#x2F;code&gt; 的复制代价高昂，请优先使用 &lt;code&gt;const T*&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>[C++游戏开发基础]:引用返回和地址返回</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-yin-yong-fan-hui-he-di-zhi-fan-hui/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-yin-yong-fan-hui-he-di-zhi-fan-hui/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-yin-yong-fan-hui-he-di-zhi-fan-hui/">&lt;p&gt;在之前的文章中已经提到过,当使用按值传递时会创建参数的一个副本到函数中。对于基本类型（复制成本较低），这是可以的。但对于类类型（如 &lt;code&gt;std::string&lt;&#x2F;code&gt; ），复制通常成本较高。我们可以通过使用（const）引用传递（或按地址传递）来避免进行昂贵的复制。&lt;&#x2F;p&gt;
&lt;p&gt;这篇文章主要介绍一些在关于使用引用返回和地址返回的基础知识。&lt;&#x2F;p&gt;
&lt;p&gt;下面是一个使用引用返回的程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getProgramName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 返回一个常量引用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static const&lt;&#x2F;span&gt;&lt;span&gt; std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;s_programName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Calculator&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 具有静态存储期，在程序结束时销毁
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; s_programName;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;This program is named &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getProgramName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;fan-hui-yin-yong-de-dui-xiang-bi-xu-zai-han-shu-fan-hui-hou-cun-zai&quot;&gt;返回引用的对象必须在函数返回后存在&lt;a class=&quot;zola-anchor&quot; href=&quot;#fan-hui-yin-yong-de-dui-xiang-bi-xu-zai-han-shu-fan-hui-hou-cun-zai&quot; aria-label=&quot;Anchor link for: fan-hui-yin-yong-de-dui-xiang-bi-xu-zai-han-shu-fan-hui-hou-cun-zai&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;使用引用返回有一个重要的注意事项:程序员必须确保被引用的对象在返回引用的函数之后仍然存在,否则将会出现返回的引用悬空的情况(引用一个已被销毁的对象),使用该引用会导致为定义行为。&lt;&#x2F;p&gt;
&lt;p&gt;在上面的程序中,因为 &lt;code&gt;s_programName&lt;&#x2F;code&gt; 使用了&lt;code&gt;static&lt;&#x2F;code&gt;关键字修饰,具有静态持续时间，它的生命周期 &lt;code&gt;s_programName&lt;&#x2F;code&gt; 将存在到程序结束。当 &lt;code&gt;main()&lt;&#x2F;code&gt; 访问返回的引用时，它实际上是在访问 &lt;code&gt;s_programName&lt;&#x2F;code&gt; ，这是可以的，因为 &lt;code&gt;s_programName&lt;&#x2F;code&gt; 不会在之后被销毁。&lt;&#x2F;p&gt;
&lt;p&gt;现在让我们修改上述程序，以展示当我们的函数返回一个悬垂引用时会发生什么：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getProgramName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;programName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Calculator&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 现在是一个非静态局部变量，在函数结束时销毁
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; programName;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;这个程序的名称是 &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getProgramName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 未定义行为
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;程序的结果未定义。当 &lt;code&gt;getProgramName()&lt;&#x2F;code&gt; 返回时，返回一个绑定到局部变量 &lt;code&gt;programName&lt;&#x2F;code&gt; 的引用。然后，因为 &lt;code&gt;programName&lt;&#x2F;code&gt; 是一个具有自动持续时间的局部变量，所以在函数结束时销毁 &lt;code&gt;programName&lt;&#x2F;code&gt; 。这意味着返回的引用现在是悬垂的，在 &lt;code&gt;main()&lt;&#x2F;code&gt; 函数中使用 &lt;code&gt;programName&lt;&#x2F;code&gt; 会导致未定义的行为。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对象通过引用返回时必须超出返回引用的函数的作用域,否则将会产生悬空引用。不要通过引用返回非静态的局部变量或者临时变量。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lin-shi-dui-xiang-de-sheng-ming-zhou-qi-yan-chang-lifetime-extension-ji-zhi-bu-neng-kua-yue-han-shu-bian-jie-sheng-xiao&quot;&gt;临时对象的生命周期延长（lifetime extension）机制，不能跨越函数边界生效。&lt;a class=&quot;zola-anchor&quot; href=&quot;#lin-shi-dui-xiang-de-sheng-ming-zhou-qi-yan-chang-lifetime-extension-ji-zhi-bu-neng-kua-yue-han-shu-bian-jie-sheng-xiao&quot; aria-label=&quot;Anchor link for: lin-shi-dui-xiang-de-sheng-ming-zhou-qi-yan-chang-lifetime-extension-ji-zhi-bu-neng-kua-yue-han-shu-bian-jie-sheng-xiao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;临时对象:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;临时对象是在表达式求值过程中创建的，但没有名字的对象。&lt;&#x2F;li&gt;
&lt;li&gt;例如，&lt;code&gt;std::string(&quot;Hello&quot;)&lt;&#x2F;code&gt; 会创建一个临时的 &lt;code&gt;std::string&lt;&#x2F;code&gt; 对象。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;lifetime extension:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在某些特定情况下,C++编译器会延长临时对象的生命周期,以避免悬空引用;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;考虑下面这个返回临时变量的引用的例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;returnByConstReference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 返回临时对象的常量引用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;returnByConstReference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ref; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 未定义行为
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上述程序中， &lt;code&gt;returnByConstReference()&lt;&#x2F;code&gt; 返回一个整型字面量，但函数的返回类型是 &lt;code&gt;const int&amp;amp;&lt;&#x2F;code&gt; 。这导致创建并返回一个绑定到包含值 5 的临时对象的临时引用。&lt;&#x2F;p&gt;
&lt;p&gt;由于 &lt;code&gt;returnByConstReference()&lt;&#x2F;code&gt; 返回的是临时对象的引用，而临时对象在函数返回后立即被销毁，因此 &lt;code&gt;ref&lt;&#x2F;code&gt; 变成了一个悬空引用（dangling reference）。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;当你在一个函数内部创建一个临时对象，并返回该临时对象的引用时，这个引用在函数外部使用时，其引用的对象可能已经被销毁，从而导致未定义行为。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;所谓的函数边界指的是函数的开始和结束。在函数内部创建的局部变量和临时对象，在函数结束时通常会被销毁。换句话说,如果你在一个函数中创建了一个临时对象，并返回了对它的引用，那么不要期望这个引用在函数外部仍然有效。因为临时对象的生命周期在函数结束时就结束了。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;bu-yao-tong-guo-yin-yong-fan-hui-fei-constjing-tai-ju-bu-bian-liang&quot;&gt;不要通过引用返回非&lt;code&gt;const&lt;&#x2F;code&gt;静态局部变量&lt;a class=&quot;zola-anchor&quot; href=&quot;#bu-yao-tong-guo-yin-yong-fan-hui-fei-constjing-tai-ju-bu-bian-liang&quot; aria-label=&quot;Anchor link for: bu-yao-tong-guo-yin-yong-fan-hui-fei-constjing-tai-ju-bu-bian-liang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在第一个实例中,通过引用返回一个 const 静态局部变量，以简单的方式说明通过引用返回的机制。然而，通过引用返回非 const 静态局部变量相当不规范，通常应避免。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getNextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;s_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 注意：变量是非 const 的
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;s_x; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 生成下一个 id
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; s_x; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 并返回它的引用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;id1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getNextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; id1 是一个引用
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;id2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getNextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; id2 是一个引用
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; id1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; id2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;22&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;程序之后后打印22,这是因为id1和id2引用的是同一个对象静态变量 &lt;code&gt;s_x&lt;&#x2F;code&gt; ），所以当任何内容（例如 &lt;code&gt;getNextId()&lt;&#x2F;code&gt; ）修改该值时，所有引用现在都访问的是修改后的值。&lt;&#x2F;p&gt;
&lt;p&gt;此示例可以通过将 &lt;code&gt;id1&lt;&#x2F;code&gt; 和 &lt;code&gt;id2&lt;&#x2F;code&gt; 设置为普通变量（而不是引用）来修复，这样它们将保存返回值的副本而不是 &lt;code&gt;s_x&lt;&#x2F;code&gt; 的引用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getNextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;s_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;s_x;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; s_x;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;id1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getNextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; id1 现在是一个普通变量，并接收 getNextId() 通过引用返回的值的拷贝
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;id2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getNextId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; id1 现在是一个普通变量，并接收 getNextId() 通过引用返回的值的拷贝
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; id1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; id2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面的示例中， &lt;code&gt;getNextId()&lt;&#x2F;code&gt; 返回一个引用，但 &lt;code&gt;id1&lt;&#x2F;code&gt; 和 &lt;code&gt;id2&lt;&#x2F;code&gt; 是非引用变量。在这种情况下，返回的引用的值被复制到普通变量中。因此，这个程序打印：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;12&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;tong-guo-yin-yong-fan-hui-yin-yong-can-shu&quot;&gt;通过引用返回引用参数&lt;a class=&quot;zola-anchor&quot; href=&quot;#tong-guo-yin-yong-fan-hui-yin-yong-can-shu&quot; aria-label=&quot;Anchor link for: tong-guo-yin-yong-fan-hui-yin-yong-can-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;如果一个参数是通过引用传递给函数的，那么安全地通过引用返回该参数是没什么问题的,但是为了将一个参数传递给函数，该参数必须在调用者的作用域中存在。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 接受两个 std::string 对象，返回按字母顺序排列时较小的那个
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;firstAlphabetical&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; b; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用 operator&amp;lt; 进行字典序比较，确定哪个字符串在前
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;world &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;World&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;firstAlphabetical&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hello, world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出按字母顺序排列时较小的字符串
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Hello&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果我们使用按值传递和按值返回，我们将为 std::string 创建多达 3 个副本（每个参数一个，返回值一个）。通过使用按引用传递&#x2F;按引用返回，我们可以避免这些副本。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ke-yi-jiang-tong-guo-const-yin-yong-chuan-di-de-you-zhi-yi-const-yin-yong-fan-hui&quot;&gt;可以将通过 const 引用传递的右值以 const 引用返回。&lt;a class=&quot;zola-anchor&quot; href=&quot;#ke-yi-jiang-tong-guo-const-yin-yong-chuan-di-de-you-zhi-yi-const-yin-yong-fan-hui&quot; aria-label=&quot;Anchor link for: ke-yi-jiang-tong-guo-const-yin-yong-chuan-di-de-you-zhi-yi-const-yin-yong-fan-hui&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;当一个 const 引用的参数是一个 rvalue 时，仍然可以通过 const 引用返回该参数。这是因为右值直到它们被创建的表达式结束才会被销毁。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getHello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getHello&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; s;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这种情况下， &lt;code&gt;getHello()&lt;&#x2F;code&gt; 返回一个 &lt;code&gt;std::string&lt;&#x2F;code&gt; 的值，这是一个右值。然后使用这个右值来初始化 &lt;code&gt;s&lt;&#x2F;code&gt; 。在初始化 &lt;code&gt;s&lt;&#x2F;code&gt; 之后右值被销毁。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;diao-yong-zhe-tong-guo-yin-yong-xiu-gai-zhi&quot;&gt;调用者通过引用修改值&lt;a class=&quot;zola-anchor&quot; href=&quot;#diao-yong-zhe-tong-guo-yin-yong-xiu-gai-zhi&quot; aria-label=&quot;Anchor link for: diao-yong-zhe-tong-guo-yin-yong-xiu-gai-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;当一个参数通过非const引用传递给函数时,函数可以使用该引用来修改参数的值。同样,当从函数返回一个非const引用时,调用者可以使用该引用来修改返回的值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; b;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;a, b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;函数最后将会打印:4 7&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;fan-hui-di-zhi&quot;&gt;返回地址&lt;a class=&quot;zola-anchor&quot; href=&quot;#fan-hui-di-zhi&quot; aria-label=&quot;Anchor link for: fan-hui-di-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;地址返回几乎与引用返回相同，只是返回的是对象的指针而不是对象的引用。返回地址的方式与通过引用返回有相同的注意事项——通过地址返回的对象必须比返回地址的函数的作用域长，否则调用者将收到一个悬空指针。&lt;&#x2F;p&gt;
&lt;p&gt;地址返回比引用返回的主要优势是，如果没有有效的对象返回，我们可以让函数返回 &lt;code&gt;nullptr&lt;&#x2F;code&gt; 。例如，假设我们有一个学生列表，我们想要在列表中搜索。如果我们找到了我们正在寻找的学生，我们可以返回一个指向表示匹配学生的对象的指针。如果没有找到匹配的学生，我们可以返回 &lt;code&gt;nullptr&lt;&#x2F;code&gt; 来表示未找到匹配的学生对象。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢阅读,欢迎指正!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>[C++游戏开发基础]指针的基本概念理解</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-zhi-zhen-de-ji-ben-gai-nian-li-jie/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-zhi-zhen-de-ji-ben-gai-nian-li-jie/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-zhi-zhen-de-ji-ben-gai-nian-li-jie/">&lt;p&gt;对于学习&lt;code&gt;C++&lt;&#x2F;code&gt;的人来说,指针是一个绕不过去有比较难以理解的点,特别将它揪出来单独学习。&lt;&#x2F;p&gt;
&lt;p&gt;考虑下面代码,这是一个简单的变量声明;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; char 占用一个字节内存
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于上面的代码,简单理解就是当该代码被执行时,程序会将一块内存从 &lt;code&gt;RAM&lt;&#x2F;code&gt; 分配给这个对象。为了举例说明，假设变量 x 被分配到了内存地址 100。每当我们在表达式或语句中使用变量 x 时，程序将访问内存地址 100 处存储的值。&lt;&#x2F;p&gt;
&lt;p&gt;关于变量的好处是,我们不必担心分配了哪些特定的内存地址或需要多少字节来存储对象的值,只需要通过其给定的标识符来引用变量即可,编译器会将此名称转换为适当分配的内存地址。并负责所有的地址管理。&lt;&#x2F;p&gt;
&lt;p&gt;对于引用，这一点也是成立的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 假设这被分配了内存地址 140
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ref 是 x 的左值引用（当与类型一起使用时，&amp;amp; 表示左值引用）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为&lt;code&gt;ref&lt;&#x2F;code&gt;充当&lt;code&gt;x&lt;&#x2F;code&gt;的别名，因此每当我们使用&lt;code&gt;ref&lt;&#x2F;code&gt;时，该程序将转到内存地址&lt;code&gt;100&lt;&#x2F;code&gt;以访问该值。同样，编译器会自己管理地址信息,我们不需要操心。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;qu-di-zhi-fu&quot;&gt;取地址符(&amp;amp;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#qu-di-zhi-fu&quot; aria-label=&quot;Anchor link for: qu-di-zhi-fu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;默认情况下,变量使用的内存地址并不会暴露给我们,但是可以使用取地址符&amp;amp;来实现饭绘其内存地址。用法很简单:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个整型变量 x，并初始化为 5
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印变量 x 的值 (5)
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印变量 x 的内存地址
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下面是在我电脑上的输出:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202502181934802.png&quot; alt=&quot;image-20250218193337467&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;内存地址通常打印出来是十六进制的值,对于使用多个字节内存的对象，取地址操作符（&amp;amp;）将返回对象所使用的第一个字节的内存地址。（如一个数组、结构体、类等）使用 &amp;amp; 操作时，它将返回该对象的第一个字节的内存地址。&lt;&#x2F;p&gt;
&lt;p&gt;由于&amp;amp;符号在&lt;code&gt;c++&lt;&#x2F;code&gt;中的使用很多,因此具有不同的含义,具体需要工具实际使用上下文去判断;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;当 &amp;amp; 跟随在类型名后面时，它表示一个左值引用： &lt;code&gt;int&amp;amp; ref&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;当在表达式中的单一上下文中使用时，它表示一个地址： &lt;code&gt;std::cout &amp;lt;&amp;lt; &amp;amp;x&lt;&#x2F;code&gt; 。&lt;&#x2F;li&gt;
&lt;li&gt;当在多个表达式中进行运算使用时,它表示位运算符:&lt;code&gt;std::cout &amp;lt;&amp;lt; x &amp;amp; y&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;解引用操作符（*）&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;当我们拥有一个地址,便可以使用解引用操作符来访问存储在这个地址上的值;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印变量 x 的值
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印变量 x 的内存地址
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印变量 x 的内存地址处的值（括号不是必需的，但有助于提高可读性）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202502182018707.png&quot; alt=&quot;image-20250218201820622&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;取地址符&amp;amp;和解引用符*可以作为一个一对反相操作来使用,一个获取地址,一个获取地址所在的值;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;但是有没有一种可能,我们获取到某个变量的内存地址,然后通过解引用再去获取这个地址的值似乎有些多余了, 毕竟,如果要获取这个值,为什么不直接用变量来访问呢?所以,接下来该谈论指针了。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;指针&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;指针是将内存地址作为其值的对象。指针是一个对象，它保存一个内存地址（通常是另一个变量的地址）作为其值。这使得我们可以存储其他对象的地址，并在稍后使用该地址。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️我们这里谈论的指针是指原始指针,关于智能指针的内容会在后面的文章中学习。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;指定指针的类型（例如 int*）称为 &lt;strong&gt;指针类型&lt;&#x2F;strong&gt;。就像引用类型是使用 &lt;strong&gt;&amp;amp;&lt;&#x2F;strong&gt; 字符声明，指针类型是使用 ***** 字符声明：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个普通的 int 类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个 int 值的左值引用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个指向 int 值的指针（保存一个整数值的地址）
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;创建一个指针变量:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 普通变量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个整数的引用（绑定到 x）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个指向整数的指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;声明指针类型时,最佳的实践是将星号放在类型名称的旁边。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;尽管通常不建议在同一行声明多个变量，但如果你这么做，必须将星号（*）与每个变量一起使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr1, ptr2;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误：ptr1 是指向 int 的指针，但 ptr2 只是一个普通的 int!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr3, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr4;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 正确：ptr3 和 ptr4 都是指向 int 的指针
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;-2&quot;&gt;指针的初始化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;像普通的变量一样,默认情况下的指针不会初始化。尚未初始化的指针又称为野指针。指针与普通变量一样，如果没有明确初始化，它们会包含随机的内存地址，这些地址通常是垃圾值。这个垃圾值指向未知的位置，尝试解引用一个野指针将导致程序崩溃或行为不可预测。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个未初始化的指针（保存一个垃圾地址）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个空指针
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个通过变量 x 的地址初始化的指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因为指针保存的是地址，所以当我们初始化或赋值给一个指针时，赋的值必须是一个地址。通常，指针用于保存另一个变量的地址（我们可以使用取地址操作符 &amp;amp; 来获取这个地址）。&lt;&#x2F;p&gt;
&lt;p&gt;一旦指针保存了另一个对象的地址，我们就可以使用解引用操作符 * 来访问该地址中的值。例如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印变量 x 的值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr 保存 x 的地址
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用解引用操作符打印 ptr 保存的地址处的值（即 x 的值）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就像引用的类型必须与被引用的对象类型匹配一样，指针的类型也必须与被指向对象的类型匹配：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个整数变量 x
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20.5&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 一个双精度浮点数变量 y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 正确：ptr1 是指向 int 类型的指针，指向 x
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;y; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 正确：ptr2 是指向 double 类型的指针，指向 y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误：试图将 int 类型的指针指向 double 类型的变量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; int* ptr3 = &amp;amp;y;  &#x2F;&#x2F; 错误：类型不匹配
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误：试图将 double 类型的指针指向 int 类型的变量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; double* ptr4 = &amp;amp;x; &#x2F;&#x2F; 错误：类型不匹配
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出 ptr1 解引用后的值，即 x 的值
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出 ptr2 解引用后的值，即 y 的值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;另外,禁止使用字面值来初始化指针。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 不可以
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0x0012FF7C &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 不可以，0x0012FF7C 被当作一个整数字面值处理
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;指针的赋值&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;我们可以通过两种方式使用指针赋值：&lt;&#x2F;p&gt;
&lt;p&gt;​	1.	&lt;strong&gt;改变指针指向的对象&lt;&#x2F;strong&gt;（通过给指针赋一个新的地址）&lt;&#x2F;p&gt;
&lt;p&gt;​	2.	&lt;strong&gt;改变指针指向的值&lt;&#x2F;strong&gt;（通过给解引用的指针赋一个新值）&lt;&#x2F;p&gt;
&lt;p&gt;首先，让我们来看一个例子，展示如何改变指针指向不同的对象：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr 初始化为指向 x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印指针指向地址的值（即 x 的值）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;y; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将 ptr 改为指向 y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印指针指向地址的值（即 y 的值）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面的例子中，我们定义了指针 &lt;code&gt;ptr&lt;&#x2F;code&gt;，并用 x 的地址初始化它，然后通过解引用指针打印指针指向的值（即 5）。接着，我们使用赋值操作符将 &lt;code&gt;ptr&lt;&#x2F;code&gt; 保存的地址更改为 y 的地址。然后我们再次解引用指针打印指针指向的值（现在是 6）。&lt;&#x2F;p&gt;
&lt;p&gt;现在让我们看看如何使用指针来改变指向对象的值：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用 x 的地址初始化 ptr
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 x 的值
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 ptr 指向地址的值（即 x 的地址）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将 ptr 指向地址的对象（x）的值修改为 6（注意这里是解引用 ptr）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印修改后的 x 的值
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 ptr 指向地址的值（即 x 的地址）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;5&lt;&#x2F;p&gt;
&lt;p&gt;5&lt;&#x2F;p&gt;
&lt;p&gt;6&lt;&#x2F;p&gt;
&lt;p&gt;6&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在这个例子中，我们定义了指针 &lt;code&gt;ptr&lt;&#x2F;code&gt;，并用 &lt;code&gt;x&lt;&#x2F;code&gt; 的地址初始化它，然后打印 &lt;code&gt;x&lt;&#x2F;code&gt; 和 &lt;code&gt;*ptr&lt;&#x2F;code&gt; 的值（都是 5）。由于 &lt;code&gt;*ptr&lt;&#x2F;code&gt; 返回一个左值，我们可以在赋值语句的左侧使用它，正如我们所做的那样，通过 &lt;code&gt;*ptr = 6&lt;&#x2F;code&gt;; 来改变 &lt;code&gt;ptr&lt;&#x2F;code&gt; 指向的值（将 x 的值改为 6）。接着我们再次打印 x 和 &lt;code&gt;*ptr&lt;&#x2F;code&gt; 的值，以展示值已经按预期更新。&lt;&#x2F;p&gt;
&lt;p&gt;指针和左值引用的行为类似。考虑以下程序：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 引用绑定到 x
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 指针指向 x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 x 的值
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 ref 的值
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 ptr 指向的值（即 x 的值）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 修改 ref 所指向的值
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印修改后的 x 的值（6）
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印修改后的 ref 的值（6）
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 ptr 指向的值（6）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 修改 ptr 指向的值
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印修改后的 x 的值（7）
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ref &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印修改后的 ref 的值（7）
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印修改后的 ptr 指向的值（7）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因此，指针和引用都提供了一种间接访问另一个对象的方式。它们的主要区别在于，指针需要显式地获取要指向的地址，并且必须显式地解引用指针来获取值。而引用则是隐式地进行地址获取和解引用。&lt;&#x2F;p&gt;
&lt;p&gt;这里还有一些值得提到的指针和引用之间的其他差异：&lt;&#x2F;p&gt;
&lt;p&gt;​	•	&lt;strong&gt;引用必须初始化&lt;&#x2F;strong&gt;，而&lt;strong&gt;指针不要求初始化&lt;&#x2F;strong&gt;（但最好初始化）。&lt;&#x2F;p&gt;
&lt;p&gt;​	•	&lt;strong&gt;引用不是对象&lt;&#x2F;strong&gt;，而&lt;strong&gt;指针是对象&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;​	•	&lt;strong&gt;引用不能重新绑定&lt;&#x2F;strong&gt;（不能改变引用指向其他对象），而&lt;strong&gt;指针可以改变它们指向的对象&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;​	•	&lt;strong&gt;引用必须始终绑定到一个对象&lt;&#x2F;strong&gt;，而&lt;strong&gt;指针可以指向空&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-4&quot;&gt;地址运算符返回指针&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;值得注意的是，地址运算符（&amp;amp;）并不会将其操作数的地址作为字面值返回（因为 C++ 不支持地址字面值）。相反，它返回一个指向操作数的指针（该指针的值是操作数的地址）。换句话说，给定变量 int x，&amp;amp;x 返回一个 int*，它保存着 x 的地址。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;typeinfo&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;typeid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 x 的类型
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;typeid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印 &amp;amp;x 的类型
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;int&lt;&#x2F;p&gt;
&lt;p&gt;int*&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;使用 GCC 时，输出结果为 i（表示 int）和 pi（表示指向 int 的指针）。由于 typeid().name() 的结果依赖于编译器，因此你的编译器可能会打印不同的内容，但它们的含义是相同的。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-5&quot;&gt;指针大小&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;指针的大小取决于可执行文件所编译的架构——&lt;code&gt;32&lt;&#x2F;code&gt;位的可执行文件使用&lt;code&gt;32&lt;&#x2F;code&gt;位的内存地址——因此，在32位机器上，指针的大小是&lt;code&gt;32&lt;&#x2F;code&gt;位（即4字节）。而在&lt;code&gt;64&lt;&#x2F;code&gt;位的可执行文件中，指针的大小将是&lt;code&gt;64&lt;&#x2F;code&gt;位（即&lt;code&gt;8&lt;&#x2F;code&gt;字节）。&lt;&#x2F;p&gt;
&lt;p&gt;请注意，这一点与指针所指向的对象的大小无关：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 假设为32位应用程序
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;chPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; char 类型通常占 1 字节
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;iPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; int 类型通常占 4 字节
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;long double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ldPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; long double 类型通常占 8 或 12 字节
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;chPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印指针的大小，输出为 4
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;iPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印指针的大小，输出为 4
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ldPtr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印指针的大小，输出为 4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;指针的大小总是相同的。这是因为指针只是一个内存地址，而访问存储器地址所需的位数是恒定的。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-6&quot;&gt;悬空指针&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;和悬空引用类似，悬空指针是一个持有已失效对象地址的指针（例如，因为对象已经被销毁）。&lt;&#x2F;p&gt;
&lt;p&gt;解引用一个悬空指针（例如，为了打印指针指向的值）将导致未定义的行为，因为你正在尝试访问一个已不再有效的对象。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 有效：打印 x 的值 5
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;y; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr 现在指向 y
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 有效：打印 y 的值 6
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; y 离开作用域，ptr 现在是悬空指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 未定义行为：解引用悬空指针，尝试访问已销毁的对象
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​	&lt;strong&gt;初始状态&lt;&#x2F;strong&gt;：指针 &lt;code&gt;ptr&lt;&#x2F;code&gt; 被初始化为指向变量&lt;code&gt; x&lt;&#x2F;code&gt;。然后，解引用 &lt;code&gt;ptr&lt;&#x2F;code&gt; 输出了 &lt;code&gt;x&lt;&#x2F;code&gt; 的值&lt;code&gt; 5&lt;&#x2F;code&gt;，这是有效的操作。&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;strong&gt;进入新的作用域&lt;&#x2F;strong&gt;：在新的作用域中，&lt;code&gt;y&lt;&#x2F;code&gt; 被创建并初始化为&lt;code&gt; 6&lt;&#x2F;code&gt;。然后，指针&lt;code&gt; ptr&lt;&#x2F;code&gt; 被重新赋值为指向 &lt;code&gt;y&lt;&#x2F;code&gt;。此时，解引用 &lt;code&gt;ptr&lt;&#x2F;code&gt; 输出了这是有效的操作。&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;strong&gt;离开作用域&lt;&#x2F;strong&gt;：变量 &lt;code&gt;y&lt;&#x2F;code&gt; 离开了作用域，&lt;code&gt;ptr&lt;&#x2F;code&gt; 指向的内存地址现在不再有效，指针变为悬空指针。&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;strong&gt;解引用悬空指针&lt;&#x2F;strong&gt;：最后，我们尝试解引用悬空指针 &lt;code&gt;ptr&lt;&#x2F;code&gt;，这会导致未定义的行为，因为 &lt;code&gt;ptr&lt;&#x2F;code&gt; 指向的对象已经不再有效。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢阅读!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>[C++游戏开发基础]:指针和const</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-zhi-zhen-he-const/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-zhi-zhen-he-const/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-zhi-zhen-he-const/">&lt;p&gt;之前的文章有说过,使用指针我们可以改变指针指向的内容(通过给指针赋一个新的地址)或者改变被保存地址的值(通过给解引用指针赋一个新值):&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建一个整数变量 x，初始值为 5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建一个指针 ptr，指向 x 的地址（非 const 指针）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建一个整数变量 y，初始值为 6
&lt;&#x2F;span&gt;&lt;span&gt;    ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;y;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将 ptr 指向 y 的地址，我们可以改变它指向的地址
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 通过指针修改 ptr 所指向地址的值，即将 y 的值改为 7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 程序成功结束
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么,如果我们想指向的值是&lt;code&gt;const&lt;&#x2F;code&gt;呢?&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; x 现在是常量，值为 5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 编译错误：不能将 const int* 转换为 int*，因为 x 是常量，不能修改它的值
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 程序正常结束
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码会出现编译错误，因为我们尝试将一个指向 &lt;code&gt;const int&lt;&#x2F;code&gt; 类型的指针赋值给一个普通的 &lt;code&gt;int*&lt;&#x2F;code&gt; 指针，&lt;code&gt;C++&lt;&#x2F;code&gt; 中不允许这样做。具体原因是 &lt;code&gt;const&lt;&#x2F;code&gt; 修饰符确保该变量的值在程序运行期间不能被修改，而普通的 &lt;code&gt;int*&lt;&#x2F;code&gt; 指针允许修改所指向的内容，所以会发生类型不匹配。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zhi-xiang-chang-liang-zhi-de-zhi-zhen&quot;&gt;指向常量值的指针&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhi-xiang-chang-liang-zhi-de-zhi-zhen&quot; aria-label=&quot;Anchor link for: zhi-xiang-chang-liang-zhi-de-zhi-zhen&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;指向常量值的指针（有时简称为指向 const 的指针）是一个（非 const）指针，它指向一个常量值。声明指向常量值的指针时,只需要在指针的数据类型之前使用&lt;code&gt;const&lt;&#x2F;code&gt;关键字。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 非法操作:不能更改const值
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面的示例中， &lt;code&gt;ptr&lt;&#x2F;code&gt; 指向一个 &lt;code&gt;const int&lt;&#x2F;code&gt; 。因为被指向的数据类型是 const，所以指向的值不能被更改。&lt;&#x2F;p&gt;
&lt;p&gt;然而,因此指向常量的指针本身不是常量(而是它的指向是一个常量),所以,我们可以通过给指针赋值=一个新的地址来改变指针指向的内容。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202502222247037.png&quot; alt=&quot;image-20250222224723856&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr指向一个值为const的int类型的变量地址
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;y; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 指向一个新的地址
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就像 &lt;code&gt;const&lt;&#x2F;code&gt; 引用一样，指向&lt;code&gt; const&lt;&#x2F;code&gt; 的指针也可以指向非 &lt;code&gt;const&lt;&#x2F;code&gt; 变量。指向 const 的指针将所指向的值视为常量，不管该地址上的对象最初是否被定义为&lt;code&gt; const&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;有点绕口,看个例子助消化:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 非 const 变量，x 的初始值为 5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ptr 是一个指向 const int 的指针，指向 x
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 不允许：因为 ptr 指向的是 &amp;quot;const int&amp;quot;，所以不能通过 ptr 修改值
&lt;&#x2F;span&gt;&lt;span&gt;    x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 允许：因为 x 是非 const 的，直接修改 x 的值是可以的
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 程序结束
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;**int x{ 5 };**这里定义了一个非 &lt;code&gt;const&lt;&#x2F;code&gt; 变量 x，并将其初始化为 5。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;const int* ptr { &amp;amp;x };&lt;&#x2F;strong&gt;：定义了一个指向 &lt;code&gt;const int&lt;&#x2F;code&gt; 类型的指针&lt;code&gt;ptr&lt;&#x2F;code&gt;，它指向变量 x 的地址。虽然 x 是一个非 &lt;code&gt;const &lt;&#x2F;code&gt;变量，但指针 &lt;code&gt;ptr&lt;&#x2F;code&gt; 被声明为指向 &lt;code&gt;const&lt;&#x2F;code&gt; 类型的对象。这样，&lt;code&gt;ptr&lt;&#x2F;code&gt; 不能修改所指向的值。&lt;&#x2F;li&gt;
&lt;li&gt;***ptr = 6;**这是一个编译错误。虽然 x 是非 &lt;code&gt;const&lt;&#x2F;code&gt; 的，但由于 &lt;code&gt;ptr&lt;&#x2F;code&gt; 是指向 &lt;code&gt;const int&lt;&#x2F;code&gt; 的指针，编译器禁止通过该指针修改 x 的值。这是因为 &lt;code&gt;ptr&lt;&#x2F;code&gt; 被声明为指向常量，所以它会将 x 视为常量&lt;&#x2F;li&gt;
&lt;li&gt;**x = 6;**这行代码是允许的，因为 &lt;code&gt;x&lt;&#x2F;code&gt; 是非&lt;code&gt; const&lt;&#x2F;code&gt; 的，直接通过变量名 x 修改其值没有问题。指针的 &lt;code&gt;const&lt;&#x2F;code&gt; 属性只影响通过指针访问数据时的行为，而不是通过普通的变量名。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;常量指针&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;基于上述这些理论不难想到,我们也可以使指针本身成为常量。这就是常量指针,该指针是指其地址初始化后不能再次被更改。和普通的常量定义的概念是一致的,不过是将这个概念用在了指针类型上。&lt;&#x2F;p&gt;
&lt;p&gt;声明一个常量指针,在指针声明中的星号后面使用&lt;code&gt;const&lt;&#x2F;code&gt;关键字即可:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;星号之后的const意味着这是const指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在上述情况下， &lt;code&gt;ptr&lt;&#x2F;code&gt; 是一个指向（非 const）int 值的 const 指针。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;就像一个普通的 const 变量一样，const 指针必须在定义时初始化，并且这个值不能通过赋值来改变：&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建一个整数变量 x，初始值为 5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建一个整数变量 y，初始值为 6
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; const 指针 ptr 被初始化为指向 x 的地址
&lt;&#x2F;span&gt;&lt;span&gt;    ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;y; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 错误：一旦初始化，const 指针就不能改变它指向的地址
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 程序正常结束
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然而，因为所指向的值是非 const 的，可以通过解引用 const 指针来更改所指向的值：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;最后,可以通过在类型和星号之前和之后都是用&lt;code&gt;const&lt;&#x2F;code&gt;关键字来声明一个指常量值的常量指针:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ptr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 指常量值的常量指针
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;一个指向常量值的常量指针不能改变其地址，也不能通过该指针改变它所指向的值。它只能解引用以获取它所指向的值。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;小结一下&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;一个非 &lt;code&gt;const&lt;&#x2F;code&gt; 指针（例如 &lt;code&gt;int* ptr&lt;&#x2F;code&gt; ）可以被分配另一个地址以改变它所指向的内容。&lt;&#x2F;li&gt;
&lt;li&gt;一个常量指针（例如 &lt;code&gt;int* const ptr&lt;&#x2F;code&gt; ）始终指向同一个地址，并且这个地址不能更改。&lt;&#x2F;li&gt;
&lt;li&gt;一个指向非 &lt;code&gt;const &lt;&#x2F;code&gt;值的指针（例如 &lt;code&gt;int* ptr&lt;&#x2F;code&gt; ）可以改变它所指向的值。这些指针不能指向 &lt;code&gt;const&lt;&#x2F;code&gt; 值。&lt;&#x2F;li&gt;
&lt;li&gt;一个指向常量值的指针（例如 &lt;code&gt;const int* ptr&lt;&#x2F;code&gt; ）在通过该指针访问时将值视为常量，因此不能更改它所指向的值。这些指针可以指向常量或非常量左值（但不能指向右值，因为右值没有地址）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢阅读、欢迎指正!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>PRD算法：听说你想凭运气抽一颗荣耀水晶?</title>
          <pubDate>Thu, 19 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/prdsuan-fa-ting-shuo-ni-xiang-ping-yun-qi-chou-yi-ke-rong-yao-shui-jing/</link>
          <guid>https://ilikexff.cn/prdsuan-fa-ting-shuo-ni-xiang-ping-yun-qi-chou-yi-ke-rong-yao-shui-jing/</guid>
          <description xml:base="https://ilikexff.cn/prdsuan-fa-ting-shuo-ni-xiang-ping-yun-qi-chou-yi-ke-rong-yao-shui-jing/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;PRD.jpg&quot; alt=&quot;PRD&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;PRD&lt;&#x2F;code&gt;算法全称&lt;code&gt;Pseudo-Random Distribution&lt;&#x2F;code&gt;。是概率分布中的一种常见算法，在游戏开发领域中很常用。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;PRD&lt;&#x2F;code&gt;用于控制随机事件的触发概率，使其表现得更加符合预期，相比于传统得随机数生成，&lt;code&gt;PRD&lt;&#x2F;code&gt;算法可以平滑得控制随机事件的触发次数，确保不会出现过于极端的情况，比如长时间未触发或者频繁触发。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你觉得它离你很远，那么举个栗子，玩“王者荣耀”的多少都知道其中有一个道具叫&lt;strong&gt;荣耀水晶&lt;&#x2F;strong&gt;，这玩意就是靠抽奖的方式获得的，而根据官方抽奖的方式与概率公布等信息来看，抽取荣耀水晶的算法大概率也是&lt;code&gt;PRD&lt;&#x2F;code&gt;或者它的变种算法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在游戏中，&lt;code&gt;PRD&lt;&#x2F;code&gt;算法的主要应用场景包括掉落系统、抽奖系统等。这些场景下，开发者通常希望在随机事件的发生上保持某种平衡，而&lt;code&gt;PRD&lt;&#x2F;code&gt;算法正是为了解决这一问题。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;基本原理&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;PRD&lt;&#x2F;code&gt;算法通过调整事件发生的概率来实现分布平滑。简单来说，它会随着事件未触发的次数增加，动态提升触发的概率，直到事件发生。一旦事件触发，概率会重置为初始值，重新开始计算。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;PRD&lt;&#x2F;code&gt;的公式通常为：$ P(n) = \frac{1}{k-f(n)}$&lt;&#x2F;p&gt;
&lt;p&gt;其中，&lt;code&gt;P(n)&lt;&#x2F;code&gt; 是事件在第 &lt;code&gt;n&lt;&#x2F;code&gt; 次尝试时的概率，&lt;code&gt;k&lt;&#x2F;code&gt; 是一个常数（通常设为 1），&lt;code&gt;f(n)&lt;&#x2F;code&gt; 是一个随尝试次数递增的函数，用于控制概率的增长。这个公式的作用是保证随着尝试次数的增加，概率不断增大，直至事件发生。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;基本实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;下面就以使用&lt;code&gt;PRD&lt;&#x2F;code&gt;算法模拟抽取荣耀水晶的方式带着各位实现一下&lt;code&gt;PRD&lt;&#x2F;code&gt;算法吧!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始概率与递增概率&lt;&#x2F;strong&gt;：使用&lt;code&gt;PRD&lt;&#x2F;code&gt;算法，逐步提高未中奖后的中奖概率。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;保底次数&lt;&#x2F;strong&gt;：设置一个保底的次数上限，在达到该上限时，无论当前概率如何，玩家都会中奖。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;中奖后重置&lt;&#x2F;strong&gt;：当玩家中奖后，概率重置为初始值，并重新开始计算。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cstdlib&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ctime&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;PRDWithPity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; initialProb; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 初始中奖概率
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; increment; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 每次中奖时增加的概率
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; currentProb; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 当前中奖概率
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; pityLimit; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 保底次数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; currentTry; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 当前抽奖次数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 构造函数、初始化初始概率、递增概率和保底次数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;PRDWithPity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double initProb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.05&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double inc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.02&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int pity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;initialProb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;initProb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;inc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentProb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;initProb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;pityLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentTry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        currentTry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 达到保底，直接中奖
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;currentTry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; pityLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 生成0-1随机数
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; randNum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static_cast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;rand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) &#x2F;&lt;&#x2F;span&gt;&lt;span&gt; RAND_MAX;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果随机数小于当前概率、表示中奖
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;randNum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; currentProb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           currentProb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; increment;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; reset函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        currentProb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; initialProb;
&lt;&#x2F;span&gt;&lt;span&gt;        currentTry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;实现代码大致如上，没什么复杂的逻辑，关键地方也都添加了注释，这里就不再赘述了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;下面模拟测试一下看看效果&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;srand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static_cast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)))&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 初始化随机数种子
&lt;&#x2F;span&gt;&lt;span&gt;    PRDWithPity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;prd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.000001&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0000002&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;360&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 初始中奖概率0.05，每次未中奖增加0.02，保底次数10次
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;365&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;prd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;draw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;恭喜屏幕前这位大佬第 &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; 次抽中一颗[荣耀水晶]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;第 &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt; 次抽奖未中奖，幸运值+1，幸运值为： &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; prd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getCurrentTry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;，幸运值达到360必中一颗[荣耀水晶]。&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;由于我们必须保证在触发保底之前中奖的概率足够低，因此这里直接将初始中奖率设置为&lt;code&gt;0.000001&lt;&#x2F;code&gt;也就是十万分之一，每次抽奖后递增中奖率也不能过高，比如可以设置在&lt;code&gt;0.0000002&lt;&#x2F;code&gt;（百万分之一）。这样可以保证在触发保底之前你大概率是不会抽到 &lt;strong&gt;荣耀水晶&lt;&#x2F;strong&gt;的，只能通过氪金不断的获取抽奖机会，直到抽够&lt;code&gt;360&lt;&#x2F;code&gt;次触发保底。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;下面是本次抽奖的模拟结果:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;第 1 次抽奖未中奖，幸运值+1，幸运值为： 1，幸运值达到360必中一颗[荣耀水晶]。
第 2 次抽奖未中奖，幸运值+1，幸运值为： 2，幸运值达到360必中一颗[荣耀水晶]。
第 3 次抽奖未中奖，幸运值+1，幸运值为： 3，幸运值达到360必中一颗[荣耀水晶]。
第 4 次抽奖未中奖，幸运值+1，幸运值为： 4，幸运值达到360必中一颗[荣耀水晶]。
第 5 次抽奖未中奖，幸运值+1，幸运值为： 5，幸运值达到360必中一颗[荣耀水晶]。
第 6 次抽奖未中奖，幸运值+1，幸运值为： 6，幸运值达到360必中一颗[荣耀水晶]。
第 7 次抽奖未中奖，幸运值+1，幸运值为： 7，幸运值达到360必中一颗[荣耀水晶]。
第 8 次抽奖未中奖，幸运值+1，幸运值为： 8，幸运值达到360必中一颗[荣耀水晶]。
第 9 次抽奖未中奖，幸运值+1，幸运值为： 9，幸运值达到360必中一颗[荣耀水晶]。
第 10 次抽奖未中奖，幸运值+1，幸运值为： 10，幸运值达到360必中一颗[荣耀水晶]。
第 11 次抽奖未中奖，幸运值+1，幸运值为： 11，幸运值达到360必中一颗[荣耀水晶]。
第 12 次抽奖未中奖，幸运值+1，幸运值为： 12，幸运值达到360必中一颗[荣耀水晶]。
第 13 次抽奖未中奖，幸运值+1，幸运值为： 13，幸运值达到360必中一颗[荣耀水晶]。
第 14 次抽奖未中奖，幸运值+1，幸运值为： 14，幸运值达到360必中一颗[荣耀水晶]。&lt;&#x2F;p&gt;
&lt;p&gt;[次数省略好多行]…………………..&lt;&#x2F;p&gt;
&lt;p&gt;第 348 次抽奖未中奖，幸运值+1，幸运值为： 348，幸运值达到360必中一颗[荣耀水晶]。
第 349 次抽奖未中奖，幸运值+1，幸运值为： 349，幸运值达到360必中一颗[荣耀水晶]。
第 350 次抽奖未中奖，幸运值+1，幸运值为： 350，幸运值达到360必中一颗[荣耀水晶]。
第 351 次抽奖未中奖，幸运值+1，幸运值为： 351，幸运值达到360必中一颗[荣耀水晶]。
第 352 次抽奖未中奖，幸运值+1，幸运值为： 352，幸运值达到360必中一颗[荣耀水晶]。
第 353 次抽奖未中奖，幸运值+1，幸运值为： 353，幸运值达到360必中一颗[荣耀水晶]。
第 354 次抽奖未中奖，幸运值+1，幸运值为： 354，幸运值达到360必中一颗[荣耀水晶]。
第 355 次抽奖未中奖，幸运值+1，幸运值为： 355，幸运值达到360必中一颗[荣耀水晶]。
第 356 次抽奖未中奖，幸运值+1，幸运值为： 356，幸运值达到360必中一颗[荣耀水晶]。
第 357 次抽奖未中奖，幸运值+1，幸运值为： 357，幸运值达到360必中一颗[荣耀水晶]。
第 358 次抽奖未中奖，幸运值+1，幸运值为： 358，幸运值达到360必中一颗[荣耀水晶]。
第 359 次抽奖未中奖，幸运值+1，幸运值为： 359，幸运值达到360必中一颗[荣耀水晶]。
&lt;strong&gt;恭喜屏幕前这位大佬第 360 次抽中一颗[荣耀水晶]&lt;&#x2F;strong&gt;
第 361 次抽奖未中奖，幸运值+1，幸运值为： 1，幸运值达到360必中一颗[荣耀水晶]。
第 362 次抽奖未中奖，幸运值+1，幸运值为： 2，幸运值达到360必中一颗[荣耀水晶]。
第 363 次抽奖未中奖，幸运值+1，幸运值为： 3，幸运值达到360必中一颗[荣耀水晶]。
第 364 次抽奖未中奖，幸运值+1，幸运值为： 4，幸运值达到360必中一颗[荣耀水晶]。
第 365 次抽奖未中奖，幸运值+1，幸运值为： 5，幸运值达到360必中一颗[荣耀水晶]。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;PRD的优点&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;平衡性&lt;&#x2F;strong&gt;：&lt;code&gt;PRD&lt;&#x2F;code&gt;通过调整概率，使得随机事件更加平衡。例如，在掉落系统中，&lt;code&gt;PRD&lt;&#x2F;code&gt;确保物品不会长时间不掉落，也不会短时间内频繁掉落。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;易于控制&lt;&#x2F;strong&gt;：开发者可以通过调节初始概率或递增函数的参数，来控制事件的发生频率和分布特性。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;提升用户体验&lt;&#x2F;strong&gt;：&lt;code&gt;PRD&lt;&#x2F;code&gt;可以防止用户在面对纯粹的随机系统时感到挫败，尤其是游戏中的奖励机制，通过PRD可以避免极端运气差的情况。&lt;&#x2F;p&gt;
&lt;p&gt;当然了，算法并非一成不变的，具体实现还得基于我们在开发业务中的具体需求来决定是否对原算法进行扩展、优化、变种。&lt;&#x2F;p&gt;
&lt;p&gt;比如下面这些扩展建议：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;递增机制&lt;&#x2F;strong&gt;：可以根据具体需求将递增值设计为动态调整，而不仅仅是固定值。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;外部配置&lt;&#x2F;strong&gt;：如果&lt;code&gt;PRD&lt;&#x2F;code&gt;用于实际的游戏开发中，概率和递增值通常从外部配置表中读取，而不是硬编码在程序中。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;小结&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;如果你不从事游戏开发相关领域工作，那么这篇文章可以帮你了解身边游戏抽奖的中奖机制和原理，在面对华丽的游戏虚拟道具抽奖时，请务必保持&lt;strong&gt;理性消费&lt;&#x2F;strong&gt;(有钱人忽略,因为本质就是来圈你们这些所谓有钱人的&lt;strong&gt;RMB&lt;&#x2F;strong&gt;滴!)代码面前，不要对自己的运气抱有过高的自信!&lt;&#x2F;p&gt;
&lt;p&gt;如果你是一个即将或者是正在从事游戏开发工作，那么学无止境，共勉!&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个连载的专题，欢迎持续关注哦！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>Vim折腾之 PowerShell篇</title>
          <pubDate>Tue, 17 Jun 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/vim-tiao-tou-powershell-pian/</link>
          <guid>https://ilikexff.cn/vim-tiao-tou-powershell-pian/</guid>
          <description xml:base="https://ilikexff.cn/vim-tiao-tou-powershell-pian/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志：&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2022-09-03 晚&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调整目录结构&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;更新文章封面&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;shuo-ming&quot;&gt;说明&lt;a class=&quot;zola-anchor&quot; href=&quot;#shuo-ming&quot; aria-label=&quot;Anchor link for: shuo-ming&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;vim一直以来都被称为编辑器之神一样的存在。但用不用vim完全取决于你自己，但是作为一个学计算机的同学来说，免不了会和Linux打交道，而大部分的Linux操作系统都预装了vim作为编辑器，如果是简单的任务，其实vim只要会&lt;&#x2F;strong&gt;&lt;code&gt;:wq,i,o,w,q!,kjhl&lt;&#x2F;code&gt;足矣。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;正式开始下面的内容之前，你可以考虑下要不要折腾，或者说是不是真的爱vim，如果不爱请离开，就现在，因为它真的带刺，没有足够的热爱就不会有足够的耐心和精力去维护和学习，vim很难学，但属于那种学会了就离不开的类型。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;再说下，IDE，使用vim的衍生产品neovim作为核心，结合plug.vim插件管理工具，继承一个功能强大的IDEA开发环境(几乎支持绝大部分编程语言哈)。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;总结一句话，这注定是一个折腾和学习的过程，要不要来，你决定。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;windowsban-ben&quot;&gt;windows版本&lt;a class=&quot;zola-anchor&quot; href=&quot;#windowsban-ben&quot; aria-label=&quot;Anchor link for: windowsban-ben&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;相对来说，在windows系统上打造这样的环境相比于在Linxu上要麻烦得多，各种问题层出不穷，一言不合就就ERROR。所以这里先搞定windows操作系统，这里使用官方的&lt;&#x2F;strong&gt;&lt;code&gt;powershell&lt;&#x2F;code&gt;作为shell终端，使用新版的&lt;code&gt;windows terminal&lt;&#x2F;code&gt;作为操作终端。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiang-guan-ruan-jian-xia-zai&quot;&gt;相关软件下载&lt;a class=&quot;zola-anchor&quot; href=&quot;#xiang-guan-ruan-jian-xia-zai&quot; aria-label=&quot;Anchor link for: xiang-guan-ruan-jian-xia-zai&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;windows terminal&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;oh-my-posh&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;以上两个软件可以直接在微软商店下载，下载安装即可，不需要作任何配置。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于&lt;&#x2F;strong&gt;&lt;code&gt;oh-my-posh&lt;&#x2F;code&gt;其实是&lt;code&gt;zsh&lt;&#x2F;code&gt;美化版本的&lt;code&gt;oh-my-zsh&lt;&#x2F;code&gt;，在linux上是zsh,在powershell中就是&lt;code&gt;oh-my-posh&lt;&#x2F;code&gt;,这是用来美化终端命令显示的，提供很多内置的主题。比如我用的&lt;code&gt;xtoys&lt;&#x2F;code&gt;效果如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10949903531096456410-d06f52e9.png&quot; alt=&quot;image-20220809095152202&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;配置oh-my-posh主题&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;为了更好的兼容性，建议设置windows terminal字体为：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13057622274987666226-30fd89da.png&quot; alt=&quot;image-20220809102328823&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;具体的设置方法可以在终端设置中选择对于的终端，再选择外观设置。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;接下来打开&lt;&#x2F;strong&gt;&lt;code&gt;powershell&lt;&#x2F;code&gt;【为了方便，后面统一称为ps】。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;终端输入：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;notepad $PROFILE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;此时会弹出一个记事本，在里面输入：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;oh-my-posh init pwsh --config &amp;quot;$env:POSH_THEMES_PATH\zash.omp.json&amp;quot; | Invoke-Expression
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;保存之后输入&lt;&#x2F;strong&gt;&lt;code&gt;.$PROFILE&lt;&#x2F;code&gt;使配置文件立即生效。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;再次重启ps之后就能看到设置的主题已经有效果了，上面这段命令中默认设置的主题是&lt;&#x2F;strong&gt;&lt;code&gt;zash.omp.json&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;&#x2F;strong&gt;&lt;code&gt;Get-PoshThemes&lt;&#x2F;code&gt;可以在终端显示并查看所有主题效果，如果需要更换主题，找到对应的主题名称之后，替换掉前面配置文件中的&lt;code&gt;zash.omp.json&lt;&#x2F;code&gt;zash部分即可，这就是主题名称。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;更多内容可以阅读官方文档,官方文档才是最新鲜的第一手资料。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;ohmyposh.dev&#x2F;&quot;&gt;&lt;strong&gt;Oh My Posh&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;&lt;strong&gt;Chocolatey&lt;&#x2F;strong&gt;的安装&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Chocolatey&lt;&#x2F;code&gt;是ps中一款包管理工具，通过这种方式来安装后续的很多内容可以避免踩很多坑，血的教训。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;一下的所有命令请在管理员模式下的ps终端执行&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;安装****Chocolatey&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https:&#x2F;&#x2F;community.chocolatey.org&#x2F;install.ps1&amp;#39;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用包管理工具安装下面几个软件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;choco install git
&lt;&#x2F;span&gt;&lt;span&gt;choco install neovim
&lt;&#x2F;span&gt;&lt;span&gt;choco install python
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;注意上面的几个部分软件可能需要科学上网，请自己解决。在安装的过程中还会提示是否继续的操作指令提示，请全部选A，表示全部(ALL)继续的意思。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;关于内容移步官网：&lt;&#x2F;strong&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;chocolatey.org&#x2F;install#psdsc&quot;&gt;https:&#x2F;&#x2F;chocolatey.org&#x2F;install#psdsc&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-2&quot;&gt;安装plug-vim&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这是一款用来扩展nvim的插件管理器，nvim可以越发强大，主要就是靠插件的集成，也支持Lua脚本(对nvim和vim都有版本限制)，所以建议各位都安装vim8.3+或者neovim0.7+的版本。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;按照官方文档的说明，安装这个插件的方式，对于使用ps而已，可以使用下面的安装命令：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;iwr -useb https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;junegunn&#x2F;vim-plug&#x2F;master&#x2F;plug.vim |`
&lt;&#x2F;span&gt;&lt;span&gt;    ni &amp;quot;$(@($env:XDG_DATA_HOME, $env:LOCALAPPDATA)[$null -eq $env:XDG_DATA_HOME])&#x2F;nvim-data&#x2F;site&#x2F;autoload&#x2F;plug.vim&amp;quot; -Force
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;安装完成后，会在&lt;&#x2F;strong&gt;&lt;code&gt;$USER&#x2F;nvim-data&#x2F;site&#x2F;autoload&#x2F;&lt;&#x2F;code&gt;目录下生成一个&lt;code&gt;plug.vim&lt;&#x2F;code&gt;文件，注意&lt;code&gt;$USER&lt;&#x2F;code&gt;指的是你windows当前登录的用户所在的目录，这个USER指代的是当前用户的用户名，在C盘可以找到。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7718162306806339053-c5920d0f.png&quot; alt=&quot;image-20220809113811322&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;插件配置于安装&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;使用插件功能，我们需要初始化一个配置文件，在&lt;&#x2F;strong&gt;&lt;code&gt;C:$USER\AppData\Local\nvim\&lt;&#x2F;code&gt;目录下新建一个名为&lt;code&gt;init.vim&lt;&#x2F;code&gt;的配置文件。如果没有目录，就自己创建对应的目录。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;打开init.vim，添加下面的内容，其中第一行用来指定安装的插件存放的位置，这个位置可以自定义，这个位置很重要，错误了可能后面无法安装插件。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;call plug#begin(&amp;#39;~&#x2F;.AppData&#x2F;Local&#x2F;nvim&#x2F;plugged&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;插件名称&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;...&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;将所有插件安装在这里
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;call plug#end()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;插件安装位置: 在用户目录下，建立.AppData文件，在里面新建一个local文件，在local里新建一个nvim文件，在里新建一个plugged文件以存放下载的插件(C:\Users&lt;&#x2F;strong&gt;(&lt;strong&gt;你的用户名)&lt;&#x2F;strong&gt;.&lt;strong&gt;AppData\local\nvim\plugged)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;安装插件：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;好用的插件太多了，各位可以去自己摸索或者去这个插件库找，下面放一下我自己的配置吧，插件有点多，这里不展开说，考虑另外开一篇文章来说一下插件的用法。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;set nu
&lt;&#x2F;span&gt;&lt;span&gt;call plug#begin(&amp;#39;~&#x2F;.AppData&#x2F;Local&#x2F;nvim&#x2F;plugged&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;set nu
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 要安装的插件列表
&lt;&#x2F;span&gt;&lt;span&gt;call plug#begin(&amp;#39;~&#x2F;.vim&#x2F;plugged&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; tab键补全功能插件
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;ervandew&#x2F;supertab&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;akinsho&#x2F;toggleterm.nvim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;linluk&#x2F;vim-websearch&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;kyazdani42&#x2F;nvim-web-devicons&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Coc 智能补全插件引擎
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;neoclide&#x2F;coc.nvim&amp;#39;, {&amp;#39;branch&amp;#39;: &amp;#39;release&amp;#39;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; vim-airline 标签栏插件
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;Vim-airline&#x2F;vim-airline&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; vim-airline 标签栏插件的主题插件
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;Vim-airline&#x2F;vim-airline-themes&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ranger 文件浏览器
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;kevinhwang91&#x2F;rnvimr&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; vim-startify 插件
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;mhinz&#x2F;vim-startify&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; vim-snazzy 主题插件
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;connorholyday&#x2F;vim-snazzy&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; markdown 预览插件
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;iamcco&#x2F;markdown-preview.nvim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;preservim&#x2F;nerdtree&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;Yggdroot&#x2F;LeaderF&amp;#39;, { &amp;#39;do&amp;#39;: &amp;#39;.&#x2F;install.sh&amp;#39; }
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;preservim&#x2F;nerdcommenter&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;jiangmiao&#x2F;auto-pairs&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;thinca&#x2F;vim-quickrun&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;dhruvasagar&#x2F;vim-table-mode&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug  &amp;#39;luochen1990&#x2F;rainbow&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;mhinz&#x2F;vim-startify&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;honza&#x2F;vim-snippets&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;othree&#x2F;html5.vim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;shougo&#x2F;neomru.vim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;roxma&#x2F;vim-paste-easy&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;goolord&#x2F;alpha-nvim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;glepnir&#x2F;dashboard-nvim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;cyrus-and&#x2F;gdb-dashboard&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;lukaszkorecki&#x2F;vim-githubdashboard&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;call plug#end()
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 配置 vim-airline 标签栏插件
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:airline#extensions#tabline#enabled = 1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 配置 ranger 文件浏览器插件
&lt;&#x2F;span&gt;&lt;span&gt;let g:rnvimr_ex_enable = 1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Alt+o 打开 ranger
&lt;&#x2F;span&gt;&lt;span&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;M-o&amp;gt; :RnvimrToggle&amp;lt;CR&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Alt+加号 切换至下一个标签，减号则是切换回上一个
&lt;&#x2F;span&gt;&lt;span&gt;nnoremap &amp;lt;M-+&amp;gt; :bp&amp;lt;CR&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;nnoremap &amp;lt;M--&amp;gt; :bn&amp;lt;CR&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;set background=light        &amp;quot; for the light version
&lt;&#x2F;span&gt;&lt;span&gt;let g:one_allow_italics = 1 &amp;quot; I love italic for comments
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;colorscheme one
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 配置 vim-snazzy 主题插件
&lt;&#x2F;span&gt;&lt;span&gt;colorscheme snazzy
&lt;&#x2F;span&gt;&lt;span&gt;let g:SnazzyTransparent = 1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 指定浏览器路径
&lt;&#x2F;span&gt;&lt;span&gt;let g:mkdp_path_to_chrome = &amp;quot;&amp;lt;此处填写chrome的安装路径&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 指定预览主题，默认Github
&lt;&#x2F;span&gt;&lt;span&gt;let g:mkdp_markdown_css=&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Add spaces after comment delimiters by default
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDSpaceDelims = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Use compact syntax for prettified multi-line comments
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDCompactSexyComs = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Align line-wise comment delimiters flush left instead of following code indentation
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDDefaultAlign = &amp;#39;left&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Set a language to use its alternate delimiters by default
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDAltDelims_java = 1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Allow commenting and inverting empty lines (useful when commenting a region)
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDCommentEmptyLines = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Enable trimming of trailing whitespace when uncommenting
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDTrimTrailingWhitespace = 1
&lt;&#x2F;span&gt;&lt;span&gt;let g:coc_disable_startup_warning = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Enable NERDCommenterToggle to check all selected lines is commented or not
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDToggleCheckAllLines = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Add your own custom formats or override the defaults
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDCustomDelimiters = { &amp;#39;c&amp;#39;: { &amp;#39;left&amp;#39;: &amp;#39;&#x2F;**&amp;#39;,&amp;#39;right&amp;#39;: &amp;#39;*&#x2F;&amp;#39; } }
&lt;&#x2F;span&gt;&lt;span&gt;set laststatus=2  &amp;quot;永远显示状态栏
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_powerline_fonts = 1  &amp;quot; 支持 powerline 字体
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline#extensions#tabline#enabled = 1 &amp;quot;&amp;quot; 显示窗口tab和buffer
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:airline_theme=&amp;#39;moloai&amp;#39;  &amp;quot; murmur配色不错
&lt;&#x2F;span&gt;&lt;span&gt;if !exists(&amp;#39;g:airline_symbols&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_symbols = {}
&lt;&#x2F;span&gt;&lt;span&gt;endif
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_left_sep = &amp;#39;▶&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_left_alt_sep = &amp;#39;❯&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_right_sep = &amp;#39;◀&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_right_alt_sep = &amp;#39;❮&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_symbols.linenr = &amp;#39;¶&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_symbols.branch = &amp;#39;⎇&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;map &amp;lt;C-n&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:airline_theme=&amp;#39;one&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 配置彩虹括号
&lt;&#x2F;span&gt;&lt;span&gt;let g:rainbow_active = 1 &amp;quot;0 if you want to enable it later via :RainbowToggle
&lt;&#x2F;span&gt;&lt;span&gt;let g:rainbow_conf = {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;guifgs&amp;#39;: [&amp;#39;royalblue3&amp;#39;, &amp;#39;darkorange3&amp;#39;, &amp;#39;seagreen3&amp;#39;, &amp;#39;firebrick&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;ctermfgs&amp;#39;: [&amp;#39;lightblue&amp;#39;, &amp;#39;lightyellow&amp;#39;, &amp;#39;lightcyan&amp;#39;, &amp;#39;lightmagenta&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;operators&amp;#39;: &amp;#39;_,_&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;parentheses&amp;#39;: [&amp;#39;start=&#x2F;(&#x2F; end=&#x2F;)&#x2F; fold&amp;#39;, &amp;#39;start=&#x2F;\[&#x2F; end=&#x2F;\]&#x2F; fold&amp;#39;, &amp;#39;start=&#x2F;{&#x2F; end=&#x2F;}&#x2F; fold&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;separately&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;*&amp;#39;: {},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;tex&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;parentheses&amp;#39;: [&amp;#39;start=&#x2F;(&#x2F; end=&#x2F;)&#x2F;&amp;#39;, &amp;#39;start=&#x2F;\[&#x2F; end=&#x2F;\]&#x2F;&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;lisp&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;guifgs&amp;#39;: [&amp;#39;royalblue3&amp;#39;, &amp;#39;darkorange3&amp;#39;, &amp;#39;seagreen3&amp;#39;, &amp;#39;firebrick&amp;#39;, &amp;#39;darkorchid3&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;vim&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;parentheses&amp;#39;: [&amp;#39;start=&#x2F;(&#x2F; end=&#x2F;)&#x2F;&amp;#39;, &amp;#39;start=&#x2F;\[&#x2F; end=&#x2F;\]&#x2F;&amp;#39;, &amp;#39;start=&#x2F;{&#x2F; end=&#x2F;}&#x2F; fold&amp;#39;, &amp;#39;start=&#x2F;(&#x2F; end=&#x2F;)&#x2F; containedin=vimFuncBody&amp;#39;, &amp;#39;start=&#x2F;\[&#x2F; end=&#x2F;\]&#x2F; containedin=vimFuncBody&amp;#39;, &amp;#39;start=&#x2F;{&#x2F; end=&#x2F;} fold containedin=vimFuncBody&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;html&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;parentheses&amp;#39;: [&amp;#39;start=&#x2F;\v\&amp;lt;((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ &amp;gt;])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=(&amp;quot;[^&amp;quot;]*&amp;quot;|&amp;#39;.&amp;quot;&amp;#39;&amp;quot;.&amp;#39;[^&amp;#39;.&amp;quot;&amp;#39;&amp;quot;.&amp;#39;]*&amp;#39;.&amp;quot;&amp;#39;&amp;quot;.&amp;#39;|[^ &amp;#39;.&amp;quot;&amp;#39;&amp;quot;.&amp;#39;&amp;quot;&amp;gt;&amp;lt;=`]*))?)*\&amp;gt;&#x2F; end=#&amp;lt;&#x2F;\z1&amp;gt;# fold&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;css&amp;#39;: 0,
&lt;&#x2F;span&gt;&lt;span&gt;\}
&lt;&#x2F;span&gt;&lt;span&gt;\}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:dashboard_custom_section={
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;\ &amp;#39;buffer_list&amp;#39;: [&amp;#39; Recently lase session SPC b b&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;\ }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:dashboard_custom_shortcut={
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;\ &amp;#39;yes&amp;#39;        :  &amp;#39;SPC s l&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;\}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;function! BUFFER_LIST()
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Clap buffers
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;endfunction
&lt;&#x2F;span&gt;&lt;span&gt;let g:dashboard_default_header = &amp;#39;commicgirl5&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:web_search_command = &amp;quot;firefox&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;let g:web_search_query = &amp;quot;https:&#x2F;&#x2F;search.yahoo.com&#x2F;search;?p=&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let g:startify_custom_header = [
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;+------------------------------+&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;|                              |&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;| 惟有热爱,可岁月漫长！        |&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;|                              |&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;+----------------+-------------+&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \]
&lt;&#x2F;span&gt;&lt;span&gt;let g:startify_custom_footer = [
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;+------------------------------+&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;|      八尺妖剑                 | &amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    \ &amp;#39;|   https:&#x2F;&#x2F;www.waer.ltd         |&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;+----------------+-------------+&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \]
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;把上面的内容粘贴到你的&lt;&#x2F;strong&gt;&lt;code&gt;init.vim&lt;&#x2F;code&gt;中保存，然后重启nvim。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;在nvim命令模式下输入&lt;&#x2F;strong&gt;&lt;code&gt;:PlugInstall&lt;&#x2F;code&gt;，它会自己安装所有的插件，过程也需要科学上网，并且可能不会一次成功，多试几次就好了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14768138760641395538-eb6a9651.png&quot; alt=&quot;image-20220809120426366&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;更多关于&lt;&#x2F;strong&gt;&lt;code&gt;plug.vim&lt;&#x2F;code&gt;的管理命令参考官方:&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;junegunn&#x2F;vim-plug&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;junegunn&#x2F;vim-plug&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;安装coc插件&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意到上一步安装的插件中一个个名为coc.nvim的插件。官方项目项目地址有这么一句话：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5424929863086008846-d7ce9195.png&quot; alt=&quot;image-20220809120924743&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;他是干什么用的现在懂了吧？？不过，有没有这种可能：你并不知道&lt;&#x2F;strong&gt;&lt;code&gt;VSCode是什么？&lt;&#x2F;code&gt;希望没有！！！&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;需要打造一款多语言环境的IDE，这小东西的可是功不可没。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;官网地址,英文版直接去github项目地址就好了。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neoclide&#x2F;coc.nvim&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;neoclide&#x2F;coc.nvim&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;另外还提供中文讨论社区：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;neoclide&#x2F;coc-cn&quot;&gt;https:&#x2F;&#x2F;gitter.im&#x2F;neoclide&#x2F;coc-cn&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;遇事不决，量子力学(官网解决)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;代码提示&#x2F;补全&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;由于 Coc 本身并不提供具体语言的补全功能，所以在安装完成后，我们需要安装具体的语言服务以支持对应的补全功能。例如想要配置 C++环境，我们就需要在 NeoVim 的命令模式下执行以下命令来安装相关的插件：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;:CocInstall coc-clangd # C++环境插件
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-cmake  # Cmake 支持
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;当然，你还可以安装：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;:CocInstall coc-git            # git 支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-highlight  # 高亮支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-jedi           # jedi
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-json          # json 文件支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-python     # python 环境支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-sh             # bash 环境支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-snippets   # python提供 snippets
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-vimlsp      # lsp
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-yaml         # yaml
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-sql        # sql
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-java      # java支持
&lt;&#x2F;span&gt;&lt;span&gt;更多内容去官方。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;上面的都安装完了，再次打开nvim，你会发现此时的vim已经是一款开发利器(我觉得是)。比如写个helloword.cpp试试看。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8129814682304298084-0b6835d8.png&quot; alt=&quot;image-20220809122346987&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;说实话，这提示可不必IDEA的提示慢。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9678909763547725093-28a6431e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;本文卒！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>提升 IntelliJ 开发效率？这款代码图钉插件 CodePins 值得一试</title>
          <pubDate>Sun, 25 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/ti-sheng-intellij-kai-fa-xiao-lu-zhe-kuan-dai-ma-tu-ding-cha-jian-codepins-zhi-de-yi-shi/</link>
          <guid>https://ilikexff.cn/ti-sheng-intellij-kai-fa-xiao-lu-zhe-kuan-dai-ma-tu-ding-cha-jian-codepins-zhi-de-yi-shi/</guid>
          <description xml:base="https://ilikexff.cn/ti-sheng-intellij-kai-fa-xiao-lu-zhe-kuan-dai-ma-tu-ding-cha-jian-codepins-zhi-de-yi-shi/">&lt;p&gt;作为一名开发者，我们每天与代码打交道，尤其是在使用 IntelliJ IDEA 这样强大的集成开发环境时，面对庞大复杂的项目，我们时常会遇到这些场景：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在阅读一个陌生的模块时，好不容易理清了头绪，切换个文件回来，关键的几行代码又找不到了。&lt;&#x2F;li&gt;
&lt;li&gt;调试一个深藏的 Bug，需要在好几个关键点来回跳转，反复搜索定位让人心烦意乱。&lt;&#x2F;li&gt;
&lt;li&gt;重构代码时，标记了多个待修改的区域，却担心遗漏或混淆。&lt;&#x2F;li&gt;
&lt;li&gt;或者，只是想临时记录一下某个方法的巧妙之处，或是一个待办的 TODO，却不想污染代码注释或另外打开笔记软件。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果你对这些场景感同身受，那么今天介绍的这款轻量级 IntelliJ 插件——&lt;strong&gt;CodePins&lt;&#x2F;strong&gt;，或许能成为你日常开发中的得力小助手。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202505251804799.png&quot; alt=&quot;end&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;邂逅 CodePins：它是什么？&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;08820048&#x2F;codepins&quot;&gt;CodePins&lt;&#x2F;a&gt; 是一款专为 IntelliJ IDEA 系列 IDE 设计的极简高效的图钉插件。它的核心理念非常简单：&lt;strong&gt;帮助开发者在代码中快速标记、注解重要位置，并通过侧边栏集中查看和导航。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;你可以把它想象成一个智能的数字代码图钉板，让你能够随手将重要的代码“钉”起来，并附上你的思考和标签，方便后续快速回顾和跳转。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-1&quot;&gt;你是否也曾遇到这些“小”烦恼？&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在高效的开发流程中，一些看似微小的中断和不便，日积月累下来也会消耗我们大量的精力：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码海洋中的“迷航”&lt;&#x2F;strong&gt;：面对成千上万行代码，特别是阅读他人或历史代码时，很容易迷失方向，忘记关键逻辑的上下文。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;上下文切换的“阵痛”&lt;&#x2F;strong&gt;：多任务并行是常态，但每次切换回来，都需要重新回忆上次的工作点和思路。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;临时笔记的“散落”&lt;&#x2F;strong&gt;：一些临时的想法、待办事项、或者对某段代码的疑问，如果直接写在注释里，容易混淆且不易管理；写在外部，又容易与代码脱节。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;重复定位的“低效”&lt;&#x2F;strong&gt;：某些常用的工具方法、配置项、或者核心业务逻辑的入口，每次都需要通过搜索或层层导航才能找到。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;CodePins 正是为了解决这些日常开发中的“小”烦恼而生，它致力于让你的代码导航和信息管理更加从容和高效。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-2&quot;&gt;CodePins 如何帮你“解忧”？&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202505251832136.png&quot; alt=&quot;6&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;CodePins 提供了一系列简洁实用的功能，旨在无缝融入你的开发工作流：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;一键图钉，备注随行 (Pin with Notes)&lt;&#x2F;strong&gt;
只需通过右键菜单或快捷键 (&lt;code&gt;Alt+Shift+P&lt;&#x2F;code&gt;)，就能轻松将当前代码行或选中的代码块“钉”起来。更棒的是，每一个图钉都可以附带详细的备注和无限的智能标签。无论是临时的想法、待办事项、代码解读还是优化建议，都可以即时记录，与代码紧密关联。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;优势&lt;&#x2F;em&gt;：快速捕捉灵感，保留上下文，让重要信息不再遗失。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;智能标签，高效整理 (#Tags for Organization)&lt;&#x2F;strong&gt;
通过 &lt;code&gt;#标签&lt;&#x2F;code&gt; 系统，你可以为图钉打上多维度、自定义的标签（例如 &lt;code&gt;#bugfix&lt;&#x2F;code&gt;, &lt;code&gt;#todo&lt;&#x2F;code&gt;, &lt;code&gt;#refactor&lt;&#x2F;code&gt;, &lt;code&gt;#api-usage&lt;&#x2F;code&gt;）。在侧边栏，可以根据标签对图钉进行筛选和分组，让你的标记系统井井有条。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;优势&lt;&#x2F;em&gt;：告别杂乱无章的标记，实现对关注点的系统化管理和快速过滤。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;悬浮预览，减少跳转 (Hover to Preview)&lt;&#x2F;strong&gt;
当鼠标悬停在侧边栏的图钉条目上时，会即时浮窗显示对应的代码片段。这意味着你无需真正跳转文件，就能快速回顾图钉处的代码上下文。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;优势&lt;&#x2F;em&gt;：极大提升了代码理解和信息获取效率，减少了不必要的编辑器跳转，让你的工作流更加流畅。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;极速搜索，精准直达 (Instant Search)&lt;&#x2F;strong&gt;
内置强大的本地全文搜索引擎，支持根据文件名、文件路径、图钉备注内容或标签进行快速搜索。即使图钉数量再多，也能在瞬间帮你定位到目标。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;优势&lt;&#x2F;em&gt;：让查找已标记的代码变得轻而易举，节省宝贵的开发时间。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;拖拽排序，自定义流程 (Drag &amp;amp; Drop Sorting)&lt;&#x2F;strong&gt;
你可以根据个人习惯或当前任务的优先级，自由拖拽侧边栏中的图钉进行排序。这种灵活性使得 CodePins 能够更好地适应你独特的工作方式。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;优势&lt;&#x2F;em&gt;：让工具适应人，而不是人适应工具，打造个性化的代码导航路径。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;持久化存储，数据无忧 (Persistent Storage)&lt;&#x2F;strong&gt;
所有的图钉信息都会在项目级别自动保存。无论是重启 IDE 还是切换项目，你的宝贵标记都会完好无损地等待着你。同时支持导入导出 Markdown, HTML, JSON 等格式，方便分享与备份。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;优势&lt;&#x2F;em&gt;：确保工作连续性，知识不丢失，团队协作更便捷。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;美观易用，体验舒适 (Modern UI&#x2F;UX)&lt;&#x2F;strong&gt;
CodePins 拥有简洁现代的界面设计，支持 IntelliJ IDEA 的浅色和深色主题。卡片式的图钉展示清晰明了，力求提供愉悦的视觉和操作体验。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;-3&quot;&gt;不仅仅是书签：CodePins 的丰富应用场景&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;虽然“图钉”听起来像是一个增强版的书签，但 CodePins 的实际用途远不止于此：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码学习与分析&lt;&#x2F;strong&gt;：阅读开源项目或学习新框架时，将核心逻辑、关键函数、设计模式巧妙之处钉起来，并附上自己的理解笔记。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Bug 修复与追踪&lt;&#x2F;strong&gt;：在调试复杂问题时，钉住相关的代码路径、可疑的变量状态、重要的日志输出点，形成一个清晰的调试路径图。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;代码重构&lt;&#x2F;strong&gt;：在进行代码重构前，标记所有计划修改的接口、类和方法，确保覆盖全面，避免遗漏。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;任务管理与 TODO&lt;&#x2F;strong&gt;：将代码中临时的 TODO 事项、待优化点直接钉起来，并打上 &lt;code&gt;#todo&lt;&#x2F;code&gt; 标签，方便后续集中处理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;代码审查与分享&lt;&#x2F;strong&gt;：在Code Review前，标记出需要重点讨论或解释的代码段；也可以导出图钉分享给同事，帮助他们快速理解你的代码逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;-4&quot;&gt;开源的力量与社区&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202505251805195.png&quot; alt=&quot;image-20250525180516115&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;值得一提的是，CodePins 是一个&lt;strong&gt;完全免费且开源&lt;&#x2F;strong&gt;的项目（基于 Apache 2.0 许可证）！这意味着你可以自由地使用它，查看它的源码，甚至参与到它的改进中来。开发者社区的力量是无穷的，如果你有任何好的建议或发现了 Bug，都欢迎通过其 &lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;08820048&#x2F;codepins&quot;&gt;GitHub 仓库&lt;&#x2F;a&gt; 提出。目前最新版本已更新至 2.0.0 (截至2025年5月)，持续为用户带来更好的体验。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-5&quot;&gt;心动不如行动：如何开始使用 CodePins？&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;让 CodePins 成为你 IntelliJ IDEA 中的效率伙伴非常简单：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;打开 IntelliJ IDEA (或其他兼容的 JetBrains IDE)。&lt;&#x2F;li&gt;
&lt;li&gt;进入 &lt;code&gt;Settings&#x2F;Preferences&lt;&#x2F;code&gt; -&amp;gt; &lt;code&gt;Plugins&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;Marketplace&lt;&#x2F;code&gt; 中搜索 “CodePins”。&lt;&#x2F;li&gt;
&lt;li&gt;点击 &lt;code&gt;Install&lt;&#x2F;code&gt; 并重启 IDE。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;就是这么简单！之后，你就可以在 IDE 的侧边栏找到 CodePins 的面板，开始你的高效代码图钉之旅了。&lt;&#x2F;p&gt;
&lt;p&gt;更详细的使用说明和功能介绍，可以查阅其官方文档：&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;docs.codepins.cn&#x2F;&quot;&gt;https:&#x2F;&#x2F;docs.codepins.cn&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-6&quot;&gt;结语&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在追求极致开发效率的道路上，合适的工具往往能起到事半功倍的效果。CodePins 并非一个颠覆性的复杂工具，但它以其简洁的设计和实用的功能，精准地解决了开发者在日常代码导航和信息管理中的一些痛点。&lt;&#x2F;p&gt;
&lt;p&gt;如果你也希望在 IntelliJ IDEA 中拥有更丝滑、更有条理的代码阅读和管理体验，不妨花几分钟时间尝试一下 CodePins。或许，这个小小的“图钉”，就能为你带来意想不到的便利和效率提升。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
</description>
      </item>
      <item>
          <title>_Fanatical 五月疯狂特惠：为你的 Steam 库加点料！</title>
          <pubDate>Wed, 21 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/fanatical-wu-yue-feng-kuang-te-hui-wei-ni-de-steam-ku-jia-dian-liao/</link>
          <guid>https://ilikexff.cn/fanatical-wu-yue-feng-kuang-te-hui-wei-ni-de-steam-ku-jia-dian-liao/</guid>
          <description xml:base="https://ilikexff.cn/fanatical-wu-yue-feng-kuang-te-hui-wei-ni-de-steam-ku-jia-dian-liao/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202505211002951.jpg&quot; alt=&quot;Fanatical’s May Madness Sale&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Fanatical 的五月疯狂促销正式开启&lt;&#x2F;strong&gt;，数百款 PC 游戏最高 80% 折扣，优惠持续至 6 月 1 日！是时候为即将到来的暑期备好游戏库了！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;strong&gt;🔥 精选大促亮点&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;《星球大战合集》&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;包含《旧共和国武士 1 &amp;amp; 2》《共和国突击队》《绝地武士系列》等 14 款经典游戏，现价仅 &lt;strong&gt;$20.49 &#x2F; ¥147.53&lt;&#x2F;strong&gt;（原价 $100 &#x2F; ¥720，节省近 80%）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;抽奖福利：Spin to Win&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;单笔订单满 $15（约 ¥108）即可参与抽奖，赢取&lt;strong&gt;额外游戏或优惠券&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;额外福利&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所有订单附赠&lt;strong&gt;5% 折扣码&lt;&#x2F;strong&gt;，用于下次 Fanatical 正价商品购买。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;-1&quot;&gt;🔗 &lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.fanatical.com&quot;&gt;👉 点此查看所有优惠&lt;&#x2F;a&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h2 id=&quot;-2&quot;&gt;&lt;strong&gt;🧊 热门游戏大降价（节选）&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;游戏名称&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;美元价&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;人民币价（约）&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Alien: Isolation - The Collection&lt;&#x2F;td&gt;&lt;td&gt;$11.31&lt;&#x2F;td&gt;&lt;td&gt;¥81.43&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Helldivers 2&lt;&#x2F;td&gt;&lt;td&gt;$27.59&lt;&#x2F;td&gt;&lt;td&gt;¥198.65&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Frostpunk 2&lt;&#x2F;td&gt;&lt;td&gt;$22.49&lt;&#x2F;td&gt;&lt;td&gt;¥161.93&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Persona 3 Reload&lt;&#x2F;td&gt;&lt;td&gt;$31.49&lt;&#x2F;td&gt;&lt;td&gt;¥226.73&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Batman: Arkham Collection&lt;&#x2F;td&gt;&lt;td&gt;$7.49&lt;&#x2F;td&gt;&lt;td&gt;¥53.93&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Control - Ultimate Edition&lt;&#x2F;td&gt;&lt;td&gt;$6.00&lt;&#x2F;td&gt;&lt;td&gt;¥43.20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Dead Island 2&lt;&#x2F;td&gt;&lt;td&gt;$22.49&lt;&#x2F;td&gt;&lt;td&gt;¥161.93&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Dragon’s Dogma 2&lt;&#x2F;td&gt;&lt;td&gt;$34.29&lt;&#x2F;td&gt;&lt;td&gt;¥246.89&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Resident Evil 4 Gold Edition&lt;&#x2F;td&gt;&lt;td&gt;$25.49&lt;&#x2F;td&gt;&lt;td&gt;¥183.53&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Star Wars Collection&lt;&#x2F;td&gt;&lt;td&gt;$20.49&lt;&#x2F;td&gt;&lt;td&gt;¥147.53&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Street Fighter 6: Ultimate Edition&lt;&#x2F;td&gt;&lt;td&gt;$45.14&lt;&#x2F;td&gt;&lt;td&gt;¥325.01&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Skyrim Anniversary Edition&lt;&#x2F;td&gt;&lt;td&gt;$11.49&lt;&#x2F;td&gt;&lt;td&gt;¥82.73&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Clair Obscur: Expedition 33&lt;&#x2F;td&gt;&lt;td&gt;$41.00&lt;&#x2F;td&gt;&lt;td&gt;¥295.20&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Kingdom Come: Deliverance II&lt;&#x2F;td&gt;&lt;td&gt;$46.79&lt;&#x2F;td&gt;&lt;td&gt;¥336.89&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Dynasty Warriors: Origins&lt;&#x2F;td&gt;&lt;td&gt;$57.39&lt;&#x2F;td&gt;&lt;td&gt;¥413.21&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Capcom Fighting Collection 2&lt;&#x2F;td&gt;&lt;td&gt;$32.79&lt;&#x2F;td&gt;&lt;td&gt;¥236.09&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;&lt;strong&gt;🆕 热门新作也在打折&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;虽然部分新作折扣力度不如经典老游戏，但依然值得一试：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clair Obscur: Expedition 33&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;叙事丰富的回合制 RPG，现价 &lt;strong&gt;$41 &#x2F; ¥295.20&lt;&#x2F;strong&gt;（原价 $50 &#x2F; ¥360）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Kingdom Come: Deliverance II&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;中世纪开放世界动作 RPG，现价 &lt;strong&gt;$46.79 &#x2F; ¥336.89&lt;&#x2F;strong&gt;（原价 $60 &#x2F; ¥432）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynasty Warriors: Origins&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;全新无双割草动作游戏，现价 &lt;strong&gt;$57.39 &#x2F; ¥413.21&lt;&#x2F;strong&gt;（原价 $70 &#x2F; ¥504）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Capcom Fighting Collection 2&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;收录《Capcom vs SNK 1&amp;amp;2》《Power Stone 1&amp;amp;2》等，现价 &lt;strong&gt;$32.79 &#x2F; ¥236.09&lt;&#x2F;strong&gt;（原价 $40 &#x2F; ¥288）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;&lt;strong&gt;🧩 除了单品，还有拼包优惠！&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Fanatical 近期还举办了 &lt;strong&gt;BundleFest 春季拼包节&lt;&#x2F;strong&gt;，推出多款拼包组合，包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;🌟 Spring Super Stars Collection&lt;&#x2F;li&gt;
&lt;li&gt;🔺 Trinity Bundle&lt;&#x2F;li&gt;
&lt;li&gt;🏆 Supreme Collection
支持自定义内容组合，囊括众多独立佳作与 AAA 大作。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-5&quot;&gt;&lt;strong&gt;🎁 所有游戏支持官方激活&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;所有通过 Fanatical 购买的游戏均为&lt;strong&gt;官方正版激活码&lt;&#x2F;strong&gt;，支持平台包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Steam&lt;&#x2F;li&gt;
&lt;li&gt;Epic Games Store&lt;&#x2F;li&gt;
&lt;li&gt;其他主流 PC 平台&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-6&quot;&gt;&lt;strong&gt;📅 活动时间与更多优惠&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;活动截止时间：&lt;strong&gt;2025 年 6 月 1 日&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Fanatical 还不时推出额外预售与硬件周边优惠&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;📌 &lt;strong&gt;特别说明&lt;&#x2F;strong&gt;：GameSpot 与 Fanatical 均隶属于 Fandom 集团。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>上古神器_Vim速成备忘录</title>
          <pubDate>Tue, 13 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/shang-gu-shen-qi-vim-su-cheng-bei-wang-lu/</link>
          <guid>https://ilikexff.cn/shang-gu-shen-qi-vim-su-cheng-bei-wang-lu/</guid>
          <description xml:base="https://ilikexff.cn/shang-gu-shen-qi-vim-su-cheng-bei-wang-lu/">&lt;p&gt;三种常用模式的切换&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;vim启动属于普通模式，按ESC或Ctrl+[即可进入普通模式，&lt;&#x2F;li&gt;
&lt;li&gt;普通模式中按i（插入）或a（附加）进入插入模式，编辑结束后&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;进入vim&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果直接输入vim也可以打开vim编辑器，但是不会打开任何内容&lt;&#x2F;li&gt;
&lt;li&gt;输入如下命令，可以打开用vim模式打开后门指定的文件，如果该文件不存在会自动创建为new file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;vim test.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;输入如下命令，同样可以打开相应的文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;:e&amp;lt;filepath&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;插入模式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在ESC之后进入普通模式，该模式下，可以通过如下按键控制光标的移动插入&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;命令&lt;&#x2F;th&gt;&lt;th&gt;说明&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;i&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;在当前光标处进行编辑&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;I&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;在行首插入&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;A&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;在行末插入&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;a&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;在光标后插入编辑&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;o&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;在当前行后插入一个新行&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;O&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;在当前行前插入一个新行&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;cw&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;替换从光标所在位置后到一个单词结尾的字符&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;重复命令&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在普通模式下，.（小数点）表示重复上一次的命令操作&lt;&#x2F;li&gt;
&lt;li&gt;普通模式下输入x，删除第一个字符，输入.会再次删除一个字符，除此之外也可以重复dd的删除操作&lt;&#x2F;li&gt;
&lt;li&gt;执行指定次数相同的命令：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;N&amp;lt;command&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;练习：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;10x&#x2F;&#x2F;删除10个连续字符
&lt;&#x2F;span&gt;&lt;span&gt;3dd&#x2F;&#x2F;删除3行文本
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;复制与粘贴&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以下命令在普通模式中使用&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;y      &#x2F;&#x2F;复制
&lt;&#x2F;span&gt;&lt;span&gt;yy     &#x2F;&#x2F;复制游标所在的行，3yy表示复制3行
&lt;&#x2F;span&gt;&lt;span&gt;y^&#x2F;y0  &#x2F;&#x2F;复制到行首，y0不含光标所在字符
&lt;&#x2F;span&gt;&lt;span&gt;y$    &#x2F;&#x2F;复制到行尾，含光标位置
&lt;&#x2F;span&gt;&lt;span&gt;yw    &#x2F;&#x2F;复制一个单词
&lt;&#x2F;span&gt;&lt;span&gt;y2w   &#x2F;&#x2F;复制两个单词
&lt;&#x2F;span&gt;&lt;span&gt;yG    &#x2F;&#x2F;复制至文本末
&lt;&#x2F;span&gt;&lt;span&gt;y1G   &#x2F;&#x2F;复制至文本开头
&lt;&#x2F;span&gt;&lt;span&gt;p     &#x2F;&#x2F;粘贴（后）
&lt;&#x2F;span&gt;&lt;span&gt;P     &#x2F;&#x2F;粘贴到光标前
&lt;&#x2F;span&gt;&lt;span&gt;ddp   &#x2F;&#x2F;交换上下行
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;退出&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;ming-ling-mo-shi-xia-tui-chu-vim&quot;&gt;命令模式下退出 vim&lt;a class=&quot;zola-anchor&quot; href=&quot;#ming-ling-mo-shi-xia-tui-chu-vim&quot; aria-label=&quot;Anchor link for: ming-ling-mo-shi-xia-tui-chu-vim&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;命令&lt;&#x2F;th&gt;&lt;th&gt;说明&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;:q!&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;强制退出，不保存&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;:q&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;退出&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;:wq!&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;强制保存并退出&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;:w &amp;lt;文件路径&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;另存为&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;:saveas 文件路径&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;另存为&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;:x&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;保存并退出&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;:wq&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;保存并退出&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;pu-tong-mo-shi-xia-de-tui-chu&quot;&gt;普通模式下的退出&lt;a class=&quot;zola-anchor&quot; href=&quot;#pu-tong-mo-shi-xia-de-tui-chu&quot; aria-label=&quot;Anchor link for: pu-tong-mo-shi-xia-de-tui-chu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;普通模式下按下 &lt;code&gt;Shift+zz&lt;&#x2F;code&gt; 即可保存退出 vim。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;删除&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;命令&lt;&#x2F;th&gt;&lt;th&gt;说明&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;x&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;删除游标所在的字符&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;X&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;删除游标所在前一个字符&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Delete&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;同 &lt;code&gt;x&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;dd&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;删除整行&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;dw&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;删除一个单词（不适用中文）&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;d$&lt;&#x2F;code&gt;或&lt;code&gt;D&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;删除至行尾&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;d^&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;删除至行首&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;dG&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;删除到文档结尾处&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;d1G&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;删至文档首部&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ul&gt;
&lt;li&gt;除此之外，你还可以在命令之前加上数字，表示一次删除多行，如：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;2dd&lt;&#x2F;code&gt; 表示一次删除 2 行。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;替换与撤销&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;ti-huan-he-che-xiao&quot;&gt;替换和撤销&lt;a class=&quot;zola-anchor&quot; href=&quot;#ti-huan-he-che-xiao&quot; aria-label=&quot;Anchor link for: ti-huan-he-che-xiao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;替换和 Undo 命令都是针对普通模式下的操作：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;命令&lt;&#x2F;th&gt;&lt;th&gt;说明&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;r&lt;&#x2F;code&gt;+&amp;lt;待替换字母&amp;gt;&lt;&#x2F;td&gt;&lt;td&gt;将游标所在字母替换为指定字母&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;R&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;连续替换，直到按下 &lt;code&gt;Esc&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;cc&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;替换整行，即删除游标所在行，并进入插入模式&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;cw&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;替换一个单词，即删除一个单词，并进入插入模式&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;C&lt;&#x2F;code&gt;(大写)&lt;&#x2F;td&gt;&lt;td&gt;替换游标以后至行末&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;~&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;反转游标所在字母大小写&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;{n}u&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;撤销一次或 n 次操作&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;U&lt;&#x2F;code&gt;(大写)&lt;&#x2F;td&gt;&lt;td&gt;撤销当前行的所有修改&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;code&gt;Ctrl+r&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;redo，即撤销 undo 的操作&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;缩进&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;普通模式下输入 &lt;code&gt;15G&lt;&#x2F;code&gt;，跳转到 15 行&lt;&#x2F;li&gt;
&lt;li&gt;普通模式下输入 &lt;code&gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt; 整行将向右缩进（使用，用于格式化代码超爽）&lt;&#x2F;li&gt;
&lt;li&gt;普通模式下输入 &lt;code&gt;&amp;lt;&amp;lt;&lt;&#x2F;code&gt; 整行向左回退&lt;&#x2F;li&gt;
&lt;li&gt;普通模式下输入 &lt;code&gt;:&lt;&#x2F;code&gt; 进入命令行模式下对 &lt;code&gt;shiftwidth&lt;&#x2F;code&gt; 值进行设置可以控制缩进和回退的字符数&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;shiftwidth-ming-ling&quot;&gt;shiftwidth 命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#shiftwidth-ming-ling&quot; aria-label=&quot;Anchor link for: shiftwidth-ming-ling&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;shiftwidth&lt;&#x2F;code&gt; 命令是指上一节 &lt;code&gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt; 命令产生的缩进（可以简写成&lt;code&gt;sw&lt;&#x2F;code&gt;），普通模式下输入 &lt;code&gt;:&lt;&#x2F;code&gt; 进入命令行模式下对 &lt;code&gt;shiftwidth&lt;&#x2F;code&gt; 值进行设置可以控制缩进和回退的字符数。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;:set shiftwidth?
&lt;&#x2F;span&gt;&lt;span&gt;:set shiftwidth=10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;diao-zheng-wen-ben-wei-zhi&quot;&gt;调整文本位置&lt;a class=&quot;zola-anchor&quot; href=&quot;#diao-zheng-wen-ben-wei-zhi&quot; aria-label=&quot;Anchor link for: diao-zheng-wen-ben-wei-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;命令行模式下输入 &lt;code&gt;:ce&lt;&#x2F;code&gt;(center)命令使本行内容居中：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;:ce
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;命令行模式下输入 &lt;code&gt;:ri&lt;&#x2F;code&gt;(right)命令使本行文本靠右：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;:ri
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;命令行模式下输入 &lt;code&gt;le&lt;&#x2F;code&gt;(left)命令使本行内容靠左：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;:le
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;查找&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;kuai-su-cha-zhao&quot;&gt;快速查找&lt;a class=&quot;zola-anchor&quot; href=&quot;#kuai-su-cha-zhao&quot; aria-label=&quot;Anchor link for: kuai-su-cha-zhao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;普通模式下输入 &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; 然后键入需要查找的字符串，按回车后就会进行查找。&lt;code&gt;?&lt;&#x2F;code&gt; 与&lt;code&gt;&#x2F;&lt;&#x2F;code&gt; 功能相同，只不过 &lt;code&gt;?&lt;&#x2F;code&gt; 是向上而 &lt;code&gt;&#x2F;&lt;&#x2F;code&gt; 是向下查找。&lt;&#x2F;p&gt;
&lt;p&gt;进入查找之后，输入 &lt;code&gt;n&lt;&#x2F;code&gt; 和 &lt;code&gt;N&lt;&#x2F;code&gt; 可以继续查找。&lt;code&gt;n&lt;&#x2F;code&gt; 是查找下一个内容，&lt;code&gt;N&lt;&#x2F;code&gt; 查找上一个内容。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gao-ji-cha-zhao&quot;&gt;高级查找&lt;a class=&quot;zola-anchor&quot; href=&quot;#gao-ji-cha-zhao&quot; aria-label=&quot;Anchor link for: gao-ji-cha-zhao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;普通模式下输入 &lt;code&gt;\*&lt;&#x2F;code&gt; 寻找游标所在处的单词&lt;&#x2F;li&gt;
&lt;li&gt;普通模式下输入 &lt;code&gt;\#&lt;&#x2F;code&gt; 同上，但 &lt;code&gt;\#&lt;&#x2F;code&gt; 是向前（上）找，&lt;code&gt;\*&lt;&#x2F;code&gt; 则是向后（下）找&lt;&#x2F;li&gt;
&lt;li&gt;普通模式下输入 &lt;code&gt;g\*&lt;&#x2F;code&gt; 同 &lt;code&gt;\*&lt;&#x2F;code&gt;，但部分符合该单词即可&lt;&#x2F;li&gt;
&lt;li&gt;普通模式下输入 &lt;code&gt;g\#&lt;&#x2F;code&gt; 同 &lt;code&gt;\#&lt;&#x2F;code&gt;，但部分符合该单词即可&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以上查找 &lt;code&gt;n&lt;&#x2F;code&gt;，&lt;code&gt;N&lt;&#x2F;code&gt; 的继续查找命令依然可以用。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
</description>
      </item>
      <item>
          <title>Vim从0到1打造全语言支持的万能编辑器-语法篇</title>
          <pubDate>Tue, 13 May 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/vim-cong-0-dao-1-da-zao-quan-yu-yan-zhi-chi-de-mo-neng-bian-ji-qi-yu-fa-pian/</link>
          <guid>https://ilikexff.cn/vim-cong-0-dao-1-da-zao-quan-yu-yan-zhi-chi-de-mo-neng-bian-ji-qi-yu-fa-pian/</guid>
          <description xml:base="https://ilikexff.cn/vim-cong-0-dao-1-da-zao-quan-yu-yan-zhi-chi-de-mo-neng-bian-ji-qi-yu-fa-pian/">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;vim.jpg&quot; alt=&quot;vim&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;本期内容:&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vim&lt;&#x2F;code&gt;的简单概述&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Vim&lt;&#x2F;code&gt;的基础语法&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Vim&lt;&#x2F;code&gt;学习方法论&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;1. Vim概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.vim.org&#x2F;&quot;&gt;Vim官方网站&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Vim（Vi IMproved）&lt;&#x2F;code&gt;是一款流行的文本编辑器，是 &lt;code&gt;Unix &lt;&#x2F;code&gt;和类 &lt;code&gt;Unix &lt;&#x2F;code&gt;系统下的一种强大工具。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;你的鼠标有点像医生在你很小的时候就植入你的身体，告诉你的父母这是在电脑上做某事的最佳设备。你喜欢它是因为你已经深深地习惯了它，而且已经习惯了很长一段时间。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;问问自己：如果鼠标如此完美，为什么你最喜欢的 &lt;code&gt;IDE &lt;&#x2F;code&gt;有 &lt;code&gt;341324&lt;&#x2F;code&gt; 个键盘快捷键？也许是因为使用键盘速度更快？更轻松？更高效？更舒服吗？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;你的鼠标不是你最好的朋友。这只是一个朋友。你的键盘才是你真正的异母兄弟。力量来自于它，而 Vim 非常适合您驾驭和释放这种力量。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;2. Vim基础语法&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-2&quot;&gt;2.1 模式&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;学习&lt;code&gt;Vim&lt;&#x2F;code&gt;必须了解它的一些基本规则。&lt;code&gt;vim&lt;&#x2F;code&gt;和常规编辑器最大的区别之一是它分为四种基本模式: &lt;strong&gt;正常模式&lt;&#x2F;strong&gt; &lt;strong&gt;插入模式&lt;&#x2F;strong&gt; &lt;strong&gt;视觉模式&lt;&#x2F;strong&gt; &lt;strong&gt;命令行模式&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Normal Mode 正常模式&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;正常模式下，我们不能对文件内容进行编辑操作，包括插入、删除、替换等。只能移动光标来浏览内容：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240429175654469.png&quot; alt=&quot;image-20240429175654469&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;该模式下，我们可以通过下面的按键来移动光标：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;按下 &lt;kbd&gt;h&lt;&#x2F;kbd&gt; 向左移动一个字符。
按下 &lt;kbd&gt;j&lt;&#x2F;kbd&gt; 向下移动一个字符。
按下 &lt;kbd&gt;k&lt;&#x2F;kbd&gt; 向上移动一个字符。
按下 &lt;kbd&gt;l&lt;&#x2F;kbd&gt; 向右移动一个字符。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Insert Mode 插入模式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在默认的正常模式下，我们可以通过按下&lt;kbd&gt;i&lt;&#x2F;kbd&gt;来切换到插入模式，注意是大小写，既然这里提到了大小写问题，那就顺带说了，&lt;code&gt;Vim&lt;&#x2F;code&gt;对大小写非常敏感，比敏感肌还敏感，同一个字符大小写不同可能造成的功能差异天壤之别。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240429180820758.png&quot; alt=&quot;image-20240429180820758&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;观察上图，当我们按下&lt;kbd&gt;i&lt;&#x2F;kbd&gt;时，左下角会有一个&lt;code&gt;-- INSERT --&lt;&#x2F;code&gt;模式提示，光标样式也会发生变化。当然，切换到插入模式的命令很多，不要着急，当下的重点在于理解这几种模式，具体的其他命令后面都会一一讲解。&lt;&#x2F;p&gt;
&lt;p&gt;在插入模式下，我们可以通过&lt;kbd&gt;Esc&lt;&#x2F;kbd&gt;来切换到正常模式。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Visual Mode 视觉模式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个模式主要在选择内容是切换。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240429182144541.png&quot; alt=&quot;image-20240429182144541&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;strong&gt;正常模式&lt;&#x2F;strong&gt;下，通过下面的按键执行切换：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;V&lt;&#x2F;kbd&gt; 切换到视觉模式并以行为选择单位；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;v&lt;&#x2F;kbd&gt; 切换到视觉模式以字符为选择单位；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+v&lt;&#x2F;kbd&gt; 切换视觉模式以块为选择单位；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Command-Line Mode 命令行模式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果你在 &lt;code&gt;NORMAL &lt;&#x2F;code&gt;模式下输入 &lt;code&gt;:&lt;&#x2F;code&gt; ，你的光标会自动停在 &lt;code&gt;Vim &lt;&#x2F;code&gt;的底部。从那里，您可以输入任何您想要的命令。这些命令也称为 &lt;code&gt;Ex &lt;&#x2F;code&gt;命令。&lt;&#x2F;p&gt;
&lt;p&gt;比如下图中的例子就是使用命令行模式的搜索命令&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240429193331309.png&quot; alt=&quot;image-20240429193331309&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;该模式下的高频命令:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:help&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;打开 &lt;code&gt;Vim &lt;&#x2F;code&gt;的帮助。可以说是最有用的命令。这个帮助非常完整。例如，如果您不记得如何退出 &lt;code&gt;Vim&lt;&#x2F;code&gt;，可以输入 &lt;code&gt;:help quit&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:q&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;退出当前窗口。如果只有一个窗口（这是默认的），你最终将退出 &lt;code&gt;Vim&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:q!&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;退出而不保存。有强制效果。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:w&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;保持当前文件&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;:wq&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;保存并退出当前文件，这是组合命令。拥有同样功能但更加简化的另外一个命令是&lt;code&gt;:x&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;上面几种模式的切换都是在正常模式下进行。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;2.2 通用命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;该部分主要列一些通用的的基础命令，不仅仅是针对这部分内容是这样，其他部分的命令也只会列一部常用的，其他的东西需要自己用到时候或者当下就很好奇，那就可以通过查询文档获得帮助，这也是学习&lt;code&gt;Vim&lt;&#x2F;code&gt;的核心方法，&lt;strong&gt;随用随查随记&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;千万不要可以的去记忆或者尝试背下来这些命令，那会是一件很恐怖的事情。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-4&quot;&gt;2.2.1 搜索&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;简单的搜索，使用&lt;code&gt;&#x2F;&lt;&#x2F;code&gt;就够用了，在命令行模式下使用。确定搜索内容之后按下回车就可以了。下面是针对搜索结果的操作：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;n&lt;&#x2F;kbd&gt;：转到下一个搜索结果&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;N&lt;&#x2F;kbd&gt;：转到上一个搜索结果&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240429210746138.png&quot; alt=&quot;image-20240429210746138&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除了这种方式，还有一种基于正常模式下的搜索，在正常模式下使用这两个按键来搜索光标下的单词&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;*&lt;&#x2F;kbd&gt;:向前搜索&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;#&lt;&#x2F;kbd&gt;:向后搜索&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240429210517956.png&quot; alt=&quot;image-20240429210517956&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;您可以通过输入 &lt;code&gt;n&lt;&#x2F;code&gt; 转到 下一个搜索结果。要转到上一个，请使用 &lt;code&gt;N&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-5&quot;&gt;2.2.2 撤消&amp;amp;重做&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;撤销的功能类似于普通编辑器下的&lt;kbd&gt;Ctrl+z&lt;&#x2F;kbd&gt;,明白?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;u&lt;&#x2F;kbd&gt; ：撤销到上一次编辑操作&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;Ctrl+r&lt;&#x2F;kbd&gt;:重做当下的操作&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;怎么理解呢，比如说我上一步刚刚写了一行代码，下一刻发现没必要，于是我执行了撤销，此时这行代码将会回退到没写之前，欧克，现在我又后知后觉觉得上一步执行的撤销操作没必要了，我可以执行重做命令，恢复这行代码。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-6&quot;&gt;2.2.3 常见插入&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;上面提过的&lt;kbd&gt;i&lt;&#x2F;kbd&gt;就不再列了。下面是其他一些常用的插入模式命令：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;a&lt;&#x2F;kbd&gt;:在当前字符后插入内容&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;A&lt;&#x2F;kbd&gt;:在当前光标所有内容之后插入内容&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如我有一段内容“&lt;code&gt;are you ok&lt;&#x2F;code&gt;?“此时我光标位于这段句子的任何一个位置，当我按下&lt;kbd&gt;A&lt;&#x2F;kbd&gt;之后光标会跳到句末并开启插入模式。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;kbd&gt;o&lt;&#x2F;kbd&gt;:在当前行下方新建一行并开启插入模式&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;O&lt;&#x2F;kbd&gt;:在当前行上方新建一行并开启插入模式&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-7&quot;&gt;2.2.4 其他杂项&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;kbd&gt;$&lt;&#x2F;kbd&gt;:光标移动到行尾&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;0&lt;&#x2F;kbd&gt;:光标移动到行首(这种方式包含空格)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;^&lt;&#x2F;kbd&gt;也是光标移动到行首(不包含空格)&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-8&quot;&gt;2.3 常用组合命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-9&quot;&gt;2.3.1 常用组合&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;kbd&gt;:%d&lt;&#x2F;kbd&gt;:清空整个文件内容，包括缓冲区(理解为剪切板)&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;dG&lt;&#x2F;kbd&gt;：删除当前行及其以下内容&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;ggVG&lt;&#x2F;kbd&gt;:全选文件内容&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gg&lt;&#x2F;code&gt;：将光标移动到文件的第一行。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;V&lt;&#x2F;code&gt;：进入可视模式，开始选择文本。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;G&lt;&#x2F;code&gt;：将光标移动到文件的最后一行，这样就会选择整个文本。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;kbd&gt;dw&lt;&#x2F;kbd&gt;:删除当前单词&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;dd&lt;&#x2F;kbd&gt;:删除当前行&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;d$&lt;&#x2F;kbd&gt;:从光标处删除到行尾&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;dgg&lt;&#x2F;kbd&gt;:删除从光标到文件开头的所有内容&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;ggdG&lt;&#x2F;kbd&gt;:将删除文件中的所有内容&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;ciw&lt;&#x2F;kbd&gt;:将删除光标下的当前单词并切换到 INSERT 模式&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;diw&lt;&#x2F;kbd&gt;:删除光标下的当前单词&lt;&#x2F;p&gt;
&lt;p&gt;&lt;kbd&gt;nG&lt;&#x2F;kbd&gt;：将光标移动到指定行开头，这里的&lt;code&gt;n&lt;&#x2F;code&gt;是概数，可以是任意可达数字，比如跳到第12行开头命令是&lt;kbd&gt;10G&lt;&#x2F;kbd&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-10&quot;&gt;2.3.2 复制粘贴相关&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;复制&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;按&lt;kbd&gt;v&lt;&#x2F;kbd&gt;进入视图模式&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;方向键选择需要复制的内容&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;按下&lt;kbd&gt;y&lt;&#x2F;kbd&gt;复制选中的内容&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;kbd&gt;yy&lt;&#x2F;kbd&gt;：复制整行&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;粘贴&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;将光标移动到需要粘贴的位置&lt;&#x2F;li&gt;
&lt;li&gt;按下&lt;kbd&gt;y&lt;&#x2F;kbd&gt;粘贴复制的内容，如果要在当前光标之前粘贴，可以使用&lt;kbd&gt;P&lt;&#x2F;kbd&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;窗口滚动&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+e&lt;&#x2F;kbd&gt;:向下滚动窗口&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;Ctrl+u&lt;&#x2F;kbd&gt;：将光标 向前移动半个屏幕(会优先滚动屏幕)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;kbd&gt;&amp;lt;Ctrl+d&amp;gt;&lt;&#x2F;kbd&gt;:将光标向自己移动半个屏幕(会优先滚动屏幕)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;关于常用命令就到这里告一段落了，这些都是&lt;code&gt;Vim&lt;&#x2F;code&gt;必会而且也是最常用的命令，当然也是最基础的东西，更是冰山一角。&lt;&#x2F;p&gt;
&lt;p&gt;更多高阶的内容将会作为本专栏的最后一篇文章发表，欢迎关注。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-11&quot;&gt;3. Vim学习方法论&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这里是什么呢，简单说一下怎么学&lt;code&gt;Vim&lt;&#x2F;code&gt;吧，或者说分享一些我自己的学习方法。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;前面提到的 &lt;strong&gt;随用随查随记&lt;&#x2F;strong&gt; 不要可以去被命令，这些单词不需要听写，也不考试，戒骄戒躁慢慢来。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么把这个作为第一条方法呢，其实很多人都接触过这个东西，可能在某些时刻也曾经立下山盟海誓，不学好&lt;code&gt;Vim&lt;&#x2F;code&gt;，是不为人，结果一入门即是劝退，骂骂咧咧的走了。目前为止，对我来说可能最难搞的有两件事：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;坚持使用&lt;code&gt;Vim&lt;&#x2F;code&gt;并不断学习&lt;&#x2F;li&gt;
&lt;li&gt;学习&lt;code&gt;Rust&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;当然，还是那句话，坚持下来了才是赢家。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;大量练习！大量练习！大量练习！&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你觉得特意去准备一篇内容来练习这些命令很枯燥，那么我不妨采用我的方法：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;Linux&lt;&#x2F;code&gt;环境下只使用&lt;code&gt;Vim&lt;&#x2F;code&gt;编辑器&lt;&#x2F;li&gt;
&lt;li&gt;其他环境下，比如&lt;code&gt;windows&lt;&#x2F;code&gt;环境，尽可能使用&lt;code&gt;Vim&lt;&#x2F;code&gt;插件或者有选择的情况下选中&lt;code&gt;Vim&lt;&#x2F;code&gt;模式，旧我自己来说，我所有的编程工具和编辑器都安装了&lt;code&gt;Vim&lt;&#x2F;code&gt;插件(有的话)，而且几乎任何时候都是坚持使用&lt;code&gt;Vim&lt;&#x2F;code&gt;模式，写代码，看源码什么的，只要这个工具打开 了，那么就只有&lt;code&gt;Vim&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;坚持刷题的朋友都知道，一些&lt;code&gt;OJ&lt;&#x2F;code&gt;上也提供了&lt;code&gt;Vim&lt;&#x2F;code&gt;的模式，请毫不犹豫的打开它。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;刻意练习&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;不要觉得我两面三刀，我这里说的可以练习和上面说的含义不同，这里的可以练习是建立在坚持在&lt;code&gt;Vim&lt;&#x2F;code&gt;环境下开发的前提下的。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;每当有任何操作需求时，尽可能不要想着去动鼠标，第一时间去看文档或者问&lt;code&gt;AI&lt;&#x2F;code&gt;都可以，优先考虑这种方式使用&lt;code&gt;Vim&lt;&#x2F;code&gt;如何完成。&lt;&#x2F;li&gt;
&lt;li&gt;通过上一步之后，必然会获得一些自己遗忘的或者说没接触过的新操作，新命令，要建立一个随手记的小本本，比如记事本，把刚才学到的新东西记录下来，以备后续统一整理和复习查阅。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;板正心态&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;我知道有一部分人头热学习&lt;code&gt;Vim&lt;&#x2F;code&gt;就是为了想装个B，毕竟这玩意会用的人确实不多，看起来花里胡哨的牛逼克拉斯的，就跳出了为装逼学习的念头。&lt;&#x2F;p&gt;
&lt;p&gt;但我告诉你，这是一种病态的想法，你的初衷决定了你的上限。只有真心热爱并且想学好&lt;code&gt;Vim&lt;&#x2F;code&gt;来提升自己工作开发效率的人，才有希望坚持下来，这毕竟是个长期活，没有什么速成大法，也没有捷径可走。&lt;&#x2F;p&gt;
&lt;p&gt;当然，那些真心想学习的也不要在意别人的眼光和非议，不要觉得在公司或者一些公共场合不敢使用&lt;code&gt;Vim&lt;&#x2F;code&gt;，怕自己不够熟练被嘲笑，那可真不必，毕竟大部分人的看法都是依托答辩！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;本文的内容到这里就结束了，感谢阅读，欢迎指正，共同进步!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Unity6下架中国区，团结引擎接棒：这是分裂，还是本地化的开始？</title>
          <pubDate>Thu, 10 Apr 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/unity6xia-jia-zhong-guo-qu-tuan-jie-yin-qing-jie-bang-zhe-shi-fen-lie-huan-shi-ben-di-hua-de-kai-shi/</link>
          <guid>https://ilikexff.cn/unity6xia-jia-zhong-guo-qu-tuan-jie-yin-qing-jie-bang-zhe-shi-fen-lie-huan-shi-ben-di-hua-de-kai-shi/</guid>
          <description xml:base="https://ilikexff.cn/unity6xia-jia-zhong-guo-qu-tuan-jie-yin-qing-jie-bang-zhe-shi-fen-lie-huan-shi-ben-di-hua-de-kai-shi/">&lt;p&gt;就在近日，一则消息在国内游戏开发圈内迅速传播开来：&lt;strong&gt;Unity 6 及其后续版本已在中国大陆及港澳地区下架&lt;&#x2F;strong&gt;。这意味着，未来中国用户将无法直接使用 Unity 最新的主线版本。而取而代之的，是由 Unity 中国主导推出的本地化产品 —— &lt;strong&gt;团结引擎&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这项调整，引发了不小的震动。对于许多开发者来说，这是一次与全球 Unity 生态“逐步分离”的信号；但对于另一些人来说，这可能是中国本土游戏引擎服务体系的重新起点。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;guan-fang-gong-gao&quot;&gt;官方公告&lt;a class=&quot;zola-anchor&quot; href=&quot;#guan-fang-gong-gao&quot; aria-label=&quot;Anchor link for: guan-fang-gong-gao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504101012455.png&quot; alt=&quot;image-20250410101245137&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;strong&gt;Unity 6 为何“退出”中国？&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;Unity 官方声明中表示，这一变动“旨在确保开发者获得更贴合中国市场需求的游戏引擎服务”，由 &lt;strong&gt;团结引擎承接相关需求和功能演进&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;实际上，早在 2022 年，Unity 就已宣布将中国业务进行本地化重组，成立独立运营的 &lt;strong&gt;Unity 中国&lt;&#x2F;strong&gt;。而团结引擎（Unity China Engine）正是该架构下逐步孵化出的“本地引擎方案”。&lt;&#x2F;p&gt;
&lt;p&gt;换句话说：&lt;strong&gt;Unity 在中国的主线更新，将不再是 Unity 总公司的原生产品，而是由 Unity 中国基于 Unity 源码进行本地化演进的新产品体系。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这很像安卓系统与国内厂商定制 ROM 的关系：共享底层技术，分化发展路径。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;所以什么是团结引擎？&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;团结引擎并不是“新引擎”，而是基于 Unity 技术的中国特供版，目标是提供更具本地适配性的服务。&lt;&#x2F;p&gt;
&lt;p&gt;根据 Unity 中国的公告，团结引擎将持续继承 Unity 6 的核心特性，并针对中国用户的具体需求进行增强，例如：&lt;&#x2F;p&gt;
&lt;p&gt;​	•	更好的&lt;strong&gt;小游戏支持方案&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​	•	&lt;strong&gt;OpenHarmony 系统适配&lt;&#x2F;strong&gt;（华为鸿蒙系统生态）&lt;&#x2F;p&gt;
&lt;p&gt;​	•	&lt;strong&gt;HMI 车机系统集成&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​	•	针对中小团队优化的&lt;strong&gt;定价策略&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从战略角度来看，团结引擎不仅是一种本地化服务手段，更是 Unity 应对合规压力、技术出海障碍的“市场分区”策略。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，根据目前官方发布的公告来看，团结目前对于unity6的很多新特性和功能并没有完全支持，而是在 &lt;strong&gt;持续集成&lt;&#x2F;strong&gt;中，也就是说，如果你想体验这些新功能特性，暂时还是个问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;对开发者意味着什么&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;对现有项目：几乎没有影响&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Unity 2022 LTS 及以下版本仍可正常使用，由 Unity 中国提供支持与维护。&lt;&#x2F;li&gt;
&lt;li&gt;已上线项目或正在开发中的产品不受影响。&lt;&#x2F;li&gt;
&lt;li&gt;继续使用旧版本 Unity 是目前最稳妥的做法。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;对新项目：需要重新评估&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;想使用 Unity 6 及后续版本，必须转向“团结引擎”。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;团结引擎是否能及时继承 Unity 主线的所有新特性、工具链、插件生态，还有待观察。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Asset Store、Unity 官网插件、社区支持是否全面兼容，也存在潜在隐患。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;对全球化项目：需额外注意&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Unity 声明“团结引擎创建的项目依然可以全球发布”，但国际团队协作、版本同步、构建流程可能面临一些割裂问题。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果你是独立开发者&#x2F;创业团队，面向海外市场，可能需要保留海外 Unity 账号以获取最新版资源。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;虽然很多人将此视为 Unity 与中国市场“割裂”的开始，但从另一个角度来看，这也是国产游戏技术本地化、甚至自主化的机会窗口。&lt;&#x2F;p&gt;
&lt;p&gt;团结引擎明确提出将聚焦：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;本地开发者实际痛点&lt;&#x2F;li&gt;
&lt;li&gt;本地系统的深度兼容（如 OpenHarmony、国产 GPU 等）&lt;&#x2F;li&gt;
&lt;li&gt;更低成本、更友好授权策略&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;可以说，这是一个“因地制宜”的 Unity。&lt;&#x2F;p&gt;
&lt;p&gt;如果它能真正解决原版 Unity 在中国使用时常见的痛点（如联网问题、付费门槛高、技术响应慢），未必不是好事。关键在于：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;团结引擎的技术路线能否持续更新、稳定；&lt;&#x2F;li&gt;
&lt;li&gt;对 Unity 生态的继承是否彻底、长期；&lt;&#x2F;li&gt;
&lt;li&gt;定价、服务是否能如承诺那般对中小开发者更友好。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;关于定价的通告&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;关于这个价格问题，这里就不做评价了，我自己用的是虚幻，对unity引擎的了解并不多，各位看官自行评定！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504101020026.png&quot; alt=&quot;image-20250410102047961&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;参考链接：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;developer.unity.cn&#x2F;projects&#x2F;67ee5b89edbc2a001d422228&quot;&gt;团结引擎技术路线图&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;developer.unity.cn&#x2F;projects&#x2F;67f4fa33edbc2a001ec2d485&quot;&gt;团结引擎定价政策更新公告&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;developer.unity.cn&#x2F;projects&#x2F;67ee5a4bedbc2a001e9ec5e3&quot;&gt;unity中国区下架通告&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>独立游戏开发者工具箱：2025精选推荐与实用指南</title>
          <pubDate>Tue, 08 Apr 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/du-li-you-xi-kai-fa-zhe-gong-ju-xiang-2025jing-xuan-tui-jian-yu-shi-yong-zhi-nan/</link>
          <guid>https://ilikexff.cn/du-li-you-xi-kai-fa-zhe-gong-ju-xiang-2025jing-xuan-tui-jian-yu-shi-yong-zhi-nan/</guid>
          <description xml:base="https://ilikexff.cn/du-li-you-xi-kai-fa-zhe-gong-ju-xiang-2025jing-xuan-tui-jian-yu-shi-yong-zhi-nan/">&lt;p&gt;本期的文章不涉及具体的开发技术或者理论知识，单纯的整理推荐一些我知道的和在用的工具库。包含了音频处理工具、图形处理、编码工具、版本控制和游戏引擎等各方面的内容，游戏开发必备神器。&lt;&#x2F;p&gt;
&lt;p&gt;我会在文末将提到的工具链接列出来，就算现在用不到，放到收藏夹也值得，万一哪天阿婆主这个站点倒闭了，直接打开收藏夹掏出来就用。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yin-pin-gong-ju&quot;&gt;音频工具&lt;a class=&quot;zola-anchor&quot; href=&quot;#yin-pin-gong-ju&quot; aria-label=&quot;Anchor link for: yin-pin-gong-ju&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;优质音频是游戏成功的关键因素之一，尤其对于音响发烧友来说更为重要。随着工具和资源的种类繁多，选择适合的音频工具往往让人感到挑战重重。接下来，我将为你精简一些最适合独立游戏开发者的音频工具。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;fmod-studio&quot;&gt;FMOD Studio&lt;a class=&quot;zola-anchor&quot; href=&quot;#fmod-studio&quot; aria-label=&quot;Anchor link for: fmod-studio&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;FMOD Studio&lt;&#x2F;code&gt; 是一款广受欢迎的音频中间件，它简化了将复杂音频元素集成到游戏中的过程。&lt;code&gt;FMOD&lt;&#x2F;code&gt; 支持动态音频，可以根据游戏事件的变化调整声音，具备强大的功能、跨平台支持，并且对于小规模开发者来说，它是免费的，只要收入符合要求。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081649672.png&quot; alt=&quot;image-20250408164949419&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;Audacity&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Audacity&lt;&#x2F;code&gt; 是一款开源且免费的音频编辑软件，适合录制和编辑声音，尤其适用于基础音频处理和音效制作。它操作简便，支持多种格式，并且完全免费。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081653447.png&quot; alt=&quot;image-20250408165330389&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-1&quot;&gt;Melodrive&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Melodrive&lt;&#x2F;code&gt; 是一款基于人工智能的音乐引擎，专为创建实时自适应音乐而设计，特别适用于互动应用如游戏和虚拟现实。它的音乐能够实时响应游戏中的变化，根据玩家的操作和环境动态调整，从而增强沉浸感。&lt;code&gt;Melodrive&lt;&#x2F;code&gt; 的优势在于支持多种音乐风格和情感调性，并且能够与 &lt;code&gt;Unity、Unreal&lt;&#x2F;code&gt; 等主流游戏引擎无缝集成，随时根据游戏的节奏和剧情需求调整音乐内容。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081655011.png&quot; alt=&quot;image-20250408165521944&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;图形与艺术&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-3&quot;&gt;Blender&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Blender&lt;&#x2F;code&gt;是一款完全免费的开源3D创作软件，能够处理从建模、绑定、动画到渲染等各类任务。它的功能与许多高价商业软件不相上下，因此成为了游戏开发者的宠儿。&lt;code&gt;Blender&lt;&#x2F;code&gt;因其强大的工具集、活跃的开发进程和广泛的社区支持，成为3D建模、动画以及游戏资产制作的理想选择。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081702893.png&quot; alt=&quot;image-20250408170220815&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-4&quot;&gt;Aseprite&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;对于喜爱复古风格和专注像素艺术的开发者，&lt;code&gt;Aseprite&lt;&#x2F;code&gt;是一个非常合适的工具，专门用于创建动画精灵和图形。它的界面非常直观，帮助用户高效地进行像素艺术创作。&lt;code&gt;Aseprite&lt;&#x2F;code&gt;的优势在于它对像素艺术的专注、动画支持以及合理的价格，使其成为2D像素风格游戏的最佳选择。&lt;&#x2F;p&gt;
&lt;p&gt;有些开发者已经将&lt;code&gt;Blender&lt;&#x2F;code&gt;与&lt;code&gt;Aseprite&lt;&#x2F;code&gt;结合起来，利用&lt;code&gt;Blender&lt;&#x2F;code&gt;进行3D建模和纹理处理，再将成果导入&lt;code&gt;Aseprite&lt;&#x2F;code&gt;进行像素艺术和动画的细化。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081702292.png&quot; alt=&quot;image-20250408170255225&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-5&quot;&gt;Krita&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;另一个值得一提的工具是&lt;code&gt;Krita&lt;&#x2F;code&gt;。它是一款免费的开源数字绘画软件，非常适合创作概念艺术、纹理和插图。&lt;code&gt;Krita&lt;&#x2F;code&gt;的优点包括强大的画笔引擎、可定制的界面以及完全免费的特点，深受数字艺术家的喜爱。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081703292.png&quot; alt=&quot;image-20250408170355247&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-6&quot;&gt;DeepMotion&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;DeepMotion&lt;&#x2F;code&gt;则提供了基于AI的实时动作捕捉和3D动画工具。通过分析视频数据，它能够生成适用于3D角色的动作数据，无需传统的动作捕捉设备。对于需要高质量动作数据但又不愿意投资昂贵设备的动画师、游戏开发者和导演而言，&lt;code&gt;DeepMotion&lt;&#x2F;code&gt;提供了一个理想的解决方案。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081704142.png&quot; alt=&quot;image-20250408170435064&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不同的图形工具各有所长，选择合适的工具应根据开发者的需求。例如，&lt;code&gt;Blender&lt;&#x2F;code&gt;提供了全面的3D建模功能，包括高级雕刻和&lt;code&gt;UV&lt;&#x2F;code&gt;映射，而&lt;code&gt;Krita&lt;&#x2F;code&gt;在数字绘画方面表现突出，拥有多种画笔和稳定器。关键在于识别你的具体需求，选择最适合的工具，这样才能节省时间和资源，提高开发效率。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-7&quot;&gt;版本控制工具&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-8&quot;&gt;Git&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Git&lt;&#x2F;code&gt; 是一款旨在高效处理各种规模项目的版本控制工具。它使得多个开发者可以同时在同一个项目上进行协作，而不会互相覆盖对方的更改，从而提供了一个无缝的协作环境。因此，&lt;code&gt;Git&lt;&#x2F;code&gt; 是团队协作中不可或缺的工具，并且拥有强大的社区支持。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;Git&lt;&#x2F;code&gt; 时，你可以选择多个不同的服务平台，其中最著名的有 &lt;code&gt;GitHub&lt;&#x2F;code&gt;（提供拉取请求、代码审查、问题追踪以及 &lt;code&gt;GitHub Actions&lt;&#x2F;code&gt; 用于持续集成&#x2F;持续部署的功能）、&lt;code&gt;GitLab&lt;&#x2F;code&gt;（除了托管代码库，还集成了&lt;code&gt;CI&#x2F;CD&lt;&#x2F;code&gt;和项目管理工具）以及 &lt;code&gt;Bitbucket&lt;&#x2F;code&gt;（&lt;code&gt;Atlassian&lt;&#x2F;code&gt; 的 &lt;code&gt;Git&lt;&#x2F;code&gt; 托管与协作工具）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-9&quot;&gt;SVN&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;而 &lt;code&gt;Subversion（SVN）&lt;&#x2F;code&gt;是一种集中式版本控制系统，帮助开发者在时间上管理源代码和文件的变化。它通过在一个中央仓库中跟踪每次修改，让多名贡献者能够共同参与项目的开发。同时，&lt;code&gt;SVN&lt;&#x2F;code&gt; 会保留所有更改的历史记录，允许用户在必要时回滚到早期版本。其优点包括强大的集中式控制、易于使用、非常适合管理大文件、成熟且稳定，且具有丰富的文档和社区支持。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081708577.png&quot; alt=&quot;image-20250408170813512&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;Git&lt;&#x2F;code&gt; 和 &lt;code&gt;SVN&lt;&#x2F;code&gt; 的对比中，有一点值得注意：&lt;code&gt;Git&lt;&#x2F;code&gt; 是去中心化的，因此具有更高的灵活性；而 SVN 则是集中式的，限制了其灵活性。不过，&lt;code&gt;SVN&lt;&#x2F;code&gt; 的学习曲线相对较低，使用起来更为直观,所以可以根据自己的需求选择。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-10&quot;&gt;编程工具&#x2F;环境&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;visual-studio&quot;&gt;&lt;code&gt;Visual Studio&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#visual-studio&quot; aria-label=&quot;Anchor link for: visual-studio&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在众多游戏开发者中，&lt;code&gt;Visual Studio&lt;&#x2F;code&gt; 无疑是最受欢迎的开发工具之一。作为微软推出的强大集成开发环境（IDE），它为开发各种平台的应用程序提供了全面的工具支持，包括桌面、&lt;code&gt;Web&lt;&#x2F;code&gt;、移动和云应用。凭借智能代码编辑、强大的调试功能以及与微软服务的紧密集成，&lt;code&gt;Visual Studio&lt;&#x2F;code&gt; 大大提高了开发效率，简化了开发流程。它特别适合使用 &lt;code&gt;C++、C#、JavaScript&lt;&#x2F;code&gt; 和 &lt;code&gt;Python&lt;&#x2F;code&gt; 等语言的开发工作。尽管 &lt;code&gt;Visual Studio&lt;&#x2F;code&gt; 是收费的，许多专业开发者仍然选择它，而相比之下，&lt;code&gt;VS Code&lt;&#x2F;code&gt; 功能较少，但它是免费的且对系统资源的需求更低，适合更轻量级的开发。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081715750.png&quot; alt=&quot;image-20250408171536697&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-11&quot;&gt;Rider&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;对于从事 .&lt;code&gt;NET&lt;&#x2F;code&gt; 和 &lt;code&gt;Unity&lt;&#x2F;code&gt; 开发的人员，&lt;code&gt;JetBrains Rider&lt;&#x2F;code&gt; 提供了一款快速且高效的 IDE。它不仅支持智能代码补全，还集成了大量提高生产力的功能。&lt;code&gt;Rider&lt;&#x2F;code&gt; 提供了丰富的功能、对 &lt;code&gt;Unity&lt;&#x2F;code&gt; 的良好支持以及跨平台兼容性，是需要一个强大 IDE 来进行 C# 开发的开发者的理想选择。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081716684.png&quot; alt=&quot;image-20250408171615614&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;需要注意的是，前者的mac版本已经不再维护和继续提供新版本，所以如果你和我一样也是mac环境，我觉得&lt;code&gt;Rider&lt;&#x2F;code&gt;是一个不错的选择，不管是UE和Unity开发，都丝滑。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-12&quot;&gt;中间件和库&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-13&quot;&gt;&lt;strong&gt;Photon&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;如果你是一位准备尝试多人游戏开发的独立开发者，那么 &lt;strong&gt;Photon&lt;&#x2F;strong&gt; 会是你的得力助手。它是一个久经考验的网络解决方案，特别适配 Unity，提供了诸如匹配系统、实时通信等核心功能。易于上手、文档完善、可扩展性强，是打造多人实时互动游戏的热门选择。&lt;&#x2F;p&gt;
&lt;p&gt;而如果你的目标平台是 &lt;strong&gt;Steam&lt;&#x2F;strong&gt;，那么 &lt;strong&gt;Steamworks SDK&lt;&#x2F;strong&gt; 几乎是必备工具。它能帮助你轻松接入 Steam 的成就系统、排行榜、云存档等功能模块，还提供了 DRM 支持，让你在保护游戏版权的同时增强用户体验。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081718168.png&quot; alt=&quot;image-20250408171805069&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-14&quot;&gt;Box2D&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在物理模拟方面，&lt;strong&gt;Box2D&lt;&#x2F;strong&gt; 依然是不可忽视的一员。作为一款 C++ 编写的开源 2D 物理引擎，Box2D 提供了丰富的刚体动力学特性，包括碰撞检测、摩擦、弹性和各种关节机制。它的普及程度非常高，被广泛移植到多个平台和语言中，不仅集成方便，还有活跃的开发者社区。无论你是在做 2D 平台跳跃类游戏、物理益智游戏，还是教育类模拟器，Box2D 都能提供强大支撑。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081718454.png&quot; alt=&quot;image-20250408171846393&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在游戏开发的世界里，创意固然重要，但没有合适的工具，再好的创意也难以落地。好在如今工具生态日趋完善，无论是网络架构、平台接入还是物理引擎，都有成熟的解决方案可选。本文介绍的这些开发利器，是当下独立游戏圈中广受认可的实用选项，它们兼顾了功能性、上手难度和性价比，能够助你高效实现创意，走得更远。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-15&quot;&gt;游戏引擎&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-16&quot;&gt;Unity&lt;a class=&quot;zola-anchor&quot; href=&quot;#-16&quot; aria-label=&quot;Anchor link for: -16&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;主要语言为C#&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在众多游戏引擎中，&lt;strong&gt;Unity 几乎成了独立开发者的代名词&lt;&#x2F;strong&gt;。2023 年的一份开发者调查显示，近一半的 indie 开发者都将 Unity 作为首选工具。&lt;&#x2F;p&gt;
&lt;p&gt;这并不令人意外。&lt;strong&gt;Unity 的全面性和跨平台特性&lt;&#x2F;strong&gt;让它成为一个“万能工具箱”——不论是 2D 游戏还是 3D 大作，不管目标平台是 PC、主机还是移动端，都能用 Unity 实现。而且它有一个极其活跃的社区，插件资源丰富，新手学习成本也相对较低。对于预算有限的小团队来说，&lt;strong&gt;用 Unity 起步，效率高，风险低&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081725289.png&quot; alt=&quot;image-20250408172525193&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-17&quot;&gt;Unreal Engine（虚幻引擎）&lt;a class=&quot;zola-anchor&quot; href=&quot;#-17&quot; aria-label=&quot;Anchor link for: -17&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;主要语言为C++&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;当然，并不是所有开发者都选择 Unity。&lt;strong&gt;Unreal Engine（虚幻引擎）&lt;&#x2F;strong&gt; 依旧拥有自己的一席之地，特别是那些希望实现 &lt;strong&gt;高质量画面表现&lt;&#x2F;strong&gt; 的团队。Unreal 的图形渲染能力非常强大，常被用于 3A 游戏制作。即使你没有太多编程经验，也可以借助它的 &lt;strong&gt;可视化蓝图系统（Blueprints）&lt;&#x2F;strong&gt; 快速搭建原型。同时，它的授权方式对 indie 开发者也很友好：&lt;strong&gt;收入没达到阈值之前完全免费使用&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081726862.png&quot; alt=&quot;image-20250408172601788&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-18&quot;&gt;&lt;strong&gt;Godot&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-18&quot; aria-label=&quot;Anchor link for: -18&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用引擎自研的脚本语言&lt;strong&gt;GDScript&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;另外一个正在迅速被更多人关注的引擎是 &lt;strong&gt;Godot&lt;&#x2F;strong&gt;。它完全开源、免费，没有授权费用，非常适合预算有限的小团队使用。Godot 在 2D 游戏开发方面表现尤为出色，采用的是节点系统，&lt;strong&gt;逻辑清晰、结构直观&lt;&#x2F;strong&gt;，对初学者来说十分友好。再加上社区活跃度越来越高，它正逐步成为一股不可忽视的力量。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504081726136.png&quot; alt=&quot;image-20250408172629071&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;总结来说&lt;&#x2F;strong&gt;，Unity 适合想快速起步、跨平台开发的团队；Unreal 更偏向视觉质量要求高的项目；Godot 则是那些倾向于轻量、自由和开源理念的开发者的不二之选。每个引擎各有所长，关键还是要结合你的项目需求做出判断。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-19&quot;&gt;地址列表&lt;a class=&quot;zola-anchor&quot; href=&quot;#-19&quot; aria-label=&quot;Anchor link for: -19&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.fmod.com&#x2F;&quot;&gt;fmod&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.audacityteam.org&#x2F;&quot;&gt;Audacity&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;melodrive.itch.io&#x2F;&quot;&gt;Melodrive&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.blender.org&#x2F;&quot;&gt;blender&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.aseprite.org&#x2F;&quot;&gt;aseprite&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;krita.org&#x2F;en&#x2F;&quot;&gt;krita&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;box2d.org&#x2F;&quot;&gt;box2d&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.photonengine.com&#x2F;pun&quot;&gt;Photon&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;rider&#x2F;&quot;&gt;rider&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;vhttps:&#x2F;&#x2F;visualstudio.microsoft.com&#x2F;.microsoft.com&#x2F;&quot;&gt;visualstudio&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.unrealengine.com&#x2F;en-US&quot;&gt;虚幻引擎&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;godotengine.org&#x2F;&quot;&gt;godot&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;unity.com&#x2F;&quot;&gt;unity&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>游戏开发必备：高效的 AABB、球体和 OBB 碰撞检测算法</title>
          <pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/you-xi-kai-fa-bi-bei-gao-xiao-de-aabb-qiu-ti-he-obb-peng-zhuang-jian-ce-suan-fa/</link>
          <guid>https://ilikexff.cn/you-xi-kai-fa-bi-bei-gao-xiao-de-aabb-qiu-ti-he-obb-peng-zhuang-jian-ce-suan-fa/</guid>
          <description xml:base="https://ilikexff.cn/you-xi-kai-fa-bi-bei-gao-xiao-de-aabb-qiu-ti-he-obb-peng-zhuang-jian-ce-suan-fa/">&lt;h2 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;2025-4-7&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增OBB部分内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;在游戏开发中，碰撞是一个常见且基础的术语，也是绝大部分3D游戏避不开的技术点。本文基于3D&#x2F;2D游戏中物体碰撞的基本数学原理、计算实现等方面进行展开，时间关系，关于碰撞检测可能涉及到的物理部分的内容可能会在后续的维护中进行更新。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;文中涉及到的三维配图均来自&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;visux.ilikexff.cn&#x2F;&quot;&gt;VisuAlgoX&lt;&#x2F;a&gt;(已开源,好用麻烦点个star)&lt;&#x2F;li&gt;
&lt;li&gt;文中涉及的手稿均为本人亲手画的,比较抽象但是可以食用,不是美术专业,理解下吧!&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ji-chu-pu-dian&quot;&gt;基础铺垫&lt;a class=&quot;zola-anchor&quot; href=&quot;#ji-chu-pu-dian&quot; aria-label=&quot;Anchor link for: ji-chu-pu-dian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在正式讨论物体碰撞之前，有必要先铺垫一些相关的基础知识。这不仅能帮助我们更好地理解后续内容，特别是对于初学者来说，也能降低理解成本。&lt;&#x2F;p&gt;
&lt;p&gt;在现实世界中，物体的形状是复杂而不规则的，但在三维游戏世界中，我们所看到的每一个物体——无论是赛车、人物角色、墙壁，还是武器——实际上都是由相对规则的几何图形包裹起来的。这些几何图形被称为&lt;strong&gt;碰撞体（Collision Shape）&lt;&#x2F;strong&gt;，它们决定了游戏引擎在进行碰撞检测时如何计算物体之间的交互。&lt;&#x2F;p&gt;
&lt;p&gt;你可能会问，为什么要使用几何图形，而不是直接采用物体本身的精确模型来进行碰撞计算呢？&lt;&#x2F;p&gt;
&lt;p&gt;原因很简单，主要是为了&lt;strong&gt;优化性能，减少计算量&lt;&#x2F;strong&gt;。游戏运行时，可能会有成千上万个物体相互作用，如果直接使用复杂的三角网格进行碰撞检测，计算成本将会非常高，严重影响游戏的流畅性。&lt;&#x2F;p&gt;
&lt;p&gt;因此，我们通常使用相对简单的几何形状（如&lt;strong&gt;矩形、立方体、球体、胶囊体等&lt;&#x2F;strong&gt;）来近似表示物体的边界，从而加快碰撞检测的计算速度。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504022120396.png&quot; alt=&quot;image-20250402212043171&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那么，应该如何选择适当的碰撞体来包裹物体呢？这并没有固定的标准，而是取决于物体本身的形状、用途以及性能需求。例如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;立方体（AABB 或 OBB）&lt;&#x2F;strong&gt; 适用于墙壁、箱子等规则物体，计算高效。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;球体（Sphere）&lt;&#x2F;strong&gt; 适用于圆形物体，如弹珠、行星，旋转无须复杂计算。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;胶囊体（Capsule）&lt;&#x2F;strong&gt; 常用于人物角色，因为它能更平滑地处理地形变化。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;凸包（Convex Hull）&lt;&#x2F;strong&gt; 适用于需要更精确碰撞的物体，但计算量比基本几何体高。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;网格（Mesh）&lt;&#x2F;strong&gt; 只在特殊情况下使用，如静态场景，因其计算复杂度较高。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;总之，游戏中的物体通常不会使用完全精确的形状进行碰撞检测，而是根据具体需求选择合适的近似几何体，以在&lt;strong&gt;性能与精度之间取得平衡&lt;&#x2F;strong&gt;。掌握这些概念，有助于更好地理解后续碰撞检测相关的算法和优化策略。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;当然，上述列出的几种情况的碰撞，并不会都在本文中体现，至少目前不会，因此无须担心看完脑壳大的问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;碰撞检测&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;有了上述的理解基础，现在可以开始碰撞检测的相关内容了。当我们需要判断确认两个物体(多物体同理)之间是否会发生碰撞时，通常不会使用物体本身的数据作为判断计算的依据，这一点在铺垫内容中已说过，这样做的代价是很高的，真实物体复杂的形状会导致高密度的计算，加剧性能消耗。与此同时，这样的做法也会使得碰撞检测变得异常复杂。&lt;&#x2F;p&gt;
&lt;p&gt;所以，在碰撞检测中，通常使用的是相对简单的几何形状来替代，前面提到过，这样的做法可以大大减少计算量，降低计算的复杂度。究其原因，包括但不限于这些几何形状通常具有很好的数学定义，使得代码也更加容易编写。&lt;&#x2F;p&gt;
&lt;p&gt;虽然简单的几何形状可以方便我们更好的简化计算，总结更加高效的碰撞算法，但是他也存在一定的不足，如果你完全理解了这之前的铺垫内容病结合我们提供的配图，想必对于这样做的不足之处已心里有点B数了吧！&lt;&#x2F;p&gt;
&lt;p&gt;希望就是你想的那样，这样做的一个最突出的不知在于他们不能很好的包裹原物体，比如下面这张途中就是采用了矩形来包裹里面屎黄色甜甜圈。&lt;&#x2F;p&gt;
&lt;p&gt;首先直观的一点是，对于物体本体甜甜圈来说，它仅仅占用来矩形的一部分空间，这导致存在大量的空间冗余，换个角度说就是，这个矩形并没有很好很紧实的将我们的甜甜圈围起来，但是我们在做碰撞检测时，参与计算的实际上就是这个外层的矩形，那么在实际情况下，我们检测到的碰撞可能只是一个近似碰撞，而非精确的碰撞。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504022136177.png&quot; alt=&quot;image-20250402213654112&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所以，通过上面的内容，你应该知道一点，我们讨论的碰撞检测，都是基于包裹在外围的矩形来计算的，因此，在大部分情况下，这会是一个近似值。下图是一个简单的示意图,可以配合理解。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504022208894.jpeg&quot; alt=&quot;截屏 2025-04-02 22.04.49&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-1&quot;&gt;AABB和AABB&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;AABB（Axis-Aligned Bounding Box，轴对齐包围盒）是一种与场景坐标轴对齐的&lt;strong&gt;矩形或立方体&lt;&#x2F;strong&gt;碰撞形状。它可以用来包围游戏中的物体，并用于高效的碰撞检测。AABB 的概念不仅适用于&lt;strong&gt;三维（3D）世界&lt;&#x2F;strong&gt;，在&lt;strong&gt;二维（2D）环境&lt;&#x2F;strong&gt;中也同样适用，区别在于：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3D AABB&lt;&#x2F;strong&gt;：边界框沿 x、y、z 轴对齐，通常用来包围立方体或其他三维物体。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;2D AABB&lt;&#x2F;strong&gt;：边界框仅沿 x、y 轴对齐，适用于二维游戏中的碰撞检测。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;AABB 的“轴对齐”意味着它的边缘始终与坐标轴&lt;strong&gt;平行&lt;&#x2F;strong&gt;，即：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;二维空间&lt;&#x2F;strong&gt;，左右边界平行于 y 轴，上下边界平行于 x 轴。&lt;&#x2F;li&gt;
&lt;li&gt;在&lt;strong&gt;三维空间&lt;&#x2F;strong&gt;，所有六个面都分别与 x、y、z 轴平行，没有旋转。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;由于这种固定的对齐方式，AABB &lt;strong&gt;不需要复杂的矩阵运算&lt;&#x2F;strong&gt;，而是可以通过简单的&lt;strong&gt;数值比较&lt;&#x2F;strong&gt;（最小&#x2F;最大点的重叠判断）来确定两个 AABB 是否发生碰撞。因此，&lt;strong&gt;无论是在 2D 还是 3D 环境中，AABB 都是计算两个物体碰撞的最快方法之一&lt;&#x2F;strong&gt;，常用于游戏引擎中的&lt;strong&gt;初步碰撞检测（Broad Phase）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504022220552.png&quot; alt=&quot;image-20250402222017444&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;判断一个点是否在 AABB 内部非常简单 ,只需要检查该点的坐标是否位于 AABB 的范围内，且需要分别对每个轴进行检查。这是一种常见的判定方法,基于 &lt;strong&gt;最小点（Min）和最大点（Max&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504031112746.png&quot; alt=&quot;image-20250403111247691&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下面是一个基于2维空间中判断检测的示意图,主要是理解上面的提到的两个最值点的原理:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504022247724.jpeg&quot; alt=&quot;IMG_142305A0761D-1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;OK,基于此,我们简化一下该流程,假设我们只在X轴上进行重叠判断,可以得到下面的示意图,对于X,我们只需要判定物体的$A_(minX)-A(maxX)$和$B_(minX)-B_(maxX)$时候重叠。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504022241316.jpeg&quot; alt=&quot;IMG_AEBED0883639-1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;原理相似,我们可以很快推导出基于三维空间的重叠判断原理:&lt;&#x2F;p&gt;
&lt;p&gt;如果两个 AABB 在&lt;strong&gt;所有轴向上&lt;&#x2F;strong&gt;都有重叠，则它们发生碰撞。例如，在 3D 空间中存在两个AABB:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;A&lt;&#x2F;strong&gt; 的范围为 (A_minX, A_maxX, A_minY, A_maxY, A_minZ, A_maxZ)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;B&lt;&#x2F;strong&gt; 的范围为 (B_minX, B_maxX, B_minY, B_maxY, B_minZ, B_maxZ)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;那么它们发生碰撞的条件可以表示为:&lt;&#x2F;p&gt;
&lt;p&gt;$A_{\text{maxX}} \geq B_{\text{minX}} \quad \text{且} \quad A_{\text{minX}} \leq B_{\text{maxX}}$&lt;&#x2F;p&gt;
&lt;p&gt;$A_{\text{maxY}} \geq B_{\text{minY}} \quad \text{且} \quad A_{\text{minY}} \leq B_{\text{maxY}}$&lt;&#x2F;p&gt;
&lt;p&gt;$A_{\text{maxZ}} \geq B_{\text{minZ}} \quad \text{且} \quad A_{\text{minZ}} \leq B_{\text{maxZ}}$&lt;&#x2F;p&gt;
&lt;p&gt;转化成语言表达就是&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;X 轴上&lt;&#x2F;strong&gt;，A 和 B 有重叠&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Y 轴上&lt;&#x2F;strong&gt;，A 和 B 有重叠&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Z 轴上&lt;&#x2F;strong&gt;，A 和 B 有重叠&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;只有&lt;strong&gt;三个轴上都有重叠&lt;&#x2F;strong&gt;，两个 AABB 才会发生碰撞。&lt;&#x2F;p&gt;
&lt;p&gt;示例代码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;AABB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3 min;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; AABB 的最小点
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3 max;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; AABB 的最大点
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Intersects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; AABB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;想想看,为什么上述这些条件成立的情况下, 就能判断它们基于某个轴有重叠?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;不妨先假设AB两个物体在X轴上有重叠,那么我们可以得到哪些条件?&lt;&#x2F;p&gt;
&lt;p&gt;区间关系:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A 的范围是 [A_minX, A_maxX]&lt;&#x2F;li&gt;
&lt;li&gt;B 的范围是 [B_minX, B_maxX]&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;发生重叠的充要条件是：两个区间存在交集，即至少有部分范围相交。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;换句话说就是,如果这两个物体在X轴有重叠,那么就意味着它们X轴范围存在 &lt;strong&gt;交集&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;由此可得:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A 的右端点必须大于等于 B 的左端点&lt;&#x2F;strong&gt;（否则 A 在 B 左侧，没交集）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$A_{\text{maxX}} \geq B_{\text{minX}}$&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;A 的左端点必须小于等于 B 的右端点&lt;&#x2F;strong&gt;（否则 A 在 B 右侧，没交集）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$A_{\text{minX}} \leq B_{\text{maxX}}$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;结合上面给出的第二张手稿图理解,两种颜色在X轴上的部分就是这两个物体在该轴上的映射,所以又红又绿的部分就是它们的交集 ,很好理解。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-2&quot;&gt;Point和AABB&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;理解了上面AABB和AABB之间的碰撞检测原理,那么这里即将提到的点与AABB的碰撞你将会得心应手。&lt;&#x2F;p&gt;
&lt;p&gt;点与 AABB 的碰撞检测比 &lt;strong&gt;AABB 对 AABB&lt;&#x2F;strong&gt; 更简单，本质上是&lt;strong&gt;判断点是否在 AABB 的范围内&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;数学角度:&lt;&#x2F;p&gt;
&lt;p&gt;假设:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;存在点P的坐标为($P_x,P_y,P_z$)&lt;&#x2F;li&gt;
&lt;li&gt;AABB的最小点(Min)为($B_(minX),B_(minY),B_(minZ)$)&lt;&#x2F;li&gt;
&lt;li&gt;AABB的最大点(Max)为($B_(maxX),B_(maxY),B_(maxZ)$)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;那么,点P时候在AABB内部的判断条件就是:&lt;&#x2F;p&gt;
&lt;p&gt;$B_{\text{minX}} \leq P_x \leq B_{\text{maxX}}$&lt;&#x2F;p&gt;
&lt;p&gt;$B_{\text{minY}} \leq P_y \leq B_{\text{maxY}}$&lt;&#x2F;p&gt;
&lt;p&gt;$B_{\text{minZ}} \leq P_z \leq B_{\text{maxZ}}$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果上述三个条件都满足，则点 P 位于 AABB 内部，否则点 P 在 AABB 之外。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;上述的推导是基于三维的,但同样适用于二维空间,如果觉得吃力,配合下图食用,口感更佳!!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504022333044.jpeg&quot; alt=&quot;IMG_EF87FF0525AE-1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; x, y, z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;AABB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3 min;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; AABB 的最小点
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3 max;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; AABB 的最大点
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Contains&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;优化与扩展&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快速剔除&lt;&#x2F;strong&gt;：在 3D 空间中，如果某个维度上 Px 超出了 BmaxX 或 BminX，就可以直接判定点不在 AABB 内部，不需要检查其他维度。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;空间划分优化&lt;&#x2F;strong&gt;：在大型 3D 场景中，可以使用 &lt;strong&gt;八叉树（Octree）&lt;&#x2F;strong&gt; 或 &lt;strong&gt;BVH（Bounding Volume Hierarchy）&lt;&#x2F;strong&gt; 来加速点与 AABB 的查询。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;Point和球&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;这个就更简单了,要判断一个球体时候包含一个点,我们只需要计算这个点到球体中心的距离,如果这个距离小于等于球体的半径R,则说明该点在球体内。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504022345741.jpeg&quot; alt=&quot;IMG_458BB2EA0A70-1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对于距离的计算,可以使用欧几里得距离计算,因此,最终的数学条件应该满足:&lt;&#x2F;p&gt;
&lt;p&gt;$\sqrt{(P_x - C_x)^2 + (P_y - C_y)^2 + (P_z - C_z)^2} \leq R$&lt;&#x2F;p&gt;
&lt;p&gt;当然,在实际开发中,为了提高计算效率,可以省去开方的计算,直接使用平方距离:&lt;&#x2F;p&gt;
&lt;p&gt;$(P_x - C_x)^2 + (P_y - C_y)^2 + (P_z - C_z)^2 \leq R^2$&lt;&#x2F;p&gt;
&lt;p&gt;对于二维,也是同一个原理,无非是少一个坐标的事情,这里不再赘述,下面看下示例代码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; x, y, z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Sphere &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3 center;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 球心坐标
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; radius;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 球半径
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Contains&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Vector3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;point&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; dx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; center.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; dy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; center.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; dz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; point.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; center.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;dx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; dx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; dy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; dy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; dz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; dz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;= (&lt;&#x2F;span&gt;&lt;span&gt;radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; radius&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;扩张优化&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;就是上面提到过的采用平方距离的方式,提高计算效率。&lt;&#x2F;li&gt;
&lt;li&gt;如果 $|Px - Cx| &amp;gt; R，|Py - Cy| &amp;gt; R，|Pz - Cz| &amp;gt; R$，那么点一定在球外，可以提前剔除。&lt;&#x2F;li&gt;
&lt;li&gt;在 3D 碰撞检测中，球体比 AABB 更适用于旋转物体，因为球体没有方向问题，计算时不会受到物体旋转的影响。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;关于最后一点,这里补充一下,在考虑物体旋转的情况下,球体确实有着没有方向问题的先天优势,但是它的适用范围有限,对于那些不规则(没有很近似球)的形状物体来说,使用球体可能无法完全包裹住原物体&lt;&#x2F;p&gt;
&lt;p&gt;一个很常见的例子就是,游戏中的人物角色,如果你考虑用一个球体去包裹住一个人,不能说不行,只是很抽象,想想看,一个160米高的人你得需要多大的球体才可以全部包裹?&lt;&#x2F;p&gt;
&lt;p&gt;即使包裹住了,那么人物在球体中就只占据一个方向大部分空间,比如高度维度(头和脚刚好顶住球体的上下顶点),但是人物前后会空出很大的空间,这直接导致在计算碰撞时,会出现很大的误差。&lt;&#x2F;p&gt;
&lt;p&gt;试想一下,你被装到一个刚好能容纳你的充气球体中和另外一个同样装扮的人碰撞的时候,相互碰撞接触到的都是两个人的球体,哪怕两人的球体气囊紧紧贴在一起,但是实际两个人距离物理意义上的碰撞还相差甚远!&lt;&#x2F;p&gt;
&lt;p&gt;这就是误差,别忘了我们一开始说过的,游戏世界中,碰撞计算不是基于原物体进行,因此这个误差理论上来说尽可能小才会得到更佳真实的游戏体验。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;下面是以射击游戏来简单举例这一点:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504030017345.jpeg&quot; alt=&quot;截屏 2025-04-03 00.17.03&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;字体有点帅,所以这里简单解释一下,黑色的人物是我们游戏中实际操纵的角色,但是在游戏世界中,假设我们采用球体来包裹角色进行碰撞检测,假设子弹接触到人体表示中弹了,要死人的那种。&lt;&#x2F;p&gt;
&lt;p&gt;那么基于这个假设,当子弹打到球体上时,系统就已经判定你被击毙了,当其时此时子弹距离你角色本身好有一段距离,这就是误差,这样的设计是不合理的,因此,在面对先人物这样的实体时,3D游戏中一般采用胶囊体来作为碰撞检测的外在盒子,而不是球体。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-4&quot;&gt;球体和球体&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;球体与球体的碰撞检测和 &lt;strong&gt;点与球体&lt;&#x2F;strong&gt; 类似，依然使用 &lt;strong&gt;欧几里得距离&lt;&#x2F;strong&gt;，但这次需要检查&lt;strong&gt;两个球心之间的距离&lt;&#x2F;strong&gt;是否小于等于它们半径之和。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504031012543.jpeg&quot; alt=&quot;IMG_FA5609536869-1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;数学原理:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$\sqrt{(Ax - Bx)^2 + (Ay - By)^2 + (Az - Bz)^2} \leq R_A + R_B$&lt;&#x2F;p&gt;
&lt;p&gt;同理,为了简化计算,可以使用平方距离:&lt;&#x2F;p&gt;
&lt;p&gt;$(Ax - Bx)^2 + (Ay - By)^2 + (Az - Bz)^2 \leq (R_A + R_B)^2$&lt;&#x2F;p&gt;
&lt;p&gt;其中R代表球A和球B的半径。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; x, y, z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Sphere &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3 center;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 球心坐标
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; radius;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 球半径
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Intersects&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Sphere&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; dx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; center.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; dy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; center.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; dz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; center.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; distanceSquared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; dx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; dy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; dy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; dz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; dz;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; radiusSum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; radius &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; other.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;radius&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; distanceSquared &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;= (&lt;&#x2F;span&gt;&lt;span&gt;radiusSum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; radiusSum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;可以用于球形物体的&lt;strong&gt;碰撞检测&lt;&#x2F;strong&gt;，如&lt;strong&gt;弹珠、行星、子弹轨迹&lt;&#x2F;strong&gt;等。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-5&quot;&gt;球体和AABB&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在游戏开发和物理引擎中，&lt;strong&gt;球体（Sphere）与 AABB（轴对齐包围盒）&lt;&#x2F;strong&gt; 的碰撞检测常用于检测角色（球形范围）与障碍物（AABB）之间的碰撞，如 FPS 游戏中的子弹检测，或者物理引擎中物体与环境的交互。&lt;&#x2F;p&gt;
&lt;p&gt;判断碰撞条件,我们可以计算AABB的每一个顶点与球心的距离,但是这样不仅繁琐,而且有些多余,一般的方法是计算AABB的最近点到球心的距离即可。&lt;&#x2F;p&gt;
&lt;p&gt;直观来看,一个球体与AABB的碰撞检测就是检查AABB内部的&lt;strong&gt;最近点&lt;&#x2F;strong&gt;到&lt;strong&gt;球心的距离&lt;&#x2F;strong&gt;是否小于等于&lt;strong&gt;球的半径&lt;&#x2F;strong&gt;。如果该条件成立,可以判定碰撞,否则不发生碰撞。&lt;&#x2F;p&gt;
&lt;p&gt;注意,这里提到几个关键词:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;最近点&lt;&#x2F;li&gt;
&lt;li&gt;球心、半径&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;对于球心和半径,想必都很好理解,这里主要讲一下什么是AABB的最近点。&lt;&#x2F;p&gt;
&lt;p&gt;所谓的最近点指的是AABB内部与球心距离最近的那个点。这个点是AABB表面或者内部的某个点,它是球心投影到AABB内部的结果。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504031035047.jpeg&quot; alt=&quot;IMG_5F7809059412-1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对于上图中的AABB和球体来说,这个绿色的矩形(二维空间下)中每一个点到球心的距离都不一样,但是我们需要找到的是那个距离球心最近的点,也就是途中黑颜色的D标注的距离。&lt;&#x2F;p&gt;
&lt;p&gt;推广到三维空间中,也是同样的原理:下面是一个简单的模拟。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504031040997.png&quot; alt=&quot;image-20250403104020869&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果球心在AABB内部,那么最近点就是球心本身,必然会发生碰撞。&lt;&#x2F;li&gt;
&lt;li&gt;如果球心在AABB外部,那么最近点就是球星投影到AABB上的某个点,我们只需要判断这个最近点到球心的距离时候小于等于球的半径。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;数学原理:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;球体&lt;&#x2F;strong&gt; 的球心坐标为$P = (P_x, P_y, P_z)$，半径为 R。&lt;&#x2F;li&gt;
&lt;li&gt;AABB 由 &lt;strong&gt;最小点&lt;&#x2F;strong&gt; $B_{\min} = (B_{\min X}, B_{\min Y}, B_{\min Z})$ 和 最大点 $B_{\max} = (B_{\max X}, B_{\max Y}, B_{\max Z})$定义。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;那么,我们可以逐维计算最近点:&lt;&#x2F;p&gt;
&lt;p&gt;对于每一个轴,最近点的计算方法如下:&lt;&#x2F;p&gt;
&lt;p&gt;$C_x = \max(B_{\min X}, \min(P_x, B_{\max X}))$&lt;&#x2F;p&gt;
&lt;p&gt;$C_y = \max(B_{\min Y}, \min(P_y, B_{\max Y}))$&lt;&#x2F;p&gt;
&lt;p&gt;$C_z = \max(B_{\min Z}, \min(P_z, B_{\max Z}))$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;min(P, B_max)&lt;&#x2F;strong&gt; 限制上界，确保最近点不会超出 AABB 的最大边界。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;max(P, B_min)&lt;&#x2F;strong&gt; 限制下界，确保最近点不会小于 AABB 的最小边界。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;最终得到最近点为$C = (C_x, C_y, C_z)$&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; x, y, z;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;AABB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3 min;
&lt;&#x2F;span&gt;&lt;span&gt;    Vector3 max;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;AABB &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ComputeAABB&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Vector3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;vertices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    AABB box;
&lt;&#x2F;span&gt;&lt;span&gt;    box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span&gt;std::numeric_limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, std::numeric_limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, std::numeric_limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span&gt;std::numeric_limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lowest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, std::numeric_limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lowest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, std::numeric_limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lowest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; vertices&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;, v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;, v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;, v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;box.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span&gt;, v.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; box;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;-6&quot;&gt;OBB 碰撞检测&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;上面讲的碰撞检测尽管计算方便快速,但是它并不适用于动态旋转的物体,这是AABB类碰撞计算的不足之处。&lt;&#x2F;p&gt;
&lt;p&gt;那么按照一般的狗血剧情,接下来我要说的就是相对于旋转物体的碰撞检计算方法了,没错,狗血的剧情就是这么的中规中矩,意外不了一点!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-7&quot;&gt;OBB的基本概念&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;OBB&lt;&#x2F;code&gt;（&lt;code&gt;Oriented Bounding Box&lt;&#x2F;code&gt;，有向包围盒）是一种 &lt;strong&gt;任意方向的包围盒&lt;&#x2F;strong&gt;，不同于&lt;code&gt; AABB&lt;&#x2F;code&gt;（轴对齐包围盒），它的边缘不一定与坐标轴对齐，而是可以 &lt;strong&gt;旋转到最佳适应物体的方向&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;OBB 可以随物体旋转，而不会像 AABB 那样在旋转时变得过大。&lt;&#x2F;li&gt;
&lt;li&gt;因为OBB不是轴对齐的,所以它通常比AABB更贴合物体的实际形状,减少多余的空白区域。&lt;&#x2F;li&gt;
&lt;li&gt;同样,由于其旋转支持的特性,在处理碰撞计算时,它需要存储更多的关于旋转的信心,比如方向向量或者旋转矩阵,并且碰撞检测更复杂,所以需要相对于AABB更高的计算成本。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在二维和三维空间中,OBB通常由一下数据定义:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;中心点C&lt;&#x2F;strong&gt;:OBB的几何中心&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;半尺寸向量H&lt;&#x2F;strong&gt;:表示 OBB 在每个轴方向上的半边长。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;旋转矩阵R&lt;&#x2F;strong&gt;（或方向向量）：定义 OBB 的方向，使其不再与坐标轴对齐。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;先不要急着懵逼,接下来排好队,一个一个来!&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-8&quot;&gt;半尺寸向量&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;半尺寸向量通常表示 OBB 沿着其局部坐标轴的 &lt;strong&gt;半边长&lt;&#x2F;strong&gt;。假设一个 OBB 在局部坐标系下的尺寸为 $2w \times 2h \times 2d$，那么它的半尺寸向量为：$\mathbf{h} = (w, h, d)$,即:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;$w$ 是沿局部 x 轴的半边长&lt;&#x2F;li&gt;
&lt;li&gt;$h$ 是沿局部 y 轴的半边长&lt;&#x2F;li&gt;
&lt;li&gt;$d$ 是沿局部 z 轴的半边长&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;感觉话都说道这一步来,应该是理解了,但是保险起见,还是配个图吧,由于涉及到三维结构,为了各位的生命安全着想,我就不请之画手稿了(其实我偷偷画过了,看得我自己难受),直接从写好的3D辅助工具中截图好了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504031306352.png&quot; alt=&quot;image-20250403130616215&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;参考上图,我们只需要关注红色的三维矩形,正如你看到的,红色长方体自身存在一个三维坐标系,它就是局部坐标轴,为什么叫局部?没看到整个大场景中还存在一个世界坐标轴??这下明白了吧,局部的意思就是,这个坐标轴是针对红色立长体本身的,这很好理解。&lt;&#x2F;p&gt;
&lt;p&gt;长方体是一个长宽高分别为&lt;code&gt;(2,2,2)&lt;&#x2F;code&gt;的尺寸。那么可以得到它在各个维度上的半尺寸数据为&lt;code&gt;(1,1,1)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个向量的意义在于，它可以用于快速计算 OBB 在不同方向上的投影，特别是在碰撞检测时，通过它可以推导出 OBB 在某个方向上的投影范围。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于贴动会导致我用的&lt;code&gt;typora&lt;&#x2F;code&gt;编辑器卡顿,所以建议还是直接去&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;visux.ilikexff.cn&#x2F;&quot;&gt;VisuAlgoX&lt;&#x2F;a&gt;,在里面你可以通过调整几何体的参数,工具会动态的计算半尺寸向量和接下来要讲的旋转矩阵等实时数据,配合本文食用,事半功倍!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504031322338.png&quot; alt=&quot;image-20250403132229278&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-9&quot;&gt;旋转矩阵&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;OBB 不是轴对齐的，它有自己的局部坐标系，方向是任意的。我们可以用 &lt;strong&gt;旋转矩阵&lt;&#x2F;strong&gt; R 来表示 OBB 的方向。旋转矩阵通常是一个 &lt;strong&gt;3×3 矩阵&lt;&#x2F;strong&gt;，它的每一列是 OBB 的局部坐标轴在世界坐标系下的方向向量：&lt;&#x2F;p&gt;
&lt;p&gt;$R = \begin{bmatrix} \mathbf{u_x} &amp;amp; \mathbf{u_y} &amp;amp; \mathbf{u_z} \end{bmatrix} \begin{bmatrix} u_{xx} &amp;amp; u_{xy} &amp;amp; u_{xz} \ u_{yx} &amp;amp; u_{yy} &amp;amp; u_{yz} \ u_{zx} &amp;amp; u_{zy} &amp;amp; u_{zz} \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;p&gt;其中:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;$\mathbf{u_x}, \mathbf{u_y}, \mathbf{u_z}$分别是 OBB 在世界坐标系中的局部 x、y、z 轴单位向量&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;这个矩阵 &lt;strong&gt;将 OBB 的局部坐标转换到世界坐标&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;旋转矩阵的计算方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;假设OBB需要围绕某个轴旋转一定的角度,我们可以使用 &lt;strong&gt;基本旋转矩阵&lt;&#x2F;strong&gt; 进行变换。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;绕X轴旋转&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果围绕X轴旋转的角度为$\theta$,旋转矩阵为:&lt;&#x2F;p&gt;
&lt;p&gt;$R_x(\theta) = \begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 \ 0 &amp;amp; \cos\theta &amp;amp; -\sin\theta \ 0 &amp;amp; \sin\theta &amp;amp; \cos\theta \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;绕Y轴旋转角度为$\theta$,旋转矩阵为:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$R_y(\theta) = \begin{bmatrix} \cos\theta &amp;amp; 0 &amp;amp; \sin\theta \ 0 &amp;amp; 1 &amp;amp; 0 \ -\sin\theta &amp;amp; 0 &amp;amp; \cos\theta \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;绕 Z 轴旋转角度为$\theta$，旋转矩阵为：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$R_z(\theta) = \begin{bmatrix} \cos\theta &amp;amp; -\sin\theta &amp;amp; 0 \ \sin\theta &amp;amp; \cos\theta &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 1 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对于组合旋转的情况&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;如果 OBB 需要绕 &lt;strong&gt;多个轴旋转&lt;&#x2F;strong&gt;，可以组合这些旋转矩阵，例如：&lt;&#x2F;p&gt;
&lt;p&gt;$R = R_z(\theta_z) R_y(\theta_y) R_x(\theta_x)$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一说一,理论说这么多,不如一个实际例子来的直观,下面就以一个半尺寸向量为&lt;code&gt;(2,1,1)&lt;&#x2F;code&gt;的长方体旋转矩阵的计算过程为例:&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;首先,基于给定信息可知:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;OBB 在 &lt;strong&gt;局部坐标系&lt;&#x2F;strong&gt; 中，顶点坐标相对于中心点 C 是：$(\pm2, \pm1, \pm1)$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;半尺寸向量$h=(2,1,1)$&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;长宽高分别为(4,2,2)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我们假设现在该OBB围绕Z轴旋转了$30^\circ$,另外两个轴保持不动,得到:&lt;&#x2F;p&gt;
&lt;p&gt;$\theta_z = 30^\circ, \quad \theta_x = 0^\circ, \quad \theta_y = 0^\circ$&lt;&#x2F;p&gt;
&lt;p&gt;那么,围绕Z轴的旋转矩阵的计算如下:&lt;&#x2F;p&gt;
&lt;p&gt;$R_z(30^\circ) = \begin{bmatrix} \cos 30^\circ &amp;amp; -\sin 30^\circ &amp;amp; 0 \ \sin 30^\circ &amp;amp; \cos 30^\circ &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 1 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;p&gt;其中,30° 的三角函数值:$\cos 30^\circ = \frac{\sqrt{3}}{2} \approx 0.866, \quad \sin 30^\circ = \frac{1}{2} = 0.5$&lt;&#x2F;p&gt;
&lt;p&gt;代入可得:$R_z = \begin{bmatrix} 0.866 &amp;amp; -0.5 &amp;amp; 0 \ 0.5 &amp;amp; 0.866 &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 1 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;p&gt;我们可以借助&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;visux.ilikexff.cn&#x2F;&quot;&gt;VisuAlgoX &lt;&#x2F;a&gt;中的 &lt;strong&gt;OBB旋转矩阵可视化&lt;&#x2F;strong&gt;辅助工具,调整好旋转角度,验证我们的计算结果:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504031435530.png&quot; alt=&quot;image-20250403143552336&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到,抛开结果精度,我们的计算结果是没问题的。以此类推,围绕X和Y轴旋转指定角度的旋转矩阵计算方式是同理的,可以自己尝试。&lt;&#x2F;p&gt;
&lt;p&gt;对于组合旋转矩阵的计算,可以先分别计算出三个维度上的旋转矩阵,再作矩阵乘法运算即可,&lt;strong&gt;但是需要注意的是,矩阵乘法是非交换的,组合顺序不同,结果也不同。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下面就以XYZ三个维度旋转30、45、60度后的选择矩阵的计算为例,重点理解矩阵乘法的非交换性质。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;绕X 30度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$R_x = \begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 \ 0 &amp;amp; \cos 30^\circ &amp;amp; -\sin 30^\circ \ 0 &amp;amp; \sin 30^\circ &amp;amp; \cos 30^\circ \end{bmatrix} \begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 \ 0 &amp;amp; 0.866 &amp;amp; -0.5 \ 0 &amp;amp; 0.5 &amp;amp; 0.866 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;绕Y 45度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$R_y = \begin{bmatrix} \cos 45^\circ &amp;amp; 0 &amp;amp; \sin 45^\circ \ 0 &amp;amp; 1 &amp;amp; 0 \ -\sin 45^\circ &amp;amp; 0 &amp;amp; \cos 45^\circ \end{bmatrix} \begin{bmatrix} 0.707 &amp;amp; 0 &amp;amp; 0.707 \ 0 &amp;amp; 1 &amp;amp; 0 \ -0.707 &amp;amp; 0 &amp;amp; 0.707 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;绕Z 60度&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;$R_z = \begin{bmatrix} \cos 60^\circ &amp;amp; -\sin 60^\circ &amp;amp; 0 \ \sin 60^\circ &amp;amp; \cos 60^\circ &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 1 \end{bmatrix} \begin{bmatrix} 0.5 &amp;amp; -0.866 &amp;amp; 0 \ 0.866 &amp;amp; 0.5 &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 1 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;p&gt;对于最终的组合计算结果,下面给出两种不同组合的旋转顺序:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;XYZ顺序&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$R_{\text{XYZ}} = R_z R_y R_x = \begin{bmatrix} 0.353 &amp;amp; -0.573 &amp;amp;  0.739 \ 0.612 &amp;amp;  0.739 &amp;amp;  0.280 \ -0.707 &amp;amp;  0.354 &amp;amp;  0.612 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;ZYX顺序&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;$R_{\text{ZYX}} = R_x R_y R_z = \begin{bmatrix} 0.353 &amp;amp; -0.612 &amp;amp;  0.707 \ 0.927 &amp;amp;  0.127 &amp;amp; -0.354 \ 0.127 &amp;amp;  0.780 &amp;amp;  0.612 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;p&gt;观察 $R_{\text{XYZ}}$ 和 $R_{\text{ZYX}}$ 的数值，可以发现：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;它们的 &lt;strong&gt;第一行、第二行、第三行的数值完全不同&lt;&#x2F;strong&gt;，这意味着 &lt;strong&gt;旋转的最终结果也不同&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;例如，在 $R_{\text{XYZ}}$ 中，第三行的 &lt;strong&gt;Z 轴方向分量是 (-0.707, 0.354, 0.612)&lt;&#x2F;strong&gt;，而在 $R_{\text{ZYX}}$ 中，它变成了 &lt;strong&gt;(0.127, 0.780, 0.612)&lt;&#x2F;strong&gt;，说明旋转的轨迹发生了变化。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;我们可以在辅助工具中设置不同的旋转顺序进行验证:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504031510859.gif&quot; alt=&quot;obb1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这意味着矩阵乘法是非交换的,即$R_z R_y R_x \neq R_x R_y R_z$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;旋转的顺序不同，最终物体的姿态也会不同&lt;&#x2F;strong&gt;，因此，在 3D 变换中 &lt;strong&gt;必须严格按照指定的旋转顺序&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-10&quot;&gt;顶点计算&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;在 &lt;strong&gt;局部坐标系&lt;&#x2F;strong&gt;（即 OBB &lt;strong&gt;未旋转&lt;&#x2F;strong&gt; 时），顶点的坐标相对于中心点 C 为：$V_i = (\pm h_x, \pm h_y, \pm h_z)$&lt;&#x2F;p&gt;
&lt;p&gt;得到OBB八个顶点的排列方式:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;$(+h_x, +h_y, +h_z)$&lt;&#x2F;p&gt;
&lt;p&gt;$(+h_x, +h_y, -h_z)$&lt;&#x2F;p&gt;
&lt;p&gt;$(+h_x, -h_y, +h_z)$&lt;&#x2F;p&gt;
&lt;p&gt;$(+h_x, -h_y, -h_z)$&lt;&#x2F;p&gt;
&lt;p&gt;$(-h_x, +h_y, +h_z)$&lt;&#x2F;p&gt;
&lt;p&gt;$(-h_x, +h_y, -h_z)$&lt;&#x2F;p&gt;
&lt;p&gt;$(-h_x, -h_y, +h_z)$&lt;&#x2F;p&gt;
&lt;p&gt;$(-h_x, -h_y, -h_z)$&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这些坐标是 &lt;strong&gt;相对于 OBB 的局部坐标系&lt;&#x2F;strong&gt; 的，并没有考虑 OBB 在世界坐标系中的位置和旋转。&lt;&#x2F;p&gt;
&lt;p&gt;对于OBB在世界坐标系下的8个顶点的计算,先考虑OBB只有平移没有旋转的情况:&lt;&#x2F;p&gt;
&lt;p&gt;如果 OBB &lt;strong&gt;没有旋转&lt;&#x2F;strong&gt;，那么它的世界坐标系顶点就是：&lt;&#x2F;p&gt;
&lt;p&gt;$V_{\text{world}, i} = C + V_{\text{local}, i}$&lt;&#x2F;p&gt;
&lt;p&gt;比如,$C=(3,2,1),(h_x,h_y,h_z)=(2,2,1)$的世界坐标系顶点为:&lt;&#x2F;p&gt;
&lt;p&gt;$(+2,+1,+1) + (3,2,1) = (5,3,2)$&lt;&#x2F;p&gt;
&lt;p&gt;$(+2,+1,-1) + (3,2,1) = (5,3,0)$&lt;&#x2F;p&gt;
&lt;p&gt;$(-2,-1,-1) + (3,2,1) = (1,1,0)$&lt;&#x2F;p&gt;
&lt;p&gt;……以此类推&lt;&#x2F;p&gt;
&lt;p&gt;考虑OBB发生旋转的情况,就需要使用到旋转矩阵R来变换局部坐标,进一步计算世界坐标系下的顶点:&lt;&#x2F;p&gt;
&lt;p&gt;$V_{\text{world}, i} = C + R \times V_{\text{local}, i}$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;R 是 &lt;strong&gt;OBB 的旋转矩阵&lt;&#x2F;strong&gt;（3×3）&lt;&#x2F;li&gt;
&lt;li&gt;$V_{\text{local}, i}$ 是局部坐标系下的 8 个顶点&lt;&#x2F;li&gt;
&lt;li&gt;计算时，每个顶点的局部坐标 &lt;strong&gt;先乘以&lt;&#x2F;strong&gt; R &lt;strong&gt;旋转&lt;&#x2F;strong&gt;，再加上 OBB 的中心点 C&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;举个例子吧,C还是用上面的数据,其中$(h_x, h_y, h_z) = (2,1,1)$,此时得到局部坐标系的8个顶点:$V_{\text{local}, i} = (\pm2, \pm1, \pm1)$&lt;&#x2F;p&gt;
&lt;p&gt;假设OBB绕Z轴旋转30度得到旋转矩阵:&lt;&#x2F;p&gt;
&lt;p&gt;$R_z(30^\circ) = \begin{bmatrix} \cos 30^\circ &amp;amp; -\sin 30^\circ &amp;amp; 0 \ \sin 30^\circ &amp;amp; \cos 30^\circ &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 1 \end{bmatrix} \begin{bmatrix} 0.866 &amp;amp; -0.5 &amp;amp; 0 \ 0.5 &amp;amp; 0.866 &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 1 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;1. 计算局部顶点结果旋转矩阵变换后的新坐标&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以顶点$(+2,+1,+1)$为例:&lt;&#x2F;p&gt;
&lt;p&gt;$V{\prime} = R \times \begin{bmatrix} 2 \ 1 \ 1 \end{bmatrix} \begin{bmatrix} 0.866 &amp;amp; -0.5 &amp;amp; 0 \ 0.5 &amp;amp; 0.866 &amp;amp; 0 \ 0 &amp;amp; 0 &amp;amp; 1 \end{bmatrix} \times \begin{bmatrix} 2 \ 1 \ 1 \end{bmatrix}$&lt;&#x2F;p&gt;
&lt;p&gt;按照矩阵乘法:&lt;&#x2F;p&gt;
&lt;p&gt;$x{\prime} = (0.866 \times 2) + (-0.5 \times 1) + (0 \times 1) = 1.732 - 0.5 = 1.232$&lt;&#x2F;p&gt;
&lt;p&gt;$y{\prime} = (0.5 \times 2) + (0.866 \times 1) + (0 \times 1) = 1.0 + 0.866 = 1.866$&lt;&#x2F;p&gt;
&lt;p&gt;$z{\prime} = (0 \times 2) + (0 \times 1) + (1 \times 1) = 1$&lt;&#x2F;p&gt;
&lt;p&gt;得到,旋转后的局部坐标:$V{\prime}=(1.232, 1.866, 1)$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;2. 加上OBB的中心点&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$V_{\text{world}} = C + V{\prime}=(3,2,1) + (1.232, 1.866, 1) = (4.232, 3.866, 2)$&lt;&#x2F;p&gt;
&lt;p&gt;我们对所有 8 个局部顶点 $(\pm2, \pm1, \pm1)$ &lt;strong&gt;重复上面的计算&lt;&#x2F;strong&gt;，最终结果如下：&lt;&#x2F;p&gt;
&lt;p&gt;$\begin{aligned} &amp;amp;(4.232, 3.866, 2), \quad (4.232, 3.866, 0), \ &amp;amp;(5.232, 2.133, 2), \quad (5.232, 2.133, 0), \ &amp;amp;(0.768, 1.866, 2), \quad (0.768, 1.866, 0), \ &amp;amp;(1.768, 0.134, 2), \quad (1.768, 0.134, 0) \end{aligned}$&lt;&#x2F;p&gt;
&lt;p&gt;同样,我们可以使用3D可视化进行实时计算:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504031644158.gif&quot; alt=&quot;obb2_resize&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;更新正在路上,感谢阅读!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-11&quot;&gt;参考&amp;amp;引用&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;visux.ilikexff.cn&#x2F;&quot;&gt;https:&#x2F;&#x2F;visux.ilikexff.cn&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E5%8C%85%E5%9B%B4%E4%BD%93&quot;&gt;https:&#x2F;&#x2F;zh.wikipedia.org&#x2F;wiki&#x2F;%E5%8C%85%E5%9B%B4%E4%BD%93&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.gamedeveloper.com&#x2F;game-platforms&#x2F;simple-intersection-tests-for-games&quot;&gt;https:&#x2F;&#x2F;www.gamedeveloper.com&#x2F;game-platforms&#x2F;simple-intersection-tests-for-games&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;learnopengl.com&#x2F;In-Practice&#x2F;2D-Game&#x2F;Collisions&#x2F;Collision-detection&quot;&gt;https:&#x2F;&#x2F;learnopengl.com&#x2F;In-Practice&#x2F;2D-Game&#x2F;Collisions&#x2F;Collision-detection&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>游戏开发与的贝塞尔曲线_感受丝滑的数学之美</title>
          <pubDate>Sun, 30 Mar 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/you-xi-kai-fa-yu-de-bei-sai-er-qu-xian-gan-shou-si-hua-de-shu-xue-zhi-mei/</link>
          <guid>https://ilikexff.cn/you-xi-kai-fa-yu-de-bei-sai-er-qu-xian-gan-shou-si-hua-de-shu-xue-zhi-mei/</guid>
          <description xml:base="https://ilikexff.cn/you-xi-kai-fa-yu-de-bei-sai-er-qu-xian-gan-shou-si-hua-de-shu-xue-zhi-mei/">&lt;h2 id=&quot;jie-shao&quot;&gt;介绍&lt;a class=&quot;zola-anchor&quot; href=&quot;#jie-shao&quot; aria-label=&quot;Anchor link for: jie-shao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;贝塞尔曲线是计算机图形学中最重要的概念之一，以其在表示曲线时的灵活性和精确性而闻名。广泛应用于计算机图形学、动画、路径规划等领域的数学曲线。&lt;&#x2F;p&gt;
&lt;p&gt;贝塞尔曲线的数学原理基础是1912年成立的伯恩斯坦多项式。&lt;&#x2F;p&gt;
&lt;p&gt;简单来说,贝塞尔曲线是通过可变数量的点定义的。当控制点只有两个时,绘制出来的是一条直线,也称为&lt;strong&gt;线性贝塞尔曲线&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;具有三个控制点的贝塞尔曲线是 &lt;strong&gt;二次贝塞尔曲线&lt;&#x2F;strong&gt;,四个点控制的则是三次贝塞尔曲线,以此类推。&lt;&#x2F;p&gt;
&lt;p&gt;其中,二次和三次贝塞尔曲线比较常用,也是比较受欢迎的两种。因为他们在计算简单性和能够表示无限范围的曲线之间取得了平衡。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;qu-xian-fang-cheng&quot;&gt;曲线方程&lt;a class=&quot;zola-anchor&quot; href=&quot;#qu-xian-fang-cheng&quot; aria-label=&quot;Anchor link for: qu-xian-fang-cheng&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;贝塞尔曲线方程可以表示为:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503301949531.png&quot; alt=&quot;image&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其中,$B(t)$ 是贝塞尔曲线在参数 t 上的点。&lt;&#x2F;p&gt;
&lt;p&gt;$n$是贝塞尔曲线的次数&lt;&#x2F;p&gt;
&lt;p&gt;$P_i$是控制点。&lt;&#x2F;p&gt;
&lt;p&gt;更具体的,对于&lt;strong&gt;一阶贝塞尔曲线&lt;&#x2F;strong&gt;,公式如下:&lt;&#x2F;p&gt;
&lt;p&gt;$B(t) = (1 - t) P_0 + t P_1 \quad \text{，其中 } t \in [0, 1]$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中的$P_0$,$P_1$是两个控制点,曲线从$P_0$出发,经过$P_1$,且为一条直线。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;二次贝塞尔曲线&lt;&#x2F;strong&gt;有三个控制点，通常用于平滑的路径绘制。该曲线依赖于一个控制点来弯曲直线,这种操作相比很多人都不陌生,我们在很多绘图软件中需要用到曲线或者带箭头的曲线时,都会通过鼠标拖动头尾之外的中间点来实现想要的弯曲效果。&lt;&#x2F;p&gt;
&lt;p&gt;$B(t) = (1 - t)^2 P_0 + 2(1 - t)t P_1 + t^2 P_2 \quad \text{，其中 } t \in [0, 1]$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;$P_0$ 和 $P_2$  是起始点和终点，$P_1$  是控制点，影响曲线的弯曲度。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;三次贝塞尔曲线&lt;&#x2F;strong&gt;有四个控制点，常用于图形和字体的平滑曲线，尤其是在矢量图形软件中。&lt;&#x2F;p&gt;
&lt;p&gt;$B(t) = (1 - t)^3 P_0 + 3(1 - t)^2 t P_1 + 3(1 - t) t^2 P_2 + t^3 P_3 \quad \text{，其中 } t \in [0, 1]$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类似的,其中的$p_0$和$p_3$作为起点和终点,其余两个参数作为曲线控制参数,分别控制曲线的起始和终止方向。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;对于更高阶的贝塞尔曲线（如四次、五次等）可以用于更复杂的曲线绘制，它们的公式类似于三次贝塞尔曲线，只是控制点数量和计算复杂度增加。&lt;&#x2F;p&gt;
&lt;p&gt;$B(t) = \sum_{i=0}^{n} \binom{n}{i} (1 - t)^{n-i} t^i P_i$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里$ \binom{n}{i}$ 是二项式系数，控制点的数量为 $n+1$,对这个公式展开后就是上面一开始给出的方程了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;尝试实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这一节中尝试探讨一下贝塞尔曲线的实现,采用&lt;code&gt;C++&lt;&#x2F;code&gt;和``javascript`代码进行实践。需要说明的是,出于学习的目的,我们这里直接采用递归的实现方法,当然,对于复杂、大数值的贝塞尔曲线,递归可能不够高效,还可能出现栈溢出的问题,因此可以采用迭代的方式,由于我们这里只实现常用的二次和三次曲线,因此就直接使用递归了。&lt;&#x2F;p&gt;
&lt;p&gt;需要说明的是,我们最终需要的是通过代码绘制出来一条贝塞尔曲线,因此就不能通过普通的方法去实现,需要借助一些可以绘图的工具,在&lt;code&gt;C++&lt;&#x2F;code&gt;中,可以使用&lt;code&gt;SFML&lt;&#x2F;code&gt;或者&lt;code&gt;UE&lt;&#x2F;code&gt;等游戏引擎,当然,出于懒惰,趁我&lt;code&gt;UE&lt;&#x2F;code&gt;还没关就直接用它来实现了。&lt;&#x2F;p&gt;
&lt;p&gt;对于&lt;code&gt;JS&lt;&#x2F;code&gt;语言,可以借助&lt;code&gt;Css&lt;&#x2F;code&gt;来配合实现可视化。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-1&quot;&gt;基于C++在UE5中的实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;出于简单的目的,这里直接采用UE中的图形化调试类&lt;code&gt;DrawDebugHelpers&lt;&#x2F;code&gt;来实现了,但这不代表实现方式唯一,仅供参考。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ABezierCurveActor.h&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#pragma&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; once
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;CoreMinimal.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;GameFramework&#x2F;Actor.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;BezierCurveActor.generated.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UCLASS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span&gt;LEARN_1_API &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ABezierCurveActor &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;AActor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;GENERATED_BODY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UPROPERTY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;EditAnywhere, BlueprintReadWrite, Category &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bezier&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	TArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ControlPoints;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ABezierCurveActor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UFUNCTION&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;BlueprintCallable, Category &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bezier&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	FVector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Bezier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; TArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Points&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;protected&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;BeginPlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;override&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:	
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;virtual &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float DeltaTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;override&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ABezierCurveActor.cpp&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Fill out your copyright notice in the Description page of Project Settings.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;BezierCurveActor.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;DrawDebugHelpers.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 构造函数
&lt;&#x2F;span&gt;&lt;span&gt;ABezierCurveActor::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ABezierCurveActor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 启用 Tick，使该 Actor 在每帧调用 Tick() 函数
&lt;&#x2F;span&gt;&lt;span&gt;	PrimaryActorTick.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bCanEverTick &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 初始化控制点，定义三次贝塞尔曲线
&lt;&#x2F;span&gt;&lt;span&gt;	ControlPoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 起点
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 控制点1
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 控制点2
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 终点
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 游戏开始时调用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;ABezierCurveActor::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;BeginPlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	Super::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;BeginPlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 递归计算贝塞尔曲线上的点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用 De Casteljau 算法逐步插值计算贝塞尔曲线
&lt;&#x2F;span&gt;&lt;span&gt;FVector ABezierCurveActor::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Bezier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; TArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Points&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 递归终止条件：当只剩下一个点时，返回该点
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Points.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; Points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 存储新计算的插值点
&lt;&#x2F;span&gt;&lt;span&gt;	TArray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; NewPoints;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 对当前点集进行线性插值，计算新的点集
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;int32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; Points.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		NewPoints.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;FMath::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Lerp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, Points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 递归计算直到收敛到一个点
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Bezier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;NewPoints, t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 每帧调用，用于动态绘制贝塞尔曲线
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span&gt;ABezierCurveActor::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float DeltaTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	Super::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Tick&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;DeltaTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 细分曲线，决定曲线的平滑度
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; int32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NumSegments &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;50&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 计算曲线起始点
&lt;&#x2F;span&gt;&lt;span&gt;	FVector LastPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Bezier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ControlPoints, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 逐步计算曲线上的点，并绘制线段
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;int32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;=&lt;&#x2F;span&gt;&lt;span&gt; NumSegments; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 计算当前插值参数 t，范围为 [0,1]
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static_cast&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span&gt;NumSegments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 计算贝塞尔曲线在 t 处的点
&lt;&#x2F;span&gt;&lt;span&gt;		FVector NewPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Bezier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ControlPoints, t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 在世界中绘制线段，连接上一个点与当前点
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;DrawDebugLine&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;GetWorld&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, LastPoint, NewPoint, FColor::Green, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 更新 LastPoint，作为下一段线段的起点
&lt;&#x2F;span&gt;&lt;span&gt;		LastPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; NewPoint;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503301832448.png&quot; alt=&quot;image-20250330183234228&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对于这种实现方式,虽然写的是三次耳塞尔的实现,但是可以通过调整&lt;code&gt;ControlPoints&lt;&#x2F;code&gt;的参数来实现二次和三次的转变,因为我们的方法是通用的(理论上支持任意阶的贝塞尔曲线,但是在实际应用中,更高阶的曲线建议使用迭代方式实现)。&lt;&#x2F;p&gt;
&lt;p&gt;比如,对于二次贝塞尔曲线,我们需要三个控制点,那么参数可能是下面这样的:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;ControlPoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 起点
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 控制点
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;FVector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 终点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-2&quot;&gt;使用JavaScript配合Canvas API实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这种方式的好处是门槛低,简单的前端三剑客就可以实现,并且交互也不错。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;本来是想花点时间做个分步骤教程的,但是想想好像没必要,有点小题大做了,所以这就直接贴一下完整代码好了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;DOCTYPE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;html &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;zh&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;charset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;viewport&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;width=device-width, initial-scale=1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;贝塞尔曲线可视化&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;body &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;text-align&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;canvas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;border&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;px solid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;black&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;pointer&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;head&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;贝塞尔曲线可视化 (支持二次 &amp;amp; 三次)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;h2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;radio&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;degree&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;quadratic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;checked&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 二次贝塞尔
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;input &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;radio&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;degree&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cubic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; 三次贝塞尔
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;br&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;br&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;canvas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;bezierCanvas&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;500&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;canvas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;canvas &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;bezierCanvas&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;ctx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;canvas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getContext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;2d&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 控制点（默认二次贝塞尔）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;controlPoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;400 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 起点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;250&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 控制点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;400 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 终点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;draggingPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 计算贝塞尔曲线（递归）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bezier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.length === &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 递归终止
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;newPoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.length - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;newPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;({
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                x: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) * &lt;&#x2F;span&gt;&lt;span&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x + &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                y: (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) * &lt;&#x2F;span&gt;&lt;span&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y + &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span&gt;points&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bezier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;newPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 绘制曲线
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drawBezierCurve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;clearRect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;canvas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.width, &lt;&#x2F;span&gt;&lt;span&gt;canvas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.height);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 画控制点连线
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.strokeStyle = &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;gray&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;beginPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;moveTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x, &lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.length; &lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lineTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x, &lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stroke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 画控制点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.fillStyle = &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;beginPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;arc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x, &lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;PI &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 画贝塞尔曲线
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.strokeStyle = &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;blue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;beginPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;moveTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x, &lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span&gt;t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.01&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bezier&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lineTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;ctx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stroke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 监听鼠标拖动控制点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;canvas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mousedown&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;mouseX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.offsetX, &lt;&#x2F;span&gt;&lt;span&gt;mouseY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.offsetY;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;draggingPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;controlPoints&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;find&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;p =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;hypot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x - &lt;&#x2F;span&gt;&lt;span&gt;mouseX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y - &lt;&#x2F;span&gt;&lt;span&gt;mouseY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;canvas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mousemove&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;draggingPoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;draggingPoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.x = &lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.offsetX;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span&gt;draggingPoint&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.y = &lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.offsetY;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drawBezierCurve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span&gt;canvas&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mouseup&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;draggingPoint &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;; });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 监听用户选择曲线阶数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;querySelectorAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;input[name=&amp;#39;degree&amp;#39;]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;radio =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span&gt;radio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;change&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;=&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;.target.value === &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;quadratic&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span&gt;controlPoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;400 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 起点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;250&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 控制点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;400 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 终点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span&gt;controlPoints &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;400 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;},  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 起点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;180&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;},  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 控制点1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;320&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;},  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 控制点2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                    { x: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;400&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;, y: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;400 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 终点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drawBezierCurve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;        });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    });
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 初始化绘制
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;drawBezierCurve&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;script&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503302044962.png&quot; alt=&quot;image-20250330204444732&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;因为是可拖动交互,简单做了一个gif,看起来效果还不错。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503302100140.gif&quot; alt=&quot;Bezier1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;使用贝塞尔曲线进行移动&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;除了为应用程序和游戏提供平滑的动画外，贝塞尔曲线还可以用来定义游戏对象移动的曲线路径。考虑一个 2D 射击游戏，其中一些敌人沿着不同的路径移动。&lt;&#x2F;p&gt;
&lt;p&gt;虽然直线或圆形等直接路径可以硬编码，但这种方法缺乏灵活性，调整和可视化路径也更具挑战性。&lt;&#x2F;p&gt;
&lt;p&gt;对于这种情况，我们也可以使用贝塞尔曲线轻松地可视化和设计复杂的路径。以下是一个示例(通过改进js实现的代码来实现)，展示了物体沿着由一组贝塞尔曲线控制点定义的可视化曲线路径移动:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503302102854.png&quot; alt=&quot;image-20250330210256765&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里有一个基本的工作原理：贝塞尔曲线提供了一组基于时间参数 t 的位置。通过将对象的当前位置更新为这些点，它能够平滑地穿越路径。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503302112480.gif&quot; alt=&quot;obj&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;See you hala!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>关于</title>
          <pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/about/</link>
          <guid>https://ilikexff.cn/about/</guid>
          <description xml:base="https://ilikexff.cn/about/">&lt;h1 id=&quot;guan-yu-ba-chi-yao-jian&quot;&gt;关于八尺妖剑&lt;a class=&quot;zola-anchor&quot; href=&quot;#guan-yu-ba-chi-yao-jian&quot; aria-label=&quot;Anchor link for: guan-yu-ba-chi-yao-jian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;欢迎来到八尺妖剑！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bo-ke-jian-jie&quot;&gt;博客简介&lt;a class=&quot;zola-anchor&quot; href=&quot;#bo-ke-jian-jie&quot; aria-label=&quot;Anchor link for: bo-ke-jian-jie&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这里是一个专注于技术分享和编程心得的个人博客。我们相信“简单是效率的灵魂“，致力于用简洁明了的方式分享技术知识。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhu-yao-nei-rong&quot;&gt;主要内容&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhu-yao-nei-rong&quot; aria-label=&quot;Anchor link for: zhu-yao-nei-rong&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编程技术&lt;&#x2F;strong&gt;：Java、C++、Rust、JavaScript 等编程语言&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;开发工具&lt;&#x2F;strong&gt;：IntelliJ IDEA、Vim、Docker 等开发工具使用技巧&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;框架学习&lt;&#x2F;strong&gt;：Spring Boot、Spring Security 等主流框架&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;游戏开发&lt;&#x2F;strong&gt;：Unity、虚幻引擎等游戏开发技术&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;算法与数据结构&lt;&#x2F;strong&gt;：各种算法实现和优化技巧&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;lian-xi-fang-shi&quot;&gt;联系方式&lt;a class=&quot;zola-anchor&quot; href=&quot;#lian-xi-fang-shi&quot; aria-label=&quot;Anchor link for: lian-xi-fang-shi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;如果您有任何问题或建议，欢迎通过以下方式联系我们。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;em&gt;简单是效率的灵魂&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>C++游戏开发基础-深入解析复制构造函数</title>
          <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-fu-zhi-gou-zao-han-shu/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-fu-zhi-gou-zao-han-shu/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-fu-zhi-gou-zao-han-shu/">&lt;p&gt;考虑下面程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Default constructor
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fraction(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fCopy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fCopy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面的代码中,除了一系列熟悉的配方之外,我们还发现在25行有一行之前没见过的代码,就是你想的那样,这个就是本文的主角-复制构造函数。&lt;&#x2F;p&gt;
&lt;p&gt;复制构造函数也是一种构造函数(有一种听君一席话的感觉😊)。用于使用相同类型的现有对象初始化对象,在复制构造函数执行之后,在复制构造函数执行完后，新对象应该是传入的已有对象的副本（拷贝）。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yin-shi-fu-zhi-gou-zao-han-shu&quot;&gt;隐式复制构造函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#yin-shi-fu-zhi-gou-zao-han-shu&quot; aria-label=&quot;Anchor link for: yin-shi-fu-zhi-gou-zao-han-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;如果你没有为你的类提供复制构造函数，C++将为你创建一个公共&lt;strong&gt;隐式复制构造函数&lt;&#x2F;strong&gt; 。在上面的示例中，语句 &lt;code&gt;Fraction fCopy { f };&lt;&#x2F;code&gt; 调用隐式复制构造函数来用 &lt;code&gt;f&lt;&#x2F;code&gt; 初始化 &lt;code&gt;fCopy&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;默认情况下，隐式复制构造函数将进行成员初始化。这意味着每个成员都将使用传入的类的相应成员作为初始化器进行初始化。在上例中，&lt;code&gt;fCopy.m_numerator&lt;&#x2F;code&gt; 使用 &lt;code&gt;f.m_numerator&lt;&#x2F;code&gt;（值为 &lt;code&gt;5&lt;&#x2F;code&gt;）初始化，&lt;code&gt;fCopy.m_denominator&lt;&#x2F;code&gt; 使用 &lt;code&gt;f.m_denominator&lt;&#x2F;code&gt;（值为 &lt;code&gt;3&lt;&#x2F;code&gt;）初始化。&lt;&#x2F;p&gt;
&lt;p&gt;在执行复制构造函数之后，&lt;code&gt;f&lt;&#x2F;code&gt; 和 &lt;code&gt;fCopy&lt;&#x2F;code&gt; 的成员具有相同的值，因此 &lt;code&gt;fCopy&lt;&#x2F;code&gt; 是 &lt;code&gt;f&lt;&#x2F;code&gt; 的副本。因此，调用 &lt;code&gt;print（）在&lt;&#x2F;code&gt;任何一个上都有相同的结果。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;xian-shi-ding-yi-zi-ji-de-fu-zhi-gou-zao-han-shu&quot;&gt;显式定义自己的复制构造函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#xian-shi-ding-yi-zi-ji-de-fu-zhi-gou-zao-han-shu&quot; aria-label=&quot;Anchor link for: xian-shi-ding-yi-zi-ji-de-fu-zhi-gou-zao-han-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;我们也可以显式的定义自己的复制构造函数。比如下面的示例中,我们将在自己定义的复制构造函数中打印一条消息,以便于提示我们,自己定义的复制构造函数被成功调用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_numberator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numberator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    ,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 复制构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    :&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numberator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;fraction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numberator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    ,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;fraction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Copy constructor called&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fraction(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numberator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fCopy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 复制构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fCopy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503241659794.png&quot; alt=&quot;image-20250324165906674&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;提醒⏰&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;访问控制是 &lt;strong&gt;基于类&lt;&#x2F;strong&gt;而不是 &lt;strong&gt;基于对象&lt;&#x2F;strong&gt;的。这意味着,同一个类的成员函数可以访问任意该类对象的私有成员（不仅仅是当前对象 this 的私有成员）。&lt;&#x2F;p&gt;
&lt;p&gt;在上面的 Fraction 复制构造函数中，我们利用了这一特性，直接访问了 fraction 参数的私有成员。否则，我们将无法直接访问这些成员（除非添加访问函数，但这里显然没那个必要）。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;最佳实践&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;复制构造函数不应该做除了复制以外的其他工作。&lt;&#x2F;li&gt;
&lt;li&gt;除非你有特定必要的理由创建自己的复制构造函数,否则请首选使用隐式复制构造函数。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;复制构造函数的参数必须是引用类型&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;当一个对象 &lt;strong&gt;按值传递（pass by value）&lt;&#x2F;strong&gt; 时，函数参数会接收到 &lt;strong&gt;原始对象的副本&lt;&#x2F;strong&gt;，而不是直接操作原对象。如果传递的对象与参数是 &lt;strong&gt;相同的类类型&lt;&#x2F;strong&gt;，那么&lt;strong&gt;复制过程&lt;&#x2F;strong&gt;是通过 &lt;strong&gt;隐式调用拷贝构造函数（copy constructor）&lt;&#x2F;strong&gt; 来完成的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;看个例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分子，默认为 0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 分母，默认为 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认构造函数（带默认参数）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 拷贝构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; fraction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 复制分子
&lt;&#x2F;span&gt;&lt;span&gt;        , &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; fraction.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 复制分母
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;复制构造函数被调用&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 输出信息，确认拷贝构造函数被调用
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印分数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fraction(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 按值传递 Fraction 对象（会调用拷贝构造函数）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printFraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; f 按值传递，会创建副本
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用 Fraction 类的 print() 方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建 Fraction 对象 f，调用普通构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printFraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 传递 f 到 printFraction 函数，按值传递，会调用拷贝构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面的例子中，对 &lt;code&gt;printFraction（f）&lt;&#x2F;code&gt; 的调用是通过值传递 &lt;code&gt;f&lt;&#x2F;code&gt;。调用复制构造函数将 &lt;code&gt;f&lt;&#x2F;code&gt; 从 &lt;code&gt;main&lt;&#x2F;code&gt; 复制到函数 &lt;code&gt;printFraction（）&lt;&#x2F;code&gt; 的 &lt;code&gt;f&lt;&#x2F;code&gt; 参数中。&lt;&#x2F;p&gt;
&lt;p&gt;在 C++ 中，&lt;strong&gt;拷贝构造函数（Copy Constructor）的参数必须是&lt;&#x2F;strong&gt; const &lt;strong&gt;引用&lt;&#x2F;strong&gt;，不能按值传递，否则会导致 &lt;strong&gt;无限递归&lt;&#x2F;strong&gt;，最终导致 &lt;strong&gt;栈溢出（stack overflow）&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyClass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyClass&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;MyClass &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 错误：按值传递拷贝构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Copy Constructor Called&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;当你尝试创建一个新对象（例如 MyClass obj2 = obj1;），编译器会这样做：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;obj1 需要被&lt;strong&gt;复制&lt;&#x2F;strong&gt;到 obj 这个参数中（因为按值传递）。&lt;&#x2F;li&gt;
&lt;li&gt;但 obj 也是一个 MyClass 类型的对象，所以需要调用 &lt;strong&gt;拷贝构造函数&lt;&#x2F;strong&gt; 来复制 obj1。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;调用拷贝构造函数时，又要传递 obj 这个参数（按值传递）&lt;&#x2F;strong&gt;，因此：
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;又会调用拷贝构造函数&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;拷贝构造函数又需要传递 obj&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;进入无限递归的调用链&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;最终 &lt;strong&gt;栈溢出（Stack Overflow）&lt;&#x2F;strong&gt;，程序崩溃。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;如果一个类没有复制构造函数，编译器将隐式地为我们生成一个。如果我们愿意，我们可以显式地告诉编译器使用 &lt;code&gt;= default&lt;&#x2F;code&gt; 语法为我们创建一个默认的复制构造函数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fraction(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fCopy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    f.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fCopy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;delete&quot;&gt;使用 &lt;code&gt;=delete&lt;&#x2F;code&gt;防止复制&lt;a class=&quot;zola-anchor&quot; href=&quot;#delete&quot; aria-label=&quot;Anchor link for: delete&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;有时候我们会遇到这样的需求,我们不希望某个类的对象是可以复制的,我们可以通过使用&lt;code&gt;=delete&lt;&#x2F;code&gt;来将复制构造函数标记为删除以实现该需求。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Default constructor
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;numerator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;denominator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 删除复制构造函数 无法再复制
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fraction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Fraction(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_numerator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_denominator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    Fraction &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fCopy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;编译错误
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这个例子中，当编译器去寻找一个构造函数来用 &lt;code&gt;f&lt;&#x2F;code&gt; 初始化 &lt;code&gt;fCopy&lt;&#x2F;code&gt; 时，它会发现复制构造函数已经被删除了。这将导致它发出编译错误。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通常，C++ 类的 &lt;strong&gt;拷贝构造函数&lt;&#x2F;strong&gt; 是 public 的，这样外部代码（例如按值传递对象、对象赋值等）可以正常复制对象。但如果你 &lt;strong&gt;不希望对象被随意复制&lt;&#x2F;strong&gt;，可以将拷贝构造函数设为 private，这样就无法在类外部进行复制。&lt;&#x2F;p&gt;
&lt;p&gt;然而，这样做有一个例外：&lt;strong&gt;类的成员函数仍然可以访问私有拷贝构造函数&lt;&#x2F;strong&gt;，所以如果你的类内部有某些代码仍然需要复制对象，这个方法就不适合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NonCopyable
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 私有拷贝构造函数，防止外部复制
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NonCopyable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; NonCopyable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;other&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;拷贝构造函数被调用&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NonCopyable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;默认构造函数被调用&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;我是一个 NonCopyable 对象&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    NonCopyable obj1; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 调用默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; NonCopyable obj2 = obj1; &#x2F;&#x2F; ❌ 这里会报错，因为拷贝构造函数是 private 的
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; printNonCopyable(obj1);  &#x2F;&#x2F; ❌ 这里也会报错，按值传递需要拷贝
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;类初始化和复制省略&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;先回顾一下具有基本数据类型的对象的6种基本初始化方式:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 没有初始化器（默认初始化）  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 在等号后使用初始化器（拷贝初始化）  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用括号内的初始化器（直接初始化）  
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 列表初始化方法（C++11）  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用大括号的初始化器（直接列表初始化）  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 在等号后使用大括号的初始化器（拷贝列表初始化）  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; f &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 初始化器为空的大括号（值初始化）  
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所有这些初始化类型对于具有类类型的对象都是有效的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认构造函数（无参数）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 普通构造函数（带一个 int 参数）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(int) &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 拷贝构造函数（用于复制已有对象）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(const Foo&amp;amp;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用 Foo() 默认构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    Foo f1;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 默认初始化
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 值初始化（推荐）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用 Foo(int) 普通构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    Foo f3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 拷贝初始化（仅适用于非 explicit 构造函数）
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 直接初始化
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 直接列表初始化（推荐）
&lt;&#x2F;span&gt;&lt;span&gt;    Foo f6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 拷贝列表初始化（仅适用于非 explicit 构造函数）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 调用 Foo(const Foo&amp;amp;) 拷贝构造函数
&lt;&#x2F;span&gt;&lt;span&gt;    Foo f7 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; f3;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 拷贝初始化
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;f3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 直接初始化
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; f3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 直接列表初始化（推荐）
&lt;&#x2F;span&gt;&lt;span&gt;    Foo f10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span&gt; f3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 拷贝列表初始化
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在现代C++中,复制初始化、直接初始化和列表初始化的本质做的都是同一件事: &lt;strong&gt;初始化一个对象&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;对于所有类型的初始化:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;初始化类类型时,将检查该类的构造函数集,并使用重载解析来确定最佳匹配的构造函数。这可能涉及参数的隐式转换。&lt;&#x2F;li&gt;
&lt;li&gt;初始化非类类型时,编译器会使用&lt;strong&gt;隐式转换规则&lt;&#x2F;strong&gt;来检查是否可以将提供的值转换为目标类型。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;同样值得注意的是，在某些情况下，某些形式的初始化是不允许的（例如，在构造函数成员初始化列表中，我们只能使用直接形式的初始化，而不能复制初始化）。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;不必要的复制&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;考虑下面的程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Something&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Normal constructor called&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Something&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Something&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Copy constructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Something(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Something &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Something &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    s.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在上面的变量&lt;code&gt;s&lt;&#x2F;code&gt;的初始化中,我们首先构造一个临时的&lt;code&gt;Something&lt;&#x2F;code&gt;,初始化值为&lt;code&gt;6&lt;&#x2F;code&gt;. 然后使用这个临时变量来初始化&lt;code&gt;s&lt;&#x2F;code&gt;  ,因为临时对象和 &lt;code&gt;s&lt;&#x2F;code&gt; 具有相同的类型（它们都是 &lt;code&gt;Something&lt;&#x2F;code&gt; 对象），所以这里通常会调用 &lt;code&gt;Something（const Something）&lt;&#x2F;code&gt; 复制构造函数来将临时对象中的值复制到 &lt;code&gt;s&lt;&#x2F;code&gt; 中。最终结果是 &lt;code&gt;s&lt;&#x2F;code&gt; 被初始化为值 &lt;code&gt;6&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;strong&gt;没有任何优化&lt;&#x2F;strong&gt;的情况下,上面的程序将会打印:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Normal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;constructor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Copy constructor
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Something&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然而，这个程序是不必要的低效率，因为我们必须进行两次构造函数调用：一次是对 Something（int），另一次是对 &lt;code&gt;Something（const Something&amp;amp;）&lt;&#x2F;code&gt;。请注意，上面的最终结果与我们编写以下代码的结果相同：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Something s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;复制消除&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;由于编译器可以自由地重写语句来优化它们，人们可能会想，编译器是否可以优化掉不必要的副本，并将 &lt;code&gt;Something s { Something{5} }&lt;&#x2F;code&gt; 视为我们最终的写法。&lt;&#x2F;p&gt;
&lt;p&gt;答案是肯定的，这样做的过程被称为&lt;em&gt;复制省略&lt;&#x2F;em&gt; 。 &lt;strong&gt;复制省略&lt;&#x2F;strong&gt;是一种编译器优化技术，它允许编译器删除不必要的对象复制。&lt;&#x2F;p&gt;
&lt;p&gt;换句话说，在编译器通常会调用复制构造函数的情况下，编译器可以自由地重写代码以完全避免对复制构造函数的调用。当编译器优化掉对复制构造函数的调用时，我们说该构造函数已被&lt;strong&gt;省略&lt;&#x2F;strong&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;与其他类型的优化不同，复制省略不受“as-if”规则的约束。也就是说，允许复制省略来省略复制构造函数，即使复制构造函数还会执行其他任务。&lt;&#x2F;p&gt;
&lt;p&gt;这就是前面为什么说 &lt;strong&gt;复制构造函数不应该存在除复制功能之外其他操作&lt;&#x2F;strong&gt;的原因。&lt;&#x2F;p&gt;
&lt;p&gt;所以上面的程序如果在C++17环境下编译,那么你的打印将和我一样:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503241758804.png&quot; alt=&quot;image-20250324175809736&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;&lt;strong&gt;C++17 中的强制复制省略&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;code&gt;C++&lt;&#x2F;code&gt;17 之前，复制省略是编译器可以进行的严格的可选优化。在 &lt;code&gt;C++17&lt;&#x2F;code&gt; 中，复制省略在某些情况下是强制性的。在这些情况下，复制省略将自动执行（即使您告诉编译器不要执行复制省略）。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在可选的省略情况下，可访问的复制构造函数必须可用（例如未删除），即使对复制构造函数的实际调用被省略。&lt;&#x2F;li&gt;
&lt;li&gt;在强制省略的情况下，可访问的复制构造函数不需要可用（换句话说，即使删除了复制构造函数，也会发生强制省略）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-5&quot;&gt;提一嘴explict&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在 &lt;code&gt;C++&lt;&#x2F;code&gt; 中，&lt;code&gt;explicit&lt;&#x2F;code&gt; 关键字用于修饰&lt;strong&gt;构造函数&lt;&#x2F;strong&gt;和&lt;strong&gt;转换运算符&lt;&#x2F;strong&gt;，它的主要作用是&lt;strong&gt;防止隐式转换&lt;&#x2F;strong&gt;，确保类的对象不会被意外地从其他类型的值隐式构造。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;默认情况下，应该将所有接受单个参数的构造函数声明为 explicit。&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;这样可以防止&lt;strong&gt;隐式类型转换&lt;&#x2F;strong&gt;，避免意外的类型转换导致的错误。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;如果某种类型转换在语义上是合理的，并且性能上没有问题，则可以考虑不使用 explicit，允许隐式转换。&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;例如，如果类 &lt;code&gt;String&lt;&#x2F;code&gt; 有一个接受 &lt;code&gt;const char*&lt;&#x2F;code&gt; 的构造函数，并且允许从 &lt;code&gt;const char*&lt;&#x2F;code&gt; 隐式转换为 &lt;code&gt;String&lt;&#x2F;code&gt; 是合理的，可以去掉 &lt;code&gt;explicit&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;不要将拷贝构造函数或移动构造函数声明为 explicit，因为它们并不会进行类型转换。&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;拷贝构造&lt;code&gt;（T(const T&amp;amp;)）&lt;&#x2F;code&gt;和移动构造（&lt;code&gt;T(T&amp;amp;&amp;amp;)）&lt;&#x2F;code&gt;的作用是复制或移动相同类型的对象，而不是进行类型转换，因此不应该加 &lt;code&gt;explicit&lt;&#x2F;code&gt;，否则会影响对象的正常复制和移动操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;示例:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;✅ 正确：使用 explicit 防止隐式转换&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;explicit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 默认加 explicit，防止隐式转换
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Foo(int) called with &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printFoo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Foo f1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 编译错误：explicit 禁止了隐式转换
&lt;&#x2F;span&gt;&lt;span&gt;    Foo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 直接初始化可以
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printFoo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ❌ 编译错误，无法从 int 隐式转换为 Foo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;✅ 合理去掉 explicit 允许隐式转换&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;String
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 允许从 const char* 隐式转换为 String
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;String constructor called&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 允许隐式转换
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;❌ 不要给拷贝&#x2F;移动构造函数加 explicit&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Bar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 正确，拷贝构造函数不应 explicit
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;amp;&amp;amp;) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ✅ 正确，移动构造函数不应 explicit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;如果加上 &lt;code&gt;explicit&lt;&#x2F;code&gt;，将会导致 &lt;code&gt;Bar b2 = b1&lt;&#x2F;code&gt;; 无法编译。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;规则&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;解释&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;单参数构造函数默认 explicit&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;防止意外的隐式转换&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;如果隐式转换合理且高效，可去掉 explicit&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;例如 String(const char*)&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;拷贝&#x2F;移动构造函数不要 explicit&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;这些构造函数不会执行类型转换，避免影响正常复制&#x2F;移动&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</description>
      </item>
      <item>
          <title>C++游戏开发基础-深入解析this指针的应用与技巧</title>
          <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-shen-ru-jie-xi-thiszhi-zhen-de-ying-yong-yu-ji-qiao/</link>
          <guid>https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-shen-ru-jie-xi-thiszhi-zhen-de-ying-yong-yu-ji-qiao/</guid>
          <description xml:base="https://ilikexff.cn/c-you-xi-kai-fa-ji-chu-shen-ru-jie-xi-thiszhi-zhen-de-ying-yong-yu-ji-qiao/">&lt;p&gt;如果你没有其他面向对象的编程语言基础,比如&lt;code&gt;Java&lt;&#x2F;code&gt;、&lt;code&gt;c#&lt;&#x2F;code&gt;等,那么你在学习C++面向对象时可能会好奇,当一个成员函数被调用的时候,C++是如何跟踪它被调用的对象的?&lt;&#x2F;p&gt;
&lt;p&gt;考虑下面的程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Simple
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Simple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Simple &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    simple.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    simple.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对于上述代码,当我们调用 &lt;code&gt;simple.setID（2）;&lt;&#x2F;code&gt; 时，C++知道函数 &lt;code&gt;setID（）&lt;&#x2F;code&gt; 应该对对象 &lt;code&gt;simple 进行&lt;&#x2F;code&gt;操作，并且 &lt;code&gt;m_id&lt;&#x2F;code&gt; 实际上引用了 &lt;code&gt;simple.m_id&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;为什么会这样?这因为C++使用了一个名为&lt;code&gt;this&lt;&#x2F;code&gt;的隐藏指针。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yin-cang-de-thiszhi-zhen&quot;&gt;隐藏的this指针&lt;a class=&quot;zola-anchor&quot; href=&quot;#yin-cang-de-thiszhi-zhen&quot; aria-label=&quot;Anchor link for: yin-cang-de-thiszhi-zhen&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在每一个成员函数中,关键字&lt;code&gt;this&lt;&#x2F;code&gt;是一个常量指针,它保存当前隐式对象的地址。因此,下面两种写法是等效的;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但是事实证明,前者是后者的简写。当我们程序编译时,编译器将隐式地在引用隐式对象的任何成员前面加上&lt;code&gt;this-&amp;gt;&lt;&#x2F;code&gt; 。 这有助于我们的代码跟更简洁,而不需要一遍遍的重复&lt;code&gt;this-&amp;gt;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们使用 &lt;code&gt;-&amp;gt;&lt;&#x2F;code&gt; 从指向对象的指针中选择成员。&lt;code&gt;this-&amp;gt;m_id&lt;&#x2F;code&gt; 相当于 &lt;code&gt;（*this）.m_id&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;thisdi-ceng-shi-xian&quot;&gt;this底层实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#thisdi-ceng-shi-xian&quot; aria-label=&quot;Anchor link for: thisdi-ceng-shi-xian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;回顾下面函数的调用:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;simple.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;虽然对函数&lt;code&gt;setID(2)&lt;&#x2F;code&gt;的调用表面上看起来好像就一个参数,但实际上有两个。在编译时,编译器会重写表达式&lt;code&gt;simple.setID(2)&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;Simple::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;simple&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同理,由于函数的调用现在增加了一个参数,那么成员函数定义也需要进行调整以适应接受此参数。下面是&lt;code&gt;setID()&lt;&#x2F;code&gt;的原始定义:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;编译器重写之后的结果可能是下面这样的:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Simple&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;⚠️注意,重写后的函数参数多了一个&lt;code&gt;this&lt;&#x2F;code&gt;参数,它是一个常量指针。使用&lt;code&gt;this&lt;&#x2F;code&gt;指针,&lt;code&gt;m_id&lt;&#x2F;code&gt;成员也被重写为&lt;code&gt;this-&amp;gt;m_id&lt;&#x2F;code&gt;;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这种情况下,关键字&lt;code&gt;static&lt;&#x2F;code&gt;意味着函数与类的对象无关,而是被视为类作用域内的普通函数。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;所以总结一下就是:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;当我们调用 &lt;code&gt;simple.setID（2）&lt;&#x2F;code&gt; 时，编译器实际上调用 &lt;code&gt;Simple：：setID（simple，2）&lt;&#x2F;code&gt;，&lt;code&gt;simple&lt;&#x2F;code&gt; 通过地址传递给函数。&lt;&#x2F;li&gt;
&lt;li&gt;函数有一个名为 &lt;code&gt;this 的&lt;&#x2F;code&gt;隐藏参数，它接收 &lt;code&gt;simple&lt;&#x2F;code&gt; 的地址。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;setID（）&lt;&#x2F;code&gt;中的成员变量以 &lt;code&gt;this-&amp;gt; 为&lt;&#x2F;code&gt;前缀，它指向 &lt;code&gt;simple&lt;&#x2F;code&gt;。因此，当编译器&lt;code&gt;计算&lt;&#x2F;code&gt;-&amp;gt;m_id时 ，它实际上是解析为 &lt;code&gt;simple.m_id&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在 C++ 中，所有非静态成员函数（即类的成员函数）都有一个隐含的指针 this，它指向当前对象（即调用该成员函数的对象）的地址。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;非静态成员函数&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;p&gt;非静态成员函数是与某个具体对象相关的函数，它们依赖于对象的状态（成员变量）。这些函数不能独立于类的对象存在，需要通过对象来调用。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;xian-shi-de-yin-yong-this&quot;&gt;显式的引用this&lt;a class=&quot;zola-anchor&quot; href=&quot;#xian-shi-de-yin-yong-this&quot; aria-label=&quot;Anchor link for: xian-shi-de-yin-yong-this&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;大多数时候,我们不需要显式的引用&lt;code&gt;this&lt;&#x2F;code&gt;。 但是,在一些特定情况下这样做是个不错的选择。&lt;&#x2F;p&gt;
&lt;p&gt;首先,如果你有一个成员函数,它有一个与数据成员同名的参数,那么你可以通过这种方式来消除歧义:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Something
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; data; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个 &lt;code&gt;Something&lt;&#x2F;code&gt; 类有一个名为 &lt;code&gt;data 的&lt;&#x2F;code&gt;成员。&lt;code&gt;setData（）&lt;&#x2F;code&gt; 的函数参数也被命名为 &lt;code&gt;data&lt;&#x2F;code&gt;。在 &lt;code&gt;setData（）&lt;&#x2F;code&gt; 函数中，&lt;code&gt;data&lt;&#x2F;code&gt; 引用函数参数（因为函数参数隐藏了数据成员），所以如果我们想引用&lt;code&gt;数据&lt;&#x2F;code&gt;成员，可以使用 &lt;code&gt;this-&amp;gt;data&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;有些程序员习惯使用这样的写法,可能是由于Java的习惯,但是在C++中,并不建议这样做,还是推荐之前说过的使用&lt;code&gt;m_&lt;&#x2F;code&gt;前缀来区分私有成员和非成员变量。&lt;&#x2F;p&gt;
&lt;p&gt;其次,有时让成员函数将隐式对象作为返回值返回也是很有用的。这样做的主要原因是允许成员函数可以被链式调用。&lt;&#x2F;p&gt;
&lt;p&gt;这被称为 &lt;strong&gt;函数链或者方法链&lt;&#x2F;strong&gt; ;&lt;&#x2F;p&gt;
&lt;p&gt;考虑下面的例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Calc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; value; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-=&lt;&#x2F;span&gt;&lt;span&gt; value; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*=&lt;&#x2F;span&gt;&lt;span&gt; value; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;基于上述写法,如果你现在想要执行加6减2乘以3,那么你必须这样做:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Calc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但是,如果我们通过引用使每个函数返回&lt;code&gt;*this&lt;&#x2F;code&gt;,就可以将调用链接在一起。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Calc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    Calc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; value; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    Calc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-=&lt;&#x2F;span&gt;&lt;span&gt; value; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    Calc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*=&lt;&#x2F;span&gt;&lt;span&gt; value; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;因此,我们可以像下面这样进行链式调用:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Calc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先，调用 &lt;code&gt;calc.add（5）&lt;&#x2F;code&gt;，它将 &lt;code&gt;m_value&lt;&#x2F;code&gt; 加上 &lt;code&gt;5&lt;&#x2F;code&gt;。&lt;code&gt;add（）&lt;&#x2F;code&gt; 然后返回一个对 &lt;code&gt;*this 的&lt;&#x2F;code&gt;引用，这是对隐式对象 &lt;code&gt;calc&lt;&#x2F;code&gt; 的引用，因此 &lt;code&gt;calc&lt;&#x2F;code&gt; 将是后续计算中使用的对象。下一个 &lt;code&gt;calc.sub（3）&lt;&#x2F;code&gt; 求值，从 &lt;code&gt;m_value&lt;&#x2F;code&gt; 中减去 &lt;code&gt;3&lt;&#x2F;code&gt;，并再次返回 &lt;code&gt;calc . sub&lt;&#x2F;code&gt;（3）。最后，&lt;code&gt;calc.mult（4）&lt;&#x2F;code&gt; 将 &lt;code&gt;m_value&lt;&#x2F;code&gt; 乘以 &lt;code&gt;4&lt;&#x2F;code&gt; 并返回 &lt;code&gt;calc&lt;&#x2F;code&gt;，它不会被进一步使用，因此被忽略。&lt;&#x2F;p&gt;
&lt;p&gt;由于每个函数在执行时都会修改 &lt;code&gt;calc&lt;&#x2F;code&gt;，&lt;code&gt; 因此 calc&lt;&#x2F;code&gt; 的 &lt;code&gt;m_value&lt;&#x2F;code&gt; 现在包含值（0 + 5）- 3）* 4），即 &lt;code&gt;8&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为&lt;code&gt;它&lt;&#x2F;code&gt;总是指向隐式对象，所以在解引用它之前，我们不需要检查它是否是空指针。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zhong-zhi-lei-de-mo-ren-zhuang-tai&quot;&gt;重置类的默认状态&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhong-zhi-lei-de-mo-ren-zhuang-tai&quot; aria-label=&quot;Anchor link for: zhong-zhi-lei-de-mo-ren-zhuang-tai&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;如果你的类有一个默认的构造函数,你可能会提供一种方法来将现有的对象重置到它默认的状态。但是之前说过,构造函数仅用于初始化新对象,不应直接调用。这样做会导致意外的行为。&lt;&#x2F;p&gt;
&lt;p&gt;所以要实现上面重置状态的需求,最佳的方法是创建一个类似于&lt;code&gt;reset()&lt;&#x2F;code&gt;这样的函数, 让该函数创建一个新对象(使用默认构造函数),然后将该新对象复制给当前隐式对象。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下面是一个完整的示例:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Calc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int m_value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    Calc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; value; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    Calc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-=&lt;&#x2F;span&gt;&lt;span&gt; value; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    Calc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*=&lt;&#x2F;span&gt;&lt;span&gt; value; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;m_value&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Calc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;calc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mult&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; prints 8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; calc.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; prints 0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;thishe-constdui-xiang-de-guan-xi&quot;&gt;this和const对象的关系&lt;a class=&quot;zola-anchor&quot; href=&quot;#thishe-constdui-xiang-de-guan-xi&quot; aria-label=&quot;Anchor link for: thishe-constdui-xiang-de-guan-xi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对于非&lt;code&gt;const&lt;&#x2F;code&gt;成员函数,&lt;code&gt;this&lt;&#x2F;code&gt;是一个指向非&lt;code&gt;const&lt;&#x2F;code&gt;值的&lt;code&gt;cosn&lt;&#x2F;code&gt;指针。(这意味着&lt;code&gt;this&lt;&#x2F;code&gt;不能指向其他对象,但指向的对象可以被修改)。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于&lt;code&gt;const&lt;&#x2F;code&gt;成员函数,&lt;code&gt;this&lt;&#x2F;code&gt;是一个指向&lt;code&gt;const&lt;&#x2F;code&gt;值的&lt;code&gt;const&lt;&#x2F;code&gt;指针(意味着指针不能指向其他对象,也不能修改被指向的对象)。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;wei-shen-me-thisshi-zhi-zhen-er-bu-shi-yin-yong&quot;&gt;为什么this是指针而不是引用?&lt;a class=&quot;zola-anchor&quot; href=&quot;#wei-shen-me-thisshi-zhi-zhen-er-bu-shi-yin-yong&quot; aria-label=&quot;Anchor link for: wei-shen-me-thisshi-zhi-zhen-er-bu-shi-yin-yong&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;和Java以及C#不同,&lt;code&gt;this&lt;&#x2F;code&gt;在C++中出现的时候,&lt;code&gt;C++&lt;&#x2F;code&gt;还没有引入引用这种东西(🤪)!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;wang-qi-tui-jian&quot;&gt;往期推荐&lt;a class=&quot;zola-anchor&quot; href=&quot;#wang-qi-tui-jian&quot; aria-label=&quot;Anchor link for: wang-qi-tui-jian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;articles&#x2F;163&quot;&gt;游戏算法基础- A星寻路&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;articles&#x2F;161&quot;&gt;构造函数8000字长文浅析&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>虚幻引擎游戏开发系列专题-官方编码标准或规约</title>
          <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/xu-huan-yin-qing-you-xi-kai-fa-xi-lie-zhuan-ti-guan-fang-bian-ma-biao-zhun-huo-gui-yue/</link>
          <guid>https://ilikexff.cn/xu-huan-yin-qing-you-xi-kai-fa-xi-lie-zhuan-ti-guan-fang-bian-ma-biao-zhun-huo-gui-yue/</guid>
          <description xml:base="https://ilikexff.cn/xu-huan-yin-qing-you-xi-kai-fa-xi-lie-zhuan-ti-guan-fang-bian-ma-biao-zhun-huo-gui-yue/">&lt;p&gt;遵守既定标准和最佳实践来编写可维护的代码。在虚幻游戏引擎中,存在着一些既定的编码标准和约定 ,养成良好的编码规范是写好一份优雅代码的第一步,并且在虚幻官方也强调了,某些编码标准的遵循是强制性的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bian-ma-gui-yue-dui-cheng-xu-yuan-lai-shuo-yi-wei-zhao-shen-me&quot;&gt;编码规约对程序员来说意味着什么&lt;a class=&quot;zola-anchor&quot; href=&quot;#bian-ma-gui-yue-dui-cheng-xu-yuan-lai-shuo-yi-wei-zhao-shen-me&quot; aria-label=&quot;Anchor link for: bian-ma-gui-yue-dui-cheng-xu-yuan-lai-shuo-yi-wei-zhao-shen-me&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;在软件开发中,软件生命周期的80%的成本都在维护上,几乎没有任何软件是由原作者终身维护的,游戏开发也不例外。&lt;&#x2F;li&gt;
&lt;li&gt;代码规约提高了代码可读性、使得工程师可以快速、彻底的理解代码。&lt;&#x2F;li&gt;
&lt;li&gt;编码规约帮助确保团队中的每个成员都遵循相同的代码风格和标准。这种一致性让开发人员在阅读和修改他人代码时，能快速理解其结构和意图，而不需要花费额外的时间去适应不同的风格。&lt;&#x2F;li&gt;
&lt;li&gt;编码规约可以帮助避免不一致和混乱的代码风格，减少随之而来的技术债务（technical debt）。长时间的不规范编码会导致难以维护和扩展的代码，遵循编码规约有助于保持代码的整洁性。&lt;&#x2F;li&gt;
&lt;li&gt;当团队成员都遵循统一的编码规约时，协作变得更加顺畅。代码审查（code review）也会变得更加高效，因为开发人员不需要花费大量时间去检查代码风格的问题，而是能更多地专注于代码的功能和质量。&lt;&#x2F;li&gt;
&lt;li&gt;编码规约帮助确保代码结构清晰，逻辑一致，使得调试过程更加简便。如果代码中存在问题，开发人员可以快速定位和修复问题，而不会因为风格混乱而增加调试难度。&lt;&#x2F;li&gt;
&lt;li&gt;对新成员而言，遵循团队的编码规约可以加速其熟悉代码库和开发流程的速度。如果每个人的编码风格差异较大，新成员可能需要花费更多时间去适应不同的代码风格。&lt;&#x2F;li&gt;
&lt;li&gt;在某些情况下，编码规约还可能是为了符合特定的行业标准或规范，尤其是在涉及到游戏引擎、平台兼容性、性能优化等方面时。遵循这些标准可以避免潜在的兼容性或性能问题。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;本文提到的编码标准以 C++ 为中心；然而，无论使用哪种语言，都应该遵循该标准。某个部分可能会在适用的情况下为特定语言提供等效规则或例外情况。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ming-ming-yue-ding&quot;&gt;命名约定&lt;a class=&quot;zola-anchor&quot; href=&quot;#ming-ming-yue-ding&quot; aria-label=&quot;Anchor link for: ming-ming-yue-ding&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;使用命名约定时,所有的代码和注释都应该使用英语进行命名。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;名称（例如类型名称或变量名称）中每个单词的首字母大写。单词之间通常没有下划线。例如， &lt;code&gt;Health&lt;&#x2F;code&gt;和&lt;code&gt;UPrimitiveComponent&lt;&#x2F;code&gt;是正确的，但&lt;code&gt;lastMouseCoordinates&lt;&#x2F;code&gt;或&lt;code&gt;delta_coordinates&lt;&#x2F;code&gt;则不正确。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;类型名称带有一个额外的大写字母作为前缀，以将其与变量名称区分开。例如， &lt;code&gt;FSkin&lt;&#x2F;code&gt;是类型名称，而&lt;code&gt;Skin&lt;&#x2F;code&gt;是类型&lt;code&gt;FSkin&lt;&#x2F;code&gt;的实例。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;模版类一T为前缀&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; ObjectType&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TAttribute
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;从&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;dev.epicgames.com&#x2F;documentation&#x2F;en-us&#x2F;unreal-engine&#x2F;objects-in-unreal-engine?application_version=5.4&quot;&gt;UObject&lt;&#x2F;a&gt;继承的类以 U 为前缀。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UActorComponent
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;继承自&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;dev.epicgames.com&#x2F;documentation&#x2F;en-us&#x2F;unreal-engine&#x2F;actors-in-unreal-engine?application_version=5.4&quot;&gt;AActor&lt;&#x2F;a&gt;的类以 A 为前缀。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;AActor
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;从&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;dev.epicgames.com&#x2F;documentation&#x2F;en-us&#x2F;unreal-engine&#x2F;slate-user-interface-programming-framework-for-unreal-engine?application_version=5.4&quot;&gt;SWidget&lt;&#x2F;a&gt;继承的类以 S 为前缀。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;SCompoundWidget
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;作为抽象接口的类以 I 为前缀。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IAnalyticsProvider
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;枚举以 E 为前缀。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;EColorBits
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  ECB_Red,    
&lt;&#x2F;span&gt;&lt;span&gt;  ECB_Green,   
&lt;&#x2F;span&gt;&lt;span&gt;  ECB_Blue
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;布尔类型变量必须以b为前缀&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span&gt;bPendingDestruction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bHasFadedIn
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;类型和变量名称由名称组成。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;方法名称是动词，要么描述方法的效果，要么描述没有效果的方法的返回值。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;宏名称应完全大写，单词之间用下划线分隔，并以&lt;code&gt;UE_&lt;&#x2F;code&gt;为前缀。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UE_AUDIT_SPRITER_IMPORT
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;名称的范围越大，一个好的描述性名称就越重要。避免过度缩写。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;所有返回 bool 的函数都应该询问 true&#x2F;false 问题，例如&lt;code&gt;IsVisible()&lt;&#x2F;code&gt;或&lt;code&gt;ShouldClearBuffer()&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IsVisible&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; &amp;quot;IsVisible&amp;quot; 是一个明确的询问：对象是否可见？
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ShouldClearBuffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; &amp;quot;ShouldClearBuffer&amp;quot; 明确地表示：是否应该清空缓冲区？
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;dai-ma-ge-shi-hua&quot;&gt;代码格式化&lt;a class=&quot;zola-anchor&quot; href=&quot;#dai-ma-ge-shi-hua&quot; aria-label=&quot;Anchor link for: dai-ma-ge-shi-hua&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;始终在代码中包含完整大括号,例如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bThing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;if-else 语句中的每个执行块都应该放在大括号中。这有助于防止编辑错误。当不使用大括号时，有人可能会无意中向 if 块添加另一行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bHaveUnrealLicense&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;InsertYourGameHere&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;CallMarkRein&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;多路 if 语句应该与每个&lt;code&gt;else if&lt;&#x2F;code&gt;缩进量与第一个&lt;code&gt;if&lt;&#x2F;code&gt;相同；这使得读者可以清楚地了解结构：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;TannicAcid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UE_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;LogCategory, Log, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Low Acid&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;TannicAcid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UE_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;LogCategory, Log, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Medium Acid&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UE_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;LogCategory, Log, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TEXT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;High Acid&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;更多相关的详细内容可以前往官方文档进行查阅:https:&#x2F;&#x2F;dev.epicgames.com&#x2F;documentation&#x2F;en-us&#x2F;unreal-engine&#x2F;epic-cplusplus-coding-standard-for-unreal-engine?application_version=5.4&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>游戏算法基础-深入解析A*寻路算法</title>
          <pubDate>Sun, 15 Dec 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/you-xi-suan-fa-ji-chu-a-xun-lu-suan-fa-chi-xu-wei-hu/</link>
          <guid>https://ilikexff.cn/you-xi-suan-fa-ji-chu-a-xun-lu-suan-fa-chi-xu-wei-hu/</guid>
          <description xml:base="https://ilikexff.cn/you-xi-suan-fa-ji-chu-a-xun-lu-suan-fa-chi-xu-wei-hu/">&lt;blockquote&gt;
&lt;p&gt;在开始阅读之前,本文阿婆主默认你已经掌握或者了解以下支撑内容:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;玩过游戏&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;买菜用的数学&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;图论基础(深度、广度、Dijkstra)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;C++编程&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;非色盲选手&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;suan-fa-jian-jie&quot;&gt;算法简介&lt;a class=&quot;zola-anchor&quot; href=&quot;#suan-fa-jian-jie&quot; aria-label=&quot;Anchor link for: suan-fa-jian-jie&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;A*寻路算法&lt;&#x2F;strong&gt;是一种在图形平面上寻找&lt;strong&gt;最短路径&lt;&#x2F;strong&gt;的有效方法。它被广泛应用于游戏开发、路径规划、机器人导航等领域。&lt;&#x2F;p&gt;
&lt;p&gt;和一些其他的最短路径搜寻算法不同,A星算法是一种启发式的搜索算法,通过评估每个节点的代价来选择最优路径。A星结合了知名的&lt;code&gt;Dijkstra&lt;&#x2F;code&gt;算法和贪心算法的优点,因此被广泛的应用在各个领域,尤其是游戏开发中,对于游戏中AI角色或者NPC角色以及一些自动寻路功能的开发中更是常客。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;suan-fa-he-xin-gai-nian&quot;&gt;算法核心概念&lt;a class=&quot;zola-anchor&quot; href=&quot;#suan-fa-he-xin-gai-nian&quot; aria-label=&quot;Anchor link for: suan-fa-he-xin-gai-nian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;对于A星的核心,这里主要讲一下其中的两个核心函数,一是代价函数,第二则是启发式函数。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dai-jia-han-shu-f-n-g-n-h-n&quot;&gt;代价函数$f(n) = g(n) + h(n)$&lt;a class=&quot;zola-anchor&quot; href=&quot;#dai-jia-han-shu-f-n-g-n-h-n&quot; aria-label=&quot;Anchor link for: dai-jia-han-shu-f-n-g-n-h-n&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;$g(n)$:从起点到当前节点$n$的实际代价,也就是已经走过的那部分路径。&lt;&#x2F;li&gt;
&lt;li&gt;$h(n)$:从$n$到目标点的启发式估计代价(使用启发函数计算得到的距离)。&lt;&#x2F;li&gt;
&lt;li&gt;$f(n)$:代价评估函数,也即是$g(n) + h(n)$的值,决定了搜索的优先级。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503181309987.png&quot; alt=&quot;1&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;启发式函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;启发式函数（Heuristic Function）是一种用于引导搜索算法的方法，通过估计当前状态到目标状态的最优代价，帮助算法更高效地找到解决方案。它通常用于&lt;strong&gt;启发式搜索&lt;&#x2F;strong&gt;（如 A* 算法、贪心搜索）中，以减少搜索空间，提高搜索效率。&lt;&#x2F;p&gt;
&lt;p&gt;在路径搜索或状态空间搜索中，启发式函数用于评估一个状态的“优越性”或“接近目标的程度”，从而帮助算法优先探索可能更优的路径。例如，在 A* 算法中，启发式函数用于估计从当前节点到目标节点的最短距离。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-1&quot;&gt;常见的启发式函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;1. 欧几里得距离（Euclidean Distance）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$h(n) = \sqrt{(x_{\text{goal}} - x_n)^2 + (y_{\text{goal}} - y_n)^2}$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;欧几里得距离计算的是两点之间的直线最短距离，适用于&lt;strong&gt;连续空间&lt;&#x2F;strong&gt;（如3D世界）或者允许&lt;strong&gt;对角线自由移动&lt;&#x2F;strong&gt;的环境。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2.曼哈顿距离（Manhattan Distance）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$h(n) = |x_{\text{goal}} - x_n| + |y_{\text{goal}} - y_n|$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;适用于只能水平或者垂直移动的环境,比如棋盘网格状的地图中,常见的如迷宫类游戏。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;3.切比雪夫距离（Chebyshev Distance）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;$h(n) = \max(|x_{\text{goal}} - x_n|, |y_{\text{goal}} - y_n|)$&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;一般用于允许对角线移动的八方向网格地图中。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;下面是这三种常见函数的对比总结&lt;&#x2F;strong&gt;:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;启发式函数&lt;&#x2F;th&gt;&lt;th&gt;适用场景&lt;&#x2F;th&gt;&lt;th&gt;适用游戏类型&lt;&#x2F;th&gt;&lt;th&gt;具体游戏示例&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;欧几里得距离&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;连续空间，适用于&lt;strong&gt;自由移动&lt;&#x2F;strong&gt;的 3D 世界&lt;&#x2F;td&gt;&lt;td&gt;FPS、开放世界、RTS、驾驶游戏&lt;&#x2F;td&gt;&lt;td&gt;GTA 5、使命召唤、星际争霸 2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;曼哈顿距离&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;网格地图，&lt;strong&gt;只能水平 &#x2F; 垂直移动&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;2D 像素风、回合制 RPG、战棋&lt;&#x2F;td&gt;&lt;td&gt;火焰纹章、博德之门 3、勇者斗恶龙&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;切比雪夫距离&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;允许对角线移动&lt;&#x2F;strong&gt;的网格地图&lt;&#x2F;td&gt;&lt;td&gt;战略游戏、棋盘类、生存游戏&lt;&#x2F;td&gt;&lt;td&gt;国际象棋、魔兽争霸 3、暗黑破坏神 2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;为了方便理解,如果没有特殊说明,后续的示例都是基于 &lt;strong&gt;曼哈顿距离&lt;&#x2F;strong&gt;作为启发式函数来讲解的。&lt;&#x2F;p&gt;
&lt;p&gt;举个例子,假设存在下面这样一个地图,其中图二是图一的数组化形式,逻辑上他们是等效的:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503181347197.png&quot; alt=&quot;image-20250318134713119&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下面是其中一条最优路径的图示:从&lt;code&gt;(0,0)&lt;&#x2F;code&gt;出发到达&lt;code&gt;(3,3)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503181507389.png&quot; alt=&quot;image-20250318150755239&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对于上面的网格地图来说,如果是启发式函数基于 &lt;strong&gt;曼哈顿距离&lt;&#x2F;strong&gt;的情况下,该示例的$g(n),h(n),f(n)$的计算结果如下:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;strong&gt;位置 (x,y)&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;G(n) (路径代价)&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;H(n) (曼哈顿)&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;strong&gt;F(n) = G(n) + H(n)&lt;&#x2F;strong&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;(0,0) (起点)&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;6&lt;&#x2F;strong&gt; (3+3)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;(0,1)&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;5&lt;&#x2F;strong&gt; (3+2)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;(1,1)&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;4&lt;&#x2F;strong&gt; (3+1)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;(1,2)&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;3&lt;&#x2F;strong&gt; (3+0)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;(1,3)&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;2&lt;&#x2F;strong&gt; (2+0)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;(2,3)&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;1&lt;&#x2F;strong&gt; (1+0)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;(3,3) (终点)&lt;&#x2F;strong&gt;&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;strong&gt;0&lt;&#x2F;strong&gt; (0+0)&lt;&#x2F;td&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;纸上得来终觉浅&lt;&#x2F;strong&gt;,建议你掏出压箱底的&lt;strong&gt;稿纸&lt;&#x2F;strong&gt;和垃圾桶里的&lt;strong&gt;2B&lt;&#x2F;strong&gt;,自己模拟计算所需的代价函数,强化理解。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;注意,为了节省篇幅,这里列出的只是其中一条可行的路径,就这个示例地图来说,可能存在多个最优的选择,并不唯一。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;A*算法代码实现(C++)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;理解了A星的基本原理之后,接下来我们使用C++实现一个A星的基本算法流程。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;0.相关头文件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;queue&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cmath&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;unordered_map&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;algorithm&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;&lt;strong&gt;1. Node结构&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 节点结构体
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; x, y;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 坐标
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; g, h;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; g: 从起点到当前节点的代价, h: 启发式估价
&lt;&#x2F;span&gt;&lt;span&gt;    Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; parent;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 父节点指针, 用于回溯路径
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float g&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float h&lt;&#x2F;span&gt;&lt;span&gt;, Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;parent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nullptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; h; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 计算总代价 f = g + h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;g：从起点到当前节点的 &lt;strong&gt;真实代价&lt;&#x2F;strong&gt;（步数）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;h：当前节点到目标点的 &lt;strong&gt;估算代价&lt;&#x2F;strong&gt;（启发式函数）。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;f = g + h：总代价，A* 总是优先选择 f 最小的节点。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;2.定义&lt;code&gt;Compare&lt;&#x2F;code&gt;结构体&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 优先队列比较器, 使得 f 值较小的节点优先出队
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Compare &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;operator()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; a-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; b-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;由于优先队列&lt;code&gt;priority_queue&lt;&#x2F;code&gt;默认是 &lt;strong&gt;大顶堆(最大值优先)&lt;&#x2F;strong&gt;,但 &lt;code&gt;A* &lt;&#x2F;code&gt;需要 &lt;strong&gt;f 值最小&lt;&#x2F;strong&gt; 的优先出队，因此这里实现了 &lt;strong&gt;小顶堆&lt;&#x2F;strong&gt;（f 小的优先）。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;3.启发式函数&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 启发式函数: 使用曼哈顿距离（适用于只能水平或垂直移动的情况）
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;heuristic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int x2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int y2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;x1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) + &lt;&#x2F;span&gt;&lt;span&gt;std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;abs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;y1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; y2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;曼哈顿距离 &lt;strong&gt;适用于网格地图&lt;&#x2F;strong&gt;（只能水平&#x2F;垂直移动）。&lt;&#x2F;li&gt;
&lt;li&gt;后续也会给出其他几种函数的代码参考,你可以自己更换不同的启发函数来研究不同情况下的&lt;code&gt;A*&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;4. A*搜索主方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; A* 搜索算法
&lt;&#x2F;span&gt;&lt;span&gt;std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;aStarSearch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                             std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                                             std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;goal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, cols &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; grid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::priority_queue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;, std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;, Compare&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; openSet; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 优先队列
&lt;&#x2F;span&gt;&lt;span&gt;    std::unordered_map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; allNodes; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 记录所有访问过的节点
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 创建起始节点并放入开启列表
&lt;&#x2F;span&gt;&lt;span&gt;    Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; startNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;heuristic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span&gt;, goal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, goal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    openSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;startNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    allNodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; cols &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; startNode;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 4个移动方向（右、下、左、上）
&lt;&#x2F;span&gt;&lt;span&gt;    std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; directions &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; path;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span&gt;openSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; openSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 取出当前代价最小的节点
&lt;&#x2F;span&gt;&lt;span&gt;        openSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果到达目标点，回溯路径
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;current-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; goal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; current-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; goal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;emplace_back&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;current-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;, current-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                current &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; current-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 遍历 4 个方向的邻居节点
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto [&lt;&#x2F;span&gt;&lt;span&gt;dx, dy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; directions&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; nx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; current-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; dx, ny &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; current-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; dy;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 边界检查和障碍物检查
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;nx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; ny &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; nx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; ny &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; cols &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; grid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;nx&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span&gt;ny&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;continue&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float gNew &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; current-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;g &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; g 值 +1 (假设所有移动的代价相等)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; hNew &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;heuristic&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;nx, ny, goal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, goal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; nx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; cols &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; ny;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果该节点未被访问或找到更短路径
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(!&lt;&#x2F;span&gt;&lt;span&gt;allNodes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;gNew &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; allNodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; neighbor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;nx, ny, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;gNew&lt;&#x2F;span&gt;&lt;span&gt;, hNew, current&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                openSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;neighbor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                allNodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; neighbor;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 释放所有节点的内存
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;_, node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; allNodes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt; node;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; path;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;5.路径字符化(可选)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这不是算法必须的步骤,添加这部分代码主要是用来打印路径字符,直观的理解搜索的结果。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 可视化打印路径
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printGridWithPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                       std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;, std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;goal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, std::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span&gt;grid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 初始化网格，障碍物用 &amp;#39;#&amp;#39; 标记
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; grid.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; grid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;grid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;#&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 绘制路径
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;x, y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span&gt;y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 标记起点和终点
&lt;&#x2F;span&gt;&lt;span&gt;    display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first][&lt;&#x2F;span&gt;&lt;span&gt;start.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;S&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;goal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;first][&lt;&#x2F;span&gt;&lt;span&gt;goal.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;second] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;G&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 打印网格
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;A* 搜索路径:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; display&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; row&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; cell &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;字符化地图说明:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;#：障碍物&lt;&#x2F;p&gt;
&lt;p&gt;.：可行区域&lt;&#x2F;p&gt;
&lt;p&gt;*：路径&lt;&#x2F;p&gt;
&lt;p&gt;S：起点&lt;&#x2F;p&gt;
&lt;p&gt;G：终点&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;5. 主函数&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;std::vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; grid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::pair&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; goal &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto&lt;&#x2F;span&gt;&lt;span&gt; path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;aStarSearch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;grid, start, goal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;未找到可行路径!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; std::endl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;最短路径:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auto [&lt;&#x2F;span&gt;&lt;span&gt;x, y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;目标点&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printGridWithPath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;grid, path, start, goal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503181535055.png&quot; alt=&quot;image-20250318153504868&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;关于A*的一些优化方向&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;原生的A星算法已经相对高效,但是在大规模地图或者复杂路径规划的问题中可能会遇到性能瓶颈。因此具体的优化方向还得取决于具体的问题,这里只是列出一些常见的优化方向,作为学习指南。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-5&quot;&gt;数据结构上的优化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的数据结构优化基于本文实现的代码而言。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;A*&lt;&#x2F;code&gt; 依赖 &lt;strong&gt;openSet&lt;&#x2F;strong&gt;（开启列表），当前实现使用的是 &lt;code&gt;std::priority_queue&lt;&#x2F;code&gt;，但是 &lt;code&gt;std::priority_queue&lt;&#x2F;code&gt; &lt;strong&gt;不支持高效的更新操作&lt;&#x2F;strong&gt;，这可能导致节点重复入队并降低性能。&lt;&#x2F;p&gt;
&lt;p&gt;因此,可以使用&lt;code&gt;std::unordered_map+最小堆&lt;&#x2F;code&gt;进行优化:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::unordered_map&lt;&#x2F;code&gt; 存储节点索引，最小堆（&lt;code&gt;Binary Heap&lt;&#x2F;code&gt;）用于快速取出 &lt;code&gt;f(n)&lt;&#x2F;code&gt; 最小的节点。&lt;&#x2F;li&gt;
&lt;li&gt;需要额外维护一个哈希表来存储节点的位置，以支持 &lt;strong&gt;堆的 decrease-key 操作&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-6&quot;&gt;启发式函数的选择&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;这个没啥说的,最基本的原则就是根据项目的类型来选择不同的启发式函数。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-7&quot;&gt;逻辑上的优化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;常见的优化方向有:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;双向&lt;code&gt;A*&lt;&#x2F;code&gt;:同时从起点和终点进行搜索,相遇时停止。&lt;&#x2F;li&gt;
&lt;li&gt;跳点搜索(&lt;code&gt;JPS&lt;&#x2F;code&gt;):跳过冗余的节点,适用于规则网格地图,可以极大的减少搜索空间。&lt;&#x2F;li&gt;
&lt;li&gt;图割方法(对称&lt;code&gt;A*&lt;&#x2F;code&gt;):在动态地图中,分割图像区域,减少搜索范围。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;欢迎关注后续更新….&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>无畏并发_Rust 生命周期浅谈</title>
          <pubDate>Sat, 04 May 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/wu-wei-bing-fa-rust-sheng-ming-zhou-qi-qian-tan/</link>
          <guid>https://ilikexff.cn/wu-wei-bing-fa-rust-sheng-ming-zhou-qi-qian-tan/</guid>
          <description xml:base="https://ilikexff.cn/wu-wei-bing-fa-rust-sheng-ming-zhou-qi-qian-tan/">&lt;h2 id=&quot;1-jian-shu&quot;&gt;1. 简述&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-jian-shu&quot; aria-label=&quot;Anchor link for: 1-jian-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240504202148065.png&quot; alt=&quot;image-20240504202148065&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Rust 中的每一个引用都有其 &lt;strong&gt;生命周期&lt;&#x2F;strong&gt;（&lt;em&gt;lifetime&lt;&#x2F;em&gt;），也就是引用保持有效的作用域。大部分时候生命周期是隐含并可以推断的，正如大部分时候类型也是可以推断的一样。类似于当因为有多种可能类型的时候必须注明类型，也会出现引用的生命周期以一些不同方式相关联的情况，所以 Rust 需要我们使用泛型生命周期参数来注明他们的关系，这样就能确保运行时实际使用的引用绝对是有效的。&lt;&#x2F;p&gt;
&lt;p&gt;生命周期的概念从某种程度上说不同于其他语言中类似的工具，毫无疑问这是 Rust 最与众不同的功能。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;2. 秒懂生命周期&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;生命周期就是一个用来避免出现悬垂引用的手段，本质上就是约束和说明变量作用域的作用关系，更好的避免哪些已经失效的数据再次被引用从而导致的一些列问题。&lt;&#x2F;p&gt;
&lt;p&gt;什么是非法引用呢？看下面这个例子:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; r;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        r &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;x;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;r: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;实例代码中，我们在代码块的外部定义一个变量&lt;code&gt;r&lt;&#x2F;code&gt;，并在后续的代码块中定义一个变量&lt;code&gt;x&lt;&#x2F;code&gt;且赋值为&lt;code&gt;5&lt;&#x2F;code&gt;之后将变量&lt;code&gt;x&lt;&#x2F;code&gt;的引赋给前面&lt;code&gt;r&lt;&#x2F;code&gt;,到这里其实没什么问题。继续往下，在代码块之后将&lt;code&gt;r&lt;&#x2F;code&gt;的值打印输出，此时是无法通过编译的因为这已经出现了非法引用的问题，也就是所谓 &lt;strong&gt;悬垂引用&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;这是因为&lt;code&gt;x&lt;&#x2F;code&gt;变量在执行赋值之后，截至代码&lt;code&gt;#6&lt;&#x2F;code&gt;行开始，它的作用域就结束了，也就是说，&lt;code&gt;x&lt;&#x2F;code&gt;变量的生命周期到此为止，但由于后续还存在打印&lt;code&gt;r&lt;&#x2F;code&gt;的操作，而此时由于&lt;code&gt;x&lt;&#x2F;code&gt;的结束，&lt;code&gt;r&lt;&#x2F;code&gt;所指向的数据就是一个不存在的东西，那不得报错啊。那能编译通过的话就属于玄学了。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;变量 &lt;code&gt;x&lt;&#x2F;code&gt; 并没有 “存在的足够久”。其原因是 &lt;code&gt;x&lt;&#x2F;code&gt; 在到达第 7 行内部作用域结束时就离开了作用域。不过 &lt;code&gt;r&lt;&#x2F;code&gt; 在外部作用域仍是有效的；作用域越大我们就说它 “存在的越久”。&lt;&#x2F;p&gt;
&lt;p&gt;那么&lt;code&gt;Rust&lt;&#x2F;code&gt;编译器是如何直判断这段代码不能通过编译的呢？其实很简单，看的就是哪个变量的作用域存在时间更长。当然，官方将这种方式起名叫做 &lt;strong&gt;借用检查器&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;他的作用就是通过比较作用域来确保借用的合法性，避免悬垂。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240504183054170.png&quot; alt=&quot;image-20240504183054170&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图还是之前的示例,我使用不同的颜色以及生命周期标记来指出了变量&lt;code&gt;x&lt;&#x2F;code&gt;和&lt;code&gt;r&lt;&#x2F;code&gt;的作用域，或者说生命周期时长。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x27;a&#x27;&lt;&#x2F;code&gt;也就是红色部分表示&lt;code&gt;r&lt;&#x2F;code&gt;的生命周期；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&#x27;b&#x27;&lt;&#x2F;code&gt;也就是亮绿色的部分表示&lt;code&gt;x&lt;&#x2F;code&gt;的生命周期；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这样就可以直观的感受到内部的 &lt;code&gt;&#x27;b&lt;&#x2F;code&gt; 块要比外部的生命周期 &lt;code&gt;&#x27;a&lt;&#x2F;code&gt; 小得多。&lt;code&gt;Rust&lt;&#x2F;code&gt;的借用检查器在编译时就会发现&lt;code&gt;r&lt;&#x2F;code&gt;引用了一个生命周期小于自己的变量&lt;code&gt;x&lt;&#x2F;code&gt;,&lt;strong&gt;被引用的对象&lt;&#x2F;strong&gt;比它的&lt;strong&gt;引用者&lt;&#x2F;strong&gt;存在的时间更&lt;strong&gt;短&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;假如&lt;code&gt;r&lt;&#x2F;code&gt;在后续还需要带着&lt;code&gt;x&lt;&#x2F;code&gt;一起干一番大事业。但是发现&lt;code&gt;x&lt;&#x2F;code&gt;在这之前就西天取经去了，&lt;code&gt;r&lt;&#x2F;code&gt;也只能放弃了这个想法，人生到此结束。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;换句话说，在借用关系中，被借用的对象生命周期必须大于等于借用者的生命周期，否则会出现借用者借用之后被借用的对象挂了，那借用者借了个寂寞，&lt;code&gt;Rust&lt;&#x2F;code&gt;直接拒绝编译。&lt;&#x2F;p&gt;
&lt;p&gt;所以，依据上面的原理，将代码作适当的调整之后就可以正常编译了，像下面这样。此时被借用的&lt;code&gt;x&lt;&#x2F;code&gt;的生命周期为&lt;code&gt;&#x27;b&lt;&#x2F;code&gt;且大于借用者&lt;code&gt;r&lt;&#x2F;code&gt;的&lt;code&gt;&#x27;a&lt;&#x2F;code&gt;,不会出现非法借用的问题。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240504184449312.png&quot; alt=&quot;image-20240504184449312&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;3. 函数中泛型生命周期&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;故事还得从一个简单的方法讲起。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;abcd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;xyz&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;string1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, string2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The longest string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;从上面的内容不难猜测，函数&lt;code&gt;longest（）&lt;&#x2F;code&gt;的作用是返回两个切片中较长的一个，功能就这么简单！&lt;&#x2F;p&gt;
&lt;p&gt;参考下面的函数实现，这种写法能逃过编译器的考验成功通过编译吗？&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        x
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        y
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;乍一看没问题啊，不就是传入两个字符串引用比较长短返回吗，为了保留实参的所有权还特地将函数参数使用了引用方式传递呢。写的挺板正的啊，语法简洁，逻辑清晰。但还是禁不住编译器的百般拷打，终于还是露出了狐狸尾巴。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240504185825600.png&quot; alt=&quot;image-20240504185825600&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;函数尝试返回 &lt;code&gt;x&lt;&#x2F;code&gt; 或 &lt;code&gt;y&lt;&#x2F;code&gt; 的引用，但是这两个参数的&lt;strong&gt;生命周期并没有明确定义&lt;&#x2F;strong&gt;。在函数返回时，编译器&lt;strong&gt;无法确定返回的引用是否仍然有效&lt;&#x2F;strong&gt;。这和之前例子不太一样的地方就是我们没办法直观(抽象一点也可以啊)的看出来&lt;code&gt;x&lt;&#x2F;code&gt;,&lt;code&gt;y&lt;&#x2F;code&gt;的作用域，没办法确定生命周期时长，基于这个原理，&lt;code&gt;Rust&lt;&#x2F;code&gt;的借用检查器也做不到这一点。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;为了解决这个问题，就需要使用&lt;strong&gt;泛型生命周期参数&lt;&#x2F;strong&gt;来明确指定返回引用的生命周期与输入参数的生命周期之间的关系。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        x
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        y
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时代码正常执行：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240504190734366.png&quot; alt=&quot;image-20240504190734366&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在修复后的代码中，我们使用了泛型生命周期参数 &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;，这样可以确保返回的引用与输入参数的生命周期相匹配。这样编译器就能够正确推断返回引用的生命周期，避免悬垂引用或生命周期不匹配的问题。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;生命周期标注有着一个不太常见的语法：生命周期参数名称必须以撇号（&lt;code&gt;&#x27;&lt;&#x2F;code&gt;）开头，其名称通常全是小写，类似于泛型其名称非常短。&lt;code&gt;&#x27;a&lt;&#x2F;code&gt; 是大多数人默认使用的名称。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;生命周期标注描述了多个引用生命周期相互的关系，而不影响其生命周期。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;生命周期参数标注位于引用的 &lt;code&gt;&amp;amp;&lt;&#x2F;code&gt; 之后，并有一个空格来将引用类型与生命周期标注分隔开。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 引用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 带有显式生命周期的引用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;i32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 带有显式生命周期的可变引用
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;看到这儿，你大概还是一知半解、一头雾水、一脸懵逼、一愣一愣。不着急，等我去画个图先，人的脑子总是惯性的偏向于理解图像信息而不是文字，尽管我文采飞扬，满屏生花!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-2&quot;&gt;3.1 再论泛型生命周期&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;通过上面泛型生命周期的简单使用大概可以获取到下面这些信息：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;此时通过函数签名可以明确某些生命周期&lt;code&gt;&#x27;a&lt;&#x2F;code&gt;,在函数获取到的两个参数中他们的生命周期都是和&lt;code&gt;&#x27;a&lt;&#x2F;code&gt;保持一致，对于返回值也是一个道理，也就是说，此时不论是两个参数&lt;code&gt;x,y&lt;&#x2F;code&gt;还是返回值都保持了生命周期的大小同步。&lt;&#x2F;li&gt;
&lt;li&gt;怎么理解这个 &lt;strong&gt;同步&lt;&#x2F;strong&gt;的含义是重点，这就又和上面所学的东西关联上了，所谓的同步，就是这个生命周期标识&lt;code&gt;&#x27;a&lt;&#x2F;code&gt;会保证参数和返回值将会是三者中生命周期的较小者，可以理解为三者的交集，这也是我们需要告知&lt;code&gt;rust&lt;&#x2F;code&gt;需要保证的某种约束条件。&lt;&#x2F;li&gt;
&lt;li&gt;在函数执行时，当具体的引用被传入到该函数中，&lt;code&gt;&#x27;a&lt;&#x2F;code&gt;标记的生命周期就是两个引用参数&lt;code&gt;x,y&lt;&#x2F;code&gt;的较小者(为什么不是较大者，请回去再看一遍上一个目录的内容)。&lt;&#x2F;li&gt;
&lt;li&gt;保证 了&lt;code&gt;x,y&lt;&#x2F;code&gt;的约束条件之后，最终函数在返回值时，还需要再次保证此时返回值的生命周期和之前两个引用参数的生命周期的较小者。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240504193644091.png&quot; alt=&quot;image-20240504193644091&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如上图所示。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;我们假设两个参数的生命周期为其较小的一方(假设为&lt;code&gt;z&lt;&#x2F;code&gt;),那么&lt;code&gt;z = min(x,y)&lt;&#x2F;code&gt;;&lt;&#x2F;li&gt;
&lt;li&gt;用&lt;code&gt;w&lt;&#x2F;code&gt;表示返回值的生命周期，那么最终返回的生命周期为&lt;code&gt;min(z,w)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;他们之间类似于数学概念上的交集的定义，只有保证了全部生命周期中的重叠部分一致，才能保证整个函数生命周期的有效性，但凡取一个较大或者较小的值，都可能会导致非法引用问题的出现。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;需要注意的是，生命周期标识仅仅作为一种标识，它本身没有更多的实际意义，也不会直接影响某个函数的功能，仅作为一种约束关系的表示而已。&lt;&#x2F;p&gt;
&lt;p&gt;这些标注出现在函数签名中，而不存在于函数体中的任何代码中。这是因为 &lt;code&gt;Rust &lt;&#x2F;code&gt;能够分析函数中代码而不需要任何协助，不过&lt;strong&gt;当函数引用或被函数之外的代码引用时&lt;&#x2F;strong&gt;，让 &lt;code&gt;Rust &lt;&#x2F;code&gt;自身分析出参数或返回值的生命周期几乎是不可能的。这些生命周期在每次函数被调用时都可能不同。这也就是为什么我们需要手动标记生命周期的原因。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;理论部分巴拉完了，下面通过两个具体的例子，来直观感受下&lt;strong&gt;如何通过传递拥有不同具体生命周期的引用来限制 &lt;code&gt;longest&lt;&#x2F;code&gt; 函数的使用。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;函数还是之前的函数,请注意观察&lt;code&gt;main&lt;&#x2F;code&gt;方法中的内容：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;y&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; x.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; y.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        x
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        y
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;long string is long&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; string2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;xyz&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;longest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;string1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, string2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;The longest string is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;输出: The longest string is long string is long&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这个例子中，&lt;code&gt;string1&lt;&#x2F;code&gt;的作用域显然大于&lt;code&gt;string2&lt;&#x2F;code&gt;,所以它直到整个外部作用域结束都是有效的，&lt;code&gt;string2&lt;&#x2F;code&gt;则只在&lt;code&gt;{}&lt;&#x2F;code&gt;代码块中有效，作用域较小。&lt;&#x2F;p&gt;
&lt;p&gt;而&lt;code&gt;result&lt;&#x2F;code&gt;这是引用了哪些直到内部作用域结束时也还有效的值，这就相当于在&lt;code&gt;string1&lt;&#x2F;code&gt;和&lt;code&gt;string2&lt;&#x2F;code&gt;中取了交集部分，二者的较小值，此时借用检查器正常检查通过，所以会看到那段输出。&lt;&#x2F;p&gt;
&lt;p&gt;没有比对就没有对比，看看下面这个例子：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;fn longest&amp;lt;&amp;#39;a&amp;gt;(x: &amp;amp;&amp;#39;a str, y: &amp;amp;&amp;#39;a str) -&amp;gt; &amp;amp;&amp;#39;a str {
&lt;&#x2F;span&gt;&lt;span&gt;    if x.len() &amp;gt; y.len() {
&lt;&#x2F;span&gt;&lt;span&gt;        x
&lt;&#x2F;span&gt;&lt;span&gt;    } else {
&lt;&#x2F;span&gt;&lt;span&gt;        y
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;    let string1 = String::from(&amp;quot;long string is long&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    let result;
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        let string2 = String::from(&amp;quot;xyz&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        result = longest(string1.as_str(), string2.as_str());
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;The longest string is {}&amp;quot;, result);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个例子中：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;string1&lt;&#x2F;code&gt;直到外部作用域结束都是有效的&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;string2&lt;&#x2F;code&gt;的作用域只在内部代码块中有效，显然在作用域范围上满足&lt;code&gt;string2&amp;lt;string1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;与上一个例子比较，这里将&lt;code&gt;result&lt;&#x2F;code&gt;的声明移到了代码块之外，也即是内部作用域之外，但是它和&lt;code&gt;string2&lt;&#x2F;code&gt;的赋值操作还是留在代码块中&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;并且打印&lt;code&gt;result&lt;&#x2F;code&gt;的代码也移到了代码块之外&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;通过上面的分析，这段代码显然是无法通过编译器拷打的，所以你才会看到下面的异常提示：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240504195414309.png&quot; alt=&quot;image-20240504195414309&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;从人的角度读上述代码，我们可能会觉得这个代码是正确的。 &lt;code&gt;string1&lt;&#x2F;code&gt; 更长，因此 &lt;code&gt;result&lt;&#x2F;code&gt; 会包含指向 &lt;code&gt;string1&lt;&#x2F;code&gt; 的引用。因为 &lt;code&gt;string1&lt;&#x2F;code&gt; 尚未离开作用域，对于 &lt;code&gt;println!&lt;&#x2F;code&gt; 来说 &lt;code&gt;string1&lt;&#x2F;code&gt; 的引用仍然是有效的。然而，我们通过生命周期参数告诉 Rust 的是： &lt;code&gt;longest&lt;&#x2F;code&gt; 函数返回的引用的生命周期应该与传入参数的生命周期中较短那个保持一致。&lt;&#x2F;li&gt;
&lt;li&gt;基于上面 &lt;strong&gt;保持一致&lt;&#x2F;strong&gt; 这一点，此时就应该取&lt;code&gt;string2&lt;&#x2F;code&gt;作为最终的生命周期，因为它显然比&lt;code&gt;string1&lt;&#x2F;code&gt;短，但由于此时&lt;code&gt;string2&lt;&#x2F;code&gt;在离开代码块之后就已经失效了，导致在 &lt;code&gt;println!&lt;&#x2F;code&gt; 中尝试使用 &lt;code&gt;result&lt;&#x2F;code&gt; 时，&lt;code&gt;string2&lt;&#x2F;code&gt; 已经被丢弃，从而产生了悬垂引用。是无法通过借用检查器的检查的，此时编译器收到了检查器的眼神之后，二话不说上来就是一大嘴巴子，并甩出了一句:“拒绝编译!!”&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;4. 参考&amp;amp;引用&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;《Rust权威指南》&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>O操作符,实现枚举的输入输出</title>
          <pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/ocao-zuo-fu-shi-xian-mei-ju-de-shu-ru-shu-chu/</link>
          <guid>https://ilikexff.cn/ocao-zuo-fu-shi-xian-mei-ju-de-shu-ru-shu-chu/</guid>
          <description xml:base="https://ilikexff.cn/ocao-zuo-fu-shi-xian-mei-ju-de-shu-ru-shu-chu/">&lt;p&gt;在上一篇关于枚举的文章&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;articles&#x2F;154&quot;&gt;[通俗易懂C++]:枚举篇一,无范围枚举&lt;&#x2F;a&gt;中,我们提到了一个例子,使用一个函数将枚举转换为等效字符串的方法:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    black,
&lt;&#x2F;span&gt;&lt;span&gt;    red,
&lt;&#x2F;span&gt;&lt;span&gt;    blue,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getColorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; black: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;black&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; red:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; blue:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;blue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; blue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your shirt is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getColorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;shirt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;尽管上面的例子可以正常实现需求,但存在一些不足:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;我们必须记住创建的函数名称;&lt;&#x2F;li&gt;
&lt;li&gt;每次输出时必须调用这样一个函数才能打印我们需要的枚举字符串,这会给单纯的输出语句造成混乱。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;一种比较理想的情况是,如果我们可以使用像系统提供的&lt;code&gt;std::cout&amp;lt;&amp;lt;&lt;&#x2F;code&gt;类似的方法来输出枚举,岂不是美滋滋?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;cao-zuo-fu-zhong-zai-jian-jie&quot;&gt;操作符重载简介&lt;a class=&quot;zola-anchor&quot; href=&quot;#cao-zuo-fu-zhong-zai-jian-jie&quot; aria-label=&quot;Anchor link for: cao-zuo-fu-zhong-zai-jian-jie&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在C++中,使用函数重载,我们可以创建一个同名函数的变体,这些变体可以处理不同的数据类型,而不必为每一个变体起一个唯一的名称。&lt;&#x2F;p&gt;
&lt;p&gt;类似地,C++也支持运算符的重载, 这允许我们定义现有运算符的重载格式,以便于我们可以使这些运算符与我们的程序定义的数据类型一起工作。&lt;&#x2F;p&gt;
&lt;p&gt;需要注意的是,这里暂不会详细介绍运算符的重载,更详细的内容也许会在后面的文章中介绍。&lt;&#x2F;p&gt;
&lt;p&gt;基本的运算符重载相当简单:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;使用运算符的名称来作为函数名称定义函数。&lt;&#x2F;li&gt;
&lt;li&gt;为每一个运算符添加适当类型的参数(从左到右的顺序)。其中一个参数必须是用户定义的类型(比如类类型或者枚举类型),否则编译器会出错。&lt;&#x2F;li&gt;
&lt;li&gt;返回类型可以设置为任何有意义的类型。&lt;&#x2F;li&gt;
&lt;li&gt;使用&lt;code&gt;return&lt;&#x2F;code&gt;返回运算结果。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当编译器在表达式中遇到对应的运算符并且存在一个或者多个操作数是用户定义的类型时,编译器会检查是否存在一个重载的运算符来解析该调用。例如,对于表达式&lt;code&gt;x+y&lt;&#x2F;code&gt;,编译器会使用函数重载解析来查看是否存在一个&lt;code&gt;operator+(x, y)&lt;&#x2F;code&gt;函数来实现该操作。如果能找到一个唯一性的&lt;code&gt;operator+&lt;&#x2F;code&gt;函数,那它就会被调用并将结果作为返回值返回。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zhong-zai-yun-suan-fu-da-yin-mei-ju&quot;&gt;重载&lt;code&gt;&amp;lt;&amp;lt;&lt;&#x2F;code&gt;运算符打印枚举&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhong-zai-yun-suan-fu-da-yin-mei-ju&quot; aria-label=&quot;Anchor link for: zhong-zai-yun-suan-fu-da-yin-mei-ju&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在正片开始之前,我们先快速回顾一下运算符&amp;lt;&amp;lt;在被用于输出时的工作方式。&lt;&#x2F;p&gt;
&lt;p&gt;考虑像&lt;code&gt;std::cout &amp;lt;&amp;lt; 10&lt;&#x2F;code&gt;这样的简单输出表达式。其中的&lt;code&gt;std::cout&lt;&#x2F;code&gt;的类型为&lt;code&gt;std::ostream&lt;&#x2F;code&gt;(标准库中的用户定义类型),而10是&lt;code&gt;int&lt;&#x2F;code&gt;基本数据类型。&lt;&#x2F;p&gt;
&lt;p&gt;在计算这个表达式时,编译器将查找可以处理&lt;code&gt;std：：ostream&lt;&#x2F;code&gt;和&lt;code&gt;int&lt;&#x2F;code&gt;类型参数的&lt;code&gt;operator&amp;lt;&amp;lt;&lt;&#x2F;code&gt;重载函数。由于这个函数确实在I&#x2F;O标准库中实现了,所以它将会被 调用。在该函数中,这个&lt;code&gt;std::cout&lt;&#x2F;code&gt;用于将x输出到控制台,最后,&lt;code&gt;operator&amp;lt;&amp;lt;&lt;&#x2F;code&gt;函数返回其左操作数（在本例中为&lt;code&gt;std：：cout&lt;&#x2F;code&gt;），以便于支持链式调用。&lt;&#x2F;p&gt;
&lt;p&gt;基于此,让我们实现一个&lt;code&gt;operator&amp;lt;&amp;lt;&lt;&#x2F;code&gt;的重载来打印&lt;code&gt;Color&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Color
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	black,
&lt;&#x2F;span&gt;&lt;span&gt;	red,
&lt;&#x2F;span&gt;&lt;span&gt;	blue,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getColorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; black: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;black&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; red:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; blue:  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;blue&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; operator&amp;lt;&amp;lt; 如何打印 Color 类型
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 返回类型和参数类型是引用（以防止创建副本）
&lt;&#x2F;span&gt;&lt;span&gt;std::ostream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;operator&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::ostream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;out&lt;&#x2F;span&gt;&lt;span&gt;,Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; out &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getColorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;color&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    Color &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;blue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your shirt is &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; shirt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503111501353.png&quot; alt=&quot;image-20250311150019525&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;让我们稍微解析一下这个重载的运算符函数。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;首先，函数的名称是 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;&#x2F;code&gt;，因为我们正在重载 &lt;code&gt;&amp;lt;&amp;lt;&lt;&#x2F;code&gt; 运算符。&lt;code&gt;operator&amp;lt;&amp;lt;&lt;&#x2F;code&gt; 有两个参数。&lt;&#x2F;li&gt;
&lt;li&gt;左侧的参数（与左操作数匹配）是我们的输出流，类型为 &lt;code&gt;std::ostream&lt;&#x2F;code&gt;。我们使用 &lt;strong&gt;非 const 引用&lt;&#x2F;strong&gt; 传递它，因为我们不希望在调用函数时复制 &lt;code&gt;std::ostream&lt;&#x2F;code&gt; 对象。右侧的参数（与右操作数匹配）是我们的 &lt;code&gt;Color&lt;&#x2F;code&gt;枚举类型对象。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们使用 std::ostream 输出操作时，例如通过 &amp;lt;&amp;lt; 运算符写入数据到输出流时，std::ostream 对象的内部状态会发生变化。例如，数据可能会被存入缓冲区或修改流的状态（如错误标志）。为了在调用者中看到这些变化，必须传递非 const 引用，而不是复制或常量引用。因为输出操作会修改这个流的内部状态，所以我们需要它是可修改的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;回过来看看我们的实现,本质上就是使用&lt;code&gt;std::ostream&lt;&#x2F;code&gt;对象使用操作符&lt;code&gt;&amp;lt;&amp;lt;&lt;&#x2F;code&gt;来打印一个&lt;code&gt;std：：string_view&lt;&#x2F;code&gt;。所以&lt;code&gt;out &amp;lt;&amp;lt; getColorName（color）&lt;&#x2F;code&gt;只是获取我们的颜色名称作为&lt;code&gt;std：：string_view&lt;&#x2F;code&gt;，然后将其打印到输出流。&lt;&#x2F;p&gt;
&lt;p&gt;所以,当我们调用&lt;code&gt;std：：cout &amp;lt;&amp;lt; shirt&lt;&#x2F;code&gt;时，编译器将看到我们重载了&lt;code&gt;operator&amp;lt;&amp;lt;&lt;&#x2F;code&gt;来处理&lt;code&gt;Color&lt;&#x2F;code&gt;类型的对象。然后调用重载的&lt;code&gt;operator&amp;lt;&amp;lt;&lt;&#x2F;code&gt;函数，使用&lt;code&gt;std：：cout&lt;&#x2F;code&gt;作为&lt;code&gt;out&lt;&#x2F;code&gt;参数，使用&lt;code&gt;shirt&lt;&#x2F;code&gt;变量（值为&lt;code&gt;blue&lt;&#x2F;code&gt;）作为&lt;code&gt;color参数&lt;&#x2F;code&gt;。由于&lt;code&gt;out&lt;&#x2F;code&gt;是对&lt;code&gt;std：：cout&lt;&#x2F;code&gt;的引用，而&lt;code&gt;color&lt;&#x2F;code&gt;是枚举数&lt;code&gt;blue&lt;&#x2F;code&gt;的副本，因此表达式&lt;code&gt;out &amp;lt;&amp;lt; getColorName（color）&lt;&#x2F;code&gt;将&lt;code&gt;“blue”&lt;&#x2F;code&gt;打印到控制台。最后，&lt;code&gt;out&lt;&#x2F;code&gt;返回给调用者，便于后续的链式调用。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;重载&amp;gt;&amp;gt;运算符,实现枚举的输入&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;类似于上面重载&lt;code&gt;&amp;lt;&amp;lt;&lt;&#x2F;code&gt;输出枚举一样,下面是对枚举输入的重载实现:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;limits&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string_view&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 定义一个枚举类型 Pet，表示不同的宠物
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Pet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    cat,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 0
&lt;&#x2F;span&gt;&lt;span&gt;    dog,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 1
&lt;&#x2F;span&gt;&lt;span&gt;    pig,   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 2
&lt;&#x2F;span&gt;&lt;span&gt;    whale, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这个函数根据 Pet 枚举值返回对应的宠物名称
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;switch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; cat:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; dog:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;dog&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; pig:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;pig&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span&gt; whale: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;whale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;:    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;???&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 未知的宠物类型
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这个函数根据字符串返回对应的 Pet 枚举值，如果找不到匹配项，返回 std::nullopt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr&lt;&#x2F;span&gt;&lt;span&gt; std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetFromString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::string_view &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; cat;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;dog&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; dog;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;pig&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; pig;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sv &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;whale&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; whale;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 返回空值，表示没有找到匹配的 Pet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;std::istream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;operator&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::istream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;,Pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; s;
&lt;&#x2F;span&gt;&lt;span&gt;    std::optional&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;Pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;match &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetFromString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;match;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; in;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果输入无效（没有找到匹配项）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将输入流状态设置为失败状态（failbit）
&lt;&#x2F;span&gt;&lt;span&gt;    in.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setstate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::ios_base::failbit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; in;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter a pet: cat, dog, pig, or whale: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;       Pet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;       std::cin &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; pet; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 读取用户输入
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::cin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果输入有效（找到了匹配项）
&lt;&#x2F;span&gt;&lt;span&gt;           std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;You chose: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPetName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;pet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           std::cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 重置输入流，使其恢复到可用状态
&lt;&#x2F;span&gt;&lt;span&gt;           std::cin.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ignore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;std::numeric_limits&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;std::streamsize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 忽略剩余输入
&lt;&#x2F;span&gt;&lt;span&gt;           std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Your pet was not valid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 提示用户输入无效
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202503111524108.png&quot; alt=&quot;image-20250311152402041&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里有一些与输出情况的不同之处值得注意。首先，&lt;code&gt;std：：cin&lt;&#x2F;code&gt;的类型是&lt;code&gt;std：：istream&lt;&#x2F;code&gt;，所以我们使用&lt;code&gt;std：：istream&amp;amp;&lt;&#x2F;code&gt;作为左参数和返回值的类型，而不是&lt;code&gt;std：：ostream&amp;amp;&lt;&#x2F;code&gt;。其次，&lt;code&gt;pet&lt;&#x2F;code&gt;参数是一个非常量引用。这允许我们的运算符&lt;code&gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt;修改右操作数的值，如果我们的提取结果匹配，则传入右操作数。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在函数内部，我们使用&lt;code&gt;operator&amp;gt;&amp;gt;&lt;&#x2F;code&gt;来输入一个&lt;code&gt;std：：string&lt;&#x2F;code&gt;（它已经知道如何做）。如果用户输入的值与我们的一个pet匹配，那么我们可以为&lt;code&gt;pet&lt;&#x2F;code&gt;分配适当的枚举数并返回左操作数（&lt;code&gt;in&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;li&gt;如果用户没有输入一个有效的pet，那么我们通过将&lt;code&gt;std：：cin&lt;&#x2F;code&gt;设置为“failure mode”来处理这种情况。这是提取失败时&lt;code&gt;std：：cin&lt;&#x2F;code&gt;通常进入的状态。然后调用者可以检查&lt;code&gt;std：：cin&lt;&#x2F;code&gt;以查看提取成功还是失败。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>关于Lombok鲜为人知的几个奇技淫巧</title>
          <pubDate>Thu, 25 Apr 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/guan-yu-lombokxian-wei-ren-zhi-de-ji-ge-qi-ji-yin-qiao/</link>
          <guid>https://ilikexff.cn/guan-yu-lombokxian-wei-ren-zhi-de-ji-ge-qi-ji-yin-qiao/</guid>
          <description xml:base="https://ilikexff.cn/guan-yu-lombokxian-wei-ren-zhi-de-ji-ge-qi-ji-yin-qiao/">&lt;h2 id=&quot;0-dao-yu&quot;&gt;0. 导语&lt;a class=&quot;zola-anchor&quot; href=&quot;#0-dao-yu&quot; aria-label=&quot;Anchor link for: 0-dao-yu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;各位芳龄18，工作经验20年的朋友多多少少都用过&lt;code&gt;lombok&lt;&#x2F;code&gt;这个东西，他的注解一用一个不吱声，一用一个巴适。但是这篇文章的重点不是在于教你如何系统的使用&lt;code&gt;Lombok&lt;&#x2F;code&gt;，而是分享几个你可能几乎不知道的 &lt;strong&gt;奇技淫巧&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240425210701454.png&quot; alt=&quot;image-20240425210701454&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;1. Lombox 基本情况&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;虽然说的具体使用教程不是本文的重点，但是基本的概念和简单的用法还是要提一嘴的，万一真有新人还没来得及发现这个东西呢，岂不是又能嫖到一个宝？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Lombok &lt;&#x2F;code&gt;是一个 Java 库，旨在通过自动生成代码来简化 Java 类的编写。使用 &lt;code&gt;Lombok &lt;&#x2F;code&gt;可以&lt;strong&gt;减少样板代码&lt;&#x2F;strong&gt;，例如 &lt;code&gt;getter&lt;&#x2F;code&gt;、&lt;code&gt;setter&lt;&#x2F;code&gt;、构造函数等，从而提高开发效率。通过在类中添加注解，&lt;code&gt;Lombok &lt;&#x2F;code&gt;可以在编译时生成相应的代码，减少开发人员需要手动编写的重复代码。&lt;&#x2F;p&gt;
&lt;p&gt;以下是一些 &lt;code&gt;Lombok&lt;&#x2F;code&gt; 提供的常用注解和功能：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;@Getter&#x2F;@Setter&lt;&#x2F;strong&gt;：通过在字段上添加 &lt;code&gt;@Getter&lt;&#x2F;code&gt; 和 &lt;code&gt;@Setter &lt;&#x2F;code&gt;注解，可以自动生成相应的 &lt;code&gt;getter&lt;&#x2F;code&gt; 和 &lt;code&gt;setter &lt;&#x2F;code&gt;方法。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;@ToString&lt;&#x2F;strong&gt;：通过在类上添加 &lt;code&gt;@ToString &lt;&#x2F;code&gt;注解，可以自动生成 &lt;code&gt;toString()&lt;&#x2F;code&gt; 方法。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;@EqualsAndHashCode&lt;&#x2F;strong&gt;：通过在类上添加 &lt;code&gt;@EqualsAndHashCode&lt;&#x2F;code&gt; 注解，可以自动生成 &lt;code&gt;equals()&lt;&#x2F;code&gt; 和 &lt;code&gt;hashCode() &lt;&#x2F;code&gt;方法。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;@NoArgsConstructor&#x2F;@RequiredArgsConstructor&#x2F;@AllArgsConstructor&lt;&#x2F;strong&gt;：通过在类上添加这些注解，可以生成无参构造函数、带指定参数的构造函数或者包含所有参数的构造函数。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;@Data&lt;&#x2F;strong&gt;：&lt;code&gt;@Data&lt;&#x2F;code&gt; 注解相当于同时添加了 &lt;code&gt;@Getter、@Setter、@ToString、@EqualsAndHashCode&lt;&#x2F;code&gt; 和 &lt;code&gt;@RequiredArgsConstructor &lt;&#x2F;code&gt;注解。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;@Builder&lt;&#x2F;strong&gt;：通过 &lt;code&gt;@Builder &lt;&#x2F;code&gt;注解可以实现建造者模式，简化对象的构建过程。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;@Slf4j&lt;&#x2F;strong&gt;：通过 &lt;code&gt;@Slf4j &lt;&#x2F;code&gt;注解可以自动生成一个名为 &lt;code&gt;log &lt;&#x2F;code&gt;的&lt;code&gt; SLF4J Logger&lt;&#x2F;code&gt; 对象。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;2. 代码实践&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;以上这些注解都是最最常用的几个注解，在开发中几乎随处可见，下面就拎几个出来用代码的方式演示一下，以表诚心。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-2&quot;&gt;2.1 @Getter&#x2F;@Setter&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;过多的解释这里就不再赘述了，上面说的很清楚了，直接上代码。要使用这玩意儿，还是得先导依赖，这是基本操作了。为了方便各位白嫖党得兄弟们，这里直接把&lt;code&gt;maven&lt;&#x2F;code&gt;和&lt;code&gt;gradle&lt;&#x2F;code&gt;版本的依赖都贴出来，主打一个伸手就拿!!&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;maven&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.projectlombok&#x2F;lombok --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;org.projectlombok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;lombok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;1.18.32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;provided&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gradle&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;groovy&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-groovy &quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.projectlombok&#x2F;lombok
&lt;&#x2F;span&gt;&lt;span&gt;compileOnly &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;org.projectlombok:lombok:1.18.32&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;tips：如果你是通过&lt;code&gt;SpringBoot&lt;&#x2F;code&gt;初始化器创建的项目，那么无需上面这种手动导入，直接在创建时勾选这个组件即可。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;我们有一个名为&lt;code&gt;User&lt;&#x2F;code&gt;的&lt;code&gt;pojo&lt;&#x2F;code&gt;;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span&gt;id;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;username;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;password;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;email;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate &lt;&#x2F;span&gt;&lt;span&gt;createTime;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; more 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;加入写在用常规的方式，手动创建&lt;code&gt;getter&lt;&#x2F;code&gt;和&lt;code&gt;setter&lt;&#x2F;code&gt;方法，代码结构是这样的:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * ======================|静如瘫痪|=============================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @项目名: LombokDemo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @作者: Gemini48
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @日期: 2024&#x2F;4&#x2F;25
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @博客: https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @邮箱: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @描述: This is the default description information.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * ======================|动如癫痫|=============================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; **&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cn.ilikexff.lombokdemo.pojo&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span&gt;id;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;username;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;password;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;email;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate &lt;&#x2F;span&gt;&lt;span&gt;createTime;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; .....
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; id;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getCreateTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; createTime;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setCreateTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;createTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.createTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; createTime;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getEmail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; email;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setEmail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; email;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPassword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; password;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setPassword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; password;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getUsername&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; username;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setUsername&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; username;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其实这些代码都是模板代码，改动的概念很小，但如果项目结构很大，有很多的&lt;code&gt;pojo&lt;&#x2F;code&gt;，那么手动为这些实体创建get和set的工作量也不小，而且属于浪费时间的操作。&lt;&#x2F;p&gt;
&lt;p&gt;因此，不妨看看使用&lt;code&gt;lombok&lt;&#x2F;code&gt;改造后的代码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * ======================|静如瘫痪|=============================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @项目名: LombokDemo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @作者: Gemini48
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @日期: 2024&#x2F;4&#x2F;25
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @博客: https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @邮箱: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @描述: This is the default description information.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * ======================|动如癫痫|=============================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; **&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cn.ilikexff.lombokdemo.pojo&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lombok&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Getter&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lombok&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Setter&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Setter
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Getter
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span&gt;id;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;username;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;password;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;email;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate &lt;&#x2F;span&gt;&lt;span&gt;createTime;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; .....
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就这？是的，就这，就这简单的两个注解，省去了几十行”废物“代码，最主要是节省了时间，可以将精力集中在业务开发上，而是不在这里写&lt;code&gt;1,2,3,4,5&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;2.2 @Data&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;这个就更常见了，如果没有特别的要求，我们更多使用的是这个一劳永逸的注解，正如开始所说的，这是一个集众多注解于一身的多功能注解。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240425194639164.png&quot; alt=&quot;image-20240425194639164&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;没有对比就没有抉择，虽然浪费空间，但这里还是贴一下使用&lt;code&gt;Data&lt;&#x2F;code&gt;之前之后的代码，以供各位客官享用；&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * ======================|静如瘫痪|=============================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @项目名: LombokDemo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @作者: Gemini48
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @日期: 2024&#x2F;4&#x2F;25
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @博客: https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @邮箱: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @描述: This is the default description information.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * ======================|动如癫痫|=============================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; **&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cn.ilikexff.lombokdemo.pojo&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span&gt;id;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;username;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;password;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;email;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate &lt;&#x2F;span&gt;&lt;span&gt;createTime;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; .....
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; id;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getCreateTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; createTime;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setCreateTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;createTime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.createTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; createTime;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getEmail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; email;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setEmail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; email;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getPassword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; password;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setPassword&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; password;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getUsername&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; username;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setUsername&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; username;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;createTime&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;email&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; id;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.createTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; createTime;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; email;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; password;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; username;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;User{&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;id=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, username=&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; username &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, password=&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; password &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, email=&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; email &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;, createTime=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; createTime &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用&lt;code&gt;@Data&lt;&#x2F;code&gt;后:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * ======================|静如瘫痪|=============================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @项目名: LombokDemo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @作者: Gemini48
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @日期: 2024&#x2F;4&#x2F;25
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @博客: https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @邮箱: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @描述: This is the default description information.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * ======================|动如癫痫|=============================
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; **&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cn.ilikexff.lombokdemo.pojo&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lombok&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LocalDate&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; Gemini48
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;@Data
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;public class User {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private Long id;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private String username;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private String password;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private String email;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private LocalDate createTime;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    &#x2F;&#x2F; .....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;关于&lt;code&gt;Lombok&lt;&#x2F;code&gt;的基本介绍就到这里了，用不用你自己决定。下面才是本文的重头戏，&lt;code&gt;Lombok&lt;&#x2F;code&gt;中哪些鲜为人知的 &lt;strong&gt;奇技淫巧&lt;&#x2F;strong&gt;的介绍。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;##3.  奇技淫巧&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-4&quot;&gt;3.1 @Delegate&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;@Delegate 允许类在零代码的情况下使用其他类的方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;比如说，有一个名为&lt;code&gt; A&lt;&#x2F;code&gt; 的类，该类有一个名为 &lt;code&gt;say1()&lt;&#x2F;code&gt; 的方法，并且您希望另一个类&lt;code&gt; B&lt;&#x2F;code&gt; 也能够使用此方法，则可以将&lt;code&gt; A&lt;&#x2F;code&gt; 类型的字段添加到类&lt;code&gt; B&lt;&#x2F;code&gt;，并添加 &lt;code&gt;@Delegate&lt;&#x2F;code&gt;注解 。写在&lt;code&gt; B&lt;&#x2F;code&gt; 中的&lt;code&gt;A&lt;&#x2F;code&gt;可以直接调用该 &lt;code&gt;say1&lt;&#x2F;code&gt; 方法，并说了一句:“&lt;strong&gt;拿来吧你&lt;&#x2F;strong&gt;!”(狗头)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A类&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; name;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;B类&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Delegate
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) + &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,Hello,I`M 鸡哥.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; main test...
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;拔哥&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这段代码中，使用 &lt;code&gt;@Delegate&lt;&#x2F;code&gt; 注解可以简化代码，自动生成委托方法，将 &lt;code&gt;B&lt;&#x2F;code&gt; 类中未实现的方法委托给 &lt;code&gt;A&lt;&#x2F;code&gt; 类。这样做的好处是可以减少代码量，避免重复编写委托方法。&lt;&#x2F;p&gt;
&lt;p&gt;通过使用 &lt;code&gt;@Delegate&lt;&#x2F;code&gt; 注解，&lt;code&gt;B&lt;&#x2F;code&gt; 类中不需要显式地编写 &lt;code&gt;say1&lt;&#x2F;code&gt; 方法的委托代码，而是直接调用 &lt;code&gt;say1&lt;&#x2F;code&gt; 方法，由 &lt;code&gt;Lombok &lt;&#x2F;code&gt;自动生成委托代码。&lt;&#x2F;p&gt;
&lt;p&gt;他是怎么实现的，不妨看看编译后的&lt;code&gt;.class&lt;&#x2F;code&gt;文件：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span&gt;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new A&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; var10000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; var10000 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,Hello,I`M 鸡哥.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B&lt;&#x2F;span&gt;&lt;span&gt; b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new B&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;拔哥&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.a.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用 &lt;code&gt;@Delegate&lt;&#x2F;code&gt; 注解可以简化这个过程，减少重复的代码编写，提高代码的可读性和可维护性。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-5&quot;&gt;3.2 @Cleanup&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@Cleanup&lt;&#x2F;code&gt; 可以自动管理各种需要释放的资源，如输入流和输出流，并确保 &lt;code&gt;close &lt;&#x2F;code&gt;方法被安全调用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;``java
public class CleanupExample {&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;public static void main(String[] args) {
&lt;&#x2F;span&gt;&lt;span&gt;    String filePath = &amp;quot;博主银行卡密码.txt&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    try {
&lt;&#x2F;span&gt;&lt;span&gt;        @Cleanup FileInputStream inputStream = new FileInputStream(filePath);
&lt;&#x2F;span&gt;&lt;span&gt;        int data;
&lt;&#x2F;span&gt;&lt;span&gt;        while ((data = inputStream.read()) != -1) {
&lt;&#x2F;span&gt;&lt;span&gt;            System.out.print((char) data);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    } catch (IOException e) {
&lt;&#x2F;span&gt;&lt;span&gt;        e.printStackTrace();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;同样看下`.class`文件。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;``java
&lt;&#x2F;span&gt;&lt;span&gt;public class files {
&lt;&#x2F;span&gt;&lt;span&gt;    public files() {
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public static void main(String[] args) {
&lt;&#x2F;span&gt;&lt;span&gt;        String filePath = &amp;quot;博主银行卡密码.txt&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        try {
&lt;&#x2F;span&gt;&lt;span&gt;            FileInputStream inputStream = new FileInputStream(filePath);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            int data;
&lt;&#x2F;span&gt;&lt;span&gt;            try {
&lt;&#x2F;span&gt;&lt;span&gt;                while((data = inputStream.read()) != -1) {
&lt;&#x2F;span&gt;&lt;span&gt;                    System.out.print((char)data);
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            } finally {
&lt;&#x2F;span&gt;&lt;span&gt;                if (Collections.singletonList(inputStream).get(0) != null) {
&lt;&#x2F;span&gt;&lt;span&gt;                    inputStream.close();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        } catch (IOException var8) {
&lt;&#x2F;span&gt;&lt;span&gt;            IOException e = var8;
&lt;&#x2F;span&gt;&lt;span&gt;            e.printStackTrace();
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;@Cleanup&lt;&#x2F;code&gt; 注解会在被注解的变量声明处插入一个 &lt;code&gt;try-finally&lt;&#x2F;code&gt; 块，以确保在作用域结束时调用资源的 &lt;code&gt;close()&lt;&#x2F;code&gt; 方法来释放资源。&lt;&#x2F;p&gt;
&lt;p&gt;当使用 &lt;code&gt;@Cleanup&lt;&#x2F;code&gt; 注解时，&lt;code&gt;Lombok&lt;&#x2F;code&gt;会在编译时自动生成代码，类似于在代码中手动编写的资源管理代码。这样可以避免手动书写繁琐的资源关闭代码，提高代码的可读性和简洁性。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;See you next time!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>Slf4j与Logback实用指南(基于Gradle)</title>
          <pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/slf4jyu-logbackshi-yong-zhi-nan-ji-yu-gradle/</link>
          <guid>https://ilikexff.cn/slf4jyu-logbackshi-yong-zhi-nan-ji-yu-gradle/</guid>
          <description xml:base="https://ilikexff.cn/slf4jyu-logbackshi-yong-zhi-nan-ji-yu-gradle/">&lt;h2 id=&quot;1-yin-yan&quot;&gt;1. 引盐&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-yin-yan&quot; aria-label=&quot;Anchor link for: 1-yin-yan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在当今软件开发领域，日志记录是一项至关重要的任务，它不仅帮助开发人员跟踪应用程序的运行状态和行为，还有助于故障排查、性能优化和安全监控。在日志记录领域，slf4j（Simple Logging Facade for Java）和logback是两个备受推崇的工具，它们为 Java 应用程序提供了强大而灵活的日志记录功能。&lt;&#x2F;p&gt;
&lt;p&gt;slf4j作为一个简单的日志门面，提供了统一的日志记录接口，使开发人员能够轻松切换不同的日志实现框架，而无需修改应用程序的代码。而logback则是slf4j的一个实现，它提供了高性能、灵活性强的日志框架，可以满足各种日志记录需求。&lt;&#x2F;p&gt;
&lt;p&gt;本文将深入探讨slf4j和logback日志框架的核心概念、使用方法、最佳实践以及高级技巧。我们将介绍如何配置日志记录器、如何使用标记（Markers）来区分日志消息、如何进行日志级别的动态调整以及如何利用logback的各种功能来优化日志记录体验。&lt;&#x2F;p&gt;
&lt;p&gt;通过本文的阐述，读者将能够更好地理解和利用slf4j与logback这两个强大的日志记录工具，从而提升应用程序的日志记录质量、效率和可维护性。让我们一起深入探索日志记录的世界，掌握slf4j与logback的精髓，为我们的软件开发之路增添一份技术的光彩。&lt;&#x2F;p&gt;
&lt;p&gt;先简单看一下本文的大纲：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424222613795.png&quot; alt=&quot;image-20240424222613795&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;2. SLF4J框架&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;SLF4J&lt;&#x2F;code&gt;（&lt;strong&gt;Simple Logging Facade for Java&lt;&#x2F;strong&gt;）是一个为 Java 应用程序提供日志功能的简单日志门面框架。它的设计目的是通过提供一个统一的日志接口，使得应用程序能够在不同的日志实现（如&lt;code&gt;Logback&lt;&#x2F;code&gt;、&lt;code&gt;Log4j&lt;&#x2F;code&gt;、&lt;code&gt;java.util.logging&lt;&#x2F;code&gt;等）之间进行切换，而无需修改应用程序的代码。&lt;&#x2F;p&gt;
&lt;p&gt;看重点，他是一个统一接口的实现规范，而不是具体的实现提供者，基于此，很多具体的日志实现工具都可以在在这个条件下进行自己的实现，最常用的有&lt;code&gt;Logback、Log4j&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424170420302.png&quot; alt=&quot;image-20240424170420302&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;使用&lt;code&gt;slf4j&lt;&#x2F;code&gt;的几点理由:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;灵活性高：&lt;code&gt;SLF4J &lt;&#x2F;code&gt;提供了一个统一的日志门面，使得应用程序可以轻松地切换和配置不同的日志实现框架，而无需修改应用程序的代码。&lt;&#x2F;li&gt;
&lt;li&gt;丰富的可选实现: 他提供与所有流行的日志框架的支持，如上面的提到的&lt;code&gt;log4j,logback&lt;&#x2F;code&gt;等等，可以在其中根据需求无缝切换；&lt;&#x2F;li&gt;
&lt;li&gt;由于 &lt;code&gt;SLF4J &lt;&#x2F;code&gt;将应用程序和日志框架解耦，因此可以轻松地编写独立于日志框架的应用程序。无需为用于编写应用程序的日志记录框架而烦恼。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;SLF4J &lt;&#x2F;code&gt;支持参数化日志记录消息，且不受限于你使用哪一种具体实现；&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-1&quot;&gt;2.1 基本组件&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424171738737.png&quot; alt=&quot;image-20240424171738737&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一款日志记录框架一般由以下三种解构构成：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;记录
&lt;ul&gt;
&lt;li&gt;用于捕获数据和记录消息&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;格式化
&lt;ul&gt;
&lt;li&gt;可以讲记录的消息也就是我们所谓的日志信息进行格式化，规范输出；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;处理方式
&lt;ul&gt;
&lt;li&gt;将日志信息通过控制台、文件、数据库等载体进行输出处理；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-2&quot;&gt;2.2 日志级别&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;根据日志消息的重要程度，或者说对项目影响程度的不同，日志一般有不同的级别:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424172222270.png&quot; alt=&quot;image-20240424172222270&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TRACE：&lt;&#x2F;strong&gt; &lt;strong&gt;最低级别的日志&lt;&#x2F;strong&gt;，通常用于记录程序执行过程中的详细信息，如方法调用、变量值等。&lt;code&gt;TRACE &lt;&#x2F;code&gt;级别的日志对于排查问题和调试非常有用，但&lt;strong&gt;通常不会在生产环境中启用，因为会产生大量输出&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;DEBUG：&lt;&#x2F;strong&gt; 用于&lt;strong&gt;记录调试信息&lt;&#x2F;strong&gt;。&lt;code&gt;DEBUG &lt;&#x2F;code&gt;级别的日志通常用于记录程序执行过程中的详细信息，但相&lt;strong&gt;比 TRACE 级别更加精简&lt;&#x2F;strong&gt;。在&lt;strong&gt;开发和测试阶段&lt;&#x2F;strong&gt;启用 &lt;code&gt;DEBUG &lt;&#x2F;code&gt;日志有助于定位问题和调试代码。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;INFO：&lt;&#x2F;strong&gt; 用于记录程序&lt;strong&gt;运行时的重要信息&lt;&#x2F;strong&gt;。&lt;code&gt;INFO &lt;&#x2F;code&gt;级别的日志通常用于记录程序的运行状态、重要事件等，可以帮助了解程序的运行情况，但不会产生过多的输出。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;WARN：&lt;&#x2F;strong&gt; 用于&lt;strong&gt;记录警告信息&lt;&#x2F;strong&gt;。&lt;code&gt;WARN &lt;&#x2F;code&gt;级别的日志通常表示一些&lt;strong&gt;潜在的问题或异常情况&lt;&#x2F;strong&gt;，虽然不会导致程序出错，但可能需要注意或处理。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ERROR：&lt;&#x2F;strong&gt; 用于&lt;strong&gt;记录错误信息&lt;&#x2F;strong&gt;。&lt;code&gt;ERROR &lt;&#x2F;code&gt;级别的日志表示程序发生了&lt;strong&gt;错误或异常情况&lt;&#x2F;strong&gt;，需要引起关注并可能需要进行处理或修复。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;FATAL：&lt;&#x2F;strong&gt; &lt;strong&gt;最高级别的日志，用于记录严重错误&lt;&#x2F;strong&gt;。&lt;code&gt;FATAL &lt;&#x2F;code&gt;级别的日志表示程序遇到了无法恢复的严重错误，&lt;strong&gt;可能会导致程序崩溃或无法继续运行。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然这里列出了6中级别，但日常使用过程中&lt;code&gt;fatal&lt;&#x2F;code&gt;和&lt;code&gt;trace&lt;&#x2F;code&gt;用的不是很多。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;2.3 Slf4J基本使用&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;演示项目基于：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SpringBoot 3.2.10&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Gradle:8.7&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;JDK 17&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;添加依赖&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;``groovy
&#x2F;&#x2F; https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.slf4j&#x2F;slf4j-api
implementation ‘org.slf4j:slf4j-api:2.0.13’&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;我们可以通过`slf4j`提供的工厂方法创建一个简单日志对象,导包的时候注意看是`import org.slf4j.Logger;`，因为还有一个同名的`Logger`来自`java.util*`包下，注意区分。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;```java
&lt;&#x2F;span&gt;&lt;span&gt;Logger logger = LoggerFactory.getLogger(&amp;quot;SampleLogger&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Logger &lt;&#x2F;code&gt;接口：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Logger&lt;&#x2F;code&gt; 是 &lt;code&gt;SLF4J &lt;&#x2F;code&gt;框架中定义的一个接口，用于记录日志消息。通过 Logger 接口，可以使用不同的日志级别（如 INFO、DEBUG、ERROR 等）记录日志消息。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;LoggerFactory &lt;&#x2F;code&gt;类：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoggerFactory&lt;&#x2F;code&gt; 是 &lt;code&gt;SLF4J &lt;&#x2F;code&gt;框架中的一个工厂类，用于获取 &lt;code&gt;Logger &lt;&#x2F;code&gt;实例。开发人员可以使用 &lt;code&gt;LoggerFactory &lt;&#x2F;code&gt;类的静态方法 &lt;code&gt;getLogger()&lt;&#x2F;code&gt; 来获取一个特定名称的 Logger 实例。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;“&lt;code&gt;SampleLogger&lt;&#x2F;code&gt;” 参数：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;getLogger()&lt;&#x2F;code&gt; 方法中传入的参数是一个字符串，用于指定要获取的 &lt;code&gt;Logger &lt;&#x2F;code&gt;实例的名称。通常，这个名称可以是类名、包名或者任何描述性的字符串。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;通过这个方法，我们获得了一个&lt;code&gt;Logger&lt;&#x2F;code&gt;实例，通过源码可知，他包含了上面提到的几种日志级别的各种常用方法：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424180736466.png&quot; alt=&quot;image-20240424180736466&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;``java
public static void main(String[] args) {
&#x2F;&#x2F; 创建日志Logger对象
Logger logger = LoggerFactory.getLogger(“SampleLogger”);&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt; &#x2F;&#x2F; 几种日志级别方法的级别使用
&lt;&#x2F;span&gt;&lt;span&gt;logger.trace(&amp;quot;这条日志来自[trace]级别...&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;logger.debug(&amp;quot;这条日志来自[debug]级别...&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;logger.info(&amp;quot;这条日志来自[info]级别...&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;logger.warn(&amp;quot;这条日志来自[warn]级别...&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;logger.error(&amp;quot;这条日志来自[error]级别...&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;运行上面的代码
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240424181420177](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424181420177.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;从控制台来看，这里少打印了`debug`和`trace`级别的内容，这是因为`SLF4J `和 `Logback `默认的日志级别是 INFO，这意味着只有 INFO 级别及以上的日志会被输出到控制台。代码中使用了 INFO、WARN 和 ERROR 三种日志级别，因此只有这三种级别的日志会被输出，而 TRACE 和 DEBUG 级别的日志不会显示在控制台上。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;也可以使用占位符的形式进行日志的打印，这也是比较常用的：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;``java
&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;&#x2F; 使用占位符的形式
&lt;&#x2F;span&gt;&lt;span&gt;    String str = &amp;quot;这是占位符的数据&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    logger.info(&amp;quot;{}&amp;quot;,str);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;除此之外，我们还可以通过使用类名获取实例化&lt;code&gt;Logger&lt;&#x2F;code&gt;实例的方式：&lt;&#x2F;p&gt;
&lt;p&gt;``java
public class LogMain {
private static final Logger LOGGER  =LoggerFactory.getLogger(LogMain.class);
public static void main(String[] args) {
&#x2F;&#x2F; 几种日志级别方法的级别使用
LOGGER.info(“这条日志来自[info]级别…”);
LOGGER.warn(“这条日志来自[warn]级别…”);
LOGGER.error(“这条日志来自[error]级别…”);
&#x2F;&#x2F; 使用占位符的形式
String str = “这是占位符的数据”;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;    LOGGER.info(&amp;quot;{}&amp;quot;,str);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;下面是两种方式的简单对比:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1. **使用类名获取 Logger 实例**：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   ```java
&lt;&#x2F;span&gt;&lt;span&gt;   private static final Logger LOGGER = LoggerFactory.getLogger(LogMain.class);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这种方式是通过类名 &lt;code&gt;LogMain.class&lt;&#x2F;code&gt; 来获取 Logger 实例，这样可以确保每个类都有自己的 Logger 实例，并且可以更容易地追踪日志信息的来源。这种方式在实践中是比较常见的，特别是在类的静态方法中使用。&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;使用自定义名称获取 Logger 实例&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Logger&lt;&#x2F;span&gt;&lt;span&gt; logger &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LoggerFactory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getLogger&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;SampleLogger&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这种方式是通过自定义的名称 “&lt;code&gt;SampleLogger&lt;&#x2F;code&gt;” 来获取 Logger 实例。使用自定义名称可以将多个类的日志信息归类到同一个 Logger 实例中，从而方便对日志信息进行管理和过滤。这种方式适用于需要对多个类的日志进行统一管理的情况。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;两种方式都可以获取 Logger 实例，选择哪种方式取决于具体的需求和场景。如果你想要每个类有自己的 Logger 实例并且更容易追踪日志来源，可以使用类名获取；如果需要对多个类的日志进行统一管理，可以使用自定义名称获取。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;3. Logback&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-5&quot;&gt;3.1 导入依赖&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在上面的内容中，简单体验了一些&lt;code&gt;slf4j&lt;&#x2F;code&gt;框架的基本使用流程以及常用的方法，在日常的调试开发中，对于控制台输出信息来说，确实也够用了，但就实际的项目需求来讲还是差点意思，所以本章节还是介绍一下他的一款具体实现，那就是&lt;code&gt;logback&lt;&#x2F;code&gt;；&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;导入依赖：&lt;&#x2F;strong&gt; 我们需要导入下面两个依赖，当然前面导入的&lt;code&gt;slf4j&lt;&#x2F;code&gt;的核心依赖还是要的，什么意思，咱不说，你品，你细品(😎)！！!!&lt;&#x2F;p&gt;
&lt;p&gt;``groovy
&#x2F;&#x2F; https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;ch.qos.logback&#x2F;logback-core
implementation ‘ch.qos.logback:logback-core:1.5.6’
&#x2F;&#x2F; https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;ch.qos.logback&#x2F;logback-classic
implementation ‘ch.qos.logback:logback-classic:1.5.6’&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;欧克，依赖导入之后别忘了刷新一下，完成构建再继续。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;依赖加载完成后，还是基于之前的代码，我们什么也不做配置，看看日志的打印有什么区别：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240424191527626](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424191527626.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 测试结果主打一个一成不变!!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 3.2 配置logback
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;要配置 `Logback`，我们可以使用 `XML `文件以及 `Groovy `文件。这里将使用 XML 方法。在项目的 `resources `文件夹中创建 `logback.xml` 文件，其中包含 以下内容并给出详细的注释以及解释，兄台不必多言！
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;configuration&gt;
    &lt;!-- 配置一个名为 &quot;STDOUT&quot; 的 appender，使用 AsyncAppender 异步输出日志 --&gt;
    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt;
        &lt;!-- 配置日志输出的格式 --&gt;
        &lt;encoder&gt;
            &lt;!-- 指定日志输出的格式，包括时间、日志级别、logger 名称、日志消息 --&gt;
            &lt;pattern&gt;%d{HH:mm.SSS} %-5level %logger{36} - %msg%n&lt;&#x2F;pattern&gt;
        &lt;&#x2F;encoder&gt;
    &lt;&#x2F;appender&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- 配置根日志级别为 INFO --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;root level=&amp;quot;info&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 将名为 &amp;quot;STDOUT&amp;quot; 的 appender 引用到根日志中 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;root&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;configuration&gt;
```
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;appender&amp;gt;&lt;&#x2F;code&gt; 元素用于配置日志输出的目标，这里配置了一个名为 “&lt;code&gt;STDOUT&lt;&#x2F;code&gt;” 的 &lt;code&gt;appender&lt;&#x2F;code&gt;，使用 &lt;code&gt;AsyncAppender&lt;&#x2F;code&gt; 异步输出日志。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;encoder&amp;gt;&lt;&#x2F;code&gt; 元素用于配置日志输出的格式，这里指定了输出格式的模式，包括时间 &lt;code&gt;%d{HH:mm.SSS}&lt;&#x2F;code&gt;、日志级别 &lt;code&gt;%-5level&lt;&#x2F;code&gt;、logger 名称 &lt;code&gt;%logger{36}&lt;&#x2F;code&gt;、日志消息 &lt;code&gt;%msg&lt;&#x2F;code&gt; 等。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;pattern&amp;gt;&lt;&#x2F;code&gt; 元素定义了日志输出的格式模式，&lt;code&gt;%d{HH:mm.SSS}&lt;&#x2F;code&gt; 表示输出时间，&lt;code&gt;%-5level&lt;&#x2F;code&gt; 表示输出日志级别（左对齐，最多占5个字符），&lt;code&gt;%logger{36}&lt;&#x2F;code&gt; 表示输出 logger 名称（最多36个字符），&lt;code&gt;%msg&lt;&#x2F;code&gt; 表示输出日志消息，&lt;code&gt;%n&lt;&#x2F;code&gt; 表示换行。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;root&amp;gt;&lt;&#x2F;code&gt; 元素定义了根日志的配置，这里将根日志级别设置为 &lt;code&gt;INFO&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;appender-ref&amp;gt;&lt;&#x2F;code&gt; 元素用于将指定的 appender 引用到根日志中，这里将名为 “&lt;code&gt;STDOUT&lt;&#x2F;code&gt;” 的 &lt;code&gt;appender &lt;&#x2F;code&gt;引用到根日志中，表示使用这个 &lt;code&gt;appender&lt;&#x2F;code&gt; 输出根日志的日志信息。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-6&quot;&gt;3.2.1  &lt;strong&gt;Logback appender&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Logback appender&lt;&#x2F;code&gt; 是 &lt;code&gt;Logback &lt;&#x2F;code&gt;用于写入日志事件的组件。&lt;code&gt;Logback&lt;&#x2F;code&gt;提供了多种类型的&lt;code&gt;Appenders&lt;&#x2F;code&gt;，每种&lt;code&gt;Appender&lt;&#x2F;code&gt;都有不同的功能和用途,下面列一些常见的吧&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ConsoleAppender&lt;&#x2F;strong&gt;：将日志消息输出到控制台。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;FileAppender&lt;&#x2F;strong&gt;：将日志消息输出到文件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RollingFileAppender&lt;&#x2F;strong&gt;：将日志消息输出到文件，并支持日志文件的滚动（即按照一定条件切分日志文件，如按日期、文件大小等）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SMTPAppender&lt;&#x2F;strong&gt;：通过邮件发送日志消息。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SocketAppender&lt;&#x2F;strong&gt;：将日志消息通过网络发送到远程服务器。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;DBAppender&lt;&#x2F;strong&gt;：将日志消息写入数据库。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;AsyncAppender&lt;&#x2F;strong&gt;：异步地将日志消息输出到其他&lt;code&gt;Appender&lt;&#x2F;code&gt;，可以提高日志系统的性能。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;SyslogAppender&lt;&#x2F;strong&gt;：将日志消息发送到&lt;code&gt;Syslog&lt;&#x2F;code&gt;服务器。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-7&quot;&gt;3.2.2 &lt;strong&gt;logback-classic&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;在本章节的开始，我们还引如了这个&lt;code&gt;logback-classic&lt;&#x2F;code&gt;的依赖，这是&lt;code&gt;Logback&lt;&#x2F;code&gt;框架中的一个模块，它提供了一个功能强大且灵活的日志系统，可以用于Java应用程序中进行日志记录。一些&lt;code&gt;logback-classic&lt;&#x2F;code&gt;模块中的重要组件包括：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Logger（日志记录器）&lt;&#x2F;strong&gt;：Logger用于记录日志消息。在&lt;code&gt;Logback&lt;&#x2F;code&gt;中，&lt;code&gt;Logger&lt;&#x2F;code&gt;是最核心的组件之一，负责生成和处理日志消息。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Appender（输出目的地）&lt;&#x2F;strong&gt;：Appender用于定义日志消息的输出目的地，比如控制台、文件、数据库等。&lt;code&gt;logback-classic&lt;&#x2F;code&gt;提供了多种类型的Appenders来满足不同的输出需求。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Layout（日志格式化）&lt;&#x2F;strong&gt;：Layout用于定义日志消息的格式，包括日志消息的时间戳、日志级别、日志内容等。通过Layout，可以自定义日志消息的输出格式。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Level（日志级别）&lt;&#x2F;strong&gt;：Level用于定义日志消息的级别，如&lt;code&gt;DEBUG、INFO、WARN、ERROR&lt;&#x2F;code&gt;等。可以通过Level来控制日志消息的输出级别。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;配置文件&lt;&#x2F;strong&gt;：&lt;code&gt;logback-classic&lt;&#x2F;code&gt;使用XML或Groovy等格式的配置文件来配置日志系统的行为，包括配置日志级别、&lt;code&gt;Appenders、Layou&lt;&#x2F;code&gt;t等。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;由于&lt;code&gt;logback&lt;&#x2F;code&gt;提供的功能实在很多，这里也不可能一一列举，下面就以将日志信息写入控制台和文件为例，也就是&lt;code&gt;RollingFileAppender&lt;&#x2F;code&gt;;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;代码还是这点内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;``java
public class LogMain {
private static final Logger LOGGER  =LoggerFactory.getLogger(LogMain.class);
public static void main(String[] args) {
LOGGER.info(“这是一条INFO级别的日志….”);
LOGGER.error(“这是一条ERROR级别的日志…”);
}
}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- 配置文件就有些变化了
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;configuration&gt;
    &lt;!-- 配置一个名为 &quot;STDOUT&quot; 的 appender，使用 AsyncAppender 异步输出日志 --&gt;
    &lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.classic.AsyncAppender&quot;&gt;
        &lt;!-- 配置目标 Appender 为 ConsoleAppender，即输出到控制台 --&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; &#x2F;&gt;
        &lt;encoder&gt;
            &lt;!-- 指定日志输出的格式，包括时间、日志级别、logger 名称、日志消息 --&gt;
            &lt;pattern&gt;%d{HH:mm.SSS} %-5level %logger{36} - %msg%n&lt;&#x2F;pattern&gt;
        &lt;&#x2F;encoder&gt;
    &lt;&#x2F;appender&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- 定义一个名为 &amp;quot;CONSOLE&amp;quot; 的 ConsoleAppender，用于将日志消息输出到控制台 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;appender name=&amp;quot;CONSOLE&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;&#x2F;pattern&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;appender&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;!-- 定义一个名为 &amp;quot;file&amp;quot; 的 FileAppender，用于将日志消息输出到文件 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;appender name=&amp;quot;file&amp;quot; class=&amp;quot;ch.qos.logback.core.FileAppender&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 指定日志文件的路径 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;file&amp;gt;src&#x2F;main&#x2F;resources&#x2F;mylogs.log&amp;lt;&#x2F;file&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 如果为 true，则日志消息将追加到文件末尾；如果为 false，则会覆盖已有的文件内容 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;append&amp;gt;true&amp;lt;&#x2F;append&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 如果为 true，则每次写入日志消息后会立即刷新输出流；如果为 false，则可能会缓冲一段时间后再刷新 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;immediateFlush&amp;gt;true&amp;lt;&#x2F;immediateFlush&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 配置日志消息的输出格式，包括时间戳、线程名、日志级别、Logger名称、日志消息内容等 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;&#x2F;pattern&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;appender&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;!-- 定义一个名为 &amp;quot;cn.ilikexff.springsecuritydemo2.controller.LogMain&amp;quot; 的 Logger --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;!-- 注意这里要正确指定你的日志信息的来源路径 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;logger name=&amp;quot;cn.ilikexff.springsecuritydemo2.controller.LogMain&amp;quot; level=&amp;quot;INFO&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 将 Logger 与名为 &amp;quot;STDOUT&amp;quot; 的 Appender 关联 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot;&#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;logger&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;!-- 配置根 Logger 的行为 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;root level=&amp;quot;info&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 将根 Logger 与名为 &amp;quot;file&amp;quot; 的 Appender 关联，表示根 Logger 的日志消息将输出到文件 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;appender-ref ref=&amp;quot;file&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;root&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;configuration&gt;
```
&lt;p&gt;执行程序之后发现在指定的日志文件和控制台都打印了相关的日志信息:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424202540003.png&quot; alt=&quot;image-20240424202540003&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-8&quot;&gt;3.2.3 RollingFileAppender&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;RollingFileAppender&lt;&#x2F;code&gt;是&lt;code&gt;Logback&lt;&#x2F;code&gt;框架中的一个&lt;code&gt;Appender&lt;&#x2F;code&gt;，用于将日志输出到文件，并支持日志文件的滚动（&lt;code&gt;rolling&lt;&#x2F;code&gt;）功能。其作用包括：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日志文件滚动&lt;&#x2F;strong&gt;：&lt;code&gt;RollingFileAppender&lt;&#x2F;code&gt;可以配置日志文件的滚动策略，例如按文件大小滚动、按时间滚动等。这样可以限制单个日志文件的大小，避免日志文件过大影响系统性能，同时保留一定数量的历史日志文件，方便查看和管理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日志文件管理&lt;&#x2F;strong&gt;：&lt;code&gt;RollingFileAppender&lt;&#x2F;code&gt;可以管理日志文件的写入和切换，确保日志信息被正确记录到文件中。它可以自动创建新的日志文件、关闭旧的日志文件，并根据配置进行日志文件的滚动和清理。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;配置灵活&lt;&#x2F;strong&gt;：&lt;code&gt;RollingFileAppender&lt;&#x2F;code&gt;提供了丰富的配置选项，可以根据需求定制日志文件的滚动策略、文件命名规则、文件大小限制等参数，以满足不同场景下的日志记录需求。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;考虑下面的配置:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;该配置将日志文件限制在单个文件最大10MB，保留30个历史日志文件，并限制所有历史日志文件总大小不超过1GB。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;configuration&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 定义控制台输出的Appender --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;appender name=&amp;quot;STDOUT&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;&#x2F;pattern&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;appender&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 定义RollingFileAppender，将日志输出到文件中，并支持日志文件的滚动 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;appender name=&amp;quot;FILE&amp;quot; class=&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;file&amp;gt;logs&#x2F;mylog.log&amp;lt;&#x2F;file&amp;gt; &amp;lt;!-- 日志文件的路径和名称 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;&#x2F;pattern&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;!-- 配置日志文件的滚动策略 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;rollingPolicy class=&amp;quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;fileNamePattern&amp;gt;logs&#x2F;mylog-%d{yyyy-MM-dd}.%i.log&amp;lt;&#x2F;fileNamePattern&amp;gt; &amp;lt;!-- 日志文件的命名规则 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;maxFileSize&amp;gt;2MB&amp;lt;&#x2F;maxFileSize&amp;gt; &amp;lt;!-- 单个日志文件的最大大小 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;maxHistory&amp;gt;7&amp;lt;&#x2F;maxHistory&amp;gt; &amp;lt;!-- 保留的历史日志文件数量 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;totalSizeCap&amp;gt;1GB&amp;lt;&#x2F;totalSizeCap&amp;gt; &amp;lt;!-- 所有历史日志文件的总大小上限 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;rollingPolicy&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;appender&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 配置Logger，指定日志记录级别和Appender --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;logger name=&amp;quot;cn.ilikexff.springsecuritydemo2.controller.LogMain&amp;quot; level=&amp;quot;INFO&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot; &#x2F;&amp;gt; &amp;lt;!-- 将日志输出到控制台 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;appender-ref ref=&amp;quot;FILE&amp;quot; &#x2F;&amp;gt; &amp;lt;!-- 将日志输出到文件中 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;logger&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 配置根Logger，指定日志记录级别和Appender --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;root level=&amp;quot;INFO&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;appender-ref ref=&amp;quot;STDOUT&amp;quot; &#x2F;&amp;gt; &amp;lt;!-- 将日志输出到控制台 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;appender-ref ref=&amp;quot;FILE&amp;quot; &#x2F;&amp;gt; &amp;lt;!-- 将日志输出到文件中 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;root&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;configuration&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;根据上面的配置，我们简单测试以下配置是否生效，比如多执行几次程序，不断的输出日志，看看单个文件最大大小达到&lt;code&gt;2M&lt;&#x2F;code&gt;时会怎样。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424205922590.png&quot; alt=&quot;image-20240424205922590&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;截至上图&lt;code&gt;mylog.log&lt;&#x2F;code&gt;的大小为&lt;code&gt;2KB&lt;&#x2F;code&gt;,为了加快测试，简单修改代码如下:&lt;&#x2F;p&gt;
&lt;p&gt;``java
public class LogMain {
private static final Logger LOGGER  =LoggerFactory.getLogger(LogMain.class);
public static void main(String[] args) {
for (int i = 0; i &amp;lt; 1000; i++) {
LOGGER.info(“这是一条INFO级别的日志….”);
LOGGER.error(“这是一条ERROR级别的日志…”);
}
}
}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;不断测试之后发现当我们的原日志文件大小超过`2M`时，就发生了滚动，将原日志信息放到了一个新的日志文件中，并且这个文件的命名也是按照配置文件指定的规则创建的，成功发生了滚动，说明配置是生效了的。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240424211105513](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424211105513.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240424210815077](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424210815077.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;关于`RollingFileAppender`就到这了，建议自己动手修改配置多操作几次，加深印象和理解，下面提一嘴`Logback`编码器；
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### 3.2.4 Logback Encoders
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;这玩意有什么用呢，不妨通过名称大胆猜测，这是用来作日志格式转换的模块。没错，`Encoder`用于将日志事件转换为特定格式的文本，以便输出到目标`Appender`。`Encoder`负责将日志事件转换为字符串形式，以便日志系统能够将其输出到适当的目标，比如控制台、文件或者其他地方。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Logback提供了多种Encoder，常见的有：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 1. **PatternLayoutEncoder**：通过指定的模式（pattern）将日志事件格式化为文本。可以自定义日志输出的格式，包括日期、日志级别、线程名等信息。
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 2. **JsonEncoder**：将日志事件输出为`JSON`格式的字符串，适用于结构化日志。
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 3. **EchoEncoder**：将日志事件输出到控制台，类似于System.out.println()。
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 4. **RawFileAppender**：将日志事件以原始格式输出到文件，不进行任何格式化。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;但是大部分情况下，我们其实不太需要修改这个配置，最常用的就是上面配置中写的格式：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;configuration&gt;
    &lt;appender name=&quot;console&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n&lt;&#x2F;pattern&gt;
            &lt;outputPatternAsHeader&gt;true&lt;&#x2F;outputPatternAsHeader&gt;
        &lt;&#x2F;encoder&gt;
    &lt;&#x2F;appender&gt;
    &lt;root level=&quot;info&quot;&gt;
        &lt;appender-ref ref=&quot;console&quot; &#x2F;&gt;
    &lt;&#x2F;root&gt;
&lt;&#x2F;configuration&gt;
```
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-9&quot;&gt;3.2.5 Logback Filters&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;在&lt;code&gt;Logback&lt;&#x2F;code&gt;中，Filters（过滤器）用于过滤日志事件，只有符合特定条件的日志事件才会被处理和记录。Filters可以帮助您控制哪些日志事件应该被记录，哪些应该被忽略，从而提高日志系统的效率和可控性。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Logback&lt;&#x2F;code&gt;提供了多种内置的&lt;code&gt;Filters&lt;&#x2F;code&gt;，以及支持&lt;strong&gt;自定义Filters&lt;&#x2F;strong&gt;。下面是一些常见的内置Filters：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;LevelFilter&lt;&#x2F;strong&gt;：根据日志级别过滤日志事件，只处理符合指定级别范围的日志事件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ThresholdFilter&lt;&#x2F;strong&gt;：类似于&lt;code&gt;LevelFilter&lt;&#x2F;code&gt;，根据指定的阈值级别过滤日志事件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;TurboFilter&lt;&#x2F;strong&gt;：高性能的过滤器，可以根据更复杂的条件过滤日志事件。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;MarkerFilter&lt;&#x2F;strong&gt;：根据Marker标记过滤日志事件，只处理带有特定&lt;code&gt;Marker&lt;&#x2F;code&gt;的日志事件。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;比如我们需要过滤&lt;code&gt;ERROR&lt;&#x2F;code&gt;级别的日志信息，可以参考下面的配置:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- Logback 配置文件 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;configuration&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 定义一个输出到控制台的 appender --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;appender name=&amp;quot;CONSOLE&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;!-- 定义日志输出格式 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;&#x2F;pattern&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;!-- 添加 LevelFilter 过滤器 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;filter class=&amp;quot;ch.qos.logback.classic.filter.LevelFilter&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;!-- 指定过滤级别为 ERROR --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;level&amp;gt;ERROR&amp;lt;&#x2F;level&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;!-- 匹配到 ERROR 级别的日志时拒绝 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;onMatch&amp;gt;DENY&amp;lt;&#x2F;onMatch&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;!-- 不匹配时不进行处理 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;onMismatch&amp;gt;NEUTRAL&amp;lt;&#x2F;onMismatch&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;filter&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;appender&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 配置根节点的日志级别为 INFO --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;root level=&amp;quot;INFO&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;!-- 引用 CONSOLE appender --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;appender-ref ref=&amp;quot;CONSOLE&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;root&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;configuration&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;除了使用这种配置文件的方式进行过滤之外，&lt;code&gt;logback&lt;&#x2F;code&gt;也提供了代码方式的过滤，比如依旧实现上面的需求，用代码可以这样写。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;public class SampleFilter extends Filter&amp;lt;ILoggingEvent&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    @Override
&lt;&#x2F;span&gt;&lt;span&gt;    public FilterReply decide(ILoggingEvent event) {
&lt;&#x2F;span&gt;&lt;span&gt;        if (event.getMessage().contains(&amp;quot;ERROR&amp;quot;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            return FilterReply.ACCEPT;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        return FilterReply.DENY;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;再配置文件中将上面编写好的过滤规则添加进去:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!-- Logback 配置文件 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;configuration&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 定义一个输出到控制台的 appender --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;appender name=&amp;quot;console&amp;quot; class=&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;!-- 定义日志输出格式 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} %-5level %logger{36} - %msg%n&amp;lt;&#x2F;pattern&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&#x2F;encoder&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;!-- 添加自定义的 SampleFilter 过滤器 --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;filter class=&amp;quot;cn.ilikexff.springsecuritydemo2.filter.SampleFilter&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;appender&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;!-- 配置根节点的日志级别为 INFO --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;root level=&amp;quot;info&amp;quot;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;!-- 引用 console appender --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;appender-ref ref=&amp;quot;console&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;root&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;configuration&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;执行程序，发现控制台和日志文件中都只有&lt;code&gt;ERROR&lt;&#x2F;code&gt;级别的日志信息了，&lt;code&gt;Ojbk!&lt;&#x2F;code&gt;；&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240424214719787.png&quot; alt=&quot;image-20240424214719787&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-10&quot;&gt;4. 小结一下&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这篇文章从&lt;code&gt;Slf4J&lt;&#x2F;code&gt;入手，梳理了这个日志框架的基本概念和用法，随之引出了基于&lt;code&gt;Slf4j&lt;&#x2F;code&gt;实现的&lt;code&gt;logback&lt;&#x2F;code&gt;，并详细讲解了相关的使用方法，当然，文章至此已将近6700字，而这不是&lt;code&gt;typora&lt;&#x2F;code&gt;的上限，也不是&lt;code&gt;CSDN&lt;&#x2F;code&gt;的上限，自然也不是你我的上限，只是确实夜太深，有些寂寞了…溜了溜了。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;后续内容将逐步在&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.ilikexff.cn&quot;&gt;我的博客&lt;&#x2F;a&gt;端进行不定期更新，因为&lt;code&gt;CSDN&lt;&#x2F;code&gt;文章更新后并没有任何提示，我的博客有订阅功能，这一点来说，在博客端更新确实是不错的选择，感谢阅读!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
</description>
      </item>
      <item>
          <title>开发必会系列_JWT浅谈</title>
          <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/kai-fa-bi-hui-xi-lie-jwtqian-tan/</link>
          <guid>https://ilikexff.cn/kai-fa-bi-hui-xi-lie-jwtqian-tan/</guid>
          <description xml:base="https://ilikexff.cn/kai-fa-bi-hui-xi-lie-jwtqian-tan/">&lt;h2 id=&quot;1-yin-yan&quot;&gt;1. 引言&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-yin-yan&quot; aria-label=&quot;Anchor link for: 1-yin-yan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;现在前后端分离项目已经成为 主流的开发模式，而在项目开发过程中多多少少都会接触到登录相关的业务，几乎是绕不开的一部分。而只要涉及到登录模块，大部分的开发中都会用提到一种叫做&lt;code&gt;token&lt;&#x2F;code&gt;的东西，顾名思义，&lt;code&gt;token&lt;&#x2F;code&gt;就是一个令牌，用来作用户身份校验的一种技术，或者具体点说，&lt;code&gt;token&lt;&#x2F;code&gt;不过是一串含有特定用户身份信息的字符串。一般由后端颁发，前端携带。&lt;&#x2F;p&gt;
&lt;p&gt;可能提到&lt;code&gt;token&lt;&#x2F;code&gt;，很多人会不自觉的将它和接下来要重点介绍的&lt;code&gt;JWT&lt;&#x2F;code&gt;联系到一起，甚至可能不少人都会以为&lt;code&gt;JWT&lt;&#x2F;code&gt;和&lt;code&gt;Token&lt;&#x2F;code&gt;不就是同一个东西吗？并不完全是。&lt;code&gt;Token&lt;&#x2F;code&gt;是一个比较宽泛的定义，而在具体的实现上，&lt;code&gt;Token&lt;&#x2F;code&gt;有很多实现方式，&lt;code&gt;JWT&lt;&#x2F;code&gt;就是其中的一种，也是日常开发中最常见的一种&lt;code&gt;token&lt;&#x2F;code&gt;实现，不管是在单体项目还是分布式微服务中，&lt;code&gt;JWT&lt;&#x2F;code&gt;技术都被广泛的应用，因此，有必要一次性将它安排的明明白白！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;2-jwtwu-zang-liu-fu&quot;&gt;2. JWT五脏六腑&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-jwtwu-zang-liu-fu&quot; aria-label=&quot;Anchor link for: 2-jwtwu-zang-liu-fu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2-1-chang-shen-me-yang&quot;&gt;2.1 长什么样&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-1-chang-shen-me-yang&quot; aria-label=&quot;Anchor link for: 2-1-chang-shen-me-yang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;JWT&lt;&#x2F;code&gt;的缩写是&lt;code&gt;JSON Web Token&lt;&#x2F;code&gt;。常用在网络应用环境中传递声明一种紧凑自包含的方式，这些声明可以被验证和信任，因为他是经过数字签名的，&lt;code&gt;JWT&lt;&#x2F;code&gt;可以被用于身份认证和信息交换。我靠，有一说一，这定义真的是抽象，但是不打紧，你不用也没必要去记下他的定义，你要学的，是理解他的原理和作用即可，就开发行业来说，很多技术其实没那么注重对名词本身的记忆上，更多的是对技术原理和使用的要求，当你学会如何使并理解了他背后的实现原理之后，你也就掌握了这门技术，晦涩的术语定义不过是回个头的事。&lt;&#x2F;p&gt;
&lt;p&gt;先看个实际项目中基于&lt;code&gt;JWT&lt;&#x2F;code&gt;实现的&lt;code&gt;Token&lt;&#x2F;code&gt;字符串,这是来自我的&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.ilikexff.cn&quot;&gt;个人博客&lt;&#x2F;a&gt;登录成功之后的响应数据，其中就包含了&lt;code&gt;token&lt;&#x2F;code&gt;字段。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422145939177.png&quot; alt=&quot;image-20240422145939177&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为了更好的理解&lt;code&gt;JWT&lt;&#x2F;code&gt;，下面以一个具体的例子作为切入进行讲解。&lt;&#x2F;p&gt;
&lt;p&gt;``yml
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;仔细观察这串字符，他其实被一个点`.`分割成了三部分：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240422151408847](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422151408847.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 2.2 组成
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![JWT](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;JWT.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;如上面的图所示，`JWT`由三个部分构成，从左到右以`.`分割，分别为：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- Header头部
&lt;&#x2F;span&gt;&lt;span&gt;- Payload(载荷)
&lt;&#x2F;span&gt;&lt;span&gt;- Signature(签名)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240422151839638](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422151839638.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### 2.2.1 Header
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;头部通常是包含了两部分信息:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- 令牌类型(比如这里为`JWT`)
&lt;&#x2F;span&gt;&lt;span&gt;- 使用的签名算法(比如这里用的是`HS256`)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;``json
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;alg&amp;quot;: &amp;quot;HS256&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;令牌类型除了&lt;code&gt;JWT&lt;&#x2F;code&gt;之外，一般还有:&lt;code&gt;JWE&lt;&#x2F;code&gt;和&lt;code&gt;JWS&lt;&#x2F;code&gt;,这不是本文的重点，当作顺手牵羊知道有这东西就行。而对于签名算法，这里用到的是哈希256算法，这只是其众多算法的一种，常用的还有:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;RS256（RSA using SHA-256）&lt;&#x2F;strong&gt;：RSA 非对称加密算法结合 SHA-256 哈希算法进行签名。在这种情况下，使用私钥对数据进行签名，然后使用公钥进行验证。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ES256（ECDSA using P-256 and SHA-256）&lt;&#x2F;strong&gt;：使用椭圆曲线数字签名算法（ECDSA）和 SHA-256 哈希算法进行签名。这是基于椭圆曲线加密的一种签名算法。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HS384（HMAC using SHA-384）&lt;&#x2F;strong&gt;：使用 HMAC（Hash-based Message Authentication Code）和 SHA-384 哈希算法进行签名。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RS384（RSA using SHA-384）&lt;&#x2F;strong&gt;：RSA 非对称加密算法结合 SHA-384 哈希算法进行签名。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ES384（ECDSA using P-384 and SHA-384）&lt;&#x2F;strong&gt;：使用椭圆曲线数字签名算法（ECDSA）和 SHA-384 哈希算法进行签名。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HS512（HMAC using SHA-512）&lt;&#x2F;strong&gt;：使用 HMAC 和 SHA-512 哈希算法进行签名。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;RS512（RSA using SHA-512）&lt;&#x2F;strong&gt;：RSA 非对称加密算法结合 SHA-512 哈希算法进行签名。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ES512（ECDSA using P-521 and SHA-512）&lt;&#x2F;strong&gt;：使用椭圆曲线数字签名算法（ECDSA）和 SHA-512 哈希算法进行签名。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;不同的算法实现原理不同，但启用算法对签名进行加密的唯一共性就是用来确保数据的完整性和真实性:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据完整性验证&lt;&#x2F;strong&gt;：签名算法通过对数据进行签名，生成一个固定长度的字符串，这个字符串会随着 &lt;code&gt;JWT &lt;&#x2F;code&gt;一起发送。接收方可以使用相同的密钥和签名算法重新计算签名，然后将计算出的签名与接收到的签名进行比较，以验证数据在传输过程中是否被篡改。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;数据真实性验证&lt;&#x2F;strong&gt;：签名算法使用发送方的密钥对数据进行签名，接收方使用相同的密钥来验证签名。如果接收方能够成功验证签名，就可以确定数据确实是由发送方生成的，从而验证数据的真实性。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;防止伪造和篡改&lt;&#x2F;strong&gt;：通过签名算法生成的签名可以有效防止恶意第三方伪造数据或篡改数据。即使数据在传输过程中被修改，接收方也能够通过验证签名来检测出数据的篡改。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;身份验证&lt;&#x2F;strong&gt;：签名算法还可以用于验证数据的发送方身份。只有知道正确密钥的发送方才能生成有效的签名，因此接收方可以通过验证签名来确认数据的发送方身份。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;&quot;&gt;2.2.2 Payload&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;载荷部分包含了声明(&lt;code&gt;claims&lt;&#x2F;code&gt;)，声明关于实体(比如用户)和其他数据的信息，载荷部分通常是一个 &lt;code&gt;JSON &lt;&#x2F;code&gt;对象，以结构化的方式包含了各种声明和数据信息，并被&lt;code&gt;Base64&lt;&#x2F;code&gt;编码以提供轻量级的传输。&lt;&#x2F;p&gt;
&lt;p&gt;为了在网络上进行传输，&lt;code&gt;JWT &lt;&#x2F;code&gt;的各个部分（包括头部、载荷和签名）通常会被 &lt;code&gt;Base64 &lt;&#x2F;code&gt;编码。&lt;code&gt;Base64 &lt;&#x2F;code&gt;编码是一种将二进制数据转换为文本的编码方式，它可以确保数据在传输过程中不会丢失，并且可以减少传输数据的大小。&lt;&#x2F;p&gt;
&lt;p&gt;也即是说，载荷部分是我们存储用户信息的地方，这些用户信息一般以&lt;code&gt;JSON&lt;&#x2F;code&gt;格式进行存储，比如:&lt;&#x2F;p&gt;
&lt;p&gt;``json
{
“username”:“Gemini48”,
“money”:0
}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;但是请注意，不建议将用户敏感信息存入`JWT`中，这是不安全的做法。为什么不安全，因为没有经过加密啊，注意上上面提到的 **以`Base64`进行编码**，注意`Base64`只是一种编码方式，而不是加密算。所以说经过编码后的数据依旧是可逆的，容易被**网络大黑客**给你解码出来原文，想象一下，一旦你的敏感数据被以这种方式存储在`JWT`中，比如你在某知名交友网站的登录密码和用户名，那就相当于向互联网宣布自己的密码正在裸奔，被别人拿去扒出来你身兼数职做添狗的那几十页聊天记录.....
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;所以请务必记住:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- `JWT`不要存敏感信息！
&lt;&#x2F;span&gt;&lt;span&gt;- `JWT`不要存敏感信息！
&lt;&#x2F;span&gt;&lt;span&gt;- `JWT`不要存敏感信息！
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;我们话又说回来，即使使用了加密算法，也无法完全保证这些信息的安全性。有一部叫《我是谁》的电影我觉得挺好看的，这是一部黑客题材的电影，里面有一句话我觉得很经典:**没有绝对安全的系统!**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 2.2.3 Signature
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;签名是对头部和载荷的内容进行签名后得到的一段字符串，用于验证 `JWT` 的真实性和完整性。签名通过将头部、载荷以及密钥一起进行加密生成，确保 `JWT `在传输过程中没有被篡改。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;这部分其实上面已经多多少少说差不多了，需要注意的是，签名算法很多，具体使用哪一种没有固定不变的规则，需要根据自己的业务需求等情况来选择，不管如何加密签名，都需要对`JWT`进行定期轮换，在`JWT`中设置合理的过期时间，以确保令牌在一段时间后失效，减少令牌被滥用的可能性。![image-20240422153638441](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422153638441.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;## 3. JWT 基本工作原理
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;**有个问题: `JWT`是否可逆？？？？**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;如果你不是直接点一下文章目录跳到这里的话，那我相信你的答案和我一样，**JWT本身是不可逆的**，其实这种说法可能不那么标准，可逆不可逆一般用在密码学领域中较多，简单来说，可逆就是指通过某种加密算法加密后的密文是否能通过某些手段再进行解密回去得到加密之前的明文的过程，一般来说，如果某种算法的加密可以被解密，那么就说这是一种可逆加密算法。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;那么问题来了，既然`JWT`不可逆，我们在进行信息验证的时候是怎么获取到其载荷部分的用户信息呢？大致步骤如下:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 1. **解析JWT**：首先，需要解析JWT，将其分解为头部、载荷和签名三个部分。这可以通过将JWT字符串拆分为这三部分来完成。
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 2. **验证签名**：使用JWT中的头部和载荷以及事先约定的密钥，对JWT进行签名验证。具体的验证过程取决于JWT使用的签名算法，可以是对称加密算法（如HMAC）或非对称加密算法（如RSA）。
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 3. **提取载荷数据**：如果签名验证成功，说明JWT未被篡改，可以提取载荷数据。载荷部分通常包含关于用户身份、权限等信息的声明。
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 4. **使用载荷数据**：一旦获得有效的载荷数据，可以根据需要使用这些数据来进行授权、身份验证等操作。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;为了更好的理解`JWT`，这里推荐一个在线地址:[https:&#x2F;&#x2F;jwt.io&#x2F;#debugger-io](https:&#x2F;&#x2F;jwt.io&#x2F;#debugger-io),网站上可以直接根据需三部分的需求生成和解析`JWT`，使用方式很简单，将自己的`token`粘贴到左侧的`Encoded`中，选择签名加密算法即可解析在右侧(`Decoded`)部分显示。也可以直接修改右侧的三部分信息，他会在左侧实时的生成目标`JWT`。不得不说，这可比在代码中写`demo`来的方便快捷!!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240422164656044](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422164656044.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;大可不必太担心你的令牌泄漏，因为：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240422170220673](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422170220673.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;下面是`JWT`在`Web`开发中的基本工作原理:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240422163237414](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422163237414.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 问:为什么图大都是英文啊，别问，问就是中文没有这种字体，而我挺中意这种自由自在随性风格的字体的。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;虽然有图了，这里还是大致用文字的方式捋一遍：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- 客户端向服务器发起登录请求，执行用户登录
&lt;&#x2F;span&gt;&lt;span&gt;- 服务器生成`JWT`并颁发`JWT`响应给客户端
&lt;&#x2F;span&gt;&lt;span&gt;- 客户端再次请求服务端其他接口时会在请求头等信息中携带`JWT`生成的`Token`信息
&lt;&#x2F;span&gt;&lt;span&gt;- 服务端收到请求之后对请求中`Token`进行校验，校验通过后才会允许请求执行并响应到客户端；
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 4. JWT的优势
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- 无状态：由于 `JWT `本身携带所有必要的信息，因此服务器不需要维护会话信息。这使得 `JWT `无状态，从而减少了服务器负载并简化了可伸缩性。
&lt;&#x2F;span&gt;&lt;span&gt;- 紧凑高效：由于其紧凑的解构，`JWT `适合通过网络传输，并且易于客户端解析。
&lt;&#x2F;span&gt;&lt;span&gt;- 安全性：`JWT `经过数字签名，确保数据完整性并防止篡改。使用加密算法可以进一步增强安全性。
&lt;&#x2F;span&gt;&lt;span&gt;- 跨域通信：`JWT `可以跨不同的域或微服务使用，因为它们不依赖于 `cookie `或服务器端会话。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 5. 代码实践
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;巴拉巴拉说了这么多，最终还是要写代码的啊。老规矩，演示还是基于`Gradle`构建的`SpringBoot`项目，`Maven`玩家请自行变通。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;下面给出`Maven`仓库地址，进去直接搜索关键字即可:[https:&#x2F;&#x2F;mvnrepository.com&#x2F;](https:&#x2F;&#x2F;mvnrepository.com&#x2F;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;关于`Token`的具体实现的依赖库有很多，这里采用`com.auth0`的`java-jwt`进行演示。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### 5.1 添加依赖
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;``groovy
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.auth0&#x2F;java-jwt
&lt;&#x2F;span&gt;&lt;span&gt;implementation &amp;#39;com.auth0:java-jwt:4.4.0&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;-1&quot;&gt;5.2 生成Token&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;``java
&#x2F;&#x2F; 密钥，这里使用HMAC SHA-256算法举例，实际项目中应妥善保管和配置
private static final String SECRET_KEY = “DHSDNSJDSndjsdjsSAJKDS”;&lt;&#x2F;p&gt;
&lt;p&gt;&#x2F;**&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;生成JWT Token&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;li&gt;@param issuer       签发者，通常是服务提供者的名称或URL，用于标识JWT的来源&lt;&#x2F;li&gt;
&lt;li&gt;@param expirationTimeInMinutes 过期时间（分钟），指定JWT的有效期限&lt;&#x2F;li&gt;
&lt;li&gt;@return 生成的JWT字符串，可作为Bearer Token用于HTTP请求的Authorization头
*&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;public static String generateToken(String issuer, long expirationTimeInMinutes) {
&#x2F;&#x2F; 使用指定的密钥和HMAC SHA-256算法创建JWT签名算法实例
Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY);
Map&amp;lt;String,Object&amp;gt; headers = new HashMap&amp;lt;&amp;gt;();
&#x2F;&#x2F; 获取当前时间，并计算过期时间点
Date now = Date.from(Instant.now());
Date expirationDate = Date.from(now.toInstant().plusSeconds(expirationTimeInMinutes * 60));
headers.put(“CSDN:”,“小妖剑”);&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; 创建JWT并设置必要的属性（主题、签发者、发行时间和过期时间），最后使用指定的算法签名
&lt;&#x2F;span&gt;&lt;span&gt;return JWT.create()
&lt;&#x2F;span&gt;&lt;span&gt;        .withHeader(headers) &#x2F;&#x2F; 头部
&lt;&#x2F;span&gt;&lt;span&gt;        .withClaim(&amp;quot;userId&amp;quot;, 408) &#x2F;&#x2F; 载荷
&lt;&#x2F;span&gt;&lt;span&gt;        .withClaim(&amp;quot;username&amp;quot;,&amp;quot;小妖剑&amp;quot;) &#x2F;&#x2F; 载荷
&lt;&#x2F;span&gt;&lt;span&gt;        .withIssuer(issuer)
&lt;&#x2F;span&gt;&lt;span&gt;        .withIssuedAt(now)
&lt;&#x2F;span&gt;&lt;span&gt;        .withExpiresAt(expirationDate)
&lt;&#x2F;span&gt;&lt;span&gt;        .sign(algorithm); &#x2F;&#x2F; 签名算法
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;执行代码之后，我们不妨将控制台打印的`token`信息放到上面提到的`jwt.io`网站上进行解析，得到下面的结果:![image-20240422182007708](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422182007708.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;注意，这个代码生成的`token`中，我们发现在`header`部分除了有我们之前说的令牌类型和签名算法信息之外，还有一个我们自定义的`CSDN`的字段，显然，如果我们需要在头部进行自定义信息的话，上面的写法可以参考，其实就是传入一个`Map`集合，在集合中定义我们需要放在头部的信息数据，但是一般情况下，我们是不需要自定义`header`信息的，所以上面的代码可以修改为:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&#x2F;**&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;生成JWT Token&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;li&gt;@param issuer       签发者，通常是服务提供者的名称或URL，用于标识JWT的来源&lt;&#x2F;li&gt;
&lt;li&gt;@param expirationTimeInMinutes 过期时间（分钟），指定JWT的有效期限&lt;&#x2F;li&gt;
&lt;li&gt;@return 生成的JWT字符串，可作为Bearer Token用于HTTP请求的Authorization头
*&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;public static String generateToken(String issuer, long expirationTimeInMinutes) {
&#x2F;&#x2F; 使用指定的密钥和HMAC SHA-256算法创建JWT签名算法实例
Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY);&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; 获取当前时间，并计算过期时间点
&lt;&#x2F;span&gt;&lt;span&gt;Date now = Date.from(Instant.now());
&lt;&#x2F;span&gt;&lt;span&gt;Date expirationDate = Date.from(now.toInstant().plusSeconds(expirationTimeInMinutes * 60));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; 创建JWT并设置必要的属性（主题、签发者、发行时间和过期时间），最后使用指定的算法签名
&lt;&#x2F;span&gt;&lt;span&gt;return JWT.create()
&lt;&#x2F;span&gt;&lt;span&gt;        .withClaim(&amp;quot;userId&amp;quot;, 408)
&lt;&#x2F;span&gt;&lt;span&gt;        .withClaim(&amp;quot;username&amp;quot;,&amp;quot;小妖剑&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        .withIssuer(issuer)
&lt;&#x2F;span&gt;&lt;span&gt;        .withIssuedAt(now)
&lt;&#x2F;span&gt;&lt;span&gt;        .withExpiresAt(expirationDate)
&lt;&#x2F;span&gt;&lt;span&gt;        .sign(algorithm);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240422182846195](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422182846195.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;关于这个`jwt.io`工具网站的使用，其实埋了一些小技巧的，不知道各位有没有认真观察。写完了`Token`的生成，接下来继续`Token`的解析方法。解析`Token`用到了`java-jwt`中的一个`verify()`方法，方法返回一个`DecodedJWT`对象，该对象中包含了所有`token`信息，我们可以看看源码:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240422183832248](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422183832248.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&#x2F;**&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;验证并解析JWT Token&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;@param token 待验证的JWT字符串&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;@return 经过验证的DecodedJWT对象，包含了JWT的原始信息和已验证的claims&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;@throws JWTVerificationException 如果验证失败，例如密钥不匹配、签发者不符、过期或被篡改等
*&#x2F;
public static DecodedJWT validateAndDecodeToken(String token) throws JWTVerificationException {
&#x2F;&#x2F; 使用指定的密钥和HMAC SHA-256算法创建JWT验证器实例
Algorithm algorithm = Algorithm.HMAC256(SECRET_KEY);
JWTVerifier verifier = JWT.require(algorithm)
&#x2F;&#x2F; 设置期望的签发者，验证时会检查传入的JWT是否与此相符
.withIssuer(“https:&#x2F;&#x2F;www.ilikexff.cn”)
.build();&lt;&#x2F;p&gt;
&lt;p&gt;&#x2F;&#x2F; 使用验证器对传入的JWT进行验证，并返回解析后的DecodedJWT对象
return verifier.verify(token);
}&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240422183938687](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240422183938687.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;目前为止，我们使用`java-jwt`完成了`JWT`的生成和解析功能，至于如何在实际的项目中使用生成的`Token`，应该难不倒在看的各位了！但是这里还有一些比较重要的工作没有做，那就是测试`Token`的时效性，这重要但不难，就不再赘述。在我后续的文章中，也会用到`JWT`实现`Token`的登录功能，敬请关注！
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;----
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 感谢阅读，期待下次与你再见!
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>如何写得一手优雅规范的SpringBoot 接口？</title>
          <pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/ru-he-xie-de-yi-shou-you-ya-gui-fan-de-springboot-jie-kou/</link>
          <guid>https://ilikexff.cn/ru-he-xie-de-yi-shou-you-ya-gui-fan-de-springboot-jie-kou/</guid>
          <description xml:base="https://ilikexff.cn/ru-he-xie-de-yi-shou-you-ya-gui-fan-de-springboot-jie-kou/">&lt;h2 id=&quot;dao-yu&quot;&gt;导语&lt;a class=&quot;zola-anchor&quot; href=&quot;#dao-yu&quot; aria-label=&quot;Anchor link for: dao-yu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;优雅的代码赏心悦目，你的代码触目惊心。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;当编写 &lt;code&gt;Spring Boot&lt;&#x2F;code&gt; 接口时，优雅和规范是至关重要的。一个良好设计的接口能够提高代码的可读性、可维护性和可扩展性，从而为整个应用程序的开发和维护带来便利。&lt;&#x2F;p&gt;
&lt;p&gt;在本文中，我们将探讨如何通过遵循最佳实践和设计原则，编写出优雅规范的&lt;code&gt; Spring Boot&lt;&#x2F;code&gt; 你的接口也可以像企业级项目接口一般规范且优雅。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yan-ge-zun-xun-restful-api-she-ji-yuan-ze&quot;&gt;严格遵循&lt;code&gt;RESTful API &lt;&#x2F;code&gt;设计原则&lt;a class=&quot;zola-anchor&quot; href=&quot;#yan-ge-zun-xun-restful-api-she-ji-yuan-ze&quot; aria-label=&quot;Anchor link for: yan-ge-zun-xun-restful-api-she-ji-yuan-ze&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;清晰一致的资源命名：使用准确反映 &lt;code&gt;API &lt;&#x2F;code&gt;管理的资源的名词（例如，&lt;code&gt;&#x2F;articles、&#x2F;users&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;GetMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;articles&#x2F;{id}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Product&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getArticleById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;PathVariable Long&lt;&#x2F;span&gt;&lt;span&gt; id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;标准化 &lt;code&gt;HTTP &lt;&#x2F;code&gt;方法：遵循 &lt;code&gt;CRUD &lt;&#x2F;code&gt;操作的 &lt;code&gt;RESTful&lt;&#x2F;code&gt; 约定（&lt;code&gt;CREATE： POST、READ： GET、UPDATE： PUT、DELETE：DELETE&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PostMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;users&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RequestBody User&lt;&#x2F;span&gt;&lt;span&gt; user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;有意义的状态代码：返回相应的 &lt;code&gt;HTTP &lt;&#x2F;code&gt;状态代码,如成功 （&lt;code&gt;2xx&lt;&#x2F;code&gt;）、错误 （&lt;code&gt;4xx&lt;&#x2F;code&gt;） 或服务器问题 （&lt;code&gt;5xx&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;DeleteMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;articles&#x2F;{id}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;deleteArticle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;PathVariable Long&lt;&#x2F;span&gt;&lt;span&gt; id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;productService.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;deleteArticle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;noContent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 204 No Content
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;notFound&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 404 Not Found
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;关于更多&lt;code&gt;restful&lt;&#x2F;code&gt;标准，参考&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;REST&quot;&gt;&lt;code&gt;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;REST&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;he-li-li-yong-hao-spring-boot-zhu-jie&quot;&gt;合理利用好 Spring Boot 注解&lt;a class=&quot;zola-anchor&quot; href=&quot;#he-li-li-yong-hao-spring-boot-zhu-jie&quot; aria-label=&quot;Anchor link for: he-li-li-yong-hao-spring-boot-zhu-jie&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这里所谓得合理，不是很好定义，但本着高效、简洁、清晰得原则推荐。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@RestController&lt;&#x2F;code&gt;：默认情况下，将控制器标记为返回 &lt;code&gt;JSON&lt;&#x2F;code&gt; 或其他结构化数据。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个综合注解，是&lt;code&gt;@Controller&lt;&#x2F;code&gt; 和 &lt;code&gt;@ResponseBody&lt;&#x2F;code&gt;的功能于一身，一个注解作两个注解的事情，简洁高效。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RestController
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HelloController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; .....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@RequestMapping&lt;&#x2F;code&gt;：定义每个&lt;code&gt;controller&lt;&#x2F;code&gt;的基本路径。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;这样做可以使代码更加整洁和易于维护。不需要在每个方法上都重复写基本路径部分,在类级别定义基本路径可以带来更清晰、更简洁、更易维护的代码结构，同时也有助于提高开发效率和代码质量。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RestController
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RequestMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HelloController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; .....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;使用简化的请求方式注解。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在不同类型的方法上直接使用&lt;code&gt;@GetMapping、@PostMapping、@PutMapping@DeleteMapping&lt;&#x2F;code&gt;注解进行标识，而不是使用笼统的&lt;code&gt; @RequestMapping(method = RequestMethod.POST)&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;@PathVariable&lt;&#x2F;code&gt;获取请求的路径变量；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RestController
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RequestMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;articles&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ArticleController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;GetMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;{id}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Article&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getArticleById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PathVariable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 根据文章的id查询文章
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Article&lt;&#x2F;span&gt;&lt;span&gt; article &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; articleService.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;findArticleById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;article &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;article&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;notFound&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;@RequestBody&lt;&#x2F;code&gt;将请求正文内容反序列化为 Java 对象。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RestController
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RequestMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;api&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UserController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;PostMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;users&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RequestBody &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这里的 User 对象会从请求的 JSON 数据中反序列化得到
&lt;&#x2F;span&gt;&lt;span&gt;        userService.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;saveUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;guan-yu-yi-lai-zhu-ru-de-shi-yong-jian-yi&quot;&gt;关于依赖注入的使用建议&lt;a class=&quot;zola-anchor&quot; href=&quot;#guan-yu-yi-lai-zhu-ru-de-shi-yong-jian-yi&quot; aria-label=&quot;Anchor link for: guan-yu-yi-lai-zhu-ru-de-shi-yong-jian-yi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;使用构造函数注入方式&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;通过在类的构造函数中接受依赖对象作为参数来进行注入。这种方式可以确保依赖在对象创建时被注入，提高了代码的可测试性和可维护性。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RestController
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ProductController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ProductService &lt;&#x2F;span&gt;&lt;span&gt;productService;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ProductController&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ProductService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;productService&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.productService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; productService;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ... other controller methods
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zhen-dui-jie-kou-de-yi-chang-chu-li&quot;&gt;针对接口的异常处理&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhen-dui-jie-kou-de-yi-chang-chu-li&quot; aria-label=&quot;Anchor link for: zhen-dui-jie-kou-de-yi-chang-chu-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@ControllerAdvice&lt;&#x2F;code&gt;的使用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ControllerAdvice
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ApiExceptionHandler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ExceptionHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ArticleNotFoundException&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ErrorResponse&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;handleArticleNotFound&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ArticleNotFoundException &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ex&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; ... create error response with details
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HttpStatus&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;NOT_FOUND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;errorResponse&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-yong-dtodai-ti-pojode-zhi-jie-shi-yong&quot;&gt;使用&lt;code&gt;DTO&lt;&#x2F;code&gt;代替&lt;code&gt;POJO&lt;&#x2F;code&gt;的直接使用&lt;a class=&quot;zola-anchor&quot; href=&quot;#shi-yong-dtodai-ti-pojode-zhi-jie-shi-yong&quot; aria-label=&quot;Anchor link for: shi-yong-dtodai-ti-pojode-zhi-jie-shi-yong&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;对于数据传输对象，建议对&lt;code&gt;pojo&lt;&#x2F;code&gt;进行&lt;code&gt;dto&lt;&#x2F;code&gt;的封装，而不是使用原实体。提高代码的可读性、可维护性和数据封装性。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ArticleDto &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span&gt;id;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;title;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;contents;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; more
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;jie-kou-an-quan-de-jian-yi&quot;&gt;接口安全的建议&lt;a class=&quot;zola-anchor&quot; href=&quot;#jie-kou-an-quan-de-jian-yi&quot; aria-label=&quot;Anchor link for: jie-kou-an-quan-de-jian-yi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;SpringSecurity&lt;&#x2F;code&gt;等安全框架进行认证授权，包括令牌机制的使用，如&lt;code&gt;JWT&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;对接口进行常见的漏洞检查并采取防范措施，比如&lt;code&gt;XSS&lt;&#x2F;code&gt;和&lt;code&gt;SQL&lt;&#x2F;code&gt;注入等。&lt;&#x2F;li&gt;
&lt;li&gt;使用&lt;code&gt;https&lt;&#x2F;code&gt;进行网络通信；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;guan-yu-ban-ben-kong-zhi&quot;&gt;关于版本控制&lt;a class=&quot;zola-anchor&quot; href=&quot;#guan-yu-ban-ben-kong-zhi&quot; aria-label=&quot;Anchor link for: guan-yu-ban-ben-kong-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;使用路径版本控制（例如，&lt;code&gt;&#x2F;api&#x2F;v1&#x2F;articles&lt;&#x2F;code&gt;）或基于标头的版本控制。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用版本控制 &lt;code&gt;API &lt;&#x2F;code&gt;来管理更改并保持与客户端的兼容性。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RestController
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RequestMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;api&#x2F;products&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ProductController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;GetMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;details&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getProductDetails&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RequestHeader&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Accept-Version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;v1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Product details for version 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;v2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Product details for version 2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return ResponseEntity&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;badRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Unsupported version&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;wan-bei-de-jie-kou-ce-shi&quot;&gt;完备的接口测试&lt;a class=&quot;zola-anchor&quot; href=&quot;#wan-bei-de-jie-kou-ce-shi&quot; aria-label=&quot;Anchor link for: wan-bei-de-jie-kou-ce-shi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;考虑使用 &lt;code&gt;Mockito &lt;&#x2F;code&gt;或 &lt;code&gt;JUnit &lt;&#x2F;code&gt;等工具对每个接口进行测试，保证接口的准确性和稳健性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ben-wen-xiao-jie&quot;&gt;本文小结&lt;a class=&quot;zola-anchor&quot; href=&quot;#ben-wen-xiao-jie&quot; aria-label=&quot;Anchor link for: ben-wen-xiao-jie&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;上面虽然列举好几种编写接口的规范和建议，但这些不是一成不变的，在具体的项目，还需要根据业务和项目需求做出一些让步和改动，灵活运用这些建议，你的接口也可以很优雅。&lt;strong&gt;代码就是一行行蓝色的诗，而不是冰冷乏味的英文串&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Spring Security5.x到Spring Security6.x的迁移</title>
          <pubDate>Sat, 20 Apr 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/spring-security5-xdao-spring-security6-xde-qian-yi/</link>
          <guid>https://ilikexff.cn/spring-security5-xdao-spring-security6-xde-qian-yi/</guid>
          <description xml:base="https://ilikexff.cn/spring-security5-xdao-spring-security6-xde-qian-yi/">&lt;h2 id=&quot;1-zhuo-li-ba-suo&quot;&gt;1. 啄里吧嗦&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-zhuo-li-ba-suo&quot; aria-label=&quot;Anchor link for: 1-zhuo-li-ba-suo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;之前有写过一篇关于&lt;code&gt;Spring Security&lt;&#x2F;code&gt;的文章，但那已经是相对比较旧的版本了，就目前&lt;code&gt;Spring Security6.0&lt;&#x2F;code&gt;来说，这其中出现了不少的变动和更新，很多&lt;code&gt;API&lt;&#x2F;code&gt;的使用也是有不小的变化，所以我觉得有必要学习一下。但这篇文章的重点放在&lt;code&gt;SpringSecurity6.x&lt;&#x2F;code&gt;的新变动了解以及&lt;code&gt;SpringSecurity5.x&lt;&#x2F;code&gt;版本的迁移上。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;2-yue-du-qian-ti&quot;&gt;2. 阅读前提&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-yue-du-qian-ti&quot; aria-label=&quot;Anchor link for: 2-yue-du-qian-ti&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这里写什么呢？&lt;code&gt;SpringSecurity6.0+&lt;&#x2F;code&gt;版本都更新了些什么东西，这里就简单给各位整理一下。注意这里所整理的一些更新是相较于&lt;code&gt;SpringSecurity5&lt;&#x2F;code&gt;版本来说的，因此这部分的内容并不适合小白阅读，因为这是建立在你已经有了一些&lt;code&gt;SpringSecurity&lt;&#x2F;code&gt;基础的前提下的，所以如果是完全没学过&lt;code&gt;SpringSecurity&lt;&#x2F;code&gt;的童鞋，建议看看这篇&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;2302_76401343&#x2F;article&#x2F;details&#x2F;137432951?spm=1001.2014.3001.5502&quot;&gt;上古掌控安全的神:SpringSecurity初探揭秘&lt;&#x2F;a&gt;。它是是基于&lt;code&gt;SpringSecurity5&lt;&#x2F;code&gt;版本的快速入门文章，老肩巨猾,很好看，去看看吧。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-1-spring-boothe-spring-securityde-ban-ben-guan-xi&quot;&gt;2.1 Spring Boot和Spring Security的版本关系&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-1-spring-boothe-spring-securityde-ban-ben-guan-xi&quot; aria-label=&quot;Anchor link for: 2-1-spring-boothe-spring-securityde-ban-ben-guan-xi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Spring Boot 2 &lt;&#x2F;code&gt;默认为 &lt;code&gt;Spring Security 5&lt;&#x2F;code&gt;，而 &lt;code&gt;Spring Boot 3 &lt;&#x2F;code&gt;使用 &lt;code&gt;Spring Security 6&lt;&#x2F;code&gt;。所以记住这一点，后续系列的文章所有的案例都是基于&lt;code&gt;SpringBoot3&lt;&#x2F;code&gt;以及&lt;code&gt;Gradle&lt;&#x2F;code&gt;的组合来进行的，当然，如果你还是&lt;code&gt;Maven&lt;&#x2F;code&gt;玩家，其实就理解学习层面来说并没有本质上的影响，无非是在实际的项目中更换一种构建方式罢了，不要觉得一看到是&lt;code&gt;Gradle&lt;&#x2F;code&gt;系的例子就跑路:&lt;&#x2F;p&gt;
&lt;p&gt;“哎呦！这项目没用我心爱的&lt;code&gt;Maven&lt;&#x2F;code&gt;，不适合我，溜了溜了!!”&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-2-spring-security-6-xin-de-bian-dong&quot;&gt;2.2 Spring Security 6 新的变动&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-2-spring-security-6-xin-de-bian-dong&quot; aria-label=&quot;Anchor link for: 2-2-spring-security-6-xin-de-bian-dong&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240420184640041.png&quot; alt=&quot;image-20240420184640041&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Spring Security 6&lt;&#x2F;code&gt; 引入了多项功能更新，以提高安全性和健壮性。&lt;strong&gt;它现在至少需要 Java 版本 17 并使用 &lt;code&gt;jakarta &lt;&#x2F;code&gt;命名空间。&lt;&#x2F;strong&gt;，这个&lt;code&gt;Java17&lt;&#x2F;code&gt;可能听说过，但是&lt;code&gt;jakarta &lt;&#x2F;code&gt;是什么鬼可能很多人没有了解过(这其中就有我一席之地)，下面是来自 &lt;strong&gt;通义千文&lt;&#x2F;strong&gt; 的解释:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Jakarta 命名空间是Java生态系统中用于标识一组特定技术规范和API的标准前缀。这个命名空间起源于开源社区对Java企业版（Java EE）规范的继任者——Jakarta EE项目中的API和组件的重新命名。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;背景&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Java EE&lt;&#x2F;strong&gt;：最初由Sun Microsystems（后被Oracle收购）主导开发，是一套用于构建企业级Java应用程序的标准和规范集合，包括诸如Servlets、JSP、EJB、JMS、JPA等技术。这些规范定义了接口和行为，由第三方供应商（如IBM、Red Hat、Oracle等）提供具体的实现。Java EE规范中的API通常以&lt;code&gt;javax.*&lt;&#x2F;code&gt;命名空间开头。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Oracle与Java EE&lt;&#x2F;strong&gt;：随着Oracle对Java EE的管理和发展方向引起社区的关注和担忧，2017年，Oracle宣布将Java EE移交给开源组织，并停止在Java EE 8之后的版本开发。随后，Eclipse基金会接手了Java EE的后续开发工作，并将其重命名为Jakarta EE。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Jakarta EE&lt;&#x2F;strong&gt;：作为Java EE的开源替代品，Jakarta EE保留了大部分原有Java EE规范的功能和目标，但在治理模式、开发流程和知识产权等方面遵循更加开放和社区驱动的原则。为了反映这一转变，并避免与Oracle的商标权冲突，Eclipse基金会决定将所有相关的API包名从&lt;code&gt;javax.*&lt;&#x2F;code&gt;改为&lt;code&gt;jakarta.*&lt;&#x2F;code&gt;，形成了Jakarta命名空间。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Jakarta命名空间的意义&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;法律与商标独立&lt;&#x2F;strong&gt;：更改至&lt;code&gt;jakarta.*&lt;&#x2F;code&gt;命名空间，标志着这些技术规范与Oracle的商标权脱钩，完全由Eclipse基金会和开源社区掌控，不受单一商业公司的控制。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;技术演进的新开端&lt;&#x2F;strong&gt;：Jakarta EE不仅沿袭了Java EE的核心规范，还在其基础上引入了新技术、新规范和现代化开发实践。使用新的命名空间象征着这一技术栈进入了一个新的发展阶段，不受过去版本约束，能够更快地响应市场需求和技术创新。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;清晰的版本分界&lt;&#x2F;strong&gt;：由于命名空间的改变，开发者和工具能够清楚地区分基于旧Java EE（&lt;code&gt;javax.*&lt;&#x2F;code&gt;）和新Jakarta EE（&lt;code&gt;jakarta.*&lt;&#x2F;code&gt;）构建的应用程序及其依赖。这有助于平滑迁移、避免混淆，并为兼容性问题提供了明确的基准。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;社区认同与生态建设&lt;&#x2F;strong&gt;：Jakarta命名空间体现了开源社区对这一技术栈所有权的认可和支持。随着越来越多的厂商和开发者采用Jakarta EE规范，围绕&lt;code&gt;jakarta.*&lt;&#x2F;code&gt;命名空间的开源库、框架、工具和服务生态系统逐渐形成，推动了企业级Java开发的持续发展。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;别看™一大堆，其实你几乎可以不看他们，阅读一遍，有个简单的印象就好了。但&lt;code&gt;Java17&lt;&#x2F;code&gt;这块属于硬控，躲不开的。要想使用&lt;code&gt;Spring Security6&lt;&#x2F;code&gt;的话，还是得注意下哈。&lt;&#x2F;p&gt;
&lt;p&gt;下面简单列一下这个版本的主要变动:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;删除了 &lt;code&gt;WebSecurityConfigurerAdapter&lt;&#x2F;code&gt;，以支持基于组件的安全配置&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;authorizeRequests（）&lt;&#x2F;code&gt; 被删除并替换为 &lt;code&gt;authorizeHttpRequests（）&lt;&#x2F;code&gt; 以定义授权规则。&lt;&#x2F;li&gt;
&lt;li&gt;引入了 &lt;code&gt;requestMatcher（）&lt;&#x2F;code&gt; 和 &lt;code&gt;securityMatcher（）&lt;&#x2F;code&gt; 等方法来替换&lt;code&gt; antMatcher（）&lt;&#x2F;code&gt; 和 &lt;code&gt;mvcMatcher（）&lt;&#x2F;code&gt; 来配置请求资源的安全性
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;requestMatcher（）&lt;&#x2F;code&gt; 方法更安全，因为它为请求配置选择了适当的&lt;code&gt; RequestMatcher&lt;&#x2F;code&gt; 实现。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;弃用部分方法，如&lt;code&gt; cors（）&lt;&#x2F;code&gt; 和 &lt;code&gt;csrf（）&lt;&#x2F;code&gt; 推荐使用函数式编程。&lt;&#x2F;li&gt;
&lt;li&gt;一些注解上的变化….&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;3. 版本升级&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;基于上一个标题列出得更新，这部分将会简单分享一下，如何将你项目中的 &lt;code&gt;SpringSecurity5&lt;&#x2F;code&gt;版本升级到 &lt;code&gt;Spring Security6&lt;&#x2F;code&gt; 版本，以适应最新的特性；这不算一个很大的版本迁移，但有必要了解新版特性以及如何使用它们。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Configuration&lt;&#x2F;code&gt;不再是&lt;code&gt;@EnableWebSecurity&lt;&#x2F;code&gt;注的一部分。因此我们在新版本(没有特殊说明，这里以及后续说的新版本和旧版本分别指的是&lt;code&gt;SpringSecurity6&lt;&#x2F;code&gt;和&lt;code&gt;SpringSecurity5&lt;&#x2F;code&gt;)中需要同时给配置类加上这两个注解。&lt;&#x2F;li&gt;
&lt;li&gt;新版本删除了 &lt;code&gt;WebSecurityConfigurerAdapter &lt;&#x2F;code&gt;类，并采用基于组件的配置,我们在些&lt;code&gt;SpringSecurity&lt;&#x2F;code&gt;配置类时不再需要继承这个&lt;code&gt;WebSecurityConfigurerAdapter&lt;&#x2F;code&gt;，因此，结合上面两点，新版本的配置应该是下面这样的:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Configuration
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;EnableWebSecurity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;WebSecurityConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; more....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;新版本通过 &lt;code&gt;WebSecurityCustomizer bean&lt;&#x2F;code&gt; 来修改排除静态资源, 该接口替代了 &lt;code&gt;WebSecurityConfigurerAdapter &lt;&#x2F;code&gt;接口中的 &lt;code&gt;configure&lt;&#x2F;code&gt;。当然，现在大部分项目都是前后端分离，这个配置相对来说没那么常用，但也不妨碍我们进步！！！！&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Bean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WebSecurityCustomizer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;webSecurityCustomizer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;web&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; web.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ignoring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;requestMatchers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;js&#x2F;**&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;css&#x2F;**&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;通过注册 &lt;code&gt;InMemoryUserDetailsManager bean &lt;&#x2F;code&gt;来重构身份验证凭据逻辑:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Bean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UserDetailsService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;userDetailsService &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Define user information in memory
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Administrator
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UserDetails&lt;&#x2F;span&gt;&lt;span&gt; adminUser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;withUsername&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;八尺妖剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Username
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;$2a$10$5GgerupMYdknnk.ln&#x2F;9jK.MrQ39IcoO9vILlgPHigpAQ10PbLsoHS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Password, {noop} for no encryption
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;roles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;admin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Assign roles
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;authorities&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ROLE_test:show&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;user:name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;user:list&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Build normal user information
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UserDetails&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;withUsername&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;李四&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Username
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;$2a$10$5GgerupMYdknnk.ln&#x2F;9jK.MrQ39IcoO9vILlgPHigpAQ10PbLsoHS&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Password, {noop} for no encryption
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;roles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Assign role
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Store the constructed user information in SpringSecurity (in memory)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;InMemoryUserDetailsManager&lt;&#x2F;span&gt;&lt;span&gt; userDetailsManager &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new InMemoryUserDetailsManager&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    userDetailsManager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;adminUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    userDetailsManager.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createUser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;users&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; userDetailsManager;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 安全配置,在旧版本中，我们一般通过重写 &lt;code&gt;WebSecurityConfigurer &lt;&#x2F;code&gt;类中的 &lt;code&gt;configure &lt;&#x2F;code&gt;方法来配置 &lt;code&gt;HttpSecurity&lt;&#x2F;code&gt;。由于它在最新版本中被删除，新版的配置方式是通过&lt;code&gt;SecurityFilterChain bean&lt;&#x2F;code&gt; 来进行。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Bean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SecurityFilterChain &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filterChain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HttpSecurity&lt;&#x2F;span&gt;&lt;span&gt; httpSecurity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Configure CSRF to be disabled
&lt;&#x2F;span&gt;&lt;span&gt;    httpSecurity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;csrf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;AbstractHttpConfigurer&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;disable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Configure request interception
&lt;&#x2F;span&gt;&lt;span&gt;    httpSecurity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;authorizeHttpRequests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;auth -&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                    auth.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;requestMatchers&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;to_login&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;permitAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;anyRequest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;authenticated&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Specify login method: form, BASIC, etc.
&lt;&#x2F;span&gt;&lt;span&gt;    httpSecurity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;formLogin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;form -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; form.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;loginPage&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;to_login&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Redirect to custom login page
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;loginProcessingUrl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;doLogin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Handle frontend requests, path matches frontend request path
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;usernameParameter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;passwordParameter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;defaultSuccessUrl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;index&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Default page to redirect to after successful login
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; httpSecurity.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;当然，密码编码器的写法也可以通过注册&lt;code&gt;Bean&lt;&#x2F;code&gt;得方式来完成:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Bean
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;PasswordEncoder &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;passwordEncoderParser&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Build the password encoder
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return new BCryptPasswordEncoder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>Google官方《提示工程白皮书（中文译本）》</title>
          <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/googleguan-fang-ti-shi-gong-cheng-bai-pi-shu-zhong-wen-yi-ben/</link>
          <guid>https://ilikexff.cn/googleguan-fang-ti-shi-gong-cheng-bai-pi-shu-zhong-wen-yi-ben/</guid>
          <description xml:base="https://ilikexff.cn/googleguan-fang-ti-shi-gong-cheng-bai-pi-shu-zhong-wen-yi-ben/">&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;翻译:&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.ilikexff.cn&#x2F;&quot;&gt;八尺妖剑&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;原作者：Lee Boonstra&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202504151128750.jpg&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;致谢&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;内容贡献者：&lt;br &#x2F;&gt;
Michael Sherman&lt;br &#x2F;&gt;
Yuan Cao&lt;br &#x2F;&gt;
Erick Armbrust&lt;br &#x2F;&gt;
Anant Nawalgaria&lt;br &#x2F;&gt;
Antonio Gulli&lt;br &#x2F;&gt;
Simone Cammel&lt;&#x2F;p&gt;
&lt;p&gt;策展与编辑：&lt;br &#x2F;&gt;
Antonio Gulli&lt;br &#x2F;&gt;
Anant Nawalgaria&lt;br &#x2F;&gt;
Grace Mollison&lt;br &#x2F;&gt;
技术作家：Joey Haymaker&lt;br &#x2F;&gt;
设计师：Michael Lanning&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;目录&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;引言 6&lt;br &#x2F;&gt;
提示工程 7&lt;br &#x2F;&gt;
大语言模型输出配置 8&lt;br &#x2F;&gt;
输出长度 8&lt;br &#x2F;&gt;
采样控制 9&lt;br &#x2F;&gt;
温度 9&lt;br &#x2F;&gt;
Top-K 和 Top-P 10&lt;br &#x2F;&gt;
综合应用 11&lt;br &#x2F;&gt;
提示技巧 13&lt;br &#x2F;&gt;
通用提示 &#x2F; 零样本提示 13&lt;br &#x2F;&gt;
单样本与少样本提示 15&lt;br &#x2F;&gt;
系统提示、上下文提示与角色提示 18&lt;br &#x2F;&gt;
系统提示 19&lt;br &#x2F;&gt;
角色提示 21&lt;br &#x2F;&gt;
上下文提示 23&lt;br &#x2F;&gt;
回溯提示 25&lt;br &#x2F;&gt;
思维链（CoT） 29&lt;br &#x2F;&gt;
自我一致性 32&lt;br &#x2F;&gt;
思维树（ToT） 36&lt;br &#x2F;&gt;
推理与行动（ReAct） 37&lt;br &#x2F;&gt;
自动提示工程 40&lt;br &#x2F;&gt;
代码提示 42&lt;br &#x2F;&gt;
编写代码的提示 42&lt;br &#x2F;&gt;
解释代码的提示 44&lt;br &#x2F;&gt;
翻译代码的提示 46&lt;br &#x2F;&gt;
调试与审查代码的提示 48&lt;br &#x2F;&gt;
多模态提示呢？ 54&lt;br &#x2F;&gt;
最佳实践 54&lt;br &#x2F;&gt;
提供示例 54&lt;br &#x2F;&gt;
保持简单 55&lt;br &#x2F;&gt;
明确输出要求 56&lt;br &#x2F;&gt;
优先使用指令而非约束 56&lt;br &#x2F;&gt;
控制最大令牌长度 58&lt;br &#x2F;&gt;
在提示中使用变量 58&lt;br &#x2F;&gt;
尝试不同的输入格式与写作风格 59&lt;br &#x2F;&gt;
在少样本分类任务中混合类别 59&lt;br &#x2F;&gt;
适应模型更新 60&lt;br &#x2F;&gt;
尝试不同的输出格式 60&lt;br &#x2F;&gt;
JSON修复 61&lt;br &#x2F;&gt;
使用模式（Schemas） 62&lt;br &#x2F;&gt;
与其他提示工程师一起实验 63&lt;br &#x2F;&gt;
思维链最佳实践 64&lt;br &#x2F;&gt;
记录各种提示尝试 64&lt;br &#x2F;&gt;
总结 66&lt;br &#x2F;&gt;
注释 68&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn-mineru.openxlab.org.cn&#x2F;extract&#x2F;d0c2ca81-745a-4fb7-aeb8-692c3a9700bb&#x2F;61fd8cc8a3534829054ac4393b43be2ebbaa4511df2596e97a4f0d829bf08764.jpg&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;你不需要是数据科学家或机器学习工程师——每个人都可以写提示。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;引言&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;当我们谈到大语言模型的输入和输出时，文本提示（有时还会伴随其他形式，比如图片提示）是模型用来预测特定输出的输入。你不需要是数据科学家或机器学习工程师——每个人都可以写提示。然而，写出最有效的提示可能有点复杂。提示的很多方面都会影响它的效果：你用的模型、模型的训练数据、模型的配置、你的措辞、风格和语气、结构以及上下文都很重要。因此，提示工程是一个反复试错的过程。不合适的提示可能导致模糊、不准确的回答，还会阻碍模型提供有意义的输出。&lt;&#x2F;p&gt;
&lt;p&gt;当你和Gemini聊天机器人互动时，基本上就是在写提示。不过，这篇白皮书主要讨论如何为Vertex AI中的Gemini模型或通过API写提示，因为直接给模型写提示可以让你调整温度等配置。&lt;&#x2F;p&gt;
&lt;p&gt;这篇白皮书会详细探讨提示工程。我们将介绍各种提示技巧，帮助你入门，并分享一些建议和最佳实践，让你成为提示专家。我们还会讨论在编写提示时可能遇到的挑战。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-1&quot;&gt;提示工程&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;先来了解大语言模型的工作原理：它是一个预测引擎。模型接收一段连续的文本作为输入，然后根据训练数据预测下一个词应该是什么。模型会不断重复这个过程，把之前预测的词加到文本末尾，继续预测下一个词。下一个词的预测基于之前词的关系以及模型在训练中见过的内容。&lt;&#x2F;p&gt;
&lt;p&gt;当你写提示时，你是在试图引导大语言模型预测正确的词序列。提示工程是设计高质量提示的过程，帮助大语言模型生成准确的输出。这个过程需要不断调整，找到最佳提示，优化提示长度，评估提示的写作风格和结构与任务的关系。在自然语言处理和大语言模型的背景下，提示是提供给模型的输入，用来生成回答或预测。&lt;&#x2F;p&gt;
&lt;p&gt;这些提示可以用来完成各种理解和生成任务，比如文本摘要、信息提取、问答、文本分类、语言或代码翻译、代码生成、代码文档编写或推理。&lt;&#x2F;p&gt;
&lt;p&gt;你可以参考谷歌的提示指南，里面有简单有效的提示示例。&lt;&#x2F;p&gt;
&lt;p&gt;在提示工程中，你首先要选择一个模型。提示可能需要针对特定模型进行优化，无论你是用Vertex AI中的Gemini语言模型、GPT、Claude，还是开源模型如Gemma或LLaMA。&lt;&#x2F;p&gt;
&lt;p&gt;除了提示本身，你还需要调整大语言模型的各种配置。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-2&quot;&gt;大语言模型输出配置&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;选好模型后，你需要确定模型的配置。大多数大语言模型都有多种配置选项，控制模型的输出。有效的提示工程需要为你的任务优化这些配置。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-3&quot;&gt;输出长度&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;一个重要的配置是生成回答的令牌（token）数量。生成更多令牌需要模型进行更多计算，导致能耗更高、响应时间可能更慢，成本也更高。&lt;&#x2F;p&gt;
&lt;p&gt;减少输出长度并不会让模型的输出在风格或文本上更简洁，它只是让模型在达到限制后停止预测更多令牌。如果你的任务需要短输出，你可能还需要设计提示来适应这个需求。&lt;&#x2F;p&gt;
&lt;p&gt;输出长度限制对一些提示技巧特别重要，比如ReAct，模型在生成你想要的回答后可能会继续输出无用的令牌。&lt;&#x2F;p&gt;
&lt;p&gt;要注意，生成更多令牌需要更多计算，导致能耗更高、响应时间可能更慢，成本也会增加。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-4&quot;&gt;采样控制&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;大语言模型并不是简单预测一个令牌，而是为下一个可能的令牌预测概率，词汇表中的每个令牌都有一个概率。这些概率会被采样，决定下一个输出的令牌。温度、Top-K和Top-P是最常见的配置，决定如何处理预测的令牌概率来选择单个输出令牌。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-5&quot;&gt;温度&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;温度控制令牌选择的随机性。低温度适合需要更确定性回答的提示，而高温度可能带来更多样化或意外的结果。温度为0（贪婪解码）是确定性的：总是选择概率最高的令牌（不过，如果两个令牌概率相同，根据实现方式的不同，温度为0时可能不会总得到相同输出）。&lt;&#x2F;p&gt;
&lt;p&gt;温度接近最大值会生成更随机的输出。随着温度越来越高，所有令牌成为下一个预测令牌的概率会趋于均等。&lt;&#x2F;p&gt;
&lt;p&gt;Gemini的温度控制可以类比机器学习中的softmax函数。低温度类似于低softmax温度（T），强调单一的高确定性选择。高温度类似于高softmax温度，允许更广泛的选择，增加不确定性，适合需要创意输出的场景。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-6&quot;&gt;Top-K 和 Top-P&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Top-K和Top-P（也叫核采样）是两种采样设置，限制下一个预测令牌来自概率最高的令牌。和温度一样，这些设置控制生成文本的随机性和多样性。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Top-K采样&lt;&#x2F;strong&gt;：从模型预测分布中选择概率最高的K个令牌。K值越高，模型输出越有创意和多样；K值越低，输出越严谨和事实性。Top-K为1等同于贪婪解码。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Top-P采样&lt;&#x2F;strong&gt;：选择累计概率不超过某个值（P）的令牌。P值从0（贪婪解码）到1（词汇表中所有令牌）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;选择Top-K还是Top-P的最好方法是两者都试试（或一起用），看看哪个效果更符合你的需求。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-7&quot;&gt;综合应用&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;选择Top-K、Top-P、温度和生成令牌数量取决于具体应用和期望结果，这些设置相互影响。重要的是要了解你选择的模型如何组合这些采样设置。&lt;&#x2F;p&gt;
&lt;p&gt;如果温度、Top-K和Top-P都可用（比如在Vertex Studio中），满足Top-K和Top-P条件的令牌是候选令牌，然后应用温度从中采样。如果只有Top-K或Top-P可用，行为类似，但只用一个设置。&lt;&#x2F;p&gt;
&lt;p&gt;如果温度不可用，满足Top-K或Top-P条件的令牌会随机选择，生成下一个预测令牌。&lt;&#x2F;p&gt;
&lt;p&gt;在某些极端设置下，一个采样配置会抵消其他设置或变得无关紧要：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果温度设为0，Top-K和Top-P无关紧要——最高概率的令牌成为下一个预测令牌。如果温度极高（超过1，通常到10以上），温度变得无关紧要，Top-K或Top-P过滤后的令牌会随机采样。&lt;&#x2F;li&gt;
&lt;li&gt;如果Top-K设为1，温度和Top-P无关紧要。只有一个令牌通过Top-K标准，成为下一个预测令牌。如果Top-K设为词汇表大小，任何非零概率的令牌都会通过Top-K标准。&lt;&#x2F;li&gt;
&lt;li&gt;如果Top-P设为0（或很小的值），大多数采样实现只会考虑最高概率的令牌，温度和Top-K无关紧要。如果Top-P设为1，任何非零概率的令牌都会通过Top-P标准。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;作为起点，温度0.2、Top-P 0.95、Top-K 30会生成相对连贯但不过分创意的输出。如果想要特别有创意的结果，可以试温度0.9、Top-P 0.99、Top-K 40。如果想要更严谨的结果，试温度0.1、Top-P 0.9、Top-K 20。如果任务有唯一正确答案（比如数学问题），从温度0开始。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;&#x2F;strong&gt;：自由度更高（高温度、Top-K、Top-P和输出令牌）可能导致模型生成不太相关的文本。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;警告&lt;&#x2F;strong&gt;：你有没有见过回答末尾堆满无意义的填充词？这是大语言模型常见的“重复循环错误”，模型陷入循环，反复生成相同的词、短语或句子结构，通常由不合适的温度和Top-K&#x2F;Top-P设置引发。这种问题在低温和高温时都可能出现。低温时，模型过于确定，固守最高概率路径，可能回到之前生成的文本，造成循环。高温时，输出过于随机，随机选择的词可能碰巧回到之前状态，造成循环。解决方法通常需要仔细调整温度和Top-K&#x2F;Top-P，找到确定性和随机性的最佳平衡。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-8&quot;&gt;提示技巧&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;大语言模型经过调优以遵循指令，并在大量数据上训练，能理解提示并生成回答。但模型并非完美，提示越清晰，模型预测下一个文本的效果越好。利用模型训练方式和工作原理的特定技巧，能帮助你获得更相关的结果。&lt;&#x2F;p&gt;
&lt;p&gt;现在我们了解了提示工程是什么，接下来看看最重要的提示技巧示例。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-9&quot;&gt;通用提示 &#x2F; 零样本提示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;零样本提示是最简单的提示类型。它只提供任务描述和一些起始文本，供模型开始处理。输入可以是任何内容：问题、故事开头或指令。零样本的意思是“没有示例”。&lt;&#x2F;p&gt;
&lt;p&gt;我们用Vertex AI中的Vertex AI Studio（语言）来测试提示，这是一个试验提示的平台。表1展示了一个零样本提示，用于分类电影评论。&lt;&#x2F;p&gt;
&lt;p&gt;用表格记录提示是一个好方法。提示可能会经过多次迭代才最终用于代码库，系统化记录提示工程工作很重要。更多关于表格格式、记录重要性和提示开发过程的内容会在后面的“最佳实践”部分讨论（“记录各种提示尝试”）。&lt;&#x2F;p&gt;
&lt;p&gt;模型温度设为低值，因为不需要创意，Top-K和Top-P用gemini-pro的默认值，相当于禁用（见上文“大语言模型输出配置”）。注意生成的输出。“令人不安”和“杰作”这两个词出现在同一句中，会让预测复杂一些。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表1. 零样本提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;&#x2F;th&gt;&lt;th&gt;1_电影分类&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;目标&lt;&#x2F;td&gt;&lt;td&gt;将电影评论分类为正面、中立或负面&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;gemini-pro&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;0.1&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;无&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;将电影评论分类为正面、中立或负面。评论：《Her》是一部揭示人类未来方向的令人不安的研究，如果AI继续不受控制地发展，我希望有更多这样的杰作电影。情感：&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;正面&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;如果零样本效果不好，可以在提示中提供演示或示例，这就是“单样本”和“少样本”提示。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-10&quot;&gt;单样本与少样本提示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;为AI模型创建提示时，提供示例很有帮助。示例能让模型明白你的要求，尤其在你希望模型输出特定结构或模式时。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;单样本提示&lt;&#x2F;strong&gt;提供一个示例，因此叫单样本。模型通过模仿示例来完成任务。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;少样本提示&lt;&#x2F;strong&gt;提供多个示例，展示模型需要遵循的模式。和单样本类似，但多个示例增加模型遵循模式的概率。&lt;&#x2F;p&gt;
&lt;p&gt;少样本所需的示例数量取决于任务复杂性、示例质量和生成AI模型的能力。一般来说，少样本提示至少需要3到5个示例。复杂任务可能需要更多，模型输入长度限制可能要求更少。&lt;&#x2F;p&gt;
&lt;p&gt;表2展示了一个少样本提示示例，使用和之前相同的gemini-pro配置，只是增加令牌限制以适应更长回答。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表2. 少样本提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;目标&lt;&#x2F;th&gt;&lt;th&gt;将披萨订单解析为JSON&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;gemini-pro&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;0.1&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;250&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;无&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;将客户披萨订单解析为有效JSON：示例：我要一个小的奶酪披萨，番茄酱和意大利辣肠。JSON响应：{&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;示例&lt;&#x2F;td&gt;&lt;td&gt;示例：我要一个大披萨，番茄酱、罗勒和莫扎里拉。{ “size”: “large”, “type”: “normal”, “ingredients”: [[“tomato sauce”, “bazel”, “mozzarella”]] } 现在我要一个大披萨，一半奶酪和莫扎里拉，另一半番茄酱、火腿和菠萝。JSON响应：&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;{ “size”: “large”, “type”:“half-half”, “ingredients”: [[“cheese”, “mozzarella”], [“tomato sauce”, “ham”, “pineapple”]] }&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;选择示例时，确保示例与任务相关，示例要多样、质量高、写得好。一个小错误可能让模型困惑，导致不理想的输出。&lt;&#x2F;p&gt;
&lt;p&gt;如果希望输出对多种输入都稳健，示例中应包含边缘情况——不常见或意外的输入，模型仍需正确处理。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-11&quot;&gt;系统提示、上下文提示与角色提示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;系统提示、上下文提示和角色提示都是引导大语言模型生成文本的技巧，但侧重点不同：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统提示&lt;&#x2F;strong&gt;设定模型的整体上下文和目的，定义模型的“大方向”，如翻译语言、分类评论等。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;上下文提示&lt;&#x2F;strong&gt;提供与当前对话或任务相关的具体细节或背景信息，帮助模型理解需求并定制回答。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;角色提示&lt;&#x2F;strong&gt;为模型指定特定角色或身份，帮助模型生成与角色知识和行为一致的回答。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这三者可能有重叠。比如，指定角色的提示也可能包含上下文。&lt;&#x2F;p&gt;
&lt;p&gt;但每种提示的主要目的略有不同：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;系统提示&lt;&#x2F;strong&gt;：定义模型的基本能力和整体目标。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;上下文提示&lt;&#x2F;strong&gt;：提供即时、任务特定的信息，动态引导回答。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;角色提示&lt;&#x2F;strong&gt;：定义模型的输出风格和语气，增加特定性和个性。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;区分这三种提示为设计意图清晰的提示提供了框架，允许灵活组合，便于分析每种提示对模型输出的影响。&lt;&#x2F;p&gt;
&lt;p&gt;下面详细介绍这三种提示。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-12&quot;&gt;系统提示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;表3展示了一个系统提示，指定了如何返回输出的额外信息。我提高了温度以增加创意，指定了更高的令牌限制。但由于明确指令，模型没有生成多余文本。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表3. 系统提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;目标&lt;&#x2F;th&gt;&lt;th&gt;将电影评论分类为正面、中立或负面&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;gemini-pro&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;0.8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;将电影评论分类为正面、中立或负面，仅返回大写标签。评论：《Her》是一部揭示人类未来方向的令人不安的研究，如果AI继续不受控制地发展，太可怕了，我看不下去。情感：&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;负面&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;系统提示适合生成符合特定要求的输出。“系统提示”的名称意为“为系统提供额外任务”。比如，你可以用系统提示生成特定编程语言兼容的代码片段，或返回特定结构。表4展示了一个返回JSON格式的示例。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表4. 系统提示返回JSON格式示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;目标&lt;&#x2F;th&gt;&lt;th&gt;将电影评论分类为正面、中立或负面，返回JSON&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;gemini-pro&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;1024&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;0.8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;将电影评论分类为正面、中立或负面，返回有效JSON。评论：《Her》是一部揭示人类未来方向的令人不安的研究，如果AI继续不受控制地发展，太可怕了，我看不下去。模式：MOVIE: { “sentiment”: String “POSITIVE”&lt;&#x2F;td&gt;&lt;td&gt;“NEGATIVE”&lt;&#x2F;td&gt;&lt;td&gt;“NEUTRAL”, “name”: String } MOVIE_REVIEWS: { “movie_reviews”:[MOVIE] }&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;JSON响应：{ “movie_reviews”: [ { “sentiment”: “NEGATIVE”, “name”:“Her” } ] }&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;返回JSON对象提取数据有几个好处。在实际应用中，我无需手动创建JSON格式，数据可按序返回（处理日期时间对象时很方便），最重要的是，提示JSON格式会迫使模型创建结构，减少幻觉（hallucination）。&lt;&#x2F;p&gt;
&lt;p&gt;系统提示对安全性和毒性控制也很有用。简单加一句“回答需尊重”即可控制输出。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-13&quot;&gt;角色提示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;角色提示是为生成AI模型指定特定角色的技巧，帮助模型生成更相关、更具信息性的输出，模型会根据角色定制回答。&lt;&#x2F;p&gt;
&lt;p&gt;比如，你可以让模型扮演图书编辑、幼儿园老师或励志演说家。指定角色后，可以提供与角色相关的提示。比如，让老师角色创建一个可审查的课程计划。表5展示了一个旅行向导角色的示例。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表5. 角色提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;目标&lt;&#x2F;th&gt;&lt;th&gt;扮演旅行向导，提供3个旅行建议&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;gemini-pro&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;1024&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;0.8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;我希望你扮演旅行向导。我会告诉你我的位置，你建议3个附近可参观的地方。有时我会指定类型。我的建议：“我在阿姆斯特丹，只想参观博物馆。” 旅行建议：&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;1. 荷兰国立博物馆：世界知名的博物馆，以伦勃朗的《夜巡》等荷兰杰作闻名，别错过丰富的绘画和文物收藏，展示荷兰艺术与历史。2. 梵高博物馆：沉浸于梵高的迷人作品，馆内收藏了他最多的画作和素描，包括《星空》和《向日葵》。3. 阿姆斯特丹市立博物馆：探索全球现代与当代艺术，收藏包括毕加索、康定斯基和里特维尔德的作品，位于独特的现代建筑中。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;上例展示了一个旅行向导角色。如果改为地理老师角色，回答会不同。&lt;&#x2F;p&gt;
&lt;p&gt;为模型定义角色视角能提供语气、风格和专业知识的蓝图，提升输出的质量、相关性和效果。&lt;&#x2F;p&gt;
&lt;p&gt;以下是一些我认为有效的风格：&lt;br &#x2F;&gt;
对抗性、描述性、直接、正式、幽默、有影响力、非正式、励志、说服性&lt;&#x2F;p&gt;
&lt;p&gt;表6调整了提示，加入幽默和励志风格。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表6. 幽默风格的角色提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提示&lt;&#x2F;th&gt;&lt;th&gt;我希望你扮演旅行向导。我会告诉你我的位置，你以幽默风格建议3个附近可参观的地方。我的建议：“我在曼哈顿。” 旅行建议：&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;1. 帝国大厦壮观景观：登上帝国大厦，俯瞰曼哈顿天际线，感受如金刚站在大苹果之巅——不过没有巨型香蕉！2. 在MoMA释放艺术气息：到现代艺术博物馆（MoMA），欣赏令人震撼的杰作，会让你怀疑自己的火柴人画有没有艺术价值。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;-14&quot;&gt;上下文提示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;通过提供上下文提示，你可以确保AI交互尽可能顺畅高效。模型能更快理解请求，生成更准确、相关的回答，如表7所示。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表7. 上下文提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;目标&lt;&#x2F;th&gt;&lt;th&gt;为复古游戏博客建议文章&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;gemini-pro&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;1024&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;0.8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;背景：你为一个关于80年代街机游戏的博客写作。建议3个文章主题，每主题附几行描述。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;1. &lt;strong&gt;街机机柜设计演变&lt;&#x2F;strong&gt;：文章探讨街机机柜设计从70年代木质金属柜到80年代霓虹灯设计的演变。2. &lt;strong&gt;经典回顾：80年代标志性街机游戏&lt;&#x2F;strong&gt;：介绍80年代最具影响力的街机游戏历史、影响和遗产，突出创新、流行机制和持久魅力。3. &lt;strong&gt;像素艺术的兴起与复古复兴&lt;&#x2F;strong&gt;：探讨像素艺术作为早期街机游戏定义风格的演变，追溯根源、技术，并讨论其在现代游戏和数字艺术中的复兴。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;-15&quot;&gt;回溯提示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;回溯提示通过先让模型考虑与具体任务相关的通用问题，再将通用问题的回答输入后续具体任务提示，来提升性能。这种“回溯”让模型在解决具体问题前激活相关背景知识和推理过程。&lt;&#x2F;p&gt;
&lt;p&gt;通过考虑更广泛的基础原则，大语言模型能生成更准确、深刻的回答。回溯提示鼓励模型批判性思考，创新应用知识，改变最终任务提示，调用更多模型参数中的知识。&lt;&#x2F;p&gt;
&lt;p&gt;回溯提示还能缓解模型回答中的偏见，聚焦通用原则而非具体细节。&lt;&#x2F;p&gt;
&lt;p&gt;我们通过示例了解回溯提示如何提升效果。先看表8的传统提示，再与表9的回溯提示对比：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表8. 传统提示&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;目标&lt;&#x2F;th&gt;&lt;th&gt;为第一人称射击游戏关卡编写故事线&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;gemini-pro&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;1024&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;40&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;0.8&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;为第一人称射击游戏新关卡编写一段具有挑战性和吸引力的故事线。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;关卡开始时，玩家小队在密集城区被敌方伏击。玩家需在狭窄巷弄和破旧大楼中作战，利用隐蔽和精准消灭敌人，避免被发现。玩家需利用环境，设置陷阱、利用掩体，谨慎行动以生存。途中发现情报，敌人计划毁灭性攻击，玩家需争分夺秒收集证据并传回总部，阻止敌人计划。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;温度设为1可能生成各种创意故事线，但也可能随机和泛泛。让我们回溯一步：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表9. 回溯提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提示&lt;&#x2F;th&gt;&lt;th&gt;根据热门第一人称射击游戏，列出5个虚构的关键场景，构成具有挑战性和吸引力的关卡故事线？&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;1. &lt;strong&gt;废弃军事基地&lt;&#x2F;strong&gt;：后末日军事综合体，充满变异士兵和机器人，适合挑战性枪战。2. &lt;strong&gt;赛博朋克城市&lt;&#x2F;strong&gt;：霓虹灯照耀的未来都市，高楼和狭窄巷弄，敌人有赛博增强，需黑客技术。3. &lt;strong&gt;外星飞船&lt;&#x2F;strong&gt;：地球上搁浅的外星飞船，诡异走廊、零重力区域，遭遇外星生物。4. &lt;strong&gt;僵尸小镇&lt;&#x2F;strong&gt;：被僵尸占领的荒凉小镇，近战激烈，需解谜找到安全通道。5. &lt;strong&gt;海底研究设施&lt;&#x2F;strong&gt;：被水淹没的深海实验室，充满变异水生生物，需隐蔽和水下探索。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;这些场景很适合第一人称游戏。回到原提示，但这次将回溯答案作为上下文，看看结果如何。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表10. 回溯提示结合上下文示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提示&lt;&#x2F;th&gt;&lt;th&gt;背景：第一人称射击游戏的5个吸引人主题：1. &lt;strong&gt;废弃军事基地&lt;&#x2F;strong&gt;：后末日军事综合体，充满变异士兵和机器人，适合挑战性枪战。2. &lt;strong&gt;赛博朋克城市&lt;&#x2F;strong&gt;：霓虹灯照耀的未来都市，高楼和狭窄巷弄，敌人有赛博增强，需黑客技术。3. &lt;strong&gt;外星飞船&lt;&#x2F;strong&gt;：地球上搁浅的外星飞船，诡异走廊、零重力区域，遭遇外星生物。&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;选择一个主题，为第一人称射击游戏新关卡编写一段具有挑战性和吸引力的故事线。在幽暗深渊中，有一座破旧的海底研究设施，见证人类野心与灾难后果。设施笼罩在黑暗中，故障机器的嗡鸣声回响，淹死灵魂的回声萦绕，如今成为深海噩梦的温床。玩家作为精锐海军陆战队员，配备高级潜水装备和实验武器，需冒险进入……&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;这看起来是个有趣的游戏！通过回溯提示技巧，你可以提升提示的准确性。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-16&quot;&gt;思维链（CoT）&lt;a class=&quot;zola-anchor&quot; href=&quot;#-16&quot; aria-label=&quot;Anchor link for: -16&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;思维链（CoT）提示通过生成中间推理步骤提升大语言模型的推理能力，帮助模型生成更准确的回答。结合少样本提示可用于更复杂的推理任务，因为零样本思维链效果有限。&lt;&#x2F;p&gt;
&lt;p&gt;思维链有很多优势：低成本高效，适用于现成模型（无需微调），提供可解释性，可看到推理步骤，易于识别问题。思维链在不同模型版本间更稳健，提示性能漂移较小。缺点也很直观：包含推理步骤的回答需要更多输出令牌，预测成本更高，耗时更长。&lt;&#x2F;p&gt;
&lt;p&gt;为解释表11的示例，我们先试一个不使用思维链的提示，展示大语言模型的缺陷。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表11. 尝试解决数学问题的提示&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提示&lt;&#x2F;th&gt;&lt;th&gt;我3岁时，我的伙伴是我的3倍年龄。现在我20岁，我的伙伴多大？&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;63岁&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;糟糕，显然是错的。大语言模型常在数学任务中出错，即使是简单乘法。这是因为它们在大量文本上训练，数学可能需要不同方法。看看中间推理步骤能否改善输出。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表12. 思维链提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提示&lt;&#x2F;th&gt;&lt;th&gt;我3岁时，我的伙伴是我的3倍年龄。现在我20岁，我的伙伴多大？让我们一步步思考。&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;1. 假设我现在的年龄是“x”岁。2. 我3岁时，我的年龄是3岁。3. 当时我伙伴的年龄是我的3倍，即3 * 3 = 9岁。4. 现在我20岁，意味着从3岁起过了20 - 3 = 17年。5. 我伙伴当时9岁，年龄也增加了17年。6. 因此，我伙伴现在的年龄是9 + 17 = 26岁。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;现在答案正确了。因为我们明确指示模型解释每一步，而非直接给答案。有趣的是，模型通过加17年计算。我会用年龄差计算：(20 + (9 - 3))。帮模型更像我思考。&lt;&#x2F;p&gt;
&lt;p&gt;表12是“零样本”思维链。结合单样本或少样本提示，思维链更强大，如表13所示：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表13. 单样本思维链提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提示&lt;&#x2F;th&gt;&lt;th&gt;问题：我弟弟2岁时，我是他年龄的2倍。现在我40岁，我弟弟多大？让我们一步步思考。回答：我弟弟2岁时，我是2 * 2 = 4岁。年龄差2岁，我更大。现在我40岁，所以我弟弟是40 - 2 = 38岁。答案是38。问题：我3岁时，我的伙伴是我的3倍年龄。现在我20岁，我的伙伴多大？让我们一步步思考。&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;回答：我3岁时，我的伙伴是3 * 3 = 9岁。年龄差6岁，伙伴更大。现在我20岁，所以伙伴是20 + 6 = 26岁。答案是26。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;思维链适合多种场景，如代码生成（将请求分解为步骤，映射到代码行），或生成合成数据（基于产品标题假设描述）。任何能通过“讲解”解决的任务都适合思维链。如果能解释解决步骤，试试思维链。&lt;&#x2F;p&gt;
&lt;p&gt;请参考GoogleCloudPlatform Github上的笔记本，详细介绍思维链提示。&lt;&#x2F;p&gt;
&lt;p&gt;最佳实践部分会介绍思维链的专属最佳实践。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-17&quot;&gt;自我一致性&lt;a class=&quot;zola-anchor&quot; href=&quot;#-17&quot; aria-label=&quot;Anchor link for: -17&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;尽管大语言模型在多种自然语言处理任务中表现出色，但推理能力常被视为局限，仅靠增加模型规模难以突破。如前所述，思维链提示可让模型生成类似人类解题的推理步骤。但思维链用简单的“贪婪解码”策略，效果有限。自我一致性结合采样和多数投票，生成多样推理路径，选择最一致的答案，提升模型回答的准确性和连贯性。&lt;&#x2F;p&gt;
&lt;p&gt;自我一致性给答案正确性提供伪概率，但成本高。步骤如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;生成多样推理路径：多次提供相同提示，高温设置鼓励模型生成不同推理路径和视角。&lt;&#x2F;li&gt;
&lt;li&gt;从每个生成回答中提取答案。&lt;&#x2F;li&gt;
&lt;li&gt;选择最常见的答案。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;看看一个电子邮件分类系统的示例，分类邮件为“重要”或“不重要”。用零样本思维链提示多次发送，观察每次提交后回答是否不同。注意邮件中的友好语气、措辞和讽刺，可能误导模型。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
邮件：嗨，祝好，&lt;br &#x2F;&gt;
我看到你的网站用了Wordpress，很棒的开源内容管理系统。我过去也用过，插件丰富，设置简单。我注意到联系表单有个bug，选择姓名字段时会出问题。附件是输入姓名时的截图，注意我触发的JavaScript警告框。但其他方面网站很棒，我喜欢读。随意保留这个bug，因为它让我读到更多有趣内容。&lt;br &#x2F;&gt;
Harry the Hacker&lt;br &#x2F;&gt;
将邮件分类为重要或不重要，一步步思考并解释原因。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表14. 自我一致性提示示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;| 输出尝试1 | 步骤2：评估bug的潜在影响。联系表单的bug可能让攻击者执行任意JavaScript代码。| 步骤1：识别邮件目的。邮件目的是通知收件人网站联系表单的bug。发件人提到喜欢网站，暂时保留bug。|
| 输出尝试2 | 结论：重要。基于bug的潜在影响和发件人可信度，邮件应分类为&lt;strong&gt;重要&lt;&#x2F;strong&gt;。收件人需立即修复bug，保护网站免受攻击。| 解释：1. 无紧迫感：邮件以随意问候开头，语气平和。2. 非关键bug：bug被描述为有趣但非关键，发件人建议可保留。3. 无个人影响：邮件未指明对网站主人的直接影响，仅说喜欢网站。|
| 输出尝试3 | 步骤1：识别邮件目的。邮件目的是通知收件人网站联系表单的bug。发件人提到喜欢网站，暂时保留bug。步骤2：评估bug的潜在影响。联系表单的bug可能让攻击者执行任意JavaScript代码，可能控制网站、窃取信息或破坏网站。步骤3：考虑发件人可信度。发件人自称黑客Harry，但无法验证身份。可能是想帮助的合法黑客，也可能是想利用bug的恶意者。|&lt;&#x2F;p&gt;
&lt;p&gt;你可以试试这个提示，看是否返回一致分类。根据模型和温度配置，可能返回“重要”或“不重要”。&lt;&#x2F;p&gt;
&lt;p&gt;通过生成多个思维链，取最常见答案（“重要”），可获得更一致的正确答案。&lt;&#x2F;p&gt;
&lt;p&gt;这个示例展示自我一致性提示如何通过考虑多视角并选择最一致答案，改善模型回答的准确性。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-18&quot;&gt;思维树（ToT）&lt;a class=&quot;zola-anchor&quot; href=&quot;#-18&quot; aria-label=&quot;Anchor link for: -18&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;了解了思维链和自我一致性后，我们来看思维树（ToT）。它推广了思维链的概念，允许大语言模型同时探索多种推理路径，而非单一线性思维链。如图1所示。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;cdn-mineru.openxlab.org.cn&#x2F;extract&#x2F;d0c2ca81-745a-4fb7-aeb8-692c3a9700bb&#x2F;27a372eb418cac1b4c23b1140fc47df8fb2468ca3bac17fd5dc688a1c8c61a1d.jpg&quot; alt=&quot;图片&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;br &#x2F;&gt;
&lt;strong&gt;图1. 左侧为思维链提示，右侧为思维树提示的可视化&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这种方法使思维树特别适合需要探索的复杂任务。它通过维护一个思维树工作，每个思维是一个连贯的语言序列，作为解决问题中间步骤。模型可通过从树的不同节点分支，探索不同推理路径。&lt;&#x2F;p&gt;
&lt;p&gt;有一个很棒的笔记本，基于《大语言模型引导的思维树》论文，详细展示了思维树。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-19&quot;&gt;推理与行动（ReAct）&lt;a class=&quot;zola-anchor&quot; href=&quot;#-19&quot; aria-label=&quot;Anchor link for: -19&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;推理与行动（ReAct）提示是一种范式，通过结合自然语言推理和外部工具（搜索、代码解释器等），让大语言模型解决复杂任务，允许模型执行动作（如与外部API交互获取信息），是智能体建模的第一步。&lt;&#x2F;p&gt;
&lt;p&gt;ReAct模仿人类在现实世界的操作，我们通过语言推理并采取行动获取信息。ReAct在多种领域表现优于其他提示工程方法。&lt;&#x2F;p&gt;
&lt;p&gt;ReAct通过推理和行动的思想-行动循环工作。模型先推理问题，生成行动计划，然后执行计划中的行动并观察结果。模型用观察结果更新推理，生成新计划，循环直到解决问题。&lt;&#x2F;p&gt;
&lt;p&gt;要实际操作，需写代码。代码片段1用Python的langchain框架，结合VertexAI（google-cloud-aiplatform）和google-search-results包。&lt;&#x2F;p&gt;
&lt;p&gt;运行示例需从https:&#x2F;&#x2F;serpapi.com&#x2F;manage-api-key 创建免费SerpAPI密钥，并设置环境变量SERPAPI_API_KEY。&lt;&#x2F;p&gt;
&lt;p&gt;接下来写Python代码，任务是让模型计算：Metallica乐队成员有多少孩子。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Python&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;langchain.agents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;load_tools
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;langchain.agents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;initialize_agent
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;langchain.agents &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;AgentType
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;langchain.llms &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;VertexAI
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;prompt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Metallica乐队成员有多少孩子？&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;llm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;VertexAI&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;temperature&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;tools &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;load_tools&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;([&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;serpapi&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;llm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;llm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;agent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initialize_agent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tools, llm,
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;agent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;AgentType.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ZERO_SHOT_REACT_DESCRIPTION&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;verbose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;agent.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;prompt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;代码片段1. 用LangChain和VertexAI创建ReAct智能体&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;代码片段2展示结果。ReAct进行了五次搜索链。模型通过抓取谷歌搜索结果找出乐队成员，然后列出观察结果，链式思考下一次搜索。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;gt; 进入新的AgentExecutor链...
&lt;&#x2F;span&gt;&lt;span&gt;Metallica有4名成员。
&lt;&#x2F;span&gt;&lt;span&gt;行动：搜索
&lt;&#x2F;span&gt;&lt;span&gt;行动输入：James Hetfield有多少孩子？
&lt;&#x2F;span&gt;&lt;span&gt;观察：三个孩子
&lt;&#x2F;span&gt;&lt;span&gt;思考：1&#x2F;4 Metallica成员有3个孩子
&lt;&#x2F;span&gt;&lt;span&gt;行动：搜索
&lt;&#x2F;span&gt;&lt;span&gt;行动输入：Lars Ulrich有多少孩子？
&lt;&#x2F;span&gt;&lt;span&gt;观察：3个
&lt;&#x2F;span&gt;&lt;span&gt;思考：2&#x2F;4 Metallica成员有6个孩子
&lt;&#x2F;span&gt;&lt;span&gt;行动：搜索
&lt;&#x2F;span&gt;&lt;span&gt;行动输入：Kirk Hammett有多少孩子？
&lt;&#x2F;span&gt;&lt;span&gt;观察：Hammett与第二任妻子Lani自1998年结婚。他们有两个儿子，Angel（2006年9月29日生）和Vincenzo（2008年6月28日生）。
&lt;&#x2F;span&gt;&lt;span&gt;思考：3&#x2F;4 Metallica成员有8个孩子
&lt;&#x2F;span&gt;&lt;span&gt;行动：搜索
&lt;&#x2F;span&gt;&lt;span&gt;行动输入：Robert Trujillo有多少孩子？
&lt;&#x2F;span&gt;&lt;span&gt;观察：2个
&lt;&#x2F;span&gt;&lt;span&gt;思考：4&#x2F;4 Metallica成员有10个孩子
&lt;&#x2F;span&gt;&lt;span&gt;最终答案：10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;代码片段2&lt;&#x2F;strong&gt; 计算出Metallica有四名成员，逐个搜索成员的孩子总数，最后返回总计10个孩子。&lt;&#x2F;p&gt;
&lt;p&gt;ReAct提示需持续发送之前的提示&#x2F;回答（并修剪多余内容），并为模型设置适当示例&#x2F;指令。请参考GoogleCloudPlatform Github上的笔记本，展示更详细的模型输入输出示例。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-20&quot;&gt;自动提示工程&lt;a class=&quot;zola-anchor&quot; href=&quot;#-20&quot; aria-label=&quot;Anchor link for: -20&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;你可能意识到写提示很复杂。如果能自动化（写提示生成提示）不是很好吗？确实有方法：自动提示工程（APE）。这种方法不仅减少人工输入，还提升模型在多种任务中的表现。&lt;&#x2F;p&gt;
&lt;p&gt;你用模型生成更多提示，评估它们，调整好的提示，重复此过程。&lt;&#x2F;p&gt;
&lt;p&gt;例如，自动提示工程可用于训练乐队T恤网店的聊天机器人，找出客户订购T恤的各种表达方式。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;编写生成输出变体的提示。本例用gemini-pro生成10个指令，见表15：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;表15. 用大语言模型生成提示&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提示&lt;&#x2F;th&gt;&lt;th&gt;我们有一个乐队T恤网店，为训练聊天机器人，需各种订购方式：“一件Metallica T恤，S码”。生成10个语义相同但表达不同的变体。&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;1. 我想买一件Metallica T恤，小码。2. 能订一件小码Metallica T恤吗？3. 我想买一件小码Metallica T恤。4. 一件小码Metallica T恤，谢谢。5. 我想要一件小码Metallica T恤。6. 我想订一件小码Metallica T恤。7. 小码Metallica T恤，来一件。8. 我在找一件小码Metallica T恤。9. 能给我一件小码Metallica T恤吗？10. 一件小码Metallica T恤，拜托。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;根据选定指标评估所有候选指令，比如用BLEU或ROUGE评分。&lt;&#x2F;li&gt;
&lt;li&gt;选择得分最高的候选指令，作为最终提示用于应用或聊天机器人。你也可以调整选定提示再次评估。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;-21&quot;&gt;代码提示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-21&quot; aria-label=&quot;Anchor link for: -21&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Gemini主要聚焦文本提示，包括返回代码的提示。去Vertex AI Studio测试代码示例。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-22&quot;&gt;编写代码的提示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-22&quot; aria-label=&quot;Anchor link for: -22&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;Gemini能扮演开发者，帮你用任何编程语言写代码，加速开发过程。&lt;&#x2F;p&gt;
&lt;p&gt;假设你的电脑上有一个文件夹，里面有数百个文件需要重命名。手动改名太费时间。你会点Bash，可以写脚本自动化，但也挺花时间。试试写提示。你可以在公开的Gemini聊天机器人上写提示，或为保密起见，在Google Cloud账户中用Vertex AI Studio。后者优势是可以配置温度等。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表16. 用Gemini编写代码&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;&#x2F;th&gt;&lt;th&gt;1_bash_rename_files_in_folder&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;目标&lt;&#x2F;td&gt;&lt;td&gt;编写Bash代码提示，重命名文件夹内文件&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;gemini-pro&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;0.1&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;1024&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;无&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;编写Bash代码片段，提示输入文件夹名称，然后将文件夹内所有文件名前加上“draft”。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;```bash&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;#!&#x2F;bin&#x2F;bash&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h1 id=&quot;-23&quot;&gt;提示输入文件夹名称&lt;a class=&quot;zola-anchor&quot; href=&quot;#-23&quot; aria-label=&quot;Anchor link for: -23&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;echo “Enter the folder name: “
read folder_name&lt;&#x2F;p&gt;
&lt;h1 id=&quot;-24&quot;&gt;检查文件夹是否存在&lt;a class=&quot;zola-anchor&quot; href=&quot;#-24&quot; aria-label=&quot;Anchor link for: -24&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;if [ ! -d “$folder_name” ]; then
echo “Folder does not exist.”
exit 1
fi&lt;&#x2F;p&gt;
&lt;h1 id=&quot;-25&quot;&gt;获取文件夹内文件列表&lt;a class=&quot;zola-anchor&quot; href=&quot;#-25&quot; aria-label=&quot;Anchor link for: -25&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;files=( “$folder_name”&#x2F;* )&lt;&#x2F;p&gt;
&lt;h1 id=&quot;-26&quot;&gt;为每个文件重命名，加前缀“draft”&lt;a class=&quot;zola-anchor&quot; href=&quot;#-26&quot; aria-label=&quot;Anchor link for: -26&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;for file in “${files[@]}”; do
new_file_name=“draft_$(basename “$file”)“
mv “$file” “$new_file_name”
done
echo “Files renamed successfully.”&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;| | |&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-| | | &quot;&gt;&lt;code class=&quot;language-| | |&quot; data-lang=&quot;| | |&quot;&gt;&lt;span&gt;代码看起来不错，还有注释！但由于大语言模型不能推理，重复训练数据，需先阅读和测试代码。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;来试试效果，用一个只有几个文件的测试文件夹，需从filename.txt改为draft_filename.txt。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1. 复制表16输出（去掉```bash```包装），粘贴到新文件“rename_files.sh”。
&lt;&#x2F;span&gt;&lt;span&gt;2. 打开终端，输入：`. rename_files.sh`。提示输入文件夹名称，如“test”，回车。
&lt;&#x2F;span&gt;&lt;span&gt;3. 脚本运行顺利，显示“Files renamed successfully.”。查看test文件夹，所有文件完美改为draft_filename.txt。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;成功了！
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### 解释代码的提示
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;作为开发者，团队合作需读别人代码。Gemini也能帮忙。拿表16的代码，去掉注释，让模型解释发生了什么，见表17：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;**表17. 解释代码的提示**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;| 名称 | 1_bash_explain_the_code | | |
&lt;&#x2F;span&gt;&lt;span&gt;|------|-------------------|-|-|
&lt;&#x2F;span&gt;&lt;span&gt;| 目标 | 编写提示解释Bash代码 | | |
&lt;&#x2F;span&gt;&lt;span&gt;| 模型 | gemini-pro | | |
&lt;&#x2F;span&gt;&lt;span&gt;| 温度 | 0.1 | 令牌限制 | 1024 |
&lt;&#x2F;span&gt;&lt;span&gt;| Top-K | 无 | Top-P | 1 |
&lt;&#x2F;span&gt;&lt;span&gt;| 提示 | 解释以下Bash代码：
&lt;&#x2F;span&gt;&lt;span&gt;```bash
&lt;&#x2F;span&gt;&lt;span&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;Enter the folder name: &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;read folder_name
&lt;&#x2F;span&gt;&lt;span&gt;if [ ! -d &amp;quot;$folder_name&amp;quot; ]; then
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Folder does not exist.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    exit 1
&lt;&#x2F;span&gt;&lt;span&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;files=( &amp;quot;$folder_name&amp;quot;&#x2F;* )
&lt;&#x2F;span&gt;&lt;span&gt;for file in &amp;quot;${files[@]}&amp;quot;; do
&lt;&#x2F;span&gt;&lt;span&gt;    new_file_name=&amp;quot;draft_$(basename &amp;quot;$file&amp;quot;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    mv &amp;quot;$file&amp;quot; &amp;quot;$new_file_name&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;done
&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;Files renamed successfully.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;``` | | |
&lt;&#x2F;span&gt;&lt;span&gt;| 输出 | 这个Bash脚本执行以下任务：  
&lt;&#x2F;span&gt;&lt;span&gt;1. **用户输入**：用`echo`和`read`命令提示用户输入文件夹名称，存储在`folder_name`变量。  
&lt;&#x2F;span&gt;&lt;span&gt;2. **文件夹存在检查**：用`[! -d &amp;quot;$folder_name&amp;quot;]`检查文件夹是否存在。若不存在，显示“Folder does not exist.”并以退出码1退出。  
&lt;&#x2F;span&gt;&lt;span&gt;3. **文件列举**：用`files=( &amp;quot;$folder_name&amp;quot;&#x2F;* )`列出文件夹内所有文件，存储在`files`数组。  
&lt;&#x2F;span&gt;&lt;span&gt;4. **文件重命名**：用`for`循环遍历`files`数组，为每个文件生成新名称，用`new_file_name=&amp;quot;draft_$(basename &amp;quot;$file&amp;quot;)&amp;quot;`加前缀“draft_”。用`mv`命令重命名文件。  
&lt;&#x2F;span&gt;&lt;span&gt;5. **成功消息**：打印“Files renamed successfully.” | | |
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;#### 翻译代码的提示
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;表16的Bash代码运行良好。但如果能提示输入文件名前缀，脚本会更通用，理想情况下作为一个带UI的独立应用。Python比Bash更适合（Web）应用。大语言模型可帮代码从一种语言翻译到另一种，见表18：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;**表18. 从Bash到Python翻译代码的提示**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;| 名称 | 1_python_rename_files | | |
&lt;&#x2F;span&gt;&lt;span&gt;|------|-------------------|-|-|
&lt;&#x2F;span&gt;&lt;span&gt;| 目标 | 编写提示将Bash代码翻译为Python | | |
&lt;&#x2F;span&gt;&lt;span&gt;| 模型 | gemini-pro | | |
&lt;&#x2F;span&gt;&lt;span&gt;| 温度 | 0.1 | 令牌限制 | 1024 |
&lt;&#x2F;span&gt;&lt;span&gt;| Top-K | 无 | Top-P | 1 |
&lt;&#x2F;span&gt;&lt;span&gt;| 提示 | 将以下Bash代码翻译为Python片段：
&lt;&#x2F;span&gt;&lt;span&gt;```bash
&lt;&#x2F;span&gt;&lt;span&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;Enter the folder name: &amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;read folder_name
&lt;&#x2F;span&gt;&lt;span&gt;if [ ! -d &amp;quot;$folder_name&amp;quot; ]; then
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Folder does not exist.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    exit 1
&lt;&#x2F;span&gt;&lt;span&gt;fi
&lt;&#x2F;span&gt;&lt;span&gt;files=( &amp;quot;$folder_name&amp;quot;&#x2F;* )
&lt;&#x2F;span&gt;&lt;span&gt;for file in &amp;quot;${files[@]}&amp;quot;; do
&lt;&#x2F;span&gt;&lt;span&gt;    new_file_name=&amp;quot;draft_$(basename &amp;quot;$file&amp;quot;)&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    mv &amp;quot;$file&amp;quot; &amp;quot;$new_file_name&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;done
&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;Files renamed successfully.&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;shutil
&lt;&#x2F;span&gt;&lt;span&gt;``` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| | |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;输出 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt; ```python
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 获取文件夹内文件列表
&lt;&#x2F;span&gt;&lt;span&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;listdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 遍历文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 用前缀“draft_”创建新文件名
&lt;&#x2F;span&gt;&lt;span&gt;    new_file_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;draft_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 将文件移到新名称
&lt;&#x2F;span&gt;&lt;span&gt;    shutil.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name, file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name, new_file_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;``` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| | |
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;阅读并审查代码。复制提示输出，粘贴到新文件file_renamer.py。打开终端，执行`python file_renamer.py`测试代码。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;注意&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;：在Vertex AI的Language Studio中提示Python代码需点击“Markdown”按钮，否则返回纯文本，缺失Python代码所需缩进。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#### 调试与审查代码的提示
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;对表18代码手动修改，要求用户输入文件名前缀，并将前缀转为大写。见代码片段3，但出错了，报Python错误！
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;Python&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;```python
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;shutil
&lt;&#x2F;span&gt;&lt;span&gt;folder_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter the folder name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter the string to prepend to the filename: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Folder does not exist.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;listdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    new_filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    shutil.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name, file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name, new_file_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Files renamed successfully.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;错误如下：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;Traceback (most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File “&#x2F;Users&#x2F;leeboonstra&#x2F;Documents&#x2F;test_folder&#x2F;rename_files.py”, line 7,
&lt;&#x2F;span&gt;&lt;span&gt;    in &amp;lt;module&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    text = toUpperCase(prefix)
&lt;&#x2F;span&gt;&lt;span&gt;NameError: name ‘toUpperCase’ is not defined
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;代码片段4. 我搞砸了Python代码&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看看能不能让大语言模型调试和审查代码，见表19：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表19. 调试和审查Python代码的提示&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;&#x2F;th&gt;&lt;th&gt;1_python_debug_code&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;目标&lt;&#x2F;td&gt;&lt;td&gt;编写提示调试和审查Python代码&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;gemini-pro&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;0.1&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;1024&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;无&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;以下Python代码报错：&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;Traceback (most recent call last):
&lt;&#x2F;span&gt;&lt;span&gt;  File &amp;quot;&#x2F;Users&#x2F;leeboonstra&#x2F;Documents&#x2F;test_folder&#x2F;rename_files.py&amp;quot;, line 7,
&lt;&#x2F;span&gt;&lt;span&gt;    in &amp;lt;module&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    text = toUpperCase(prefix)
&lt;&#x2F;span&gt;&lt;span&gt;NameError: name &amp;#39;toUpperCase&amp;#39; is not defined
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;调试问题并解释如何改进代码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;shutil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 获取用户输入文件夹名称
&lt;&#x2F;span&gt;&lt;span&gt;folder_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter the folder name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter the string to prepend to the filename: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;toUpperCase&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 检查文件夹是否存在
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Folder does not exist.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 获取文件夹内文件列表
&lt;&#x2F;span&gt;&lt;span&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;listdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 遍历文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 用前缀创建新文件名
&lt;&#x2F;span&gt;&lt;span&gt;    new_filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;text&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 将文件移到新名称
&lt;&#x2F;span&gt;&lt;span&gt;    shutil.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name, file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name, new_file_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 打印成功消息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Files renamed successfully.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;``` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| | |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;输出 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span&gt;代码调用`toUpperCase`函数将前缀转为大写，但该函数未定义。修复方法是用字符串类的`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;upper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;`方法将字符串转为大写。修改后的代码如下：
&lt;&#x2F;span&gt;&lt;span&gt;```python
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;shutil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 获取用户输入文件夹名称
&lt;&#x2F;span&gt;&lt;span&gt;folder_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter the folder name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter the string to prepend to the filename: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;text &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;prefix.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;upper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 检查文件夹是否存在
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Folder does not exist.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此外，代码还有其他改进空间：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;新文件名未保留文件扩展名。最好提取原始文件名扩展名，附加到新文件名。&lt;&#x2F;li&gt;
&lt;li&gt;代码假设文件夹名称无空格。最好处理空格，替换为下划线或连字符。&lt;&#x2F;li&gt;
&lt;li&gt;用&lt;code&gt;f&lt;&#x2F;code&gt;字符串插值比传统&lt;code&gt;+&lt;&#x2F;code&gt;操作符更可读简洁。&lt;&#x2F;li&gt;
&lt;li&gt;代码未处理重命名过程中的错误。最好用&lt;code&gt;try..except&lt;&#x2F;code&gt;包裹&lt;code&gt;shutil.move&lt;&#x2F;code&gt;调用。&lt;br &#x2F;&gt;
改进代码如下：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;shutil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 获取用户输入文件夹名称
&lt;&#x2F;span&gt;&lt;span&gt;folder_name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter the folder name: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;prefix &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Enter the string to prepend to the filename: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 检查文件夹是否存在
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if not &lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Folder does not exist.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 获取文件夹内文件列表
&lt;&#x2F;span&gt;&lt;span&gt;files &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;listdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 遍历文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;file &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;files&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 获取文件扩展名
&lt;&#x2F;span&gt;&lt;span&gt;    ext &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;splitext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 用前缀和扩展名创建新文件名
&lt;&#x2F;span&gt;&lt;span&gt;    new_filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;prefix&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;splitext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}{&lt;&#x2F;span&gt;&lt;span&gt;ext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 构建原始和新文件的完整路径
&lt;&#x2F;span&gt;&lt;span&gt;    old_path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name, file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    new_path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;os.path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;folder_name, new_filename&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 尝试移动文件
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        shutil.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;move&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;old_path, new_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;移动文件&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;时出错：&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 打印成功消息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Files renamed successfully.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这些改进使代码更稳健灵活，更易读懂。（因达到令牌限制，回答被截断。如需更长回答，增加令牌限制。） | | |&lt;&#x2F;p&gt;
&lt;p&gt;太棒了！不仅告诉我如何解决问题，还发现代码其他错误并提供解决方法，最后还给出一般改进建议。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-27&quot;&gt;多模态提示呢？&lt;a class=&quot;zola-anchor&quot; href=&quot;#-27&quot; aria-label=&quot;Anchor link for: -27&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;代码提示仍使用常规大语言模型。多模态提示是另一回事，指使用多种输入格式引导模型，而非仅靠文本。可能包括文本、图像、音频、代码等组合，取决于模型能力和任务。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-28&quot;&gt;最佳实践&lt;a class=&quot;zola-anchor&quot; href=&quot;#-28&quot; aria-label=&quot;Anchor link for: -28&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;找到合适的提示需要反复尝试。Vertex AI的Language Studio是测试提示的好地方，可试用不同模型。&lt;&#x2F;p&gt;
&lt;p&gt;以下最佳实践帮你成为提示工程专家。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-29&quot;&gt;提供示例&lt;a class=&quot;zola-anchor&quot; href=&quot;#-29&quot; aria-label=&quot;Anchor link for: -29&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;最重要的实践是在提示中提供单样本或少样本示例。这很有效，因为示例是强大的教学工具，展示期望输出或类似回答，让模型学习并调整生成，匹配你的预期。这就像给模型一个参照点，提升准确性、风格和语气。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-30&quot;&gt;保持简单&lt;a class=&quot;zola-anchor&quot; href=&quot;#-30&quot; aria-label=&quot;Anchor link for: -30&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;提示应简洁、清晰，易于你和模型理解。经验法则是：如果你觉得提示已复杂，模型可能也觉得复杂。避免复杂语言和无关信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;之前：&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
我现在在纽约，想知道更多好玩的地方。我带两个3岁小孩。度假期间该去哪儿？&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;重写后：&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
扮演游客向导，介绍纽约曼哈顿适合3岁小孩的景点。&lt;&#x2F;p&gt;
&lt;p&gt;尽量用描述动作的动词。示例动词：&lt;br &#x2F;&gt;
扮演、分析、分类、对比、比较、创建、描述、定义、评估、提取、查找、生成、识别、列举、测量、组织、解析、挑选、预测、提供、排名、推荐、返回、检索、重写、选择、展示、排序、总结、翻译、编写。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-31&quot;&gt;明确输出要求&lt;a class=&quot;zola-anchor&quot; href=&quot;#-31&quot; aria-label=&quot;Anchor link for: -31&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;明确期望输出。简短指令可能不够引导模型，或过于泛泛。通过系统或上下文提示提供具体细节，帮模型聚焦相关内容，提升准确性。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;正确：&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
生成一篇关于五大游戏主机的3段博客，内容需信息丰富、引人入胜，风格轻松对话化。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;错误：&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
生成一篇关于游戏主机的博客。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-32&quot;&gt;优先使用指令而非约束&lt;a class=&quot;zola-anchor&quot; href=&quot;#-32&quot; aria-label=&quot;Anchor link for: -32&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;指令和约束用于引导模型输出：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;指令&lt;&#x2F;strong&gt;：明确指定期望的格式、风格或内容，告诉模型该做什么。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;约束&lt;&#x2F;strong&gt;：设定回答的限制或边界，告诉模型不该做什么。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;研究表明，优先用正向指令比过多依赖约束更有效。这与人类更喜欢正向指导而非禁止清单一致。&lt;&#x2F;p&gt;
&lt;p&gt;指令直接传达期望结果，约束可能让模型猜测允许的内容。指令提供灵活性，鼓励在定义边界内的创意；约束可能限制模型潜力，且约束列表可能互相冲突。&lt;&#x2F;p&gt;
&lt;p&gt;约束在特定场景仍有价值，如防止生成有害或偏见内容，或需严格输出格式或风格时。&lt;&#x2F;p&gt;
&lt;p&gt;尽可能用正向指令：别告诉模型不做什么，告诉它做什么。避免混淆，提升输出准确性。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;正确：&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
生成一篇关于五大游戏主机的1段博客，仅讨论主机、制造商、年份和总销量。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;错误：&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
生成一篇关于五大游戏主机的1段博客，不要列出游戏名称。&lt;&#x2F;p&gt;
&lt;p&gt;最佳实践是优先用指令，清晰说明期望，仅在安全、清晰或特定要求时用约束。实验迭代，测试指令和约束组合，找到适合任务的方法，并记录。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-33&quot;&gt;控制最大令牌长度&lt;a class=&quot;zola-anchor&quot; href=&quot;#-33&quot; aria-label=&quot;Anchor link for: -33&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;控制生成回答长度，可在配置中设最大令牌限制，或在提示中明确指定长度。例如：&lt;br &#x2F;&gt;
“用推文长度解释量子物理。”&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-34&quot;&gt;在提示中使用变量&lt;a class=&quot;zola-anchor&quot; href=&quot;#-34&quot; aria-label=&quot;Anchor link for: -34&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;为复用提示并增加动态性，在提示中使用变量，可根据不同输入更改。例如表20，提示给出城市事实。用变量替代硬编码城市名称。变量节省时间，避免重复。若多提示需同一信息，可存为变量，在各提示中引用。在应用集成提示时特别有用。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表20. 提示中使用变量&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;提示&lt;&#x2F;th&gt;&lt;th&gt;变量 {city} = “Amsterdam” 提示&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;你是旅行向导，告诉我关于{city}的一个事实。阿姆斯特丹充满运河、桥梁和狭窄街道，是体验丰富历史、文化和夜生活的绝佳之地。&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;-35&quot;&gt;尝试不同的输入格式与写作风格&lt;a class=&quot;zola-anchor&quot; href=&quot;#-35&quot; aria-label=&quot;Anchor link for: -35&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;不同模型、配置、提示格式、措辞和提交方式会产生不同结果。实验提示属性如风格、措辞和类型（零样本、少样本、系统提示）很重要。&lt;&#x2F;p&gt;
&lt;p&gt;例如，生成关于Sega Dreamcast革命性主机的文本，可表述为问题、陈述或指令，生成不同输出：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;问题：Sega Dreamcast是什么，为何如此革命？&lt;&#x2F;li&gt;
&lt;li&gt;陈述：Sega Dreamcast是世嘉1999年发布的第六代游戏主机，它……&lt;&#x2F;li&gt;
&lt;li&gt;指令：写一段描述Sega Dreamcast主机并解释其革命性的内容。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;-36&quot;&gt;在少样本分类任务中混合类别&lt;a class=&quot;zola-anchor&quot; href=&quot;#-36&quot; aria-label=&quot;Anchor link for: -36&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;一般来说，少样本示例顺序影响不大。但在分类任务中，确保示例中可能回答类别混合，避免过拟合示例顺序。混合类别让模型学习每个类别的关键特征，而非记忆顺序，提升对未见过数据的稳健性和泛化能力。&lt;&#x2F;p&gt;
&lt;p&gt;经验法则是从6个少样本示例开始，测试准确性。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-37&quot;&gt;适应模型更新&lt;a class=&quot;zola-anchor&quot; href=&quot;#-37&quot; aria-label=&quot;Anchor link for: -37&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;关注模型架构变化、数据添加和能力提升。尝试新模型版本，调整提示利用新功能。Vertex AI Studio是存储、测试和记录提示版本的好工具。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-38&quot;&gt;尝试不同的输出格式&lt;a class=&quot;zola-anchor&quot; href=&quot;#-38&quot; aria-label=&quot;Anchor link for: -38&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;除输入格式外，考虑实验输出格式。对于非创意任务如提取、选择、解析、排序、排名或分类数据，尝试返回JSON或XML等结构化格式。&lt;&#x2F;p&gt;
&lt;p&gt;返回JSON对象提取数据有几个好处：无需手动创建JSON，数据可按序返回（处理日期时间对象方便），最重要的是，提示JSON格式迫使模型创建结构，减少幻觉。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;JSON输出好处总结：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;始终统一风格&lt;&#x2F;li&gt;
&lt;li&gt;聚焦所需数据&lt;&#x2F;li&gt;
&lt;li&gt;减少幻觉&lt;&#x2F;li&gt;
&lt;li&gt;提供数据类型&lt;&#x2F;li&gt;
&lt;li&gt;可排序&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;表4（少样本提示部分）展示了如何返回结构化输出。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-39&quot;&gt;JSON修复&lt;a class=&quot;zola-anchor&quot; href=&quot;#-39&quot; aria-label=&quot;Anchor link for: -39&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;JSON格式输出有很多优势，但也有缺点。JSON的结构化特性虽便于解析和应用，但比纯文本需更多令牌，导致处理时间长、成本高。JSON冗长可能耗尽输出窗口，尤其当因令牌限制截断时，常导致无效JSON，缺少闭合括号或方括号，输出不可用。幸好，json-repair库（PyPI上有）可自动修复不完整或格式错误的JSON对象，是处理模型生成JSON截断问题的关键工具。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-40&quot;&gt;使用模式（Schemas）&lt;a class=&quot;zola-anchor&quot; href=&quot;#-40&quot; aria-label=&quot;Anchor link for: -40&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;结构化JSON作为输出很棒，如本文多次提到。但输入呢？JSON适合结构化模型生成输出，也可用于结构化输入。这里用到JSON模式。JSON模式定义JSON输入的预期结构和数据类型。提供模式给模型清晰的数据蓝图，帮模型聚焦相关信息，减少误解风险。模式还能建立数据间关系，通过日期或时间戳字段让模型“时间感知”。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;简单示例：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;假设你要用模型为电商目录生成产品描述。不是提供自由格式的文本描述，而是用JSON模式定义产品属性：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;object&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;产品名称&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;产品类别&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;price&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;number&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;产品价格&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;array&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;      &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;产品关键特性&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;release_date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;format&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;产品发布日期&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;然后提供符合模式的产品数据JSON对象：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Wireless Headphones&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Electronics&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;price&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;99.99&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;features&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Noise cancellation&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bluetooth 5.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;20-hour battery life&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;release_date&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;2023-10-27&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过预处理数据，仅提供模式和数据，而非完整文档，模型清楚产品属性，包括发布日期，更可能生成准确相关描述。结构化输入引导模型关注相关字段，处理大量数据或集成复杂应用时尤为有用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-41&quot;&gt;与其他提示工程师一起实验&lt;a class=&quot;zola-anchor&quot; href=&quot;#-41&quot; aria-label=&quot;Anchor link for: -41&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;如果你需要尝试写好提示，可找多人一起尝试。若都遵循最佳实践（本章列出），不同提示尝试间会有性能差异。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-42&quot;&gt;思维链最佳实践&lt;a class=&quot;zola-anchor&quot; href=&quot;#-42&quot; aria-label=&quot;Anchor link for: -42&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;对于思维链提示，推理后放答案是必须的，因为推理生成改变了模型预测最终答案时的令牌。&lt;&#x2F;p&gt;
&lt;p&gt;用思维链和自我一致性需能从提示中提取最终答案，与推理分开。&lt;&#x2F;p&gt;
&lt;p&gt;思维链提示设温度为0。&lt;br &#x2F;&gt;
思维链基于贪婪解码，根据模型分配的最高概率预测下一个词。推理得出最终答案通常只有一个正确答案，因此温度应始终设为0。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-43&quot;&gt;记录各种提示尝试&lt;a class=&quot;zola-anchor&quot; href=&quot;#-43&quot; aria-label=&quot;Anchor link for: -43&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;之前提到过，但再强调不够：详细记录提示尝试，长期学习哪些有效哪些无效。&lt;&#x2F;p&gt;
&lt;p&gt;提示输出因模型、采样设置甚至同模型不同版本而异。即使对同一模型相同提示，句子格式和措辞也可能略有不同（例如，若两个令牌概率相同，可能随机打破平局，影响后续预测令牌）。&lt;&#x2F;p&gt;
&lt;p&gt;建议用Google Sheet创建表21模板。优点是保留完整记录，便于未来重启提示工作（短暂停顿后你会惊讶自己忘了多少），测试不同模型版本的提示性能，调试未来错误。&lt;&#x2F;p&gt;
&lt;p&gt;除表中字段，建议跟踪提示版本（迭代）、结果是否OK&#x2F;不OK&#x2F;有时OK，以及反馈字段。若用Vertex AI Studio，保存提示（用文档中相同名称和版本），在表中跟踪保存提示的超链接，随时可重新运行。&lt;&#x2F;p&gt;
&lt;p&gt;在检索增强生成（RAG）系统中，还应记录影响提示内容插入的具体RAG系统细节，包括查询、分块设置、分块输出等信息。&lt;&#x2F;p&gt;
&lt;p&gt;提示接近完美后，放入项目代码库。在代码库中，提示与代码分开存储，便于维护。理想情况下，提示是运营系统的一部分，作为提示工程师，应依赖自动化测试和评估程序，了解提示对任务的泛化能力。&lt;&#x2F;p&gt;
&lt;p&gt;提示工程是迭代过程。编写和测试不同提示，分析记录结果。根据模型表现优化提示。不断实验直到获得理想输出。更换模型或配置时，回头实验之前用过的提示。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;表21. 记录提示的模板&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;名称&lt;&#x2F;th&gt;&lt;th&gt;[提示名称和版本]&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;目标&lt;&#x2F;td&gt;&lt;td&gt;[一句解释尝试目标]&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;模型&lt;&#x2F;td&gt;&lt;td&gt;[使用的模型名称和版本]&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;温度&lt;&#x2F;td&gt;&lt;td&gt;[0-1之间的值]&lt;&#x2F;td&gt;&lt;td&gt;令牌限制&lt;&#x2F;td&gt;&lt;td&gt;[数字]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Top-K&lt;&#x2F;td&gt;&lt;td&gt;[数字]&lt;&#x2F;td&gt;&lt;td&gt;Top-P&lt;&#x2F;td&gt;&lt;td&gt;[数字]&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;提示&lt;&#x2F;td&gt;&lt;td&gt;[完整提示内容]&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;输出&lt;&#x2F;td&gt;&lt;td&gt;[输出或多个输出内容]&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;-44&quot;&gt;总结&lt;a class=&quot;zola-anchor&quot; href=&quot;#-44&quot; aria-label=&quot;Anchor link for: -44&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;这篇白皮书讨论了提示工程，介绍了多种提示技巧，包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;零样本提示&lt;&#x2F;li&gt;
&lt;li&gt;少样本提示&lt;&#x2F;li&gt;
&lt;li&gt;系统提示&lt;&#x2F;li&gt;
&lt;li&gt;角色提示&lt;&#x2F;li&gt;
&lt;li&gt;上下文提示&lt;&#x2F;li&gt;
&lt;li&gt;回溯提示&lt;&#x2F;li&gt;
&lt;li&gt;思维链&lt;&#x2F;li&gt;
&lt;li&gt;自我一致性&lt;&#x2F;li&gt;
&lt;li&gt;思维树&lt;&#x2F;li&gt;
&lt;li&gt;ReAct&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;还探讨了如何自动化提示。&lt;&#x2F;p&gt;
&lt;p&gt;白皮书讨论了生成AI的挑战，如提示不足可能导致的问题。最后分享了成为更好提示工程师的最佳实践。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-45&quot;&gt;注释&lt;a class=&quot;zola-anchor&quot; href=&quot;#-45&quot; aria-label=&quot;Anchor link for: -45&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;Google, 2023, Gemini by Google. 可用：https:&#x2F;&#x2F;gemini.google.com&lt;&#x2F;li&gt;
&lt;li&gt;Google, 2024, Gemini for Google Workspace Prompt Guide. 可用：https:&#x2F;&#x2F;inthecloud.withgoogle.com&#x2F;gemini-for-google-workspace-prompt-guide&#x2F;dl-cd.html&lt;&#x2F;li&gt;
&lt;li&gt;Google Cloud, 2023, Introduction to Prompting. 可用：https:&#x2F;&#x2F;cloud.google.com&#x2F;vertex-ai&#x2F;generative-ai&#x2F;docs&#x2F;learn&#x2F;prompts&#x2F;introduction-prompt-design&lt;&#x2F;li&gt;
&lt;li&gt;Google Cloud, 2023, Text Model Request Body: Top-P &amp;amp; Top-K sampling methods. 可用：https:&#x2F;&#x2F;cloud.google.com&#x2F;vertex-ai&#x2F;docs&#x2F;generative-ai&#x2F;model-reference&#x2F;text#request_body&lt;&#x2F;li&gt;
&lt;li&gt;Wei, J., et al., 2023, Zero Shot - Fine Tuned language models are zero shot learners. 可用：https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2109.01652.pdf&lt;&#x2F;li&gt;
&lt;li&gt;Google Cloud, 2023, Google Cloud Model Garden. 可用：https:&#x2F;&#x2F;cloud.google.com&#x2F;model-garden&lt;&#x2F;li&gt;
&lt;li&gt;Brown, T., et al., 2023, Few Shot - Language Models are Few Shot learners. 可用：https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2005.14165.pdf&lt;&#x2F;li&gt;
&lt;li&gt;Zheng, L., et al., 2023, Take a Step Back: Evoking Reasoning via Abstraction in Large Language Models. 可用：https:&#x2F;&#x2F;openreview.net&#x2F;pdf?id=3bq3jsvcQ1&lt;&#x2F;li&gt;
&lt;li&gt;Wei, J., et al., 2023, Chain of Thought Prompting. 可用：https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2201.11903.pdf&lt;&#x2F;li&gt;
&lt;li&gt;Google Cloud Platform, 2023, Chain of Thought and React. 可用：https:&#x2F;&#x2F;github.com&#x2F;GoogleCloudPlatform&#x2F;generative-ai&#x2F;blob&#x2F;main&#x2F;language&#x2F;prompts&#x2F;examples&#x2F;chain_of_thought_react.ipynb&lt;&#x2F;li&gt;
&lt;li&gt;Wang, X., et al., 2023, Self Consistency Improves Chain of Thought reasoning in language models. 可用：https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2203.11171.pdf&lt;&#x2F;li&gt;
&lt;li&gt;Yao, S., et al., 2023, Tree of Thoughts: Deliberate Problem Solving with Large Language Models. 可用：https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2305.10601.pdf&lt;&#x2F;li&gt;
&lt;li&gt;Yao, S., et al., 2023, ReAct: Synergizing Reasoning and Acting in Language Models. 可用：https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2210.03629.pdf&lt;&#x2F;li&gt;
&lt;li&gt;Google Cloud Platform, 2023, Advance Prompting: Chain of Thought and React. 可用：https:&#x2F;&#x2F;github.com&#x2F;GoogleCloudPlatform&#x2F;applied-ai-engineering-samples&#x2F;blob&#x2F;main&#x2F;genai-on-vertex-ai&#x2F;advanced_prompting_training&#x2F;cot_react.ipynb&lt;&#x2F;li&gt;
&lt;li&gt;Zhou, C., et al., 2023, Automatic Prompt Engineering - Large Language Models are Human-Level Prompt Engineers. 可用：https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;2211.01910.pdf&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;PDF版本:微信公众号(我在副本写代码)回复“提示工程” 获取!&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>8款让你开发起飞的IntellijIDEA插件</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/8-kuan-rang-ni-kai-fa-qi-fei-de-intellijidea-cha-jian/</link>
          <guid>https://ilikexff.cn/8-kuan-rang-ni-kai-fa-qi-fei-de-intellijidea-cha-jian/</guid>
          <description xml:base="https://ilikexff.cn/8-kuan-rang-ni-kai-fa-qi-fei-de-intellijidea-cha-jian/">&lt;blockquote&gt;
&lt;p&gt;这篇文章主要针对Java开发工具是&lt;code&gt;IntellijIDEA&lt;&#x2F;code&gt;从开始破解它的那一刻起，就深深地爱上了他，从此一发不可收拾。至于为什么，用过的人都知道，不用的也可以点这里自行了解：&lt;a href=&quot;https:&#x2F;&#x2F;ilikexff.cn&#x2F;8-kuan-rang-ni-kai-fa-qi-fei-de-intellijidea-cha-jian&#x2F;www.baidu.com&quot;&gt;百度&lt;&#x2F;a&gt;。
&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;idea&#x2F;&quot;&gt;IntellijIDEA&lt;&#x2F;a&gt;有很强的可拓展性，支持插件化配置，也因此接触到了很多非常优秀的辅助插件，这里推荐一直在用的8款，附带简单的安装教程。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;aixcoder-code-complete&quot;&gt;AiXCoder Code Complete&lt;a class=&quot;zola-anchor&quot; href=&quot;#aixcoder-code-complete&quot; aria-label=&quot;Anchor link for: aixcoder-code-complete&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13076688598393936140-08b71d98.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这款插件，光看名称就能感觉到它的智能和强大。
AiXCoder 是一款非常强大的智能化代码提示补全工具，一个很重要的特色在于它支持本地环境，也就是说，没有网络的情况下也能正常预测你。方式也非常简单，不需要做什么复杂的配置即可轻松上手。
另外，值得一提的是，目前市场是又很多类似的代码提示与补全工具或者软件，但这是目前唯一一个基于&lt;strong&gt;深度神经网络&lt;&#x2F;strong&gt;，且完全本地化的代码补全工具。关于&lt;strong&gt;深度神经网络&lt;&#x2F;strong&gt;是啥想必也都略懂略懂～～～的吧。
最后，附上官网地址，里面有详细的介绍和视频演示。
&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.aixcoder.com&#x2F;#&#x2F;&quot;&gt;AiXcoder官网&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;Key Promoter X&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一款快捷键快速提示插，支持在idea开发界面中任何一个点击操作的快捷键生成和提示，你敲代码速度一定程度上取决于你键盘敲敲配合鼠标点点的熟练度。如果几乎所有鼠标点击操作用快捷键的方式替代，而你又刚好擅长驾驭键盘，那么这款插件很适合你。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2881034794486389884-7c6188ce.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;Material Theme UI&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17480725002073321022-31c0089e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;看名字就知道这是一款主题插件，idea自带了三种基本的主题配置，如果想要跟多个性化的配置，那么Material是很受欢迎的，Material内置了很多不同类型和搭配的主题模式，如果你英语还不错的话，也可以自己配置一个完全属于自己风格的主题来。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8685903376508098637-11ac82fd.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;Rainbow Brackets&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10274865555093291098-cd3ea0dd.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;彩虹括号，自动生成每一种不同颜色的括号，对于新手很友好。尽管是不同颜色，但在实际开发中，并不会给人那种眼花缭乱的困扰，值得一试。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;Ailibaba Java Coding Guidelines&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;阿里代码规范检查插件。
众所周知啊，阿里是使用Java语言开发最多的大厂，阿里的各种Java开发规范也是有很多公司用来做参考。
养成良好的编码习惯很重要，如果没有参考，这款插件可以协助你，支持实时的局部代码规范检查，你也可以进行全局检查，严格按照它的要求来规范开发，写得一手漂亮的代码指日可待。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2049717427295521188-ba45d34f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;Vuesion Theme&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;你没有看错，又来一款主题插件，和上那款不同的是，vuesion theme 主打轻量级，它更像是一款主题，而不是一个主题库，所以适合简约清新风格，也是我目前在用的一款主题。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3195618008727924720-04f377b9.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-5&quot;&gt;CodeGlance&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;再也不用羡慕VScode带的代码代码缩放滚动条了，有了这个插件，你也可以拥有同款。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17825842810567079625-22b8ee8e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-6&quot;&gt;LeetCode edit&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;leetcode刷题插件，你可以在idea直接查看leetcode的题库，并且在本地idea环境内解题。
支持运行和提交测试，可以说很舒服了。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12398614515731814516-2ffc52d8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-7&quot;&gt;怎么获取上面这些插件？&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;操作路径:file&amp;gt;settings&amp;gt;Plugins
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-731569826676576314-f6aa1dd7.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;
在搜索框进行搜索后点击安装即可。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-8&quot;&gt;正能量语录&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;del&gt;关于IntellijIDEA，如果你经济允许，请支持购买正版。&lt;&#x2F;del&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>AOP揭秘：切面编程的综合指南</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/aop-jie-mi-qie-mian-bian-cheng-de-zong-he-zhi-nan/</link>
          <guid>https://ilikexff.cn/aop-jie-mi-qie-mian-bian-cheng-de-zong-he-zhi-nan/</guid>
          <description xml:base="https://ilikexff.cn/aop-jie-mi-qie-mian-bian-cheng-de-zong-he-zhi-nan/">&lt;h2 id=&quot;pian-yi-kuai-su-ru-men&quot;&gt;篇一、快速入门&lt;a class=&quot;zola-anchor&quot; href=&quot;#pian-yi-kuai-su-ru-men&quot; aria-label=&quot;Anchor link for: pian-yi-kuai-su-ru-men&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-gai-nian-shu-yu-jie-xi&quot;&gt;1. 概念&amp;amp;术语解析&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-gai-nian-shu-yu-jie-xi&quot; aria-label=&quot;Anchor link for: 1-gai-nian-shu-yu-jie-xi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Spring的AOP&lt;&#x2F;code&gt;（面向切面编程）是一种编程范式，它允许开发人员将横切关注点（&lt;code&gt;cross-cutting concerns&lt;&#x2F;code&gt;）从应用程序的主要业务逻辑中分离出来，以便更好地实现代码重用和模块化。横切关注点指的是那些存在于应用程序多个模块中的功能，如日志记录、事务管理、安全性等，它们不属于单个类或对象，而是跨越多个组件的功能。&lt;&#x2F;p&gt;
&lt;p&gt;通过&lt;code&gt;AOP&lt;&#x2F;code&gt;，开发人员可以将这些横切关注点抽象为一个独立的模块，称为切面（&lt;code&gt;aspect&lt;&#x2F;code&gt;），并在需要的地方将其应用到应用程序中。在&lt;code&gt;Spring&lt;&#x2F;code&gt;框架中，&lt;code&gt;AOP&lt;&#x2F;code&gt;通过&lt;code&gt;AspectJ&lt;&#x2F;code&gt;实现，开发人员可以使用注解或配置来定义切面，并将其与应用程序中的特定连接点（&lt;code&gt;join points&lt;&#x2F;code&gt;）关联起来，从而实现横切关注点的功能注入。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Spring&lt;&#x2F;code&gt;的&lt;code&gt;AOP&lt;&#x2F;code&gt;使开发人员能够更好地实现关注点分离，提高代码的模块化程度，降低重复代码量，并提高代码的可维护性和可重用性。&lt;&#x2F;p&gt;
&lt;p&gt;换句话说，&lt;code&gt;AOP&lt;&#x2F;code&gt;可以在不改变原有核心业务代码逻辑的基础上增强业务方法功能的一种编程技术；&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;1-1-shi-yong-an-li&quot;&gt;1.1 使用案例&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-1-shi-yong-an-li&quot; aria-label=&quot;Anchor link for: 1-1-shi-yong-an-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;创建一个&lt;code&gt;SpringBoot&lt;&#x2F;code&gt;项目，导入下面的启动器依赖以使用&lt;code&gt;@Aspect&lt;&#x2F;code&gt;注解；&lt;&#x2F;p&gt;
&lt;p&gt;``xml&lt;&#x2F;p&gt;
&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-aop --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;
    &lt;version&gt;3.2.4&lt;&#x2F;version&gt;
&lt;&#x2F;dependency&gt;
```
&lt;p&gt;&lt;code&gt;AspectJ&lt;&#x2F;code&gt;是一种流行的&lt;code&gt;AOP&lt;&#x2F;code&gt;框架，可以更方便的整合使用&lt;code&gt;AOP&lt;&#x2F;code&gt; ,在&lt;code&gt;SpringBoot&lt;&#x2F;code&gt;项目中，&lt;code&gt; spring-boot-starter-aop&lt;&#x2F;code&gt;依赖会自动引入&lt;code&gt;AspectJ&lt;&#x2F;code&gt;依赖，以便能够方便地使用&lt;code&gt;AspectJ&lt;&#x2F;code&gt;来实现面向切面编程。&lt;&#x2F;p&gt;
&lt;p&gt;既然是对目标方法的进行增强，那么我们就需要指定一个或者多个要增强的对象，比如指定对&lt;code&gt;Service&lt;&#x2F;code&gt;下的某个业务方法进行增强或者是对整个&lt;code&gt;Service&lt;&#x2F;code&gt;包下的所有方法进行增强等等；在刚才创建的&lt;code&gt;SpringBoot&lt;&#x2F;code&gt;项目中考虑下面的项目结构:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322161521990.png&quot; alt=&quot;image-20240322161521990&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为使用&lt;code&gt;AOP&lt;&#x2F;code&gt;创建一个独立的&lt;code&gt;aspect&lt;&#x2F;code&gt;包，包下继续创建一个切面类&lt;code&gt;MyAspect&lt;&#x2F;code&gt;，用来编写切面编程的核心逻辑；注意不要忘了给该类加上&lt;code&gt;@Component&lt;&#x2F;code&gt;和&lt;code&gt;Aspect&lt;&#x2F;code&gt;注解；&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Component&lt;&#x2F;code&gt; 注解用于标识一个类作为&lt;code&gt;Spring&lt;&#x2F;code&gt;组件，并由&lt;code&gt;Spring&lt;&#x2F;code&gt;容器进行管理。被 &lt;code&gt;@Component&lt;&#x2F;code&gt; 标记的类会被自动扫描并注册为&lt;code&gt;Spring&lt;&#x2F;code&gt;应用上下文中的一个&lt;code&gt;bean&lt;&#x2F;code&gt;，可以通过依赖注入等方式在应用程序中使用。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;@Aspect&lt;&#x2F;code&gt; 注解用于定义一个切面，即包含通知（&lt;code&gt;advice&lt;&#x2F;code&gt;）和切点（&lt;code&gt;pointcut&lt;&#x2F;code&gt;）的类。切面是&lt;code&gt;AOP&lt;&#x2F;code&gt;中的一个重要概念，它包含了在何时、何地以及如何应用横切关注点的逻辑。通过 &lt;code&gt;@Aspect&lt;&#x2F;code&gt; 注解标记的类可以定义通知类型（如前置通知、后置通知、环绕通知等），并与切点关联，从而实现在特定连接点执行特定操作的功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在切面类中定义一个没有返回值要求的方法，加上&lt;code&gt;@Point&lt;&#x2F;code&gt;注解如下:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt; @Pointcut(&amp;quot;execution(* cn.ilikexff.springaop.service.*.*(..))&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;public void pt(){
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;@Pointcut(&quot;execution(* cn.ilikexff.springaop.service.*.*(..))&quot;)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这个表达式的含义是定义了一个切点，用来匹配 &lt;code&gt;cn.ilikexff.springaop.service&lt;&#x2F;code&gt; 包下所有类的所有方法。具体解释如下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;execution&lt;&#x2F;code&gt; : 表示匹配方法执行的连接点。&lt;&#x2F;li&gt;
&lt;li&gt;第一个 &lt;code&gt;*&lt;&#x2F;code&gt; 表示匹配任意返回类型的方法。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cn.ilikexff.springaop.service.*&lt;&#x2F;code&gt;  : 表示匹配该包名下的任意类。&lt;&#x2F;li&gt;
&lt;li&gt;第三个 &lt;code&gt;*&lt;&#x2F;code&gt; 表示匹配类中的任意方法。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;(..)&lt;&#x2F;code&gt; : 表示匹配任意参数的方法。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;因此，这个切点表达式会匹配 &lt;code&gt;cn.ilikexff.springaop.service&lt;&#x2F;code&gt; 包下所有类的所有方法，无论返回类型和参数如何都将被该切面关注到；&lt;&#x2F;p&gt;
&lt;p&gt;通过切点表达式指定了需要切面关注的类或方法之后，接下来就是编写具体的增强方法了，用于在不同方向对指定方法进行增强的逻辑；比如&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;@Before(&amp;quot;pt()&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;public void beforeMethod(){
&lt;&#x2F;span&gt;&lt;span&gt;    System.out.println(&amp;quot;前至增强通知方法被执行....&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于切点可以有多个，因此在使用某个增强方法时需要通过不同的切点方法进行指定，比如上面代码中的&lt;code&gt;@Before(&quot;pt()&quot;)&lt;&#x2F;code&gt;就是指定在切点方法&lt;code&gt;pt()&lt;&#x2F;code&gt;指定的方法执行之前先执行下面的增强逻辑，这里也就是打印一句 &lt;strong&gt;前至增强通知方法被执行….&lt;&#x2F;strong&gt;；&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;code&gt;UserService&lt;&#x2F;code&gt;中简单写一个方法进行测试，看看切面方法是否会在&lt;code&gt;Service&lt;&#x2F;code&gt;方法执行之前执行；&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322165758093.png&quot; alt=&quot;image-20240322165758093&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当我们调用&lt;code&gt;Controller&lt;&#x2F;code&gt;中对应的方法发起请求时，控制台的打印内容如下:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322165914761.png&quot; alt=&quot;image-20240322165914761&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，结果也是如我们所料，切面中定义的逻辑会在切点指定方法执行之前被优先执行，通过切面编程的方式增强原有的业务逻辑不会对源代码进行入侵以及产生耦合；&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;&quot;&gt;1.2 通知类型&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;当然，这里是使用了&lt;code&gt;@Before&lt;&#x2F;code&gt;注解来指定执行的时机，在实际的项目开发中，除了&lt;code&gt;@Before&lt;&#x2F;code&gt;之外，还有其他几个常用的类似注解：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322211724873.png&quot; alt=&quot;image-20240322211724873&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;@Before&lt;&#x2F;code&gt; : 在目标方法执行之前执行。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;@After&lt;&#x2F;code&gt; : 在目标方法执行之后执行，无论方法是否抛出异常。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;@AfterReturning&lt;&#x2F;code&gt; : 在目标方法成功返回之后执行。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;@AfterThrowing&lt;&#x2F;code&gt; : 在目标方法抛出异常后执行。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;@Around&lt;&#x2F;code&gt; : &lt;strong&gt;包围目标方法，可以在方法执行前后都执行自定义逻辑。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;他们的使用方式和案例演示用的前置通知类似，建议自己动手挨个儿用一遍加深印象。其中需要特别注意的是&lt;code&gt;@Around&lt;&#x2F;code&gt;环绕通知类型，这是在日常使用过程中频率较高、功能更强的一中通知注解，所以这里单独拎出来讲两句；&lt;&#x2F;p&gt;
&lt;p&gt;在使用环绕通知的时候，需要注意添加对应的参数&lt;code&gt;ProceedingJoinPoint&lt;&#x2F;code&gt;，通过源码可以看到，它是&lt;code&gt;JoinPoint&lt;&#x2F;code&gt;的子接口，表示可以执行的连接点。&lt;&#x2F;p&gt;
&lt;p&gt;在环绕通知中， &lt;code&gt;ProceedingJoinPoint&lt;&#x2F;code&gt; 提供了&lt;code&gt;proceed()&lt;&#x2F;code&gt;方法，用于显式地调用目标方法的执行。  -  &lt;code&gt;pjp.proceed()&lt;&#x2F;code&gt; 是环绕通知中的关键方法，调用 &lt;code&gt;proceed()&lt;&#x2F;code&gt; 方法会执行目标方法，并&lt;strong&gt;返回目标方法的返回值&lt;&#x2F;strong&gt;。 可以在调用 &lt;code&gt;proceed()&lt;&#x2F;code&gt; 方法之前和之后编写自定义的逻辑，实现对目标方法执行过程的控制和干预。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322213104841.png&quot; alt=&quot;image-20240322213104841&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;因此可以用来替代 &lt;code&gt;@Before&lt;&#x2F;code&gt; 和 &lt;code&gt;@After&lt;&#x2F;code&gt; 通知，提供了更灵活的控制和处理机制。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;@Around(&amp;quot;pt()&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;public void AroundMethod(ProceedingJoinPoint pjp){
&lt;&#x2F;span&gt;&lt;span&gt;    System.out.println(&amp;quot;环绕通知方法被执行...&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    try {
&lt;&#x2F;span&gt;&lt;span&gt;        pjp.proceed(); &#x2F;&#x2F; 通知目标方法执行
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; 这里可以书写目标方法执行之后的增强逻辑
&lt;&#x2F;span&gt;&lt;span&gt;    } catch (Throwable e) {
&lt;&#x2F;span&gt;&lt;span&gt;        System.out.println(&amp;quot;目标方法出现异常...&amp;quot;); &#x2F;&#x2F; 相当于@AfterThrowing
&lt;&#x2F;span&gt;&lt;span&gt;        throw new RuntimeException(e);
&lt;&#x2F;span&gt;&lt;span&gt;    }finally {
&lt;&#x2F;span&gt;&lt;span&gt;        System.out.println(&amp;quot;进入finally..&amp;quot;); 
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;被增强方法相关信息的获取&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在环绕通知中提到了一个重要的&lt;code&gt;ProceedingJoinPoint&lt;&#x2F;code&gt;参数该参数可以实现相关信息的获取，具体放在后面讲，那么在另外其他几中通知类型中如何获取被增强方法的相关信息呢？&lt;&#x2F;p&gt;
&lt;p&gt;方法其实也简单，那就是在我们的通知方法中传递一个&lt;code&gt;JoinPoint&lt;&#x2F;code&gt;类型的参数，下面是&lt;code&gt;JoinPoint&lt;&#x2F;code&gt;的部分实现源码:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt; * JoinPoint接口定义了AOP中连接点的相关信息和操作方法
&lt;&#x2F;span&gt;&lt;span&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;public interface JoinPoint {
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 不同连接点的类型常量
&lt;&#x2F;span&gt;&lt;span&gt;    String METHOD_EXECUTION = &amp;quot;method-execution&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String METHOD_CALL = &amp;quot;method-call&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String CONSTRUCTOR_EXECUTION = &amp;quot;constructor-execution&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String CONSTRUCTOR_CALL = &amp;quot;constructor-call&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String FIELD_GET = &amp;quot;field-get&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String FIELD_SET = &amp;quot;field-set&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String STATICINITIALIZATION = &amp;quot;staticinitialization&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String PREINITIALIZATION = &amp;quot;preinitialization&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String INITIALIZATION = &amp;quot;initialization&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String EXCEPTION_HANDLER = &amp;quot;exception-handler&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String SYNCHRONIZATION_LOCK = &amp;quot;lock&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String SYNCHRONIZATION_UNLOCK = &amp;quot;unlock&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    String ADVICE_EXECUTION = &amp;quot;adviceexecution&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 返回连接点类型的字符串表示
&lt;&#x2F;span&gt;&lt;span&gt;    String toString();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 返回连接点的简短字符串表示
&lt;&#x2F;span&gt;&lt;span&gt;    String toShortString();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 返回连接点的详细字符串表示
&lt;&#x2F;span&gt;&lt;span&gt;    String toLongString();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 获取当前代理对象
&lt;&#x2F;span&gt;&lt;span&gt;    Object getThis();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 获取目标对象
&lt;&#x2F;span&gt;&lt;span&gt;    Object getTarget();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 获取连接点的参数
&lt;&#x2F;span&gt;&lt;span&gt;    Object[] getArgs();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 获取连接点的签名信息
&lt;&#x2F;span&gt;&lt;span&gt;    Signature getSignature();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 获取连接点的源代码位置信息
&lt;&#x2F;span&gt;&lt;span&gt;    SourceLocation getSourceLocation();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 获取连接点的类型
&lt;&#x2F;span&gt;&lt;span&gt;    String getKind();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 获取连接点的静态部分信息
&lt;&#x2F;span&gt;&lt;span&gt;    StaticPart getStaticPart();
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 静态内部接口，表示连接点的静态部分
&lt;&#x2F;span&gt;&lt;span&gt;    public interface EnclosingStaticPart extends StaticPart {
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 静态内部接口，表示连接点的静态部分
&lt;&#x2F;span&gt;&lt;span&gt;    public interface StaticPart {
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; 获取连接点的签名信息
&lt;&#x2F;span&gt;&lt;span&gt;        Signature getSignature();
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; 获取连接点的源代码位置信息
&lt;&#x2F;span&gt;&lt;span&gt;        SourceLocation getSourceLocation();
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; 获取连接点的类型
&lt;&#x2F;span&gt;&lt;span&gt;        String getKind();
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; 获取连接点的唯一标识符
&lt;&#x2F;span&gt;&lt;span&gt;        int getId();
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; 返回连接点的字符串表示
&lt;&#x2F;span&gt;&lt;span&gt;        String toString();
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; 返回连接点的简短字符串表示
&lt;&#x2F;span&gt;&lt;span&gt;        String toShortString();
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; 返回连接点的详细字符串表示
&lt;&#x2F;span&gt;&lt;span&gt;        String toLongString();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;刚开始源码看不懂或者太复杂不想看不要紧，最主要得自己多写，可以通过断点或者参数打印得方式去了解他们得用法以及基本得逻辑 “科研” 搞多了自然也就理解得相对深刻了；&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;该类型的参数中封装了被增强方法的相关信息，通过该参数，我们可以获取到 &lt;strong&gt;除异常对象和返回值之外的所有信息&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;众多信息中，&lt;code&gt; Signature getSignature();&lt;&#x2F;code&gt;是一个比较重要的方法，但在实际使用中一般使用它的实现类&lt;code&gt;MemberSignature&lt;&#x2F;code&gt;，该实现类实现了更多目标方法的信息，实用性更强；&lt;&#x2F;p&gt;
&lt;p&gt;下面是该方法的一个构造图示：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322221935476.png&quot; alt=&quot;image-20240322221935476&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt; * 输出被调用方法得简单日志信息
&lt;&#x2F;span&gt;&lt;span&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@Before(&amp;quot;pt()&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;public void printMethodLogs(JoinPoint joinPoint){
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 被执行方法所在类的类名、方法名、方法传入的参数
&lt;&#x2F;span&gt;&lt;span&gt;    MethodSignature signature   = (MethodSignature)  joinPoint.getSignature();
&lt;&#x2F;span&gt;&lt;span&gt;    Object[] args = joinPoint.getArgs();
&lt;&#x2F;span&gt;&lt;span&gt;    System.out.println(&amp;quot;方法所在类的类名:&amp;quot;+signature.getDeclaringType());
&lt;&#x2F;span&gt;&lt;span&gt;    System.out.println(&amp;quot;方法名:&amp;quot;+signature.getName());
&lt;&#x2F;span&gt;&lt;span&gt;    System.out.println(&amp;quot;方法参数:&amp;quot;+ Arrays.toString(args));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面代码执行之后控制台输出信息:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322223119377.png&quot; alt=&quot;image-20240322223119377&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那么，如何获取目标方法中的异常对象或者返回值呢？实现的方式多种，可以在&lt;code&gt;@AfterReturning&lt;&#x2F;code&gt;或者&lt;code&gt;@AfterThrowing&lt;&#x2F;code&gt;通知方法中实现：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;@AfterReturning(value = &amp;quot;pt()&amp;quot;,returning = &amp;quot;ret&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;public void AfterReturning(JoinPoint joinPoint,Object ret){
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 代码逻辑...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@AfterThrowing(value = &amp;quot;pt()&amp;quot;,throwing = &amp;quot;e&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;public void AfterReturning(JoinPoint joinPoint, Throwable e){
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; 代码逻辑...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的示例代码中，分别通过&lt;code&gt;returning&lt;&#x2F;code&gt;和&lt;code&gt;throwing&lt;&#x2F;code&gt;指定的同名变量来接受返回值或异常对象的信息，从而实现目标方法返回值或异常对象的获取；&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;显然，这样的写法是不够简洁的，繁琐的编码只会使得项目臃肿。不是&lt;code&gt;@AfterReturning&lt;&#x2F;code&gt;和&lt;code&gt;@AfterThrowing&lt;&#x2F;code&gt;用不起，而是&lt;code&gt;@Around&lt;&#x2F;code&gt;更有性价比!!!学习使用的方式也是差不多的模式&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322225100232.png&quot; alt=&quot;image-20240322225100232&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;注意，使用&lt;code&gt;@Around&lt;&#x2F;code&gt;的切面方法时，如果目标方法有返回值，那么通知方法就也需要返回值，如果没有对目标方法返回值有二次&lt;code&gt;DIY&lt;&#x2F;code&gt;需求的情况下，建议直接返回&lt;code&gt;pjp.proceed()&lt;&#x2F;code&gt;方法调用的返回值即可；&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;通过上面的快速入门案例，相信对于切面编程已经有了一个大概的理解，下面在解释一些经常用到的术语概念，这样可以更好的理解这些晦涩难懂的名词；&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Pointcut&lt;&#x2F;code&gt;(切入点):被增强的连接点，通过切入点对待增强的具体方法进行连接；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Advice&lt;&#x2F;code&gt;（通知&#x2F;增强）：具体增强的代码逻辑；&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上述案例中&lt;code&gt;beforeMethod()&lt;&#x2F;code&gt;方法的方法体，也就是&lt;code&gt;System.out.println(&quot;前至增强通知方法被执行....&quot;);&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Target&lt;&#x2F;code&gt;(目标对象)：被增强的对象就是目标对象；&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如上面案例中增强的&lt;code&gt;Service&lt;&#x2F;code&gt;包下的所有类对象就是目标对象；&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Aspect&lt;&#x2F;code&gt;(切面)：切入点+通知的结合，每一个切入点和对应的增强逻辑组成一块切面；&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;为什么我们新建的&lt;code&gt;MyAspect.java&lt;&#x2F;code&gt;叫切面类？因为这个类中就是每一个切点和通知组合而成的一个个切面；&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Proxy&lt;&#x2F;code&gt;(代理)：类被&lt;code&gt;AOP&lt;&#x2F;code&gt;增强之后，就产生一个代理类；这个可以通过断点的方式去查看生成的的类对象信息验证；&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如下图所示，这里生成的类对象就是通过&lt;code&gt;GCLIB&lt;&#x2F;code&gt;动态代理技术产生的一个新的代理类，而非原来的原生类；&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322172914991.png&quot; alt=&quot;image-20240322172914991&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-1&quot;&gt;1.3 切点表达式&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;肯定还记得注解&lt;code&gt;@Pointcut&lt;&#x2F;code&gt;中的那串内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;quot;execution(* cn.ilikexff.springaop.service.*.*(..))&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这就是一个 &lt;strong&gt;切点表达式&lt;&#x2F;strong&gt;，用来确定具体要增强类对象；针对这个具体得表达式得含义在上面案例中已经做出了具体得解释，这里会进一步细化切点表达式的一些概念和用法；语法：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;execution([修饰符] 返回值类型 报名.类名.方法名(参数))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;访问修饰符(&lt;code&gt;public&#x2F;private&#x2F;protected&#x2F;default&lt;&#x2F;code&gt;等可以省略)；&lt;&#x2F;li&gt;
&lt;li&gt;返回值类型、包名、类名、类名以及方法名可以使用&lt;code&gt;*&lt;&#x2F;code&gt;代表任意，星号代表任意或者全部，这种语义并不只是用在了切点表达式中，而是很多领域的通用用法，所以这很好理解；&lt;&#x2F;li&gt;
&lt;li&gt;参数列表可以使用两个点&lt;code&gt;..&lt;&#x2F;code&gt;来表示任意的个数，任意类型的参数；&lt;&#x2F;li&gt;
&lt;li&gt;包名与类名之间的点&lt;code&gt;.&lt;&#x2F;code&gt;表示当前包下的类，两个点&lt;code&gt;..&lt;&#x2F;code&gt;表示当前包及其子包下的类；&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;例如:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;1. 匹配指定包下所有类的所有方法：
&lt;&#x2F;span&gt;&lt;span&gt;   -  `execution(* com.example.service.*.*(..))` 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;2. 匹配指定包及其子包下所有类的所有方法：
&lt;&#x2F;span&gt;&lt;span&gt;   -  `execution(* com.example.service..*.*(..))` 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;3. 匹配指定类的所有方法：
&lt;&#x2F;span&gt;&lt;span&gt;   -  `execution(* com.example.service.MyService.*(..))` 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;4. 匹配指定类中以&amp;quot;get&amp;quot;开头的方法：
&lt;&#x2F;span&gt;&lt;span&gt;   -  `execution(* com.example.service.MyService.get*(..))` 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;5. 匹配指定包下返回类型为String的方法：
&lt;&#x2F;span&gt;&lt;span&gt;   -  `execution(String com.example.service.*.*(..))` 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-2&quot;&gt;1.4 切点函数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;@annotation&lt;&#x2F;code&gt; 是&lt;code&gt;Spring AOP&lt;&#x2F;code&gt;中另外一种用于定义切点的方式，它可以用来匹配带有特定注解的连接点。通过 &lt;code&gt;@annotation&lt;&#x2F;code&gt; 切点函数，可以实现在特定注解标记的方法上应用切面逻辑。&lt;&#x2F;p&gt;
&lt;p&gt;切点函数的基本使用步骤:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;根据业务信息写一个&lt;strong&gt;自定义注解&lt;&#x2F;strong&gt;；&lt;&#x2F;li&gt;
&lt;li&gt;在需要增强的方法上加上该自定义注解；&lt;&#x2F;li&gt;
&lt;li&gt;在切面类中的切点方法上的&lt;code&gt;@Pointcut()&lt;&#x2F;code&gt;注解中加上自定义注解的全类名；&lt;&#x2F;li&gt;
&lt;li&gt;启动项目，使用切面函数成功；&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;比如，如果我们将上面案例中切点表达式的方式改为切点函数的方式的过程如下:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;自定义注解&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;({ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ElementType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;METHOD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Retention&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RetentionPolicy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RUNTIME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyLogAnn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在要增强的目标对象(&lt;code&gt;Target&lt;&#x2F;code&gt;)上的具体方法上加上这个自定义的注解；&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MyLogAnn
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;userInfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Service的userInfo方法被执行...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;这些是用户信息...&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;在切面类中的切点方法上的&lt;code&gt;@Pointcut()&lt;&#x2F;code&gt;注解中加上自定义注解的全类名；&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;   @Pointcut(&amp;quot;execution(* cn.ilikexff.springaop.service.*.*(..))&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Pointcut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;@annotation(cn.ilikexff.springaop.ann.MyLogAnn)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;再次启动项目即可；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;切点表达式&amp;amp;函数的使用建议&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240322210915411.png&quot; alt=&quot;image-20240322210915411&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在实际的项目开发中，可以参考上面两种不同方式的优势特点以及项目具体需求和场景选择合适的方式来实现&lt;code&gt;AOP&lt;&#x2F;code&gt;功能。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-3&quot;&gt;1.5 多切面的排序问题&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;非&lt;code&gt;XML&lt;&#x2F;code&gt;方式配置的&lt;code&gt;AOP&lt;&#x2F;code&gt;可以使用注解&lt;code&gt;@Order&lt;&#x2F;code&gt;来控制顺序。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;@Order&lt;&#x2F;code&gt;注解是&lt;code&gt;Spring&lt;&#x2F;code&gt;框架中的一个注解，用于控制&lt;code&gt;Bean&lt;&#x2F;code&gt;的加载顺序。通过在&lt;code&gt;Bean&lt;&#x2F;code&gt;上使用&lt;code&gt;@Order&lt;&#x2F;code&gt;注解，可以指定&lt;code&gt;Bean&lt;&#x2F;code&gt;加载的顺序。值越小，优先级越高，加载顺序越靠前。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;未完待续…&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;%E6%90%9C%E7%B4%A2%E6%A1%86%E4%BC%A0%E6%92%AD%E6%A0%B7%E5%BC%8F-%E6%A0%87%E5%87%86%E8%89%B2%E7%89%88.png&quot; alt=&quot;搜索框传播样式-标准色版&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>GitGitHub小册</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/githithub-xiao-ce/</link>
          <guid>https://ilikexff.cn/githithub-xiao-ce/</guid>
          <description xml:base="https://ilikexff.cn/githithub-xiao-ce/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志：&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2023-5-28 下午 星期日&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;新增如何移除已提交到暂存区的文件&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2023-3-10 晚 星期五&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增修复Ubuntu命令行环境下中文乱码问题的解决方案&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-8-30 晚 星期二&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修复已知错别字词&lt;&#x2F;li&gt;
&lt;li&gt;新增pull命令&lt;&#x2F;li&gt;
&lt;li&gt;新增踩坑实录&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-05-17 22:36:06 星期六&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正内容错字词情况&lt;&#x2F;li&gt;
&lt;li&gt;新增番外篇，踩坑实录板块&lt;&#x2F;li&gt;
&lt;li&gt;新增GitHub页面内容部分板块&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-05-22 08:36:06 星期日&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;细化git push 相关的内容&lt;&#x2F;li&gt;
&lt;li&gt;细化分支操作相关内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-06-02 21:39:23 星期四&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增git status终端显示中文编码异常的问题以及解决方法&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-06-04 21:30:14 星期六&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增[git命令部分的补充模块]&lt;&#x2F;li&gt;
&lt;li&gt;新模块添加了一点内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zai-githubshang-chuang-jian-cang-ku&quot;&gt;在 &lt;code&gt;GitHub&lt;&#x2F;code&gt;上创建仓库&lt;a class=&quot;zola-anchor&quot; href=&quot;#zai-githubshang-chuang-jian-cang-ku&quot; aria-label=&quot;Anchor link for: zai-githubshang-chuang-jian-cang-ku&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这一步骤的前提是先注册一个 &lt;code&gt;GitHub&lt;&#x2F;code&gt;的账号，由于那都是小场面，就不再巴拉巴拉。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;说明一下，全文如果没有特别的单独说明，文中所有用【】括起来的内容都代表网页或者软件节点的操作按钮或者步骤选择项。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;打开 &lt;code&gt;GitHub&lt;&#x2F;code&gt;登录后在个人主页的右上角点击加号之后再点击：&lt;code&gt;【New respository】&lt;&#x2F;code&gt;顾名思义，创建一个新仓库。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9429936975745072856-68ce0629.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;页面打开之后，输入仓库的名称(英文)，具体看下图：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15443438604874816303-ce191006.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最后点击【Create repository】完成仓库的创建。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9499386600859571714-28c2b0f3.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建成功之后大概是这样子的：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10092826344442102276-b6f022a2.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;Linux上安装Git&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文基于Linux操作系统进行演示，如果需要安装Windows版本，自行Google或者百度。&lt;&#x2F;p&gt;
&lt;p&gt;我的操作系统具体情况：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;阿里云轻量 &lt;code&gt;CentOS8.2&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2核4G&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;80GB&lt;&#x2F;code&gt;系统盘&lt;&#x2F;li&gt;
&lt;li&gt;bash使用的是 &lt;code&gt;zsh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在安装之前，先通过下面的命令检查一下自己是不是已经安装过，是的话忽略这一步。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16314107400167235335-81c23a79.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-1&quot;&gt;添加SSH授权&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这里不得不提一下，自从2021年8月之后，&lt;code&gt;GitHiub&lt;&#x2F;code&gt;就不再支持使用账户密码操作了，所以必须使用 SSH 密钥登陆。我们可以在系统中创建 SSH 公私钥，并将公钥放到 GitHub 指定位置。如此操作即可生成 GitHub 账户对于当前系统中的 Git 授权。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在终端执行 &lt;code&gt;ssh-keygen&lt;&#x2F;code&gt;命令并按下几次回车之后生成私钥，公钥存放在主目录下的隐藏目录 &lt;code&gt;.ssh&lt;&#x2F;code&gt;中的两个文件中：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13983928793905489167-4cedf846.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;将 &lt;code&gt;~&#x2F;.ssh&#x2F;id_rsa.pub&lt;&#x2F;code&gt; 文件中的公钥内容复制之后打开 &lt;code&gt;GitHub&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15671545960668599527-64267a25.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击主页右上角加号之后点击【Settings】打开之后页面左侧菜单栏目有一个【SSH and GPG keys】&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15091020282709754855-97694223.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击【New SSH key】:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9276900667175524409-1a2f8cbf.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击【Add SSH key】之后可能会弹出密码的输入框，输入你注册的 &lt;code&gt;GitHub&lt;&#x2F;code&gt;的登录密码验证之后完成添加，页面如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9266894548528798671-b252fe32.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用SSH的主要好处：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;免密码推送，在执行 &lt;code&gt;git push&lt;&#x2F;code&gt;时不需要再验证用户名密码；&lt;&#x2F;li&gt;
&lt;li&gt;提高数据传输速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;-2&quot;&gt;克隆GitHub 仓库到本地&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;你将学会使用命令将GitHub上的仓库克隆到本地。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;就以我们前面创建的演示仓库为克隆的目标。使用下面的命令：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;仓库地址&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;即可。在克隆之前需要找到目标仓库在GitHub上的仓库地址。&lt;&#x2F;p&gt;
&lt;p&gt;回到仓库主页，按照下图的操作复制仓库的地址：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11449714339986446195-dc3123fa.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;注意：只有使用这种以git开头的地址来克隆仓库，SSH关联才会起作用。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在终端输入:&lt;code&gt;git clone git@github.com:xiaoyivip&#x2F;gitdemo.git &#x2F;Gits&#x2F;gitdemo&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在执行命令的过程中会弹出克隆确认链接的提示，输入 &lt;code&gt;yes&lt;&#x2F;code&gt;即可。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9564404370573729592-575bc1be.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;进入仓库主目录，如下图所示，仓库主目录中有个 &lt;code&gt;.git&lt;&#x2F;code&gt; 隐藏目录，它里面包含了仓库的全部信息，删掉这个目录，仓库就变成普通的目录了(相当于windows在某个目录下执行 &lt;code&gt;git init&lt;&#x2F;code&gt;初始化是一样的)。进入到仓库目录中，命令行前缀发生了一些变化，出现了红色的 master ，它就是当前所在的分支名：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9620095350685305748-26215263.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当我们在 &lt;code&gt;GitHub&lt;&#x2F;code&gt;上创建一个仓库时，同时生成了仓库默认主机名 &lt;code&gt;orgin&lt;&#x2F;code&gt;,b并创建了默认分支 &lt;code&gt;master&lt;&#x2F;code&gt;。&lt;code&gt;GitHub&lt;&#x2F;code&gt;可以看成是免费的Git服务器，在 &lt;code&gt;GitHub&lt;&#x2F;code&gt;上创建仓库，会自动生成一个仓库地址，主机就是指代这个仓库，主机名就等于这个仓库地址。克隆一个 &lt;code&gt;GitHub&lt;&#x2F;code&gt;仓库(或者叫远程仓库)到本地，本地则会自动关联到这个远程仓库。可以执行 &lt;code&gt;git remote -v&lt;&#x2F;code&gt; 命令查看本地仓库所管理的远程仓库信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14900095146715085484-3b2b56d8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Git 要求对本地仓库关联的每个远程主机都必须指定一个主机名（默认为 origin），用于本地仓库识别自己关联的主机，&lt;code&gt;git remote&lt;&#x2F;code&gt; 命令就用于管理本地仓库所关联的主机，一个本地仓库可以关联任意多个主机（即远程仓库）。&lt;&#x2F;p&gt;
&lt;p&gt;克隆远程仓库到本地时，还可以使用 &lt;code&gt;-o&lt;&#x2F;code&gt; 选项修改主机名，在地址后面加上一个字段作为本地仓库的主目录名，举例如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16923947166541691176-4df4c375.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-3&quot;&gt;Git基础操作&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-4&quot;&gt;分区介绍&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Git 本地仓库有三大区域：工作区、暂存区、版本区，下面的图可以辅助理解，刚开始不需要特别熟悉这写概念，学完git的基本操作之后就会逐渐理解了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2712640029327028861-8e4ead81.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所有的Git命令都是以 &lt;code&gt;git&lt;&#x2F;code&gt;开头的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;演示一次完整的修改、提交、推送操作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;首先，进入仓库主目录，执行 &lt;code&gt;git status&lt;&#x2F;code&gt; 查看整个仓库的状态：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看仓库状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; status
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13007768173336487344-83b3e2f4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到，我们仓库的仓库中目前还没有任何的文件变动。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;创建一个文件，然后再执行一次上述的命令：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15977794556869951699-53b8b09b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示的大致意思是提交为空，但是存在可以提交的文件，也就是我们刚刚新建的 &lt;code&gt;one.txt&lt;&#x2F;code&gt;这个文件，这表示工作区或暂存区有变化，对文件进行增删改操作都会出现这个星号，另外使用 &lt;code&gt;git status&lt;&#x2F;code&gt; 命令亦可查看详情。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-5&quot;&gt;&lt;strong&gt;添加修改到暂存区以及撤销修改&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;按照上图的提示，使用 &lt;code&gt;git add [文件名]&lt;&#x2F;code&gt; 命令跟踪此新建文件，即把新增文件添加到暂存区。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16870937100143863778-dc2c69fc.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果你有多个文件或者需要对整个目录进行了修改或者有提交的需求，可以使用 &lt;code&gt;git add .&lt;&#x2F;code&gt;命令全部提交到暂存区。当我们修改了工作区，&lt;code&gt;git add&lt;&#x2F;code&gt;命令是将这些修改添加到暂存区，暂存区记录的只是修改。如果要撤销暂存区的修改，请执行下面两个命令，选择其一即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 撤销暂存区的修改提交
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt; -- [&lt;&#x2F;span&gt;&lt;span&gt;我文件名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 或者
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --cached &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;文件名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17850608299944643581-6895509e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：上面的命令中如果没有指定撤销的文件名，即为 &lt;code&gt;git reset --&lt;&#x2F;code&gt;命令时，表示将会撤销全部已经提交的到暂存区的文件。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-6&quot;&gt;&lt;strong&gt;git diff命令&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这个命令可以用来查看工作区被跟踪的文件的修改详情，此时新建的文件 &lt;code&gt;one.txt&lt;&#x2F;code&gt;没有被跟踪，而已被跟踪的 &lt;code&gt;README.md&lt;&#x2F;code&gt;文件无修改，所以看不到。只有在版本区中存在的文件才是被跟踪的文件。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 查看被跟踪文件的修改详情
&lt;&#x2F;span&gt;&lt;span&gt;git diff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下面我们尝试修改 &lt;code&gt;README.md&lt;&#x2F;code&gt;文件。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;代码是敲不完的，但多敲几遍却可以学会一门新的技术，比如Git。&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; README.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-614987239386012497-1bf57762.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接下来就可以使用 &lt;code&gt;git diff&lt;&#x2F;code&gt;命令了。执行命令之后会打开下面这样一个页面，如需退出请输入 &lt;code&gt;Q&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4990536508842611349-1cde9d67.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在，将工作区的两处修改（新增文件 &lt;code&gt;one.txt&lt;&#x2F;code&gt;，修改文件 &lt;code&gt;README.md&lt;&#x2F;code&gt;）全部添加到暂存区，并使用 &lt;code&gt;git diff --cached&lt;&#x2F;code&gt; 查看暂存区的全部修改:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; diff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --cached
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11045270626685266001-d7450172.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-7&quot;&gt;&lt;strong&gt;查看历史提交&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;使用 &lt;code&gt;git log&lt;&#x2F;code&gt;来查看版本区的提交历史记录。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11884750730489264241-867906d8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到目前只有一个之前创建仓库时候的初始化提交记录。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;关于查看提交历史记录的命令，有些常用的选项介绍一下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log [分支名]&lt;&#x2F;code&gt; 查看某分支的提交历史，不写分支名查看当前所在分支&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git log --oneline&lt;&#x2F;code&gt; 一行显示提交历史&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git log -n&lt;&#x2F;code&gt; 其中 n 是数字，查看最近 n 个提交&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git log --author [贡献者名字]&lt;&#x2F;code&gt; 查看指定贡献者的提交记录&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git log --graph&lt;&#x2F;code&gt; 图示法显示提交历史&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-8&quot;&gt;配置个人信息&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;对Git进行一些本地配置：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user.email&lt;&#x2F;code&gt;:注册GitHub时后的账号邮箱&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;user.name&lt;&#x2F;code&gt;:GitHub账号名称&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17581249722225102123-24889dae.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以使用 &lt;code&gt;git config -l&lt;&#x2F;code&gt;来查看配置信息。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;完成后，系统自动生成 Git 的配置文件，就是主目录中的隐藏文件 &lt;code&gt;.gitconfig&lt;&#x2F;code&gt; ：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2940854042814008577-22b1a9bb.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-9&quot;&gt;提交暂存区的修改&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;执行 &lt;code&gt;git commit&lt;&#x2F;code&gt;命令把暂存区的修改提交到版本区，生成一个新版本。建议使用 &lt;code&gt;-m&lt;&#x2F;code&gt; 传输来提交本次提交的备注信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11127230975352837733-0b9c51f4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于这个命令，还有一个 &lt;code&gt;-a&lt;&#x2F;code&gt;参数，是将未提交到暂存区的修改(也就是工作区)一并提交到版本区，但一般不建议使用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提交后，暂存区的修改被清空，执行 &lt;code&gt;git log&lt;&#x2F;code&gt; 查看提交记录，紫色框中的十六进制序列号就是提交版本号，这是很重要的信息，每个提交都有自己单独的版本号：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7983839092928110599-ee186cfa.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;观察上图的提交信息，提交版本是按时间倒序排列的，也就是最近的提交排在最上面，你可能需要查看时间正序排列的信息，那么可以使用 &lt;code&gt;git log --reverse&lt;&#x2F;code&gt; 命令。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-10&quot;&gt;分支操作&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;命令&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看分支信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -avv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 切换分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 创建分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 合并分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 1.切换到接受修改的分支上
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;被合并的分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 2.执行merge命令
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;有新内容的分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5418453843178963511-50fc598f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;第二行：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;开头的 &lt;code&gt;*&lt;&#x2F;code&gt;表示当前所在的分支，绿色(绿色表示当前分支)的 &lt;code&gt;master&lt;&#x2F;code&gt;是分支名。后面 &lt;code&gt;3c336e0&lt;&#x2F;code&gt;表示版本号，第三项中括号中的蓝色部分表示此分支跟踪的远程分支的名字，这也是克隆远程仓库到本地时的默认设置 – 创建 master 分支并自动跟踪远程同名分支；冒号后面的文字表示本地分支领先其跟踪的远程分支的一个提交。最后是提交的备注信息。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;第三行：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是git指针信息，指向远程仓库的 &lt;code&gt;master&lt;&#x2F;code&gt;分支。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;第四行：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考第二行的解释。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-11&quot;&gt;推送到远程仓库&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用下面的命令将版本区中的文件提交到远程仓库中。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 推送命令
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;后面不需要任何选项和参数，此命令会把本地仓库 master 分支上的新增提交推送到远程仓库的同名分支上，因为当前所在的分支就是 master，而且上文提到，它已经跟踪了远程仓库的同名分支：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1172788798162207162-d224602c.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;push成功之后，通过前面介绍过的 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt;命令查看分支信息。通过对比下图紫色框中的版本号可以知道两个版本是否一致。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-80910746548442161-a4be79a0.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再去 &lt;code&gt;GitHub&lt;&#x2F;code&gt;看看情况。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15173227095348095106-70ccc935.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;OK！符合预期。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以上就是使用git命令完成的一次修改-提交-推送的操作，主要用到了下面几个命令：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 添加到暂存区
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 提交到版本区
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;描述&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 推送到远程仓库
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看提交日志
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看分支信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -avv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;-12&quot;&gt;情况一&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;我们在自己的电脑上通过 &lt;code&gt;git init&lt;&#x2F;code&gt;初始化一个本地的仓库，需要将该仓库的内容推送到指定的远程仓库。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 存储远程仓库地址并起个别名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; remote add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;仓库地址别名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;远程仓库地址&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 将内容推送至远程仓库
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;地址别名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;对应的分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-13&quot;&gt;版本回退&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;如果发现已经提交的版本存在错误，比如 &lt;code&gt;one.txt&lt;&#x2F;code&gt;中内容有误，可以修改文件之后再次提交到暂存区、提交、推送。还有一个比较省事的做法，那就是&lt;strong&gt;版本回退&lt;&#x2F;strong&gt;。说白了就是撤销上一次的提交，修改文件之后重新提交推送，下面即将演示这种方法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-14&quot;&gt;软退回&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;执行 &lt;code&gt;git reset --soft HEAD^&lt;&#x2F;code&gt;撤销最近的一次提交，将修改还原到暂存区。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--soft&lt;&#x2F;code&gt;表示软退回，对应的还有一个后面会讲到的硬退回 &lt;code&gt;--hard&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HEAD^&lt;&#x2F;code&gt;表示撤销最近一次提交，&lt;code&gt;HEAD^^&lt;&#x2F;code&gt;表示撤销两次提交，n次请使用 &lt;code&gt;HEAD~n&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;撤销执行之后再次执行 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt;查看分支信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-201203511134477285-0e43ed2a.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到本地仓库的 master 分支的版本号已经发生了变化，变成了前一次提交的版本号，中括号里也有提示信息，本地分支 master 落后其跟踪的远程分支 origin&#x2F;master 一个提交。&lt;&#x2F;p&gt;
&lt;p&gt;此时再执行 &lt;code&gt;git status&lt;&#x2F;code&gt;会发现，之前提交的修改又被打回了暂存区。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1979692076972205118-3db3cc47.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-15&quot;&gt;再次修改、提交&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;我们对 &lt;code&gt;one.txt&lt;&#x2F;code&gt;作一个简单的修改操作(假装修改了一个天大的bug),然后使用添加修改，提交版本。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3663064259608941161-4c3c1f99.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;commit&lt;&#x2F;code&gt;之后先别急着 &lt;code&gt;push&lt;&#x2F;code&gt;，查看状态以及分支信息发现视乎出现了一点问题的样子。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11026165117653179107-9f987ef6.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3491200257374588426-cdd31d14.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-16&quot;&gt;处理 commit 时间线分叉&lt;a class=&quot;zola-anchor&quot; href=&quot;#-16&quot; aria-label=&quot;Anchor link for: -16&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;基于上面步骤尾中出现的问题，显示我们的提交分支出现了偏离，也就是本地仓库的 &lt;code&gt;master&lt;&#x2F;code&gt;分支与远程仓库的 &lt;code&gt;origin&#x2F;master&lt;&#x2F;code&gt;分支的在提交上出现了冲突，这种冲突有叫做提交时间线分叉。因为刚才的提交操作不是基于远程仓库 &lt;code&gt;origin&#x2F;master&lt;&#x2F;code&gt;分支的最新提交版本，而是撤回了一个版本，这种情况下也是可以将本地 &lt;code&gt;master&lt;&#x2F;code&gt;分支推送到远程查看库的，但需要用到一个 &lt;code&gt;-f&lt;&#x2F;code&gt;参数，他是 &lt;code&gt;--force&lt;&#x2F;code&gt;的缩写，也就是强制推送命令。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 强制推送
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18266690155363145730-3373cf14.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;推送成功！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意，这种解决方式可能会导致不可预料的问题，还有一种方式是先pull再push。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看一下分支信息&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5202375484999585695-a57f7dad.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过版本号可以看到本地 master 与远程 master 的版本号一致，记住这个版本号，去网页看看是否如预期效果。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18050903518636718190-d2b46b7c.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;果然，没什么毛病！！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-17&quot;&gt;commit 变化记录&lt;a class=&quot;zola-anchor&quot; href=&quot;#-17&quot; aria-label=&quot;Anchor link for: -17&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;假设我们做完了上面的回退修改工作后，此时海绵宝宝发现情况不对，柯南也觉得之前的操作似乎有些大意了。若之前的那次版本号为 &lt;code&gt;3c336e0&lt;&#x2F;code&gt;的提交是正确的，刚才的版本回退操作全都是误操作，怎么办？再次执行一次版本回退吗？不需要。我们有 &lt;code&gt;git reflog&lt;&#x2F;code&gt; 命令，它会记录本地仓库所有分支的每一次版本变化。实际上只要本地仓库不被删除，随你怎么折腾，都能回退到任何地方。&lt;code&gt;reflog&lt;&#x2F;code&gt; 记录只存在于本地仓库中，本地仓库删除后，记录消失。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看变化记录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; reflog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5190544120765319618-5a262b62.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所以怎么回退到 &lt;code&gt;3c336e0&lt;&#x2F;code&gt;版本？可以执行命令 &lt;code&gt;git reset --hard[版本号]&lt;&#x2F;code&gt;，如果记不清楚版本号，可以根据图中的第三行信息，执行 &lt;code&gt;git reset --hard HEAD@{2}&lt;&#x2F;code&gt;命令，其中的 &lt;code&gt;READ@{2}&lt;&#x2F;code&gt;就是上图第二行第二列所示的信息，该命令的意思就是回到当前分支最近两次提交版本变化前。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220420162300.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;假设现在反应过来，其实刚才修改的提交是正确的，那么再执行一次 &lt;code&gt;git reset --hard 6928b56&lt;&#x2F;code&gt;即可。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17521413282723458023-39f48a85.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;小结一下本节用到的一些命令：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看本地commit变更记录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; reflog
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 强制推送
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 版本回退
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --soft&lt;&#x2F;span&gt;&lt;span&gt; HEAD^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-18&quot;&gt;拉取pull命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-18&quot; aria-label=&quot;Anchor link for: -18&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-19&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-19&quot; aria-label=&quot;Anchor link for: -19&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;用来拉取远程仓库内容到本地。&lt;strong&gt;git pull&lt;&#x2F;strong&gt; 其实就是 &lt;strong&gt;git fetch&lt;&#x2F;strong&gt; 和 &lt;strong&gt;git merge FETCH_HEAD&lt;&#x2F;strong&gt; 的简写。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-20&quot;&gt;格式&lt;a class=&quot;zola-anchor&quot; href=&quot;#-20&quot; aria-label=&quot;Anchor link for: -20&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;git pull &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-21&quot;&gt;常用操作&lt;a class=&quot;zola-anchor&quot; href=&quot;#-21&quot; aria-label=&quot;Anchor link for: -21&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;撤回已提交到暂存区的文件夹&#x2F;件&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -r --cached &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;文件夹&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;新提交&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;更新仓库，可以用来将本地仓库与远程同步到最新状态。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull origin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;将远程的master分支拉取下来和本地的dev分支合并&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull origin master:dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 如果远程分支是与当前操作的分支合并的话，那么冒号后面的部分(包括冒号)可以省略不写
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull origin master
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-22&quot;&gt;Git分支操作&lt;a class=&quot;zola-anchor&quot; href=&quot;#-22&quot; aria-label=&quot;Anchor link for: -22&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-23&quot;&gt;为git命令设置别名&lt;a class=&quot;zola-anchor&quot; href=&quot;#-23&quot; aria-label=&quot;Anchor link for: -23&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;通过上面的操作一路走来，大概你也发现了有些命令的重复度极高，比如 &lt;code&gt;git status&lt;&#x2F;code&gt; 和 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt; 等，Git 可以对这些命令设置别名，以便简化对它们的使用，设置别名的命令是 &lt;code&gt;git config --global alias.[别名] [原命令]&lt;&#x2F;code&gt;，如果原命令中有选项，需要加引号。别名是自定义的，可以随意命名，设置后，原命令和别名具有同等作用。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16063922586297950273-2f056515.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在就使用上面的别名来试一下水，看看是不是可用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15582830812645582059-084fcd4a.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;果然生效了，效果和原命令不能说很像，只能说一模一样。&lt;strong&gt;注意了，git前缀命令还是需要的，不能直接写别名，那样是不生效的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果那一天记不住自己设置的别名了，可以使用 &lt;code&gt;git config -l&lt;&#x2F;code&gt;来查看。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-24&quot;&gt;git fetch 命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-24&quot; aria-label=&quot;Anchor link for: -24&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;这个命令它的作用是将远程仓库的分支信息拉取到本地仓库，注意，仅仅是更新了本地的远程分支信息，也就是执行 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt; 命令时，查看到的 &lt;code&gt;remotes&lt;&#x2F;code&gt; 开头的行的分支信息。为了方便演示，举例说明一下，首先我们在 &lt;code&gt;GitHub &lt;&#x2F;code&gt;页面上对 &lt;code&gt;one.txt&lt;&#x2F;code&gt; 文件进行修改并增加一次提交。提交完成后，提交数变成 3 个，点下图紫色框中的链接可以看到提交记录：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16539097232290491987-70e80632.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17182750413149084730-5a9f478b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;执行 &lt;code&gt;git fetch&lt;&#x2F;code&gt; 命令，然后执行 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt; 查看分支信息&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-6381421149274234158-cf0bd071.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，本地分支 master 的版本号无变化，而远程分支已经更新。所以，&lt;code&gt;fetch&lt;&#x2F;code&gt; 命令的作用是刷新保存在本地仓库的远程分支信息，此时若想使本地 &lt;code&gt;master&lt;&#x2F;code&gt;分支的提交版本为最新，可以通过执行 &lt;code&gt;git pull&lt;&#x2F;code&gt;命令来拉取远程分支到本地。&lt;&#x2F;p&gt;
&lt;p&gt;由于前面执行过 &lt;code&gt;git fetch&lt;&#x2F;code&gt;命令，这里也可以执行 &lt;code&gt;git rebase origin&#x2F;master&lt;&#x2F;code&gt;命令来实现同样的功能。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2569224816426375544-322a371d.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在再查看分支信息发现刷新成功。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15432665369465569019-1b54b6c3.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-25&quot;&gt;创建新的本地分支&lt;a class=&quot;zola-anchor&quot; href=&quot;#-25&quot; aria-label=&quot;Anchor link for: -25&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;分支在项目开发中作用重大，多人协作时尤其不可或缺。&lt;&#x2F;p&gt;
&lt;p&gt;首先，克隆远程仓库到本地，进入仓库主目录，执行 &lt;code&gt;git br&lt;&#x2F;code&gt;查看分支信息。这个吗，命令相信已经玩的很6了。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;git branch [分支名]&lt;&#x2F;code&gt;来创建一个新的分支：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14096436788937288726-3f760f4e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;注意，新创建的分支并不会被自动切换，还是在之前的 &lt;code&gt;master&lt;&#x2F;code&gt;分支上。执行 &lt;code&gt;git checkout [分支名]&lt;&#x2F;code&gt; 切换分支，注意，我这把该命令设置一个别名 &lt;code&gt;ch&lt;&#x2F;code&gt;，后面用的时候都会使用该别名进行。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1142141978512328189-6fa64f75.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果觉得每次创建新的分支都要手动的去切换，那么你可以尝试使用下面的命令，它可以帮你实现分支的自动切换。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 创建分支并自动切换分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5089333401542797749-91345c3d.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10019706947900181127-aab73108.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到，在分支 &lt;code&gt;dev1&lt;&#x2F;code&gt;的前面出现一个 &lt;code&gt;*&lt;&#x2F;code&gt;，表示当前分支为 &lt;code&gt;dev1&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如上图所示的分支信息，前两行是新建的本地分支信息，它们的版本号与主分支 master 一致，这是因为在哪个分支上创建新分支，新分支的提交记录就与哪个分支一致。新建分支并无跟踪任何远程分支，所以没有 master 分支中的中括号和括号内的蓝色远程分支名。&lt;&#x2F;p&gt;
&lt;p&gt;假设我们要在当前分支 &lt;code&gt;dev1 &lt;&#x2F;code&gt;上开发一个新的功能，需要增加一个文件 &lt;code&gt; new_one.txt&lt;&#x2F;code&gt;，然后生成一个新的提交。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220420173400.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1890489777260326451-ae3d36fd.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-26&quot;&gt;新分支commit的push操作&lt;a class=&quot;zola-anchor&quot; href=&quot;#-26&quot; aria-label=&quot;Anchor link for: -26&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在新分支 &lt;code&gt;dev1&lt;&#x2F;code&gt;中的版本区已经存在了一个新的内容，下一步便是将它push到远程仓库，逻辑上，我们应该将它推送到对应的 &lt;code&gt;dev1&lt;&#x2F;code&gt;仓库上，但问题是现在远程仓库中并没有这个分支，只有一个 &lt;code&gt;master&lt;&#x2F;code&gt;分支。&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8309328208194193048-9f27c6db.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;自然，方法总比问题多，你可以使用 &lt;code&gt;git push [主机名] [本地分支名]:[远程分支名]&lt;&#x2F;code&gt;来解决这个问题，它可以将本地分支推送到远程仓库分支中，冒号前后的分支名通常是相同的，通过相同可以省略 &lt;code&gt;:&lt;&#x2F;code&gt;后的 &lt;code&gt;:[远程分支名]&lt;&#x2F;code&gt;，如果该远程分支不存在会自动创建该分支并完成推送。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 自动创建远程分支并完成推送
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push origin dev1:dev1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11451462603832747773-11d810ce.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;显示推送成功，我们去网页上看看。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7465579268896825386-d5c5c63a.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还是OK的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-27&quot;&gt;跟踪远程分支&lt;a class=&quot;zola-anchor&quot; href=&quot;#-27&quot; aria-label=&quot;Anchor link for: -27&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;现在的问题是，如果我们使用 &lt;code&gt;dev1&lt;&#x2F;code&gt;分支提交、推送就还需要输入那段较长的命令，着实有些麻烦，所以现在有一个方法，可以能和 &lt;code&gt;master&lt;&#x2F;code&gt;分支一样跟踪远程同名分支，可以直接使用 &lt;code&gt;git push&lt;&#x2F;code&gt;命令进行推送。&lt;&#x2F;p&gt;
&lt;p&gt;命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;主机名&#x2F;远程分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span&gt;本地分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;命令将本地分支与远程分支做了一个关联，或者说使本地分支跟踪远程分支。如果是设置当前所在分支跟踪远程分支，最后一个参数本地分支名可以省略。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-6586883568645030439-37f51a74.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当然，执行 &lt;code&gt;git branch --unset-upstream [分支名]&lt;&#x2F;code&gt; 可撤销该分支对远程分支的跟踪，同样地，如果撤销当前所在的分支的跟踪，分支名可以省略不写。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-250507523710923607-edcfe5cd.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有没有办法在推送时就自动跟踪远程分支呢？当然有，只要在推送的时候，加个 &lt;code&gt;--set-upstream&lt;&#x2F;code&gt; 或其简写 &lt;code&gt;-u&lt;&#x2F;code&gt; 选项即可，现在切换到 &lt;code&gt;dev &lt;&#x2F;code&gt;分支试一下水。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 推送时自动跟踪分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; origin dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-545178229849817364-cd9eb54b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-28&quot;&gt;删除远程分支&lt;a class=&quot;zola-anchor&quot; href=&quot;#-28&quot; aria-label=&quot;Anchor link for: -28&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;使用 &lt;code&gt;git push [主机名]:[远程分支名]&lt;&#x2F;code&gt;，如果想批量删除，&lt;code&gt;git push [主机名] :[远程分支名] :[远程分支名] :[远程分支名]&lt;&#x2F;code&gt;该命令的原理是向远程分支推送一个空分支。除此之外还有一个命令 &lt;code&gt;git push [主机名] -- delete[远程分支名]&lt;&#x2F;code&gt;。删除远程分支的命令可以在任意本地分支中进行，无需特地切换分支。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 方式一
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push origin :dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18362083536819613915-0812728b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 方式二
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push origin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --delete&lt;&#x2F;span&gt;&lt;span&gt; dev1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4557542496207430156-e310477f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;查看网页发现已经成功删除了 &lt;code&gt;dev1&lt;&#x2F;code&gt;和 &lt;code&gt;dev&lt;&#x2F;code&gt;分支。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10777682985398872594-ed1016b6.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-29&quot;&gt;本地分支的更名与删除&lt;a class=&quot;zola-anchor&quot; href=&quot;#-29&quot; aria-label=&quot;Anchor link for: -29&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;给本地分支改名使用 &lt;code&gt;git branch -m [原分支名] [新分支名]&lt;&#x2F;code&gt;如果修改当前所在分支的名字，原分支名可以省略不写。&lt;&#x2F;li&gt;
&lt;li&gt;删除本地分支使用 &lt;code&gt;git branch -D [分支名]&lt;&#x2F;code&gt;，同样也支持批量删除语法。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 给本地分支改名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; dev2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5589053181182695071-799c1825.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 删除本地分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -D&lt;&#x2F;span&gt;&lt;span&gt; dev2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意在执行删除分支之前，当前所在的分支不能被删除。切换到 master 分支，然后执行 &lt;code&gt;git branch -D dev2 dev1&lt;&#x2F;code&gt; 命令：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9810708312871403341-a79b885f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再查看分支信息：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5928182280263071147-f97d992f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;成功删除。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;现在一切又回到了最初的起点，可是你却再也回不去了，你已不再是原来的你，物是人非，现在的你已经学会了Git，想要回到解放前估计是不可能了，除非，你放弃自己！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-30&quot;&gt;多人协作&lt;a class=&quot;zola-anchor&quot; href=&quot;#-30&quot; aria-label=&quot;Anchor link for: -30&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-31&quot;&gt;GitHub篇&lt;a class=&quot;zola-anchor&quot; href=&quot;#-31&quot; aria-label=&quot;Anchor link for: -31&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-32&quot;&gt;创建仓库&lt;a class=&quot;zola-anchor&quot; href=&quot;#-32&quot; aria-label=&quot;Anchor link for: -32&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;本节将介绍 &lt;code&gt;GitHub &lt;&#x2F;code&gt;多人协作与相关 &lt;code&gt;Git &lt;&#x2F;code&gt;的操作建议大家准备两个浏览器和两个 &lt;code&gt;GitHub &lt;&#x2F;code&gt;账号以便模拟场景。我的账号 &lt;code&gt;xffvip&lt;&#x2F;code&gt;是一个用来测试的账号，假定这是项目组长的账号，&lt;code&gt;xiaoyivip&lt;&#x2F;code&gt;是组员的账号。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;此时我两个谷歌邮箱加持的俩谷歌浏览器：&lt;code&gt;爸爸爱你1号&lt;&#x2F;code&gt;和 &lt;code&gt;爸爸爱你2号&lt;&#x2F;code&gt;就来点作用了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7868774678960389599-db3cfc7c.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先，在组长账号中创建一个仓库，名为 work，在创建仓库时，需要说明第一节中提到的两个下拉框：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7980200658165846114-fc5a719e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3377566846819774842-f4f6ad42.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上边的忽略文件下拉框：我们在写代码时，总会出现一些不需要上传到仓库的垃圾文件、缓存文件、备份文件、环境文件等等，可以创建一个忽略文件将这些不需要被上传到远程仓库的文件忽略掉。忽略文件的名字是 &lt;code&gt;.gitignore&lt;&#x2F;code&gt;，它被放置在仓库主目录下，将不需上传的文件的名字写入其中，Git 就会自动忽略它们。比如这个仓库是用来 Windows 开发的，就在下拉框中选择 Windows，如果这是一个保存 Java 项目的仓库，就选择 Java。这样，在仓库创建成功后，忽略文件就自动出现了，这个忽略文件中有对应的语言或工具中绝大部分通用的忽略规则。当然了，你也可以自己手动增删改。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果在创建仓库时忘记了选择忽略文件，几个提交后突然想起来，怎么办？GitHub 上有人把忽略文件都做好了，打开链接 &lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;gitignore&quot;&gt;github &#x2F; gitignore&lt;&#x2F;a&gt; ，这个仓库里有很多忽略文件，选择你需要的放到自己的仓库即可&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;下边的开源许可下拉框：关于开源许可证，这不是一时半会能说清楚的，建议自己搜索。我们的仓库不需要选择这一项。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;创建成功之后：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3314126129415452354-dfa8a8e8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;对上图右上角三个按钮进行说明：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Watch：这是一个下拉按钮，可以选择对此仓库关注、不关注、忽略等。&lt;&#x2F;p&gt;
&lt;p&gt;Star：如果觉得这个仓库很好，就点击这个按钮送一颗星，在淘宝提供刷星业务之前，仓库获得的星越多表示该项目越优秀。&lt;&#x2F;p&gt;
&lt;p&gt;Fork：在别人的仓库中点此按钮会克隆一个完全一样的仓库到你自己的账号中，包括所有分支、提交等，但不会克隆 issue（后面会讲到），当此仓库发生版本变化，不会自动同步到你克隆的仓库里，反之亦然。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-33&quot;&gt;添加协作者&lt;a class=&quot;zola-anchor&quot; href=&quot;#-33&quot; aria-label=&quot;Anchor link for: -33&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;现在在组长账号中增加该仓库的合作者，也就是组员。我就添加自己的另一个号 &lt;code&gt;xiaoyivip&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16508093147771236775-f7a19f65.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4956971893658180951-f6238379.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在输入框中输入对方的用户名或者邮箱即可选择添加。添加之后进入组员的账号会收到一条邀请信息，打开如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18350574972287502776-9327c2be.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击绿色按钮。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1695260005354738172-b0ebd1b4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击右上角 &lt;code&gt;Fork&lt;&#x2F;code&gt;，将该仓库克隆到自己的仓库中。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7433856181266986223-0651778b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-34&quot;&gt;添加 issue&lt;a class=&quot;zola-anchor&quot; href=&quot;#-34&quot; aria-label=&quot;Anchor link for: -34&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;切换到组长的 &lt;code&gt;GitHub &lt;&#x2F;code&gt;页面，在仓库中添加一些项目任务或待解决问题，这些任务就是 &lt;code&gt;issue&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12084467760903937435-fd587ee3.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2594238524348847948-3978b5b2.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5639447697244761917-b9eb91a6.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;写好任务标题后，可以在右侧指派一位或多位项目参与者来完成，同样 GitHub 也会给被指派者发邮件的（可以在自己的 GitHub 账号上设置拒收哪类邮件）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220420223612.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;组长仓库里的 issue 不会出现在组员仓库中。&lt;&#x2F;p&gt;
&lt;p&gt;此时组员会收到一条站内消息，页面如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8264579879650495062-23a0ef99.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以上就是多人协作 &lt;code&gt;GitHub&lt;&#x2F;code&gt;篇的内容。更多协作方面的操作请继续看下面的 &lt;code&gt;git&lt;&#x2F;code&gt;篇。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-35&quot;&gt;Git篇&lt;a class=&quot;zola-anchor&quot; href=&quot;#-35&quot; aria-label=&quot;Anchor link for: -35&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-36&quot;&gt;克隆仓库到本地&lt;a class=&quot;zola-anchor&quot; href=&quot;#-36&quot; aria-label=&quot;Anchor link for: -36&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;以组员的身份克隆work仓库到本地环境。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 仓库地址
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git@github.com:xiaoyivip&#x2F;work.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;地址中的 &lt;code&gt;.git&lt;&#x2F;code&gt;是不需要的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4483575900448362256-f3d89385.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;完成项目组长分配的 &lt;code&gt;issue&lt;&#x2F;code&gt;并推送到自己的仓库。注意每个 issue 在创建后都会生成一个编号，我们首先完成 1 号 issue。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-872965296456799276-98b356df.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 创建a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hello you&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 添加
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 提交
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; com &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;fix #1 添加文件a.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; st
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看分支信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; br
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17353214750728834457-c8935ed0.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;注意在执行 &lt;code&gt;commit &lt;&#x2F;code&gt;命令时，备注信息里有个 “fix #1”，这是必要的，当备注信息中含有此字样的 &lt;code&gt;commit &lt;&#x2F;code&gt;出现在组长仓库，仓库中编号为 #1 的 issue 就会自动关闭。类似的字样还有 “&lt;code&gt;fixes #xxx、fixed #xxx、closes #xxx、close #xxx、closed #xxx&lt;&#x2F;code&gt;”，这些并不重要，选择字母最少的 fix 就可以了。当然偶尔忘记写这个字样也不要紧的，issue 可以手动关闭，甚至关掉的 issue 还能再开。&lt;&#x2F;p&gt;
&lt;p&gt;完成以上操作，组员的 &lt;code&gt;GitHub &lt;&#x2F;code&gt;仓库会发生变化，新增一个版本号为 &lt;code&gt;efcca58&lt;&#x2F;code&gt;的提交：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18421792841657355490-c32d26be.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-37&quot;&gt;提 PR &amp;amp; 检查合并 PR&lt;a class=&quot;zola-anchor&quot; href=&quot;#-37&quot; aria-label=&quot;Anchor link for: -37&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;上面我们以组员的身份已经完成了组长派发的编号为#1的 &lt;code&gt;issue&lt;&#x2F;code&gt;并推送到了自己的仓库，那么接下来怎么把修改从组员仓库添加到组长仓库呢？&lt;&#x2F;p&gt;
&lt;p&gt;这将会用到 &lt;code&gt;pull request&lt;&#x2F;code&gt;命令，简称PR。可以理解为&lt;strong&gt;允许被拉取的请求&lt;&#x2F;strong&gt;，创建一个PR就是从甲分支向乙分支提交一个请求，该请求中有一个或多个提交，若对方(这里指组长)觉得这个提交请求没什么问题之后，就可以允许合并(merge)这个请求，也就是把请求中所有提交的修改增加到乙分支上，整个过程称为&lt;strong&gt;提PR&lt;&#x2F;strong&gt;，&lt;strong&gt;检查合并PR&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;提PR可以在仓库内，也可以跨用户仓库。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;好，现在我们从组员的 work 仓库 main 分支给组长的 work 仓库 main 分支提一个 PR。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12563276839743572653-c835fe90.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如下图所示，仔细检查紫色框中的内容是否正确，再看绿色椭圆形框中的绿色字样 “&lt;code&gt;Able to merge&lt;&#x2F;code&gt;.”，说明这个 &lt;code&gt;PR &lt;&#x2F;code&gt;中的修改跟目标分支没有冲突&lt;&#x2F;p&gt;
&lt;p&gt;从上图还可得知一些信息：该 PR 里有 1 个提交，1 个文件改动，1 个贡献者。点击上图绿色按钮跳转到确认页面，再次点击下图绿色按钮即可完成本次 “提 &lt;code&gt;PR&lt;&#x2F;code&gt;” 工作：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13521426524017925060-f37b91cb.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220421094853.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;该页面只有参与项目协作的成员有权限进入，当前 &lt;code&gt;GitHub &lt;&#x2F;code&gt;的登录用户是组员，所以可见，且对这个仓库有完全的管理权限，除了删除仓库。当然了，检查合并 PR 的权限也是有的。重要的一点：提了 PR 之后，一定要求参与项目的其他成员来检查合并，不要自己来，尽管自己有权限。(当然，为了方便，我这里是自己以组员身份检查的合并)。&lt;&#x2F;p&gt;
&lt;p&gt;上图中绿色按钮是个下拉按钮，合并 PR 的方法有三种，分别解释一下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Create a merge commit&lt;&#x2F;code&gt; ：这种方式会在组长仓库的 master 分支上生成一个新的提交，且保留 PR 中的所有提交信息。这是一种常规操作，用得最多。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Squash and merge&lt;&#x2F;code&gt; ：压缩合并，它会把 PR 中的全部提交压缩成一个。此方法的优点就是让提交列表特别整洁。一个 PR 里有很多提交，每个提交都是很细小的改动，保留这些提交没什么意义，这种情况就使用此方法合并 PR。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Rebase and merge&lt;&#x2F;code&gt; ：这种方法不会生成新的提交，例如 PR 中有 6 个提交，用此方法合并后，组长仓库也会新增 6 个提交。注意，这些提交的版本号与组员的提交不同，此外完全一样。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;现在切换到组长身份，可以看到，之前的两个 &lt;code&gt;issue&lt;&#x2F;code&gt;现在只有一个了，说明合并成功后已经自动关闭该任务。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7061296705740790824-9dc12f30.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以上就是一次完整的修改、提交、推送、提 PR、合并 PR 的过程。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;需要注意的一点：从 A 向 B 提 PR 后，在 PR 合并或关闭前，A 上所有新增的提交都会出现在 PR 里。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-38&quot;&gt;同步主仓库&lt;a class=&quot;zola-anchor&quot; href=&quot;#-38&quot; aria-label=&quot;Anchor link for: -38&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;我们假设组长的main分支自己新增一些组员没有的提交，那么需要让组员的仓库同步组长的仓库，使它们的提交版本一致。作为组员，要时刻保持自己的分支与组长的一致，以避免在下次提 PR 时出现冲突，该操作叫做 “同步主仓库”，组长的仓库就是主仓库。&lt;&#x2F;p&gt;
&lt;p&gt;提 PR、合并 PR 只能在 &lt;code&gt;GitHub &lt;&#x2F;code&gt;页面上操作。同步主仓库是要用 &lt;code&gt;Git &lt;&#x2F;code&gt;操作的。现在回到终端中操作。首先，使用 &lt;code&gt;remote&lt;&#x2F;code&gt; 系列命令来增加一个关联主机，执行 &lt;code&gt;git remote add [主机名] [主仓库的地址]&lt;&#x2F;code&gt;，注意，主仓库的地址使用 &lt;code&gt;https &lt;&#x2F;code&gt;开头的：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5445914307986393756-5b1c750b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如上图所示，主机名是随意定义的，只要不是 origin 就可以，因为自己的仓库地址对应的主机名是 origin，主仓库的主机名通常定义为 up 或 upstream，这个主机名其实就是一个变量，它的值就是仓库地址，例如 &lt;code&gt;git push origin main&lt;&#x2F;code&gt; 完全等于 &lt;code&gt;git push git@github.com:xiaoyivip&#x2F;work main&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;现在可以使用前面介绍过的 &lt;code&gt;fetch&lt;&#x2F;code&gt; 命令来拉取主仓库的全部分支信息到本地仓库了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; fetch up
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同步主仓库有两种方法：一是执行 &lt;code&gt;git pull --rebase up master&lt;&#x2F;code&gt; ，此命令需联网，二是执行 &lt;code&gt;git rebase up&#x2F;master&lt;&#x2F;code&gt;，此命令不联网，因为前面已经执行了 &lt;code&gt;git fetch up&lt;&#x2F;code&gt; 这个需要联网的命令，本地已经有了最新的主仓库 master 分支信息，所以可以这么操作。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我这里使用方法二来同步&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; rebase up&#x2F;main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;全剧终，再见！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-39&quot;&gt;番外，踩坑实录&lt;a class=&quot;zola-anchor&quot; href=&quot;#-39&quot; aria-label=&quot;Anchor link for: -39&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这部分的内容，主要记录一下在使用过程中遇到的一些坑吧，由于平台等因素，可能并不适用于任何人，仅供参考。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-40&quot;&gt;git push遇到的问题&lt;a class=&quot;zola-anchor&quot; href=&quot;#-40&quot; aria-label=&quot;Anchor link for: -40&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用环境&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows11&lt;&#x2F;code&gt;中基于 &lt;code&gt;wsl&lt;&#x2F;code&gt;的 &lt;code&gt;kaliLinux&lt;&#x2F;code&gt;系统。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;问题描述&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;切面步骤没问题，在执行git push时遇到&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;fatal: unable to access ‘https:&#x2F;&#x2F;github.com&#x2F;xiaoyivip&#x2F;gitdemo.git&#x2F;’: GnuTLS recv error (-110): The TLS connection was non-properly terminated.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;解决方法&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编辑.&lt;code&gt;gitconfig&lt;&#x2F;code&gt;文件，添加下面的内容&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;[https]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sslVerify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;问题解决。具体原因不详，待研究。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一个可能的原因是我自己开启了科学上网的模式导致，仅供参考！&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;-41&quot;&gt;git status遇到的问题&lt;a class=&quot;zola-anchor&quot; href=&quot;#-41&quot; aria-label=&quot;Anchor link for: -41&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;使用环境&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;命令的使用环境是Windows版本的git客户端的Bash命令行。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;问题描述：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用git status时，如果内容中有中文内容，会显示八进制格式的返回结果，而不是中文，显然这不利于我们正常的使用。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13661521523231185062-35b5c82f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;解决方法&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1.修改配置文件并全局生效，命令如下：
&lt;code&gt;git config --global core.quotepath false&lt;&#x2F;code&gt; &lt;strong&gt;在linux环境下同样适用&lt;&#x2F;strong&gt;
2 .修改客户端编码
可以在终端窗口空白处双击，出现菜单选择Options-&amp;gt;Text
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12602547079990349008-cb311fcf.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;
解决之后的效果：
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13751329048976225819-0967decb.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-42&quot;&gt;git pull遇到问题&lt;a class=&quot;zola-anchor&quot; href=&quot;#-42&quot; aria-label=&quot;Anchor link for: -42&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830212821060.png&quot; alt=&quot;image-20220830212821060&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决方法:&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull origin master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --allow-unrelated-histories
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-43&quot;&gt;GitHub页面部分续集&lt;a class=&quot;zola-anchor&quot; href=&quot;#-43&quot; aria-label=&quot;Anchor link for: -43&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主要更新关于github的网页部分的内容。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-44&quot;&gt;Git命令部分续集&lt;a class=&quot;zola-anchor&quot; href=&quot;#-44&quot; aria-label=&quot;Anchor link for: -44&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这个模块主要还是在前面git教程内容的基础上更新和补充关于git命令部分的一些内容和技巧。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-45&quot;&gt;获取最近一次提交的内容&lt;a class=&quot;zola-anchor&quot; href=&quot;#-45&quot; aria-label=&quot;Anchor link for: -45&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过下面的命令可以直接返回最近一次commit的内容。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; show
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 或者
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -n1 -p
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2566087545147917182-8c217f36.png&quot; alt=&quot;image-20220604212011585&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，如果你最近一次commit的内容较多，可能命令行一页展示不完，会进行多页展示，此时可以通过键盘上的空格键进行翻页，结束查看请输入 &lt;code&gt;q&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-46&quot;&gt;修改提交信息&lt;a class=&quot;zola-anchor&quot; href=&quot;#-46&quot; aria-label=&quot;Anchor link for: -46&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;下面的命令主要的作用场景是你的某一次提交中不小心写错了提交的备注信息并且还未进行push时，需要修改的情况下。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --amend --only
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2852041928708778819-79f7f80e.png&quot; alt=&quot;image-20220604212456028&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;该命令会打开你设置的默认编辑器方便编辑，如图我的是vim，如果你不想这样做，也可以一行命令解决。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --amend --only -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;提交备注信息&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果说，你以及push了本次提交，那么一种方式是修改提交内容之后强推，也就是在推送是加上 &lt;code&gt;-f&lt;&#x2F;code&gt;参数，但一般不建议这样做。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Google Hacking</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/google-hacking/</link>
          <guid>https://ilikexff.cn/google-hacking/</guid>
          <description xml:base="https://ilikexff.cn/google-hacking/">&lt;h2 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志：&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;2022-10-03&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修改文章名称&lt;&#x2F;li&gt;
&lt;li&gt;新增几条搜索技巧&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-09-26&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;调整目录结构&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;qian-qing-ti-yao&quot;&gt;前情提要&lt;a class=&quot;zola-anchor&quot; href=&quot;#qian-qing-ti-yao&quot; aria-label=&quot;Anchor link for: qian-qing-ti-yao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如今科技网络如此发达的大环境，能学会一些非常实用的搜索技术,真的可以“为所欲为”，再者，我觉得不能让’找不到某某资源成为借口’，作为计算机专业的同学来说。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;【声明】:如果使用Google搜索引擎，那该部分很重要但不适合展示，请自行摸索….本文不提供任何&lt;strong&gt;help&lt;&#x2F;strong&gt;,&lt;strong&gt;亦不承担任何责任&lt;&#x2F;strong&gt;!还有一点，所谓的&lt;code&gt;Google Hacking&lt;&#x2F;code&gt; 并不是说只能使用 Google，只要是搜索引擎都可以使用，只是这名字是外国人起的，外国人更多的人使用 Google，我们当然也可以使用百度、搜狗、bing 等等其他的搜索引擎。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;sou-suo-ji-qiao&quot;&gt;搜索技巧&lt;a class=&quot;zola-anchor&quot; href=&quot;#sou-suo-ji-qiao&quot; aria-label=&quot;Anchor link for: sou-suo-ji-qiao&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;提到搜索引擎，度爷也是一个不可忽视的存在了，但现今的百度已经变味了【个人觉得】，打开百度、键入关键词、回车一气呵成，等着你的就是一堆广告。搜索引擎不再专注于搜索，不纯粹了！所以我选择了&lt;strong&gt;Google&lt;&#x2F;strong&gt;搜索。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220219115817.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;使用引号强制进行精确匹配搜索&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“what is Java?”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-10461995544372781941-6670a275.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-1&quot;&gt;使用And连接符&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql AND Java&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-14504734167488444756-53312d1d.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-2&quot;&gt;使用OR操作符获取搜索词中某一个的结果&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;(Java OR C++) free course&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-472250761333355458-241c96a5.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-3&quot;&gt;操作符将排除包含搜索词的结果&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Javascript -css&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-1380911999494599259-f33910ad.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-4&quot;&gt;可以使用(*)通配符作为占位符，它将被任何单词或短语替换&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“how to start * in 6 months”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-13092045242420342526-b72f6005.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-5&quot;&gt;在一个单一的网站搜索&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;site:baidu.com 中国&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-8020630060643892821-afa57228.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-6&quot;&gt;查找特定的文件类型&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;filetype:pdf learn java&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-6235979189838873316-c0c03a6e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-7&quot;&gt;搜索一个数字范围&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ecmascript 2016..2022&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-16261730749587081018-8daabba1.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;【注】&lt;&#x2F;strong&gt;：以上几个技巧来自知乎&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;355438850&quot;&gt;【工具】像大佬一样使用 Google&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-8&quot;&gt;intext:搜索文章内容&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125019967.png&quot; alt=&quot;image-20221003125019967&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-9&quot;&gt;intitle:搜索页面的标题&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125208356.png&quot; alt=&quot;image-20221003125208356&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-10&quot;&gt;cache:搜索已经被删除但是还留缓存的页面&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;由于搜索结果不宜展示，作了一些处理。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125531285.png&quot; alt=&quot;image-20221003125531285&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-11&quot;&gt;related:搜索与之相关的站点&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125720943.png&quot; alt=&quot;image-20221003125720943&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-12&quot;&gt;info:搜索某个网站的信息&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125829490.png&quot; alt=&quot;image-20221003125829490&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-13&quot;&gt;inurl:匹配网站url中的关键字&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003130047559.png&quot; alt=&quot;image-20221003130047559&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-14&quot;&gt;define:搜索某个词的定义&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这个词我以前是不知道的，自从用了某特,发现了人性令人作呕的一面。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003130231654.png&quot; alt=&quot;image-20221003130231654&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-15&quot;&gt;不错的问题交流社区&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;&quot;&gt;stackoverflow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;待更新…&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</description>
      </item>
      <item>
          <title>关于接口限流的一次简单实践</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/guan-yu-jie-kou-xian-liu-de-yi-ci-jian-dan-shi-jian/</link>
          <guid>https://ilikexff.cn/guan-yu-jie-kou-xian-liu-de-yi-ci-jian-dan-shi-jian/</guid>
          <description xml:base="https://ilikexff.cn/guan-yu-jie-kou-xian-liu-de-yi-ci-jian-dan-shi-jian/">&lt;h2 id=&quot;1-xie-zhe-pian-wen-zhang-de-lai-you&quot;&gt;1.写这篇文章的来由&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-xie-zhe-pian-wen-zhang-de-lai-you&quot; aria-label=&quot;Anchor link for: 1-xie-zhe-pian-wen-zhang-de-lai-you&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;有一段时间里，博客总是三天两头被打，其中就遇到了恶意刷接口的手段，对方明显使用的代码IP，由于博客并没有做这方面的措施，加上被大量盗刷的接口刚好是数据量最大的一篇文章数据，所以不出意外的，博客没多久就崩了。服务器状态也是各种异常。所以吃一堑长一智吧算是，我也没想到&lt;strong&gt;面对&lt;&#x2F;strong&gt;一个个人小破站，&lt;strong&gt;对面&lt;&#x2F;strong&gt;也是饥不择食….真&lt;strong&gt;大黑客&lt;&#x2F;strong&gt;啊兄弟们！！！&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;ERROR.jpg&quot; alt=&quot;ERROR&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;2.接口限流的常见手段&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;​	现在来说，做限流的各种方案其实已经相对很成熟了，这里也是大致列举了几种常用的解决方案，但不会全部都细说。&lt;&#x2F;p&gt;
&lt;p&gt;毕竟很多都还是自己没有实际使用过的，光搞理论是没什么意义的，所以后续有时间打算一个个揪出来细搞，起码得到用过了再写篇文章总结一下吧。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Java中常用的限流解决方案:&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;计数器&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;滑动窗口&lt;&#x2F;li&gt;
&lt;li&gt;漏桶&lt;&#x2F;li&gt;
&lt;li&gt;令牌桶&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Redis+Lua&lt;&#x2F;code&gt;分布式限流&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;由于我博客采用的就是计数器方案，所以这里主要记录一下整个大致的限流原理以及实践过程。&lt;&#x2F;p&gt;
&lt;p&gt;上面几种方案中，计数器算是最简单的限流算法了。原理就是在指定的时间间隔内，对接口的请求次数进行限制，具体到我的博客为例，我是针对每个&lt;code&gt;IP&lt;&#x2F;code&gt;进行的请求限制，对请求进行计数，判断请求数量与阈值的情况，决定是否需要限流，每个&lt;code&gt;IP&lt;&#x2F;code&gt;触发限流之后会有一定的时间周期，计数器到时清零即可。&lt;&#x2F;p&gt;
&lt;p&gt;这就是计数器限流基本的原理。具体的实现上，我选用了&lt;code&gt;Redis&lt;&#x2F;code&gt;作为了计数限流的中间件，所以也可以理解为，这是&lt;code&gt;Redis+&lt;&#x2F;code&gt;计数器的一种实现方式。具体执行的逻辑如下:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;设置好计数器&lt;code&gt;count&lt;&#x2F;code&gt;，每过一次请求计数器就&lt;code&gt;+1&lt;&#x2F;code&gt;，同时记录对应的请求&lt;code&gt;IP&lt;&#x2F;code&gt;；&lt;&#x2F;li&gt;
&lt;li&gt;当下一个请求到来之际，首先通过&lt;code&gt;IP&lt;&#x2F;code&gt;判断对应的计数器是否达到了限流的频次，以及本次请求是否还在设定的请求周期内；&lt;&#x2F;li&gt;
&lt;li&gt;如果请求已触发限流阈值，则针对该&lt;code&gt;IP&lt;&#x2F;code&gt;开启限流，后面的所有请求均直接拒绝。&lt;&#x2F;li&gt;
&lt;li&gt;当被限流&lt;code&gt;IP&lt;&#x2F;code&gt;达到时间周期满之后，将&lt;code&gt;count&lt;&#x2F;code&gt;重置，计数器进入下一轮的就绪状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;原理也是蛮简单的，我也是蛮喜欢这种方式的(&lt;strong&gt;床言床语&lt;&#x2F;strong&gt;😀）。下面开始具体的实操部分。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;3.计数器限流实践&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;首先确定实现的具体方案，上面说了，我这里用的是&lt;code&gt;Redis&lt;&#x2F;code&gt;作为限流计数器的记录以及限流状态的重置等操作。具体限流的逻辑直接写以&lt;code&gt;Java&lt;&#x2F;code&gt;带代码写在了项目业务中。&lt;&#x2F;p&gt;
&lt;p&gt;特别的，由于是通过&lt;code&gt;IP&lt;&#x2F;code&gt;来限流的，所以这里需要用大的几个处理&lt;code&gt;IP&lt;&#x2F;code&gt;地址的工具类就先贴出来。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;个人习惯，我贴代码会将所有&lt;code&gt;import&lt;&#x2F;code&gt;的包都一起贴进来，这样是方便后续回顾或者学习的时候处理一些包的问题，之前就遇到过很多类似的问题(可能对小白不太友好)，代码是有了，结果在导包的时候要么是对用到的哪些包不明所以，要么是同名的包过多，不知道怎么选择。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-2&quot;&gt;3.1 IP工具类&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bitwalker&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;useragentutils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UserAgent&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lombok&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extern&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;slf4j&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Slf4j&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;apache&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;commons&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lang3&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;StringUtils&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lionsoul&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ip2region&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;DataBlock&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lionsoul&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ip2region&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;DbConfig&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lionsoul&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ip2region&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;DbSearcher&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lionsoul&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ip2region&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Util&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;springframework&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;core&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ClassPathResource&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;springframework&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;stereotype&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Component&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;springframework&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FileCopyUtils&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;javax&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;annotation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;PostConstruct&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;javax&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;servlet&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HttpServletRequest&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;InputStream&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Method&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;InetAddress&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UnknownHostException&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Slf4j
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Component
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;IpUtils &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * 获取ip地址
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public static String getIpAddress(HttpServletRequest request) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        String ipAddress = request.getHeader(&amp;quot;X-Real-IP&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        if (ipAddress == null || ipAddress.length() == 0 || &amp;quot;unknown&amp;quot;.equalsIgnoreCase(ipAddress)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;            ipAddress = request.getHeader(&amp;quot;x-forwarded-for&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        if (ipAddress == null || ipAddress.length() == 0 || &amp;quot;unknown&amp;quot;.equalsIgnoreCase(ipAddress)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;            ipAddress = request.getHeader(&amp;quot;Proxy-Client-IP&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        if (ipAddress == null || ipAddress.length() == 0 || &amp;quot;unknown&amp;quot;.equalsIgnoreCase(ipAddress)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;            ipAddress = request.getHeader(&amp;quot;WL-Proxy-Client-IP&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        if (ipAddress == null || ipAddress.length() == 0 || &amp;quot;unknown&amp;quot;.equalsIgnoreCase(ipAddress)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;            ipAddress = request.getHeader(&amp;quot;HTTP_CLIENT_IP&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        if (ipAddress == null || ipAddress.length() == 0 || &amp;quot;unknown&amp;quot;.equalsIgnoreCase(ipAddress)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;            ipAddress = request.getHeader(&amp;quot;HTTP_X_FORWARDED_FOR&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        if (ipAddress == null || ipAddress.length() == 0 || &amp;quot;unknown&amp;quot;.equalsIgnoreCase(ipAddress)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;            ipAddress = request.getRemoteAddr();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;            if (&amp;quot;127.0.0.1&amp;quot;.equals(ipAddress) || &amp;quot;0:0:0:0:0:0:0:1&amp;quot;.equals(ipAddress)) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                &#x2F;&#x2F;根据网卡取本机配置的IP
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                InetAddress inet = null;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                try {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                    inet = InetAddress.getLocalHost();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                } catch (UnknownHostException e) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                    log.error(&amp;quot;getIpAddress exception:&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                assert inet != null;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                ipAddress = inet.getHostAddress();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        return StringUtils.substringBefore(ipAddress, &amp;quot;,&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private static DbSearcher searcher;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private static Method method;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * 在服务启动时加载 ip2region.db 到内存中
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    @PostConstruct
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private void initIp2regionResource() throws Exception {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        InputStream inputStream = new ClassPathResource(&amp;quot;&#x2F;ip&#x2F;ip2region.db&amp;quot;).getInputStream();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        &#x2F;&#x2F;将 ip2region.db 转为 ByteArray
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        byte[] dbBinStr = FileCopyUtils.copyToByteArray(inputStream);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        DbConfig dbConfig = new DbConfig();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        searcher = new DbSearcher(dbConfig, dbBinStr);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        &#x2F;&#x2F;二进制方式初始化 DBSearcher，需要使用基于内存的查找算法 memorySearch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        method = searcher.getClass().getMethod(&amp;quot;memorySearch&amp;quot;, String.class);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * 获取ip地址的归属地
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getIpSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ipAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ipAddress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| !Util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isIpAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ipAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Error: Invalid ip address&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;DataBlock&lt;&#x2F;span&gt;&lt;span&gt; dataBlock &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;DataBlock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; method.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;invoke&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;searcher, ipAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; ipInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; dataBlock.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getRegion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!StringUtils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isEmpty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ipInfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                ipInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ipInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;|0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                ipInfo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ipInfo.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;0|&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; ipInfo;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            log.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;getCityInfo exception:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getIpProvince&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ipSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; strings &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; ipSource.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;|&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;strings[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;endsWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;省&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return StringUtils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;substringBefore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;strings[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;], &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;省&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; strings[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * 获取访问设备
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public static UserAgent getUserAgent(HttpServletRequest request) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        return UserAgent.parseUserAgentString(request.getHeader(&amp;quot;User-Agent&amp;quot;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;3.2 定义限流注解&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;为了使用方便，我这里选择了注解的方式，这样在使用的时候只需要在需要进行限流的请求&lt;code&gt;Controller&lt;&#x2F;code&gt;上添加一个注解即可。就像这样:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221229211158557.png&quot; alt=&quot;image-20221229211158557&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;自定义的限流注解其实很简单，主要包含限流的Key，限流周期以及请求计数器。当然，这些数据都是完全可以自定义的，并没有什么约定俗成，具体工具自己的业务需要决定就好。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;annotation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;10&#x2F;19 12:34
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @Description: 自定义注解:接口限流
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Documented
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Retention&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RetentionPolicy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RUNTIME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ElementType&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;METHOD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;@interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;RateLimit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * 限流的key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    String key() default &amp;quot;limit&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * 周期：单位秒
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@return
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    int cycles() default 5;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    &#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * 请求次数
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@return
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    int count() default 1;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-4&quot;&gt;3.3 自定义拦截器&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这里使用到了拦截器，主要作用就是拦截处理所有的请求进行拦截，主要用到的&lt;code&gt;preHandle&lt;&#x2F;code&gt;方法。所有的限流逻辑都在这里实现。所以这部分挺重要的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;10&#x2F;19 12:38
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @Description: 拦截器:处理接口限流
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Component
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;RateLimitInterceptor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;HandlerInterceptor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Resource
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RedisTemplate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; redisTemplate;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Autowired
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;EmailUtils &lt;&#x2F;span&gt;&lt;span&gt;emailUtils;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;preHandle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HttpServletRequest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HttpServletResponse &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;handler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;throws Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 如果请求的是方法，则需要做校验
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;handler &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instanceof HandlerMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HandlerMethod&lt;&#x2F;span&gt;&lt;span&gt; handlerMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HandlerMethod&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; handler;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 获取目标方法上是否有指定注解
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RateLimit&lt;&#x2F;span&gt;&lt;span&gt; rateLimit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; handlerMethod.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getMethodAnnotation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RateLimit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;rateLimit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;说明目标方法上没有 RateLimit 注解
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 说明目标方法上有 RateLimit 注解，所以需要校验这个请求是不是在刷接口
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 获取请求IP地址
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;IpUtils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getIpAddress&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 请求url路径
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; uri &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getRequestURI&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;存到redis中的key
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;RateLimit:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; ip &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; uri;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 缓存中存在key，在限定访问周期内已经调用过当前接口
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hasKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 访问次数自增1
&lt;&#x2F;span&gt;&lt;span&gt;                redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 超出访问次数限制
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; rateLimit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;IpUtils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getIpSource&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;EmailDTO&lt;&#x2F;span&gt;&lt;span&gt; emailDTO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;SendEmailForRateLimit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;ip,uri,from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;supplyAsync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;thenApplyAsync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;num-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;supplyAsync&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;System.out.println(&amp;quot;num:&amp;quot; + num);
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                            emailUtils.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sendHtmlMail&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;emailDTO&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;邮件发送完成&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;throw  new BizException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;StatusCodeEnum&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;RATE_LIMIT_REQUEST&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 未超出访问次数限制，不进行任何操作，返回true
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 第一次设置数据,过期时间为注解确定的访问周期
&lt;&#x2F;span&gt;&lt;span&gt;                redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, rateLimit.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cycles&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TimeUnit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;SECONDS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;如果请求的不是方法，直接放行
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;代码中已经写了详细的注释，所以就不再具体展开，需要注意的是，其中涉及到邮件发送的部分是我自己增加的一个安全提醒的部分逻辑，所以这部分可以忽略掉，不算在限流逻辑中也是没有任何毛病的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-5&quot;&gt;4.实际使用之后的效果&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;到这一步，所有的工作都完成了，前面也提到过使用是非常简单的，我们只需要在要进行限流的请求方法上加上注解&lt;code&gt;@RateLimit(cycles = 125,count = 3)&lt;&#x2F;code&gt;即可，至于括号内的限流参数，那就根据自己的需求设置了，比如我这里写的就是125秒内同一个IP只能进行3次请求，否则就会触发限流，请求拒绝。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;正常请求&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221229214108308.png&quot; alt=&quot;image-20221229214108308&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;请求限流&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221229214200435.png&quot; alt=&quot;image-20221229214200435&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Redis中记录的数据&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221229214335152.png&quot; alt=&quot;image-20221229214335152&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，限流触发的提示信息建议自己写一个，我承认，我自己这个提示确实不太友好，这主要是当时被对面搞那么一出，就很气人，所以在语言提示上就有些不够友好，如果需要自定义，只需要修改下面的常量数据就可。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221229212951790.png&quot; alt=&quot;image-20221229212951790&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-6&quot;&gt;5.关于计数器限流方案的一些总结&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;通过上面一波湿滑操作，我们已经以通过计数器这种方式具体应用到了实际的项目中，但这并不是故事的结束，每一种方法都有它独到的优势，自然也会有自己的不足，对于计数器实现的限流方案，其实还是有不少问题的。&lt;&#x2F;p&gt;
&lt;p&gt;考虑下面这种情况:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	假设对于某一些接口的需求是每分钟允许的请求上限是100次，如果某用户在最后那第59秒最后几毫秒瞬间直接给你来100个请求，当这一秒结束之后，计数器完成清零工作，此时该用户在下一秒的时候又给你整100个请求过来，啪一下就过来了，很快啊，那么1秒内这个很皮的用户就发送了2倍的请求，显然在这个情况下，一切也都是符合计数器限流原理的。&lt;&#x2F;p&gt;
&lt;p&gt;​	这就是该方法的缺陷(&lt;strong&gt;不能很好的处理时间单位的边界&lt;&#x2F;strong&gt;)，这种情况的存在，可能会导致系统一不小心就承受了太多，甚至击穿系统，所以这也是为什么还有其他几种方案的原因之一。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;至此就完成了一次接口限流的操作实践。最后，&lt;strong&gt;纸上得来终觉浅啊哥&lt;&#x2F;strong&gt;！&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>IDEA沉浸式编程体验</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/idea-chen-jin-shi-bian-cheng-ti-yan/</link>
          <guid>https://ilikexff.cn/idea-chen-jin-shi-bian-cheng-ti-yan/</guid>
          <description xml:base="https://ilikexff.cn/idea-chen-jin-shi-bian-cheng-ti-yan/">&lt;h2 id=&quot;qian-yan&quot;&gt;前言&lt;a class=&quot;zola-anchor&quot; href=&quot;#qian-yan&quot; aria-label=&quot;Anchor link for: qian-yan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.jetbrains.com&#x2F;idea&#x2F;&quot;&gt;IntelliJ IDEA:&lt;&#x2F;a&gt;前不久推出了一个新的概念&lt;code&gt;Fleet&lt;&#x2F;code&gt;编辑器。用过的人都知道，不过是模仿&lt;code&gt;VScode&lt;&#x2F;code&gt;整一套，但相比之下，&lt;code&gt;fleet&lt;&#x2F;code&gt;虽然在传统&lt;code&gt;IDEA&lt;&#x2F;code&gt;的基础上简约了不少，一旦打开智能模式，那内存占用刷一下就上去了，没个&lt;code&gt;3GB&lt;&#x2F;code&gt;+别想用起来。&lt;&#x2F;p&gt;
&lt;p&gt;​		但抛开内存占用的痛点，其实&lt;code&gt;Fleet&lt;&#x2F;code&gt;也不是一无是处。我就很喜欢它简介干净的页面布局，大量简化了各种杂七杂八的功能菜单，把大部分的空间都留给了编码展示区域。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;chen-jin-shi-bian-cheng&quot;&gt;沉浸式编程&lt;a class=&quot;zola-anchor&quot; href=&quot;#chen-jin-shi-bian-cheng&quot; aria-label=&quot;Anchor link for: chen-jin-shi-bian-cheng&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;体验了&lt;code&gt;Fleet&lt;&#x2F;code&gt;之后，如果不习惯使用&lt;code&gt;VSCode&lt;&#x2F;code&gt;的情况下，如何打造一个沉浸式的编码环境呢?作为后端开发，我一般使用的就是&lt;code&gt;IDEA&lt;&#x2F;code&gt;版本，&lt;code&gt;vscode&lt;&#x2F;code&gt;却不太习惯，所以这里就将自己平常的一些使用习惯分享一下吧。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;先看一下效果。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;fdsfsf.png&quot; alt=&quot;fdsfsf&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;你看到的不是局部截图，整个屏幕空间都用来作为编码展示的区域，我们可以不用受到其他功能布局的干扰，更加专注于敲代码这件事。可能这样说起来不够直观，再看一下下面这张图对比一下就明白了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Snipaste_2022-10-24_11-00-41.png&quot; alt=&quot;Snipaste_2022-10-24_11-00-41&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;其实这还不算什么，如果你敲代码的时候是下面这样的布局结构。是不是就更显得压抑了，我是这样体验的。本来用来提高效率和体验的开发工具，结果却被一堆用不到的东西占据掉。导致可以用来编码的空间也就巴掌那么大点，未必有些……&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Snipaste_2022-10-24_11-07-16.png&quot; alt=&quot;Snipaste_2022-10-24_11-07-16&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;对比之下，如果单纯的写个代码，我更倾向于选择第一中环境，毕竟干净。其实就敲代码这件事来说，IDEA展示出来的太多功能菜单我们压根就用不上，既然用不上，那都展示出来是不是显得多余了呢？为什么不把这部分空间都用来展示代码呢？空间越大，我们一屏能展示的代码量也就越多，写起代码来自然也就更能专注当下，更加沉浸于整个编码过程。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;如履平地&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;本着**即用即开(用到什么功能再开什么功能)**的原则。下面设置一下基本布局，设置之后就会发现：几乎整块屏幕都用来写代码，至于这个空间有多大，那就取决于你的屏幕有多大了。大屏环境下，这样的体验会更佳哦。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;1. 打开Zen模式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024112102965.png&quot; alt=&quot;image-20221024112102965&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;打开之后会自动进入Zen模式。该模式下所有的菜单自动隐藏，如果需要用到顶部菜单，鼠标移到顶部即可自动显示，同时右上角也有对应的推出标识。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024112507317.png&quot; alt=&quot;image-20221024112507317&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-1&quot;&gt;雪中送炭&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;1. 打开项目目录结构&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;全屏(Zen)模式下，想要查看当前项目的目录结构怎么办？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;很简单，通过&lt;code&gt;Alt+1&lt;&#x2F;code&gt;快捷键即可快速打开项目结构目录。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024112851365.png&quot; alt=&quot;image-20221024112851365&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;2. 运行项目&#x2F;服务&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;模式下，想要跑一下项目。也可以不用动鼠标，直接使用&lt;code&gt;Shift+F10&lt;&#x2F;code&gt;即可，当然，也可以使用顶部的【运行】菜单。不过我个人偏向于&lt;strong&gt;鼠标能不用就不用&lt;&#x2F;strong&gt;。绝大部分情况下，直接使用键盘和鼠标都能完成的操作，键盘的效率会更高。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;那么，遇到第一次运行之后，发现运行打开的控制台界面被关闭了怎么办？毕竟看个打印日志，输出信息什么的都是运行项目之后需要经常用到的。此时可以通过&lt;code&gt;Alt+4&lt;&#x2F;code&gt;进行重新打开运行控制台。&lt;&#x2F;p&gt;
&lt;p&gt;这里得说一嘴。如果你得项目是微服务项目，一个项目同时跑了多个模块得服务，一般不会直接通过上面得方式去运行，而是配置成服务得形式，这时候就不能使用&lt;code&gt;Alt+4&lt;&#x2F;code&gt;打开运行控制台了，而是使用&lt;code&gt;Alt+8&lt;&#x2F;code&gt;。比如下面这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024114014746.png&quot; alt=&quot;image-20221024114014746&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;3 .版本控制&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;版本控制，不用多说了吧，也是常用功能。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在模式下，通过&lt;code&gt;Alt+9&lt;&#x2F;code&gt;可以打开版本控制日志信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024114345553.png&quot; alt=&quot;image-20221024114345553&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果你愿意，你甚至可以把这部分空间拉到最大，就能全心全意查阅整个版本控制得日志信息了。&lt;&#x2F;p&gt;
&lt;p&gt;通过&lt;code&gt;Alt+0&lt;&#x2F;code&gt;打开提交管理。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024114738334.png&quot; alt=&quot;image-20221024114738334&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;4. 查看类方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过&lt;code&gt;Alt+7&lt;&#x2F;code&gt;可以直接查询当前打开类得方法列表。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024115120882.png&quot; alt=&quot;image-20221024115120882&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当然，根据需要，还可以通过顶部得一排功能图标，查询自己需要得信息。方便快捷。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;除了上面这些常用得快捷功能之外，还有几个其他方面的功能，我就不一一截图列举了。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Alt+5&lt;&#x2F;code&gt;打开调试功能&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Alt+6&lt;&#x2F;code&gt;查看当前项目问题分析&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Alt+2&lt;&#x2F;code&gt;打开收藏夹&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-2&quot;&gt;锦上添花&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;熟练使用下面的技巧，可以大大提高开发效率。结合上面的内容，锦上添花！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. 全局搜索&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;双击&lt;code&gt;Shift&lt;&#x2F;code&gt;，打开全局搜索，包括整个IDEA的功能内容也在其中。比如打开常用的&lt;code&gt;Maven&lt;&#x2F;code&gt;功能。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024115919178.png&quot; alt=&quot;image-20221024115919178&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;总之，这个功能的强大之处远远不止这些，自行摸索吧。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;2. 模式匹配&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果说，上面的搜索是全局的。那么下面的方式可以在当前页面进行模式匹配精确搜索。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024120253022.png&quot; alt=&quot;image-20221024120253022&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;3. 搜索替换&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Ctrl+Shift+R&lt;&#x2F;code&gt;，对目标内容进行搜索并替换。支持已经替换，可以说是非常强大呀。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20221024120727560.png&quot; alt=&quot;image-20221024120727560&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;如鱼得水&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;看完前面的内容并熟练使用，已经可以极大的提高开发效率了，开启沉浸式编程体验！&lt;&#x2F;p&gt;
&lt;p&gt;下面的内容呢。可能不太适用于大部分人了。&lt;&#x2F;p&gt;
&lt;p&gt;我自己的IDEA是开启了Vim模式的环境，对于上面例如模式匹配，搜索替换什么的，都是通过几个简单的命令直接完成，而无需借助IDEA的原生功能，操作简单快速，效率自然不用说。但是考虑到大部分用户是不用或者少用vim模式的，所以这里就不再作详细展开了，感兴趣的可以自己尝试或者直接找我吹牛逼。&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>IDEA代码补全&amp;提示功能消失的几种解决方案(热更版)</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/idea-dai-ma-bu-quan-ti-shi-gong-neng-xiao-shi-de-ji-chong-jie-jue-fang-an-re-geng-ban/</link>
          <guid>https://ilikexff.cn/idea-dai-ma-bu-quan-ti-shi-gong-neng-xiao-shi-de-ji-chong-jie-jue-fang-an-re-geng-ban/</guid>
          <description xml:base="https://ilikexff.cn/idea-dai-ma-bu-quan-ti-shi-gong-neng-xiao-shi-de-ji-chong-jie-jue-fang-an-re-geng-ban/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志:&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2025-3-28&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优化了表述逻辑&lt;&#x2F;li&gt;
&lt;li&gt;最追加了来自评论区网友的经验&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;a-ba-a-ba-zheng-pian-kai-shi&quot;&gt;阿巴阿巴(正片开始)&lt;a class=&quot;zola-anchor&quot; href=&quot;#a-ba-a-ba-zheng-pian-kai-shi&quot; aria-label=&quot;Anchor link for: a-ba-a-ba-zheng-pian-kai-shi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;编程工具的智能补全功能对于开发人员来说非常重要。它可以帮助节省时间和减少错误，提高编码效率和质量。 智能补全功能可以在编码过程中自动提示可能的函数、变量、关键字等，并提供相应的选项供开发人员选择。这可以帮助开发人员更快速地完成代码，避免拼写错误和语法错误。 此外，智能补全功能还可以提供关于代码的上下文信息，帮助开发人员更好地理解代码结构和功能。&lt;&#x2F;p&gt;
&lt;p&gt;所以说，智能补全功能可以帮助开发人员更高效地编写代码，减少错误，提高代码质量，是编程工具中非常重要的功能之一。&lt;&#x2F;p&gt;
&lt;p&gt;个人一直使用的都是&lt;code&gt;JetBrains&lt;&#x2F;code&gt;家族的产品，写Java用&lt;code&gt;在IntelliJ IDEA&lt;&#x2F;code&gt;,写前端用&lt;code&gt;WebStorm&lt;&#x2F;code&gt;以及&lt;code&gt;C&#x2F;C++&lt;&#x2F;code&gt;用的&lt;code&gt;CLoin&lt;&#x2F;code&gt;等等；&lt;&#x2F;p&gt;
&lt;p&gt;我也是最近才遇到的一个情况，在编写代码时IDEA的智能补全功能莫名其妙的失效了，虽然这个功能本质上不会影响我们代码的运行逻辑和程序的功能性，但在编码效率上却是很重要。第一次遇到这种情况也是去网络上找了一些文章，内容也是大同小异，但遗憾的是这些文章中提到的方法都没能解决我的问题，最后实在是走投无路，只好自己 &lt;strong&gt;搞科研&lt;&#x2F;strong&gt;，现在也将自己总结的解决方案和网络上一些可行的方法统一做一个整理；&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;ji-chong-jie-jue-fang-an&quot;&gt;几种解决方案&lt;a class=&quot;zola-anchor&quot; href=&quot;#ji-chong-jie-jue-fang-an&quot; aria-label=&quot;Anchor link for: ji-chong-jie-jue-fang-an&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;首先需要说明的是，我的&lt;code&gt;IDEA&lt;&#x2F;code&gt;版本是该文发布时最新版本，且开启了 &lt;strong&gt;新UI&lt;&#x2F;strong&gt; 模式， 具体版本信息如下:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313231822714.png&quot; alt=&quot;image-20240313231822714&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先看一下正常情况下的&lt;code&gt;IDEA&lt;&#x2F;code&gt;，在编写代码时会根据你的代码智能提示不同的候选以及相关的函数，变量等信息，包括自动导入包在内，诸如此类：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313224212711.png&quot; alt=&quot;image-20240313224212711&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果你也遇到补全提示失效的问题，不妨试试以下几种方案:&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;1. 开启了省电模式&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;IDEA&lt;&#x2F;code&gt;中的省电模式是会将代码提示功能关闭的，所以如果问题出现了，建议先从这个原因开始排查；&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;查找路径：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件
&lt;ul&gt;
&lt;li&gt;省电模式&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313224812229.png&quot; alt=&quot;image-20240313224812229&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;注意，开启省电模式后，前面会有一个&lt;code&gt;✔️&lt;&#x2F;code&gt;，再次点击即可关闭 &lt;strong&gt;省电模式&lt;&#x2F;strong&gt;；&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-1&quot;&gt;2. 缓存原因&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;有时候，IDEA本地缓存过大也会导致提示失效，可以按照下面的步骤重置缓存：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;查找路径:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件
&lt;ul&gt;
&lt;li&gt;使缓存失效(由于版本不同，可能叫其他名称)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313225608573.png&quot; alt=&quot;image-20240313225608573&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;按照上面的路径打开之后，界面可能是下面这样子的:按照提示操作即可。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313225744253.png&quot; alt=&quot;image-20240313225744253&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-2&quot;&gt;3. maven索引未更新&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;查找路径&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;maven插件
&lt;ul&gt;
&lt;li&gt;设置图标(齿轮图标)
&lt;ul&gt;
&lt;li&gt;Maven设置
&lt;ul&gt;
&lt;li&gt;打开具体的maven设置页面&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313230235012.png&quot; alt=&quot;image-20240313230235012&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;注意，上图中的步骤是建立在你安装 了&lt;code&gt;maven&lt;&#x2F;code&gt;并在&lt;code&gt;IDEA&lt;&#x2F;code&gt;中下载了&lt;code&gt;Maven&lt;&#x2F;code&gt;插件的基础上的;打开设置之后:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313230554818.png&quot; alt=&quot;image-20240313230554818&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;更新索引的操作会花费一定的时间，不建议在一开始尝试。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;4. 自动补全相关设置&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;一般情况下，&lt;code&gt;IDEA&lt;&#x2F;code&gt;的自动补全功能默认是开启的，但不排除有些时候自己手贱或者&lt;code&gt;IDEA&lt;&#x2F;code&gt;本身故障等原因导致设置出现问题，那就需要重新检查相关的设置了(我自己就是这个原因，尝试前面几种无果之后才发现的)；&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;查找路径：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;文件
&lt;ul&gt;
&lt;li&gt;设置
&lt;ul&gt;
&lt;li&gt;编辑器
&lt;ul&gt;
&lt;li&gt;常规
&lt;ul&gt;
&lt;li&gt;自动导入&lt;&#x2F;li&gt;
&lt;li&gt;代码补全&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313230958966.png&quot; alt=&quot;image-20240313230958966&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里建议把上图中的功能项都检查以下是否处于正常开启状态，比如 &lt;strong&gt;代码补全&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313231252027.png&quot; alt=&quot;image-20240313231252027&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我之前的原因就在于，勾选了 &lt;strong&gt;区分大小写&lt;&#x2F;strong&gt; 并勾选了 &lt;strong&gt;仅首字母&lt;&#x2F;strong&gt; ，这样就相当于把这个提示功能砍成三级残废，没什么L用，所以一定要勾选后面的 &lt;strong&gt;所有字母&lt;&#x2F;strong&gt;，并且参考我上图中的其他配置项。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;找到原因之后，开启了正常的代码补全和提示功能，写代码嘎嘎快。顺便贴一下我用的汉化插件吧，不习惯英文界面的可以试试:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240313232033582.png&quot; alt=&quot;image-20240313232033582&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-4&quot;&gt;以上就是总结的可能原因，若遗漏，欢迎补全!!!!&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-5&quot;&gt;其他原因总结&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;下面是参考了这篇文章在&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;2302_76401343&#x2F;article&#x2F;details&#x2F;137187710?spm=1001.2014.3001.5502&quot;&gt;CSDN&lt;&#x2F;a&gt;上的评论区。
&lt;img src=&quot;http:&#x2F;&#x2F;aurora-xu.oss-cn-hangzhou.aliyuncs.com&#x2F;aurora&#x2F;articles&#x2F;fb7e781401c6e43bcafe771005cb7050.png&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>Java函数式编程</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/java-han-shu-shi-bian-cheng/</link>
          <guid>https://ilikexff.cn/java-han-shu-shi-bian-cheng/</guid>
          <description xml:base="https://ilikexff.cn/java-han-shu-shi-bian-cheng/">&lt;h2 id=&quot;1-gai-shu&quot;&gt;1.概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-gai-shu&quot; aria-label=&quot;Anchor link for: 1-gai-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-1gai-nian&quot;&gt;1.1概念&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-1gai-nian&quot; aria-label=&quot;Anchor link for: 1-1gai-nian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;函数式编程是一种编程范式，即一切都是数学函数。在Java&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;so.csdn.net&#x2F;so&#x2F;search?q=%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1&amp;amp;spm=1001.2101.3001.7020&quot;&gt;面向对象&lt;&#x2F;a&gt;编程中，程序是一系列相互作用（方法）的对象，而在函数式编程中，程序会是一个无状态的函数组合序列。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-2-you-dian&quot;&gt;1.2 优点&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-2-you-dian&quot; aria-label=&quot;Anchor link for: 1-2-you-dian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;大数量下处理集合效率高&lt;&#x2F;li&gt;
&lt;li&gt;代码可读性高&lt;&#x2F;li&gt;
&lt;li&gt;消灭嵌套地狱&lt;&#x2F;li&gt;
&lt;li&gt;降低代码量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;2-lambdabiao-da-shi&quot;&gt;2.Lambda表达式&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-lambdabiao-da-shi&quot; aria-label=&quot;Anchor link for: 2-lambdabiao-da-shi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2-1gai-shu&quot;&gt;2.1概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-1gai-shu&quot; aria-label=&quot;Anchor link for: 2-1gai-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Lambda是JDK8中一个语法糖&lt;&#x2F;strong&gt;。他可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要体现。让我们不用关注是什么对象。而是更关注我们对数据进行了什么操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-2-he-xin-yuan-ze&quot;&gt;2.2 核心原则&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-2-he-xin-yuan-ze&quot; aria-label=&quot;Anchor link for: 2-2-he-xin-yuan-ze&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可推导可省略原则。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;2-3-sheng-lue-gui-ze&quot;&gt;2.3 省略规则&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-3-sheng-lue-gui-ze&quot; aria-label=&quot;Anchor link for: 2-3-sheng-lue-gui-ze&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;参数类型可以省略&lt;&#x2F;li&gt;
&lt;li&gt;方法体只有一句代码时大括号&lt;code&gt;return&lt;&#x2F;code&gt;和唯一一句代码的分号可以省略&lt;&#x2F;li&gt;
&lt;li&gt;方法只有一个参数时小括号可以省略&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-4-ji-ben-yu-fa-ge-shi&quot;&gt;2.4 基本语法格式&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-4-ji-ben-yu-fa-ge-shi&quot; aria-label=&quot;Anchor link for: 2-4-ji-ben-yu-fa-ge-shi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;(参数列表)-&amp;gt;{代码}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-shi-li&quot;&gt;2.5 示例&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-5-shi-li&quot; aria-label=&quot;Anchor link for: 2-5-shi-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过具体的代码示例来了解&lt;code&gt;lambda&lt;&#x2F;code&gt;表达式的各种基本用法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;2-5-1-li-yi&quot;&gt;2.5.1 例一&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-5-1-li-yi&quot; aria-label=&quot;Anchor link for: 2-5-1-li-yi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;启动线程&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F;原始写法
&lt;&#x2F;span&gt;&lt;span&gt;new Thread(new Runnable() {
&lt;&#x2F;span&gt;&lt;span&gt;    @Override
&lt;&#x2F;span&gt;&lt;span&gt;    public void run() {
&lt;&#x2F;span&gt;&lt;span&gt;        System.out.println(&amp;quot;惟有热爱,可抵岁月漫长!&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}).start();
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;lambda写法
&lt;&#x2F;span&gt;&lt;span&gt;new Thread(() -&amp;gt; System.out.println(&amp;quot;惟有热爱,可抵岁月漫长!&amp;quot;)).start();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-2-li-er&quot;&gt;2.5.2 例二&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-5-2-li-er&quot; aria-label=&quot;Anchor link for: 2-5-2-li-er&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;现有方法定义如下，其中&lt;code&gt;IntBinaryOperator&lt;&#x2F;code&gt;是一个接口。先使用匿名内部类的写法调用该方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F;方法定义
&lt;&#x2F;span&gt;&lt;span&gt;private int calculateNum(IntBinaryOperator operator) {
&lt;&#x2F;span&gt;&lt;span&gt;    int a = 10;
&lt;&#x2F;span&gt;&lt;span&gt;    int b = 20;
&lt;&#x2F;span&gt;&lt;span&gt;    return operator.applyAsInt(a,b);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;原始写法(匿名内部类写法)
&lt;&#x2F;span&gt;&lt;span&gt;int i1 = calculateNum(new IntBinaryOperator() {
&lt;&#x2F;span&gt;&lt;span&gt;    @Override
&lt;&#x2F;span&gt;&lt;span&gt;    public int applyAsInt(int left, int right) {
&lt;&#x2F;span&gt;&lt;span&gt;        return left + right;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;System.out.println(i1);
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;Lmabda写法
&lt;&#x2F;span&gt;&lt;span&gt;calculateNum((left,right)-&amp;gt;left + right);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-3-li-san&quot;&gt;2.5.3 例三&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-5-3-li-san&quot; aria-label=&quot;Anchor link for: 2-5-3-li-san&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;现有方法定义如下，其中&lt;code&gt;IntPredicate&lt;&#x2F;code&gt;是一个接口。先使用匿名内部类的写法调用该方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F;方法定义
&lt;&#x2F;span&gt;&lt;span&gt;public static void printNum(IntPredicate predicate){
&lt;&#x2F;span&gt;&lt;span&gt;    int[] arr = {1,2,3,4,5,6,7,8,9,10};
&lt;&#x2F;span&gt;&lt;span&gt;    for (int i : arr) {
&lt;&#x2F;span&gt;&lt;span&gt;        if(predicate.test(i)){
&lt;&#x2F;span&gt;&lt;span&gt;            System.out.println(i);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;原始写法
&lt;&#x2F;span&gt;&lt;span&gt;printNum(new IntPredicate() {
&lt;&#x2F;span&gt;&lt;span&gt;    @Override
&lt;&#x2F;span&gt;&lt;span&gt;    public boolean test(int value) {
&lt;&#x2F;span&gt;&lt;span&gt;        return value % 2==0;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;lambda写法
&lt;&#x2F;span&gt;&lt;span&gt;printNum(value-&amp;gt;value % 2 == 0);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-4-li-si&quot;&gt;2.5.4 例四&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-5-4-li-si&quot; aria-label=&quot;Anchor link for: 2-5-4-li-si&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;现有方法定义如下，其中&lt;code&gt;Function&lt;&#x2F;code&gt;是一个接口。先使用匿名内部类的写法调用该方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F;方法定义
&lt;&#x2F;span&gt;&lt;span&gt;public static &amp;lt;R&amp;gt; R typeConver(Function&amp;lt;String,R&amp;gt; function){
&lt;&#x2F;span&gt;&lt;span&gt;    String str = &amp;quot;1235&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    R result = function.apply(str);
&lt;&#x2F;span&gt;&lt;span&gt;    return result;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;原始写法
&lt;&#x2F;span&gt;&lt;span&gt;Integer res = typeConver(new Function&amp;lt;String, Integer&amp;gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    @Override
&lt;&#x2F;span&gt;&lt;span&gt;    public Integer apply(String s) {
&lt;&#x2F;span&gt;&lt;span&gt;        return Integer.valueOf(s);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;System.out.println(res);
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;lambda写法
&lt;&#x2F;span&gt;&lt;span&gt;Integer res = typeConver(s-&amp;gt;Integer.valueOf(s));
&lt;&#x2F;span&gt;&lt;span&gt;System.out.println(res);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-5-li-wu&quot;&gt;2.5.5 例五&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-5-5-li-wu&quot; aria-label=&quot;Anchor link for: 2-5-5-li-wu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;现有方法定义如下，其中&lt;code&gt;IntConsumer&lt;&#x2F;code&gt;是一个接口。先使用匿名内部类的写法调用该方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F;方法定义
&lt;&#x2F;span&gt;&lt;span&gt;public static void foreachArr(IntConsumer consumer){
&lt;&#x2F;span&gt;&lt;span&gt;    int[] arr = {1,2,3,4,5,6,7,8,9,10};
&lt;&#x2F;span&gt;&lt;span&gt;    for (int i : arr) {
&lt;&#x2F;span&gt;&lt;span&gt;        consumer.accept(i);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;原始写法
&lt;&#x2F;span&gt;&lt;span&gt;foreachArr(new IntConsumer() {
&lt;&#x2F;span&gt;&lt;span&gt;    @Override
&lt;&#x2F;span&gt;&lt;span&gt;    public void accept(int value) {
&lt;&#x2F;span&gt;&lt;span&gt;        System.out.println(value+10);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;});
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;lambda写法
&lt;&#x2F;span&gt;&lt;span&gt;foreachArr(value-&amp;gt; System.out.println(value + 10));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;3-streamliu&quot;&gt;3.Stream流&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-streamliu&quot; aria-label=&quot;Anchor link for: 3-streamliu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Java8&lt;&#x2F;code&gt;的&lt;code&gt;Stream&lt;&#x2F;code&gt;流使用的是函数式编程模式，如同他的名字一样，可以被用来对集合或数组进行链式操作，更方便让我们去操作集合或数组。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;3-1an-li-zhun-bei&quot;&gt;3.1案例准备&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-1an-li-zhun-bei&quot; aria-label=&quot;Anchor link for: 3-1an-li-zhun-bei&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;为了更好的学习和了解&lt;code&gt;Stream&lt;&#x2F;code&gt;流的操作，下面通过一个具体的案例，在案例中通过实现需求的方式去理解&lt;code&gt;Stream&lt;&#x2F;code&gt;流。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;maven依赖&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;dependencies&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;&#x2F;groupId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;artifactId&amp;gt;lombok&amp;lt;&#x2F;artifactId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;version&amp;gt;1.18.16&amp;lt;&#x2F;version&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;dependencies&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;两个实体类&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;package com.waer.security.demo.pojo;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;import lombok.AllArgsConstructor;
&lt;&#x2F;span&gt;&lt;span&gt;import lombok.Data;
&lt;&#x2F;span&gt;&lt;span&gt;import lombok.EqualsAndHashCode;
&lt;&#x2F;span&gt;&lt;span&gt;import lombok.NoArgsConstructor;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;import java.util.List;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@SuppressWarnings(&amp;quot;all&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span&gt; * @author: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span&gt; * @date: 2022&#x2F;8&#x2F;28 8:58
&lt;&#x2F;span&gt;&lt;span&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@Data
&lt;&#x2F;span&gt;&lt;span&gt;@AllArgsConstructor
&lt;&#x2F;span&gt;&lt;span&gt;@NoArgsConstructor
&lt;&#x2F;span&gt;&lt;span&gt;@EqualsAndHashCode
&lt;&#x2F;span&gt;&lt;span&gt;public class Author {
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*ID*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    private Long id;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*姓名*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    private String name;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*年龄*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    private Integer age;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*简介*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    private String intro;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*作品*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    private List&amp;lt;Book&amp;gt; books;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;com.waer.security.demo.pojo&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lombok&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;AllArgsConstructor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lombok&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lombok&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;EqualsAndHashCode&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lombok&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;NoArgsConstructor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;8&#x2F;28 9:00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Data
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;AllArgsConstructor
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;NoArgsConstructor
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;EqualsAndHashCode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Book &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*ID*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span&gt;id;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*书名*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;name;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*分类*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;category;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*评分*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span&gt;score;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*简介*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;intro;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;初始化数据&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;private static List&amp;lt;Author&amp;gt; getAuthors() {
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*数据初始化*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    Author author = new Author(1L,&amp;quot;蒙多&amp;quot;,33,&amp;quot;一个从菜刀中明悟哲理的祖安人&amp;quot;,null);
&lt;&#x2F;span&gt;&lt;span&gt;    Author author2 = new Author(2L,&amp;quot;亚拉索&amp;quot;,15,&amp;quot;狂风也追逐不上他的思考速度&amp;quot;,null);
&lt;&#x2F;span&gt;&lt;span&gt;    Author author3 = new Author(3L,&amp;quot;易&amp;quot;,14,&amp;quot;是这个世界在限制他的思维&amp;quot;,null);
&lt;&#x2F;span&gt;&lt;span&gt;    Author author4 = new Author(3L,&amp;quot;易&amp;quot;,14,&amp;quot;是这个世界在限制他的思维&amp;quot;,null);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*书籍列表*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    List&amp;lt;Book&amp;gt; books1 = new ArrayList&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    List&amp;lt;Book&amp;gt; books2 = new ArrayList&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    List&amp;lt;Book&amp;gt; books3 = new ArrayList&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    books1.add(new Book(1L,&amp;quot;刀的两侧是光明与黑暗&amp;quot;,&amp;quot;哲学,爱情&amp;quot;,88,&amp;quot;用一把刀划分了爱恨&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books1.add(new Book(2L,&amp;quot;一个人不能死在同一把刀下&amp;quot;,&amp;quot;个人成长,爱情&amp;quot;,99,&amp;quot;讲述如何从失败中明悟真理&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    books2.add(new Book(3L,&amp;quot;那风吹不到的地方&amp;quot;,&amp;quot;哲学&amp;quot;,85,&amp;quot;带你用思维去领略世界的尽头&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books2.add(new Book(3L,&amp;quot;那风吹不到的地方&amp;quot;,&amp;quot;哲学&amp;quot;,85,&amp;quot;带你用思维去领略世界的尽头&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books2.add(new Book(4L,&amp;quot;吹或不吹&amp;quot;,&amp;quot;爱情,个人传记&amp;quot;,56,&amp;quot;一个哲学家的恋爱观注定很难把他所在的时代理解&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    books3.add(new Book(5L,&amp;quot;你的剑就是我的剑&amp;quot;,&amp;quot;爱情&amp;quot;,56,&amp;quot;无法想象一个武者能对他的伴侣这么的宽容&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books3.add(new Book(6L,&amp;quot;风与剑&amp;quot;,&amp;quot;个人传记&amp;quot;,100,&amp;quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books3.add(new Book(6L,&amp;quot;风与剑&amp;quot;,&amp;quot;个人传记&amp;quot;,100,&amp;quot;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    author.setBooks(books1);
&lt;&#x2F;span&gt;&lt;span&gt;    author2.setBooks(books2);
&lt;&#x2F;span&gt;&lt;span&gt;    author3.setBooks(books3);
&lt;&#x2F;span&gt;&lt;span&gt;    author4.setBooks(books3);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    List&amp;lt;Author&amp;gt; authorList = new ArrayList&amp;lt;&amp;gt;(Arrays.asList(author,author2,author3,author4));
&lt;&#x2F;span&gt;&lt;span&gt;    return authorList;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-2kuai-su-ti-yan&quot;&gt;3.2快速体验&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-2kuai-su-ti-yan&quot; aria-label=&quot;Anchor link for: 3-2kuai-su-ti-yan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;3-2-1xu-qiu&quot;&gt;3.2.1需求&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-2-1xu-qiu&quot; aria-label=&quot;Anchor link for: 3-2-1xu-qiu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;调用&lt;code&gt;getAuthors&lt;&#x2F;code&gt;方法获取到作家的集合。现在需要打印所有年龄小于18的作家的名字，并且要注意去重。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;3-2-2shi-xian&quot;&gt;3.2.2实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-2-2shi-xian&quot; aria-label=&quot;Anchor link for: 3-2-2shi-xian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;*需求：打印所有年龄小于18的作家名字，需要对数据去重处理*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;List&amp;lt;Author&amp;gt; authors = getAuthors();
&lt;&#x2F;span&gt;&lt;span&gt;authors
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*将集合转为Stream流*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    .stream()
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*去重处理*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    .distinct()
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*过滤：年龄要小于18*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    .filter(author -&amp;gt; author.getAge() &amp;lt; 18)
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;*遍历，打印符合要求的作家名*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    .forEach(author -&amp;gt; System.out.println(author.getName()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;亚拉索
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-3chang-yong-cao-zuo&quot;&gt;3.3常用操作&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-3chang-yong-cao-zuo&quot; aria-label=&quot;Anchor link for: 3-3chang-yong-cao-zuo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;3-3-1chuang-jian-liu&quot;&gt;3.3.1创建流&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-3-1chuang-jian-liu&quot; aria-label=&quot;Anchor link for: 3-3-1chuang-jian-liu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;集合转stream：&lt;code&gt;集合对象.stream()&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;*单列集合转Stream*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;List&amp;lt;Author&amp;gt; authorList = getAuthors();
&lt;&#x2F;span&gt;&lt;span&gt;Stream&amp;lt;Author&amp;gt; stream = authorList.stream();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;数组转stream: &lt;code&gt;Arrays.stream(arr)或者Stream.of(arr)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*数组转stream*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; arr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stream1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stream2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;arr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;双列集合转stream  &lt;code&gt;转换成单列集合后再创建&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*双列集合转stream*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new HashMap&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;师哥&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;小庄&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;天明&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*先转为单列集合再转stream*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; stream3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;entrySet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;3-3-2zhong-jian-cao-zuo&quot;&gt;3.3.2中间操作&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-3-2zhong-jian-cao-zuo&quot; aria-label=&quot;Anchor link for: 3-3-2zhong-jian-cao-zuo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;filter&quot;&gt;filter&lt;a class=&quot;zola-anchor&quot; href=&quot;#filter&quot; aria-label=&quot;Anchor link for: filter&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印所有姓名长度大于1的作家的姓名.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;List&amp;lt;Author&amp;gt; authors = getAuthors();
&lt;&#x2F;span&gt;&lt;span&gt;authors
&lt;&#x2F;span&gt;&lt;span&gt;    .stream()
&lt;&#x2F;span&gt;&lt;span&gt;    .filter(author-&amp;gt;author.getName().length() &amp;gt;1)
&lt;&#x2F;span&gt;&lt;span&gt;    .forEach(author-&amp;gt;System.out.println(author.getName()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
亚拉索&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;map&quot;&gt;map&lt;a class=&quot;zola-anchor&quot; href=&quot;#map&quot; aria-label=&quot;Anchor link for: map&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以把对流中的元素进行计算或转换。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印所有作家的姓名。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
亚拉索
易
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;将作家的年龄加10并打印。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;43
25
24
24&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;distinct&quot;&gt;distinct&lt;a class=&quot;zola-anchor&quot; href=&quot;#distinct&quot; aria-label=&quot;Anchor link for: distinct&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以去除流中的重复元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印所有作家的姓名，并且要求其中不能有重复元素。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
亚拉索
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;sorted&quot;&gt;sorted&lt;a class=&quot;zola-anchor&quot; href=&quot;#sorted&quot; aria-label=&quot;Anchor link for: sorted&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;对流中的元素进行排序。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果调用空参的sorted()方法，需要流中的元素是实现了Comparable。否则会抛异常&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;compareTo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;NotNull Author&lt;&#x2F;span&gt;&lt;span&gt; o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;o.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;o2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()-&lt;&#x2F;span&gt;&lt;span&gt;o1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;33
15
14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;limit&quot;&gt;limit&lt;a class=&quot;zola-anchor&quot; href=&quot;#limit&quot; aria-label=&quot;Anchor link for: limit&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以设置流的最大长度，超出的部分将被抛弃。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素,然后打印其中年龄最大的两个作家的姓名和年龄。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;o2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&lt;&#x2F;span&gt;&lt;span&gt; o2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;limit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() + &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多:33
亚拉索:15&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;skip&quot;&gt;skip&lt;a class=&quot;zola-anchor&quot; href=&quot;#skip&quot; aria-label=&quot;Anchor link for: skip&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;跳过流中的前n个元素，返回剩下的元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印除了年龄最大的作家外的其他作家姓名和年龄，要求不能有重复元素，并且按照年龄降序排序。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() + &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;亚拉索:15
易:14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;flatmap&quot;&gt;flatMap&lt;a class=&quot;zola-anchor&quot; href=&quot;#flatmap&quot; aria-label=&quot;Anchor link for: flatmap&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印所有书籍的名字。要求对重复的元素进行去重。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;book-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;book.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;吹或不吹
你的剑就是我的剑
风与剑&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;book-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;book.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getCategory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;category-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;category&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;哲学
爱情
个人成长
个人传记&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;3-3-3zhong-jie-cao-zuo&quot;&gt;3.3.3终结操作&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-3-3zhong-jie-cao-zuo&quot; aria-label=&quot;Anchor link for: 3-3-3zhong-jie-cao-zuo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;foreach&quot;&gt;forEach&lt;a class=&quot;zola-anchor&quot; href=&quot;#foreach&quot; aria-label=&quot;Anchor link for: foreach&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;输出所有作家的名字。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
亚拉索
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;count&quot;&gt;count&lt;a class=&quot;zola-anchor&quot; href=&quot;#count&quot; aria-label=&quot;Anchor link for: count&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以用来获取当前流中元素的个数。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印这些作家的所出书籍的数目，注意删除重复元素。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;count&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;6&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;min-max&quot;&gt;min&amp;amp;max&lt;a class=&quot;zola-anchor&quot; href=&quot;#min-max&quot; aria-label=&quot;Anchor link for: min-max&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以用来或者流中的最值。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;分别获取这些作家的所出书籍的最高分和最低分并打印。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; max &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;book -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; book.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getScore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;score1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;score2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; score1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; score2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; min &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;book -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; book.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getScore&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;score1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;score2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; score1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; score2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;56&lt;&#x2F;p&gt;
&lt;p&gt;100&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;collect&quot;&gt;collect&lt;a class=&quot;zola-anchor&quot; href=&quot;#collect&quot; aria-label=&quot;Anchor link for: collect&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;将当前流转为一个集合。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取一个存放所有作者名字的List集合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; nameList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Collectors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;nameList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[蒙多, 亚拉索, 易, 易]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;获取一个书名的Set集合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; bookSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Collectors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;toSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;bookSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[Book(id=4, name=吹或不吹, category=爱情,个人传记, score=56, intro=一个哲学家的恋爱观注定很难把他所在的时代理解), Book(id=6, name=风与剑, category=个人传记, score=100, intro=两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？), Book(id=2, name=一个人不能死在同一把刀下, category=个人成长,爱情, score=99, intro=讲述如何从失败中明悟真理), Book(id=3, name=那风吹不到的地方, category=哲学, score=85, intro=带你用思维去领略世界的尽头), Book(id=5, name=你的剑就是我的剑, category=爱情, score=56, intro=无法想象一个武者能对他的伴侣这么的宽容), Book(id=1, name=刀的两侧是光明与黑暗, category=哲学,爱情, score=88, intro=用一把刀划分了爱恨)]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;获取一个Map集合，map的key为作者名，value为List&lt;Book&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Collectors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;toMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;{亚拉索=[Book(id=3, name=那风吹不到的地方, category=哲学, score=85, intro=带你用思维去领略世界的尽头), Book(id=3, name=那风吹不到的地方, category=哲学, score=85, intro=带你用思维去领略世界的尽头), Book(id=4, name=吹或不吹, category=爱情,个人传记, score=56, intro=一个哲学家的恋爱观注定很难把他所在的时代理解)], 蒙多=[Book(id=1, name=刀的两侧是光明与黑暗, category=哲学,爱情, score=88, intro=用一把刀划分了爱恨), Book(id=2, name=一个人不能死在同一把刀下, category=个人成长,爱情, score=99, intro=讲述如何从失败中明悟真理)], 易=[Book(id=5, name=你的剑就是我的剑, category=爱情, score=56, intro=无法想象一个武者能对他的伴侣这么的宽容), Book(id=6, name=风与剑, category=个人传记, score=100, intro=两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？), Book(id=6, name=风与剑, category=个人传记, score=100, intro=两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？)]}&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;anymatch&quot;&gt;anyMatch&lt;a class=&quot;zola-anchor&quot; href=&quot;#anymatch&quot; aria-label=&quot;Anchor link for: anymatch&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断是否有年龄在29以上的作家。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;anyMatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;flag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;true&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;allmatch&quot;&gt;allMatch&lt;a class=&quot;zola-anchor&quot; href=&quot;#allmatch&quot; aria-label=&quot;Anchor link for: allmatch&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以用来判断是否都符合匹配条件，结果为boolean类型，如果都符合为true，否则为false.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断是否所有的作家都是成年人！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;allMatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;flag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;false&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;nonematch&quot;&gt;noneMatch&lt;a class=&quot;zola-anchor&quot; href=&quot;#nonematch&quot; aria-label=&quot;Anchor link for: nonematch&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以判断流中的元素是否都不符合匹配条件。如果都不符合结果为true，否则结果为false&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断作家是否都没有超过100岁的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; flag &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;noneMatch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;flag&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;true&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;findany&quot;&gt;findAny&lt;a class=&quot;zola-anchor&quot; href=&quot;#findany&quot; aria-label=&quot;Anchor link for: findany&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取任意一个年龄大于18的作家，如果存在就输出他的名字。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; optionalAuthor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;findAny&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;optionalAuthor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;findfirst&quot;&gt;findFirst&lt;a class=&quot;zola-anchor&quot; href=&quot;#findfirst&quot; aria-label=&quot;Anchor link for: findfirst&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;获取流中的第一个元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取一个年龄最小的作家并输出他的姓名。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  first &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; o1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() -&lt;&#x2F;span&gt;&lt;span&gt; o2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;findFirst&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;first.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;reduce-gui-bing&quot;&gt;reduce(归并)&lt;a class=&quot;zola-anchor&quot; href=&quot;#reduce-gui-bing&quot; aria-label=&quot;Anchor link for: reduce-gui-bing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;​	&lt;strong&gt;对流中的数据按照你指定的计算方式计算出一个结果。（缩减操作）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;strong&gt;reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始化值进行计算，计算结果再和后面的元素计算。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;strong&gt;reduce两个参数的重载形式内部的计算方式如下：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; identity;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt; stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; accumulator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;result, element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;其中identity就是我们可以通过方法参数传入的初始值，accumulator的apply具体进行什么计算也是我们通过方法参数来确定的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用reduce计算所有作者的年龄和。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;62&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;使用reduce求所有作者中年龄的最大值。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; maxAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MIN_VALUE&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ele&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; ele &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; ele &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;maxAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;33&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;使用reduce求所有作者中年龄的最小值。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; minAge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_VALUE&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ele&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; res &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ele &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; ele &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; res&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;reduce一个参数的重载形式内部的计算。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; foundAny &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt; stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;foundAny&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        foundAny &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; element;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; accumulator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;result, element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; foundAny &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;如果用一个参数的重载方法去求最小值代码如下：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; minOptional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; result&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;minOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;3-3-4zhu-yi-shi-xiang&quot;&gt;3.3.4注意事项&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-3-4zhu-yi-shi-xiang&quot; aria-label=&quot;Anchor link for: 3-3-4zhu-yi-shi-xiang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;惰性求值（如果没有终结操作，所有中间操作是不会得到执行的）&lt;&#x2F;li&gt;
&lt;li&gt;流是一次性的（一旦一个流对象经过一个终结操作后。这个流就不能再被使用）&lt;&#x2F;li&gt;
&lt;li&gt;不会影响原数据（我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;4-optional&quot;&gt;4.Optional&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-optional&quot; aria-label=&quot;Anchor link for: 4-optional&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;4-1-gai-shu&quot;&gt;4.1 概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-1-gai-shu&quot; aria-label=&quot;Anchor link for: 4-1-gai-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​	尤其是对象中的属性还是一个对象的情况下。这种判断会更多。&lt;&#x2F;p&gt;
&lt;p&gt;​	而过多的判断语句会让我们的代码显得臃肿不堪。&lt;&#x2F;p&gt;
&lt;p&gt;​	所以在&lt;code&gt;JDK8&lt;&#x2F;code&gt;中引入了&lt;code&gt;Optional&lt;&#x2F;code&gt;,养成使用&lt;code&gt;Optional&lt;&#x2F;code&gt;的习惯后你可以写出更优雅的代码来避免空指针异常。&lt;&#x2F;p&gt;
&lt;p&gt;​	并且在很多函数式编程相关的&lt;code&gt;API&lt;&#x2F;code&gt;中也都用到了&lt;code&gt;Optional&lt;&#x2F;code&gt;，如果不会使用&lt;code&gt;Optional&lt;&#x2F;code&gt;也会对函数式编程的学习造成影响。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;4-2-shi-yong&quot;&gt;4.2 使用&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-2-shi-yong&quot; aria-label=&quot;Anchor link for: 4-2-shi-yong&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;4-2-1-chuang-jian-dui-xiang&quot;&gt;4.2.1 创建对象&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-2-1-chuang-jian-dui-xiang&quot; aria-label=&quot;Anchor link for: 4-2-1-chuang-jian-dui-xiang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Optional就好像是包装类，可以把我们的具体数据封装给Optional对象内部。然后我们去使用Optional中封装好的方法操作封装进去的数据就可以非常优雅的避免空指针异常。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们一般使用&lt;strong&gt;Optional&lt;&#x2F;strong&gt;的&lt;strong&gt;静态方法ofNullable&lt;&#x2F;strong&gt;来把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;你可能会觉得还要加一行代码来封装数据比较麻烦。但是如果改造下&lt;code&gt;getAuthor&lt;&#x2F;code&gt;方法，让其它的返回值就是封装好的&lt;code&gt;Optional&lt;&#x2F;code&gt;的话，我们在使用时就会方便很多。而且在实际开发中我们的数据很多是从数据库获取的。&lt;code&gt;Mybatis&lt;&#x2F;code&gt;从3.5版本可以也已经支持&lt;code&gt;Optional&lt;&#x2F;code&gt;了。我们可以直接把&lt;code&gt;dao&lt;&#x2F;code&gt;方法的返回值类型定义成&lt;code&gt;Optional&lt;&#x2F;code&gt;类型，&lt;code&gt;MyBastis&lt;&#x2F;code&gt;会自己把数据封装成&lt;code&gt;Optional&lt;&#x2F;code&gt;对象返回。封装的过程也不需要我们自己操作。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	如果你&lt;strong&gt;确定一个对象不是空&lt;&#x2F;strong&gt;的则可以使用&lt;strong&gt;Optional&lt;&#x2F;strong&gt;的&lt;strong&gt;静态方法of&lt;&#x2F;strong&gt;来把数据封装成Optional对象。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; optional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;​	但是一定要注意，如果使用of的时候传入的参数必须不为null。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个方法的返回值类型是Optional类型。而如果我们经判断发现某次计算得到的返回值为null，这个时候就需要把null封装成Optional对象返回。这时则可以使用&lt;strong&gt;Optional&lt;&#x2F;strong&gt;的&lt;strong&gt;静态方法empty&lt;&#x2F;strong&gt;来进行封装。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;所以一套下来，还是&lt;code&gt;ofNullable&lt;&#x2F;code&gt;真香!!!!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;4-2-1-an-quan-xiao-fei-zhi&quot;&gt;4.2.1 安全消费值&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-2-1-an-quan-xiao-fei-zhi&quot; aria-label=&quot;Anchor link for: 4-2-1-an-quan-xiao-fei-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;我们获取到一个&lt;code&gt;Optional&lt;&#x2F;code&gt;对象后肯定需要对其中的数据进行使用。这时候我们可以使用其&lt;code&gt;ifPresent&lt;&#x2F;code&gt;方法对来消费其中的值。这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。这样使用起来就更加安全了。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如,以下写法就优雅的避免了空指针异常。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;另外，如果我们想获取值自己进行处理可以使用get方法获取，但是不推荐。因为当Optional内部的数据为空的时候会出现异常。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;an-quan-huo-qu-zhi&quot;&gt;安全获取值&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-quan-huo-qu-zhi&quot; aria-label=&quot;Anchor link for: an-quan-huo-qu-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;如果我们期望安全的获取值。我们不推荐使用&lt;code&gt;get&lt;&#x2F;code&gt;方法，而是使用&lt;code&gt;Optional&lt;&#x2F;code&gt;提供的以下方法。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;orelseget&quot;&gt;orElseGet&lt;a class=&quot;zola-anchor&quot; href=&quot;#orelseget&quot; aria-label=&quot;Anchor link for: orelseget&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;获取数据并且设置数据为空时的默认值。如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建对象作为默认值返回。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;orElseGet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;orelsethrow&quot;&gt;orElseThrow&lt;a class=&quot;zola-anchor&quot; href=&quot;#orelsethrow&quot; aria-label=&quot;Anchor link for: orelsethrow&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;获取数据，如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建异常抛出。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;orElseThrow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Supplier&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new RuntimeException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;author为空&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Throwable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;throwable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    throwable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;guo-lu&quot;&gt;过滤&lt;a class=&quot;zola-anchor&quot; href=&quot;#guo-lu&quot; aria-label=&quot;Anchor link for: guo-lu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;我们可以使用&lt;code&gt;filter&lt;&#x2F;code&gt;方法对数据进行过滤。如果原本是有数据的，但是不符合判断，也会变成一个无数据的&lt;code&gt;Optional&lt;&#x2F;code&gt;对象。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;pan-duan&quot;&gt;判断&lt;a class=&quot;zola-anchor&quot; href=&quot;#pan-duan&quot; aria-label=&quot;Anchor link for: pan-duan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;我们可以使用&lt;code&gt;isPresent&lt;&#x2F;code&gt;方法进行是否存在数据的判断。如果为空返回值为&lt;code&gt;false&lt;&#x2F;code&gt;,如果不为空，返回值为&lt;code&gt;true&lt;&#x2F;code&gt;。但是这种方式并不能体现&lt;code&gt;Optional&lt;&#x2F;code&gt;的好处，更推荐使用&lt;code&gt;ifPresent&lt;&#x2F;code&gt;方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isPresent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;shu-ju-zhuan-huan&quot;&gt;数据转换&lt;a class=&quot;zola-anchor&quot; href=&quot;#shu-ju-zhuan-huan&quot; aria-label=&quot;Anchor link for: shu-ju-zhuan-huan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;Optional还提供了map可以让我们的对数据进行转换，并且转换得到的数据也还是被Optional包装好的，保证了我们的使用安全。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如我们想获取作家的书籍集合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOperation &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthorOperation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; optionalBooks &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authorOperation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    optionalBooks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;books-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;books&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;上面涉及到的两个方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;蒙多&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;一个从菜刀中明悟哲理的祖安人&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; author;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthorOperation&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;蒙多&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;一个从菜刀中明悟哲理的祖安人&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;5-han-shu-shi-jie-kou&quot;&gt;5.函数式接口&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-han-shu-shi-jie-kou&quot; aria-label=&quot;Anchor link for: 5-han-shu-shi-jie-kou&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;5-1-gai-shu&quot;&gt;5.1 概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-1-gai-shu&quot; aria-label=&quot;Anchor link for: 5-1-gai-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;只有一个抽象方法的接口称为函数接口&lt;&#x2F;strong&gt;在&lt;code&gt;JDK&lt;&#x2F;code&gt;的函数式接口都加上&lt;code&gt;@FunctionInterface&lt;&#x2F;code&gt;注解进行标识。但是无论是否加上该注解，只要接口中只有一个抽象方法。都是函数式接口。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;5-2-chang-jian-de-han-shu-shi-jie-kou&quot;&gt;5.2 常见的函数式接口&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-2-chang-jian-de-han-shu-shi-jie-kou&quot; aria-label=&quot;Anchor link for: 5-2-chang-jian-de-han-shu-shi-jie-kou&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;5-2-1-comsumerxiao-fei-jie-kou&quot;&gt;5.2.1 Comsumer消费接口&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-2-1-comsumerxiao-fei-jie-kou&quot; aria-label=&quot;Anchor link for: 5-2-1-comsumerxiao-fei-jie-kou&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;根据抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数进行消费。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830085951417.png&quot; alt=&quot;image-20220830085951417&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;&quot;&gt;5.2.2 Function 计算转换接口&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数计算或转换，把结果返回。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830090053563.png&quot; alt=&quot;image-20220830090053563&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-1&quot;&gt;5.2.3 Predicate 判断接口&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数条件判断，返回判断结果。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830090128559.png&quot; alt=&quot;image-20220830090128559&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-2&quot;&gt;5.2.4 Supplier 生产型接口&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中创建对象，把创建好的对象返回。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830090201854.png&quot; alt=&quot;image-20220830090201854&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;5.3 常用的默认方法&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-4&quot;&gt;5.3.1 and&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;我们在使用Predicate接口时候可能需要进行判断条件的拼接。而and方法相当于是使用&amp;amp;&amp;amp;来拼接两个判断条件.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印作家中年龄大于17并且姓名的长度大于1的作家。当然，满足这个需求的实现方式不止这一种。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authorStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}))&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Author(id=1, name=蒙多, age=33, intro=一个从菜刀中明悟哲理的祖安人, books=[Book(id=1, name=刀的两侧是光明与黑暗, category=哲学,爱情, score=88, intro=用一把刀划分了爱恨), Book(id=2, name=一个人不能死在同一把刀下, category=个人成长,爱情, score=99, intro=讲述如何从失败中明悟真理)])&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-5&quot;&gt;5.3.2 or&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;我们在使用Predicate接口时候可能需要进行判断条件的拼接。而or方法相当于是使用||来拼接两个判断条件。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印作家中年龄大于17或者姓名的长度小于2的作家。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}))&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
易
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-6&quot;&gt;5.3.4 negate&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Predicate接口中的方法。negate方法相当于是在判断添加前面加了个! 表示取反。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印作家中年龄不大于17的作家。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;negate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;15&lt;&#x2F;p&gt;
&lt;p&gt;14&lt;&#x2F;p&gt;
&lt;p&gt;14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-7&quot;&gt;6.方法引用&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;我们在使用lambda时，如果方法体中只有一个方法的调用的话（包括构造方法）,我们可以用方法引用进一步简化代码。&lt;&#x2F;p&gt;
&lt;p&gt;基本格式：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类名或者对象名::方法名。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-8&quot;&gt;6.1 语法详解&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-9&quot;&gt;6.1.1 引用类的静态方法&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;其实就是引用类的静态方法。&lt;&#x2F;p&gt;
&lt;p&gt;格式：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类名::方法名&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用前提&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果我们在重写方法的时候，方法体中只有&lt;strong&gt;一行代码&lt;&#x2F;strong&gt;，并且这行代码就是&lt;strong&gt;调用了某个具体方法&lt;&#x2F;strong&gt;，并且我们要把重写的&lt;strong&gt;抽象方法中所有的参数都按顺序传入这个静态方法中&lt;&#x2F;strong&gt;，这时候就可以引用类的静态方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如对下面代码的优化。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authorStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;valueOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，如果我们所重写的方法是没有参数的，调用的方法也是没有参数的也相当于符合以上规则。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authorStream
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;valueOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-10&quot;&gt;6.3.2 引用对象的实例方法&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;格式：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对象名::方法名&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-11&quot;&gt;使用前提&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;​	如果我们在重写方法的时候，方法体中&lt;strong&gt;只有一行代码&lt;&#x2F;strong&gt;，并且这行代码是&lt;strong&gt;调用了某个对象的成员方法&lt;&#x2F;strong&gt;，并且我们把要重写的&lt;strong&gt;抽象方法中所有的参数都按照顺序传入了这个成员方法中&lt;&#x2F;strong&gt;，这个时候我们就可以引用对象的实例方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;优化下面代码&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;StringBuilder&lt;&#x2F;span&gt;&lt;span&gt; sb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new StringBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authorStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;sb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;优化后&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;StringBuilder&lt;&#x2F;span&gt;&lt;span&gt; sb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new StringBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authorStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sb::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-12&quot;&gt;6.3.3 引用类的实例方法&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;格式:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类名::方法名&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-13&quot;&gt;使用前提&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;​	如果我们在重写方法的时候，方法体中&lt;strong&gt;只有一行代码&lt;&#x2F;strong&gt;，并且这行代码是&lt;strong&gt;调用了第一个参数的成员方法&lt;&#x2F;strong&gt;，并且我们把要&lt;strong&gt;重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中&lt;&#x2F;strong&gt;，这个时候我们就可以引用类的实例方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;优化下面代码&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;UseString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int start&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;subAuthorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UseString&lt;&#x2F;span&gt;&lt;span&gt; useString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; useString.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;str,start,length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;subAuthorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;八尺妖剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new UseString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int start&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; str.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;start,length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;优化后&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;subAuthorName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;八尺妖剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-14&quot;&gt;6.3.4 构造器引用&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;如果方法体中的一行代码是构造器的话就可以使用构造器引用。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;格式：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类名::new&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-15&quot;&gt;使用前提&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;​	如果我们在重写方法的时候，方法体中&lt;strong&gt;只有一行代码&lt;&#x2F;strong&gt;，并且这行代码是&lt;strong&gt;调用了某个类的构造方法&lt;&#x2F;strong&gt;，并且我们把&lt;strong&gt;要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中&lt;&#x2F;strong&gt;，这个时候我们就可以引用构造器。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;优化下面代码&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new StringBuilder&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sb-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;sb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;-三更&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;优化后&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;StringBuilder&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sb-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;sb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;-三更&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;str-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-16&quot;&gt;7.高级用法&lt;a class=&quot;zola-anchor&quot; href=&quot;#-16&quot; aria-label=&quot;Anchor link for: -16&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-17&quot;&gt;7.1 基本数据类型优化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-17&quot; aria-label=&quot;Anchor link for: -17&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;我们之前用到的很多&lt;code&gt;Stream&lt;&#x2F;code&gt;的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。&lt;&#x2F;p&gt;
&lt;p&gt;​	即使我们操作的是&lt;strong&gt;整数小数，&lt;strong&gt;但是实际用的都是他们的&lt;&#x2F;strong&gt;包装类&lt;&#x2F;strong&gt;。&lt;code&gt;JDK5&lt;&#x2F;code&gt;中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道&lt;strong&gt;装箱和拆箱肯定是要消耗时间的&lt;&#x2F;strong&gt;。虽然这个时间消耗很下。但是在&lt;strong&gt;大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了&lt;&#x2F;strong&gt;。所以为了让我们能够对这部分的时间消耗进行优化。&lt;code&gt;Stream&lt;&#x2F;code&gt;还提供了很多专门针对基本数据类型的方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：&lt;code&gt;mapToInt&lt;&#x2F;code&gt;,&lt;code&gt;mapToLong&lt;&#x2F;code&gt;,&lt;code&gt;mapToDouble&lt;&#x2F;code&gt;,&lt;code&gt;flatMapToInt&lt;&#x2F;code&gt;,&lt;code&gt;flatMapToDouble&lt;&#x2F;code&gt;等。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;test27&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;优化后的写法
&lt;&#x2F;span&gt;&lt;span&gt;    authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mapToInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-18&quot;&gt;7.2 并行流&lt;a class=&quot;zola-anchor&quot; href=&quot;#-18&quot; aria-label=&quot;Anchor link for: -18&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实&lt;strong&gt;并行流就是把任务分配给多个线程去完全&lt;&#x2F;strong&gt;。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用&lt;code&gt;Stream&lt;&#x2F;code&gt;的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	parallel方法可以把串行流转换成并行流。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;test28&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; sum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parallel&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;peek&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Consumer&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;currentThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;num -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ele&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; ele&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;sum&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;这里用到&lt;code&gt;peek()&lt;&#x2F;code&gt;方法来打印中间值，这是用来调试的一个方法，可以用在流操作的任何位置。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;也可以通过&lt;code&gt;parallelStream&lt;&#x2F;code&gt;直接获取并行流对象。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parallelStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;author -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age -&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;age-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;del&gt;初更全文完…&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>Java集合源码浅析</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/java-ji-he-yuan-ma-qian-xi/</link>
          <guid>https://ilikexff.cn/java-ji-he-yuan-ma-qian-xi/</guid>
          <description xml:base="https://ilikexff.cn/java-ji-he-yuan-ma-qian-xi/">&lt;h3 id=&quot;geng-xin-ri-zhi-tada&quot;&gt;更新日志🎉&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi-tada&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi-tada&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2023-01-29 星期六&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正一些已知错误&lt;&#x2F;li&gt;
&lt;li&gt;调整文章布局结构&lt;&#x2F;li&gt;
&lt;li&gt;修正错别字词&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-05-26 10:20:23 星期四&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正语言表达逻辑&lt;&#x2F;li&gt;
&lt;li&gt;删除&#x2F;修改了错别字词&lt;&#x2F;li&gt;
&lt;li&gt;更新了部分配图&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-08-02&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正错别字&lt;&#x2F;li&gt;
&lt;li&gt;修正语言表达逻辑&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-08-22&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;还是修已知的正错别词语&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Java集合解读&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ideakuai-jie-jian&quot;&gt;IDEA快捷键&lt;a class=&quot;zola-anchor&quot; href=&quot;#ideakuai-jie-jian&quot; aria-label=&quot;Anchor link for: ideakuai-jie-jian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;查看源码:F4&lt;&#x2F;p&gt;
&lt;p&gt;进入实现:Ctrl+Alt+B(鼠标点击)&lt;&#x2F;p&gt;
&lt;p&gt;添加实现类:空格&lt;&#x2F;p&gt;
&lt;p&gt;显示图:Ctrl+Alt+Shift+U&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;gai-lan&quot;&gt;概览&lt;a class=&quot;zola-anchor&quot; href=&quot;#gai-lan&quot; aria-label=&quot;Anchor link for: gai-lan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;**说明：**以下内容的源码分析，如没有特别说明，均来自JDK8.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;集合主要分为两组：单列集合和双列集合&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;但列集合一般是指存放单个对象的集合，而双列集合一般是以&amp;lt;k,v&amp;gt;键值对形式存放数据的集合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Collection&lt;&#x2F;code&gt;接口下有两个重要的子接口&lt;code&gt;List&lt;&#x2F;code&gt;,&lt;code&gt;Set&lt;&#x2F;code&gt;，他们的实现子类都是单列集合。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Map&lt;&#x2F;code&gt;接口的实现子类有&lt;code&gt;HashTable&lt;&#x2F;code&gt;、&lt;code&gt;HashMap&lt;&#x2F;code&gt;、&lt;code&gt;TreeMap&lt;&#x2F;code&gt;,也都是双列集合。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;以下是集合类下两大主接口的类图关系。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;collectionxi&quot;&gt;&lt;strong&gt;Collection系&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#collectionxi&quot; aria-label=&quot;Anchor link for: collectionxi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220525092920.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Conllection接口下，派生出了三个主要的子接口，分别为无序集合&lt;code&gt;Set&lt;&#x2F;code&gt;,队列&lt;code&gt;Queue&lt;&#x2F;code&gt;和有序集合&lt;code&gt;List&lt;&#x2F;code&gt;。在三大子接口之下，还有着众多的实现子类或者派生的子接口，其中最常用的有：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;TreeSet&lt;&#x2F;li&gt;
&lt;li&gt;LinkedHashSet&lt;&#x2F;li&gt;
&lt;li&gt;HashSet&lt;&#x2F;li&gt;
&lt;li&gt;LinkedList&lt;&#x2F;li&gt;
&lt;li&gt;ArrayList&lt;&#x2F;li&gt;
&lt;li&gt;Stack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;strong&gt;Map系&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220525092947.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Map&lt;&#x2F;code&gt;集合为双列集合。&lt;code&gt;Map&lt;&#x2F;code&gt;**没有直接继承的子接口,**主要有三个实现类，分别是&lt;code&gt;HashMap&lt;&#x2F;code&gt;、&lt;code&gt;HashTable&lt;&#x2F;code&gt;、&lt;code&gt;SortedMap&lt;&#x2F;code&gt;。在三个主要实现之下，比较常用的实现及其实现子类有：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HashMap&lt;&#x2F;code&gt;(性能高，非线程安全)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;&#x2F;code&gt;(性能较低，线程安全，但属于老旧的API，一般不推荐使用)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;TreeMap&lt;&#x2F;code&gt;(有序&lt;code&gt;map&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;细说&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;collection&quot;&gt;&lt;code&gt;Collection&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#collection&quot; aria-label=&quot;Anchor link for: collection&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;由于&lt;code&gt;Collection&lt;&#x2F;code&gt;接口直接继承了&lt;code&gt;Iterable&lt;&#x2F;code&gt;，它是没有实现的，它的所有方法都是由它的&lt;strong&gt;子接口&lt;&#x2F;strong&gt;的实现类进行实现，所以这里就以&lt;code&gt;Collection&lt;&#x2F;code&gt;下子接口&lt;code&gt;List&lt;&#x2F;code&gt;的实现类&lt;code&gt;ArrayList&lt;&#x2F;code&gt;来讲解。注意&lt;code&gt;List&lt;&#x2F;code&gt;是&lt;strong&gt;有序集合且元素可以重复&lt;&#x2F;strong&gt;，而&lt;code&gt;Set&lt;&#x2F;code&gt;则是&lt;strong&gt;无序集合，元素不可重复&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;讲解的方法列表&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;add:添加单个元素&lt;&#x2F;li&gt;
&lt;li&gt;remove：输出指定元素&lt;&#x2F;li&gt;
&lt;li&gt;contains:查找元素是否存在&lt;&#x2F;li&gt;
&lt;li&gt;size:获取元素个数&lt;&#x2F;li&gt;
&lt;li&gt;isEmpty:判断是否为空&lt;&#x2F;li&gt;
&lt;li&gt;clear:清空&lt;&#x2F;li&gt;
&lt;li&gt;addAll:添加多个元素&lt;&#x2F;li&gt;
&lt;li&gt;containsAll:查找多个元素是否都存在&lt;&#x2F;li&gt;
&lt;li&gt;removeAll:输出多个元素&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本用法演示&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*添加单个元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;这里其实是一个自动装箱的操作:list.add(new Integer(10))
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;list:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*输出元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;输出&amp;quot;Jack&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;list.remove(0);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;指定输出某个元素
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;输出后的[list]:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*查找某个元素是否存在*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*获取元素个数*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*判断集合是否为空*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;isEmpty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*清空集合*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;清空后的[list]：[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;清空后的[list]：&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*添加多个元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt; list2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;list2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;西游记&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;list2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;西厢记&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;addAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;添加多个元素后的[list]:[西游记, 西厢记]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;添加多个元素后的[list]:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*判断多个元素是否都存在*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;containsAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*输出多个元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;华强北&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;removeAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;华强北
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;遍历用法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的类图已经知道，&lt;code&gt;Collection&lt;&#x2F;code&gt;接口还有一个&lt;code&gt;Iterable&lt;&#x2F;code&gt;父接口。它的部分实现源码中第一个方法如下:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220320114101.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，该方法可以返回元素的&lt;code&gt;iterator&lt;&#x2F;code&gt;对象。只要是实现了接口的所有子类，都有一个&lt;code&gt;iterator()&lt;&#x2F;code&gt;方法。在对元素的遍历上，都可以采用迭代器的方式进行遍历。所以&lt;code&gt;Collection&lt;&#x2F;code&gt;&lt;strong&gt;及其所有子类实现&lt;&#x2F;strong&gt;，我们都可以获取到每个元素的迭代器并用在对元素的遍历操作上。需要注意的是，&lt;code&gt;iterator&lt;&#x2F;code&gt;&lt;strong&gt;仅用来遍历集合，本身并不存放任何对象。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;迭代器的执行原理&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;作为&lt;code&gt;Collection&lt;&#x2F;code&gt;的父接口，&lt;code&gt;Iterator&lt;&#x2F;code&gt;的方法如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220320141211.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我们一般在使用迭代器进行遍历的时候，都会用到一个&lt;code&gt;while&lt;&#x2F;code&gt;循环，循环的条件是&lt;code&gt;iterator.hasNext()&lt;&#x2F;code&gt;，也就是说，在每次得到遍历元素之前，&lt;code&gt;iterator&lt;&#x2F;code&gt;对象会调用自身的&lt;code&gt;hasNext()&lt;&#x2F;code&gt;方法，对集合里的元素进行判断，&lt;strong&gt;只有当存在下一个元素时，迭代器才会继续往下执行&lt;&#x2F;strong&gt;，否则，迭代结束。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220320140135.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，&lt;code&gt;Iterator&lt;&#x2F;code&gt;的&lt;code&gt;hasNext()&lt;&#x2F;code&gt;方法返回一个&lt;strong&gt;布尔值&lt;&#x2F;strong&gt;，如果该迭代对象还存在元素的情况下。这个方法就相当于一个指向集合元素的指针，每一次调用都会向下移动以检查&lt;strong&gt;是否到达集合尾部&lt;&#x2F;strong&gt;，在移动的同时，它还会调用&lt;code&gt;next()&lt;&#x2F;code&gt;方法，该方法会将移动后该指针指向位置上的元素进行返回。为了有效的防止空指针，每次在调用&lt;code&gt;Next()&lt;&#x2F;code&gt;之前，会先调用&lt;code&gt;hasNext()&lt;&#x2F;code&gt;,这是有必要的。如果说不存在下一个元素，则会抛出一个&lt;code&gt;NoSuchElementException&lt;&#x2F;code&gt;异常。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Iterator使用示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;3&#x2F;20 14:17
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @description: 演示迭代器[Iterator]的使用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;CollectionIterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span&gt; col &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C++ Primer Plus&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Stephen Prata&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;57.4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;程序员的数学&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;结城浩&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Java疯狂讲义&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;李刚&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;集合[col]:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*遍历集合*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;1.获取集合的迭代对象
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt; iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;2.while循环遍历数据
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hasNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;3.注意：iterator返回默认时一个Object类型(除非指定泛型)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;[col]迭代返回:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;o&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;4.当退出while循环之后，此时的iterator指向最后一个元素，在调用next()方法会报NoSuchElementException异常。
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;如果需要再次遍历，需要重置迭代器。方法如下：
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;IDEA支持快速生成迭代方法，使用[Ctrl+j]快捷键进行查看
&lt;&#x2F;span&gt;&lt;span&gt;        iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hasNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; o1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;  iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;[col]再次迭代：&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;o1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * 内部类
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;class  Book{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private String name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private String author;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    private double price;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public Book(String name, String author, double price) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        this.name = name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        this.author = author;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        this.price = price;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    @Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public String toString() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        return &amp;quot;Book{&amp;quot; +
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                &amp;quot;, author=&amp;#39;&amp;quot; + author + &amp;#39;\&amp;#39;&amp;#39; +
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                &amp;quot;, price=&amp;quot; + price +
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;                &amp;#39;}&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public String getName() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        return name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public void setName(String name) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        this.name = name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public String getAuthor() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        return author;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public void setAuthor(String author) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        this.author = author;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public double getPrice() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        return price;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    public void setPrice(double price) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        this.price = price;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;一些需要注意的点，已经写在了注释当中。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;增强for&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓增强for，也就是针对普通for循环的增强。它可以替代&lt;code&gt;iterator&lt;&#x2F;code&gt;迭代器，相当于一个简化版的&lt;code&gt;iterator&lt;&#x2F;code&gt;,也正因为如此，&lt;strong&gt;增强for只能用于遍历集合或者数组&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;基本语法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;元素类型 元素名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;集合或者数组名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    访问元素;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;collection&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;3&#x2F;20 14:56
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @description: 演示增强for的使用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;CollectionFor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span&gt; col &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C++ Primer Plus&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Stephen Prata&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;57.4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;程序员的数学&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;结城浩&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Java疯狂讲义&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;李刚&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*使用增强for进行集合的遍历*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;col&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;book=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;list&quot;&gt;&lt;code&gt;List&lt;&#x2F;code&gt;接口&lt;a class=&quot;zola-anchor&quot; href=&quot;#list&quot; aria-label=&quot;Anchor link for: list&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;常用实现及其方法一览&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Lists.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;List&lt;&#x2F;code&gt;接口是&lt;code&gt;Collection&lt;&#x2F;code&gt;的子接口，上面讲解的&lt;code&gt;ArrayList&lt;&#x2F;code&gt;的方法是来自&lt;code&gt;Collection&lt;&#x2F;code&gt;接口方法。而这些方在&lt;code&gt;Set&lt;&#x2F;code&gt;子接口中也可以使用。下面讲一下子接口&lt;code&gt;List&lt;&#x2F;code&gt;中的实现类，也是以&lt;code&gt;ArrayList&lt;&#x2F;code&gt;实现为例。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;&#x2F;code&gt;集合类中的元素是有序(添加和取出顺序一致)的，且是可重复的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;List&lt;&#x2F;code&gt;集合中的每一个元素都有其对应的顺序索引，即他是支持&lt;strong&gt;索引&lt;&#x2F;strong&gt;的一类集合。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;List&lt;&#x2F;code&gt;中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;List&lt;&#x2F;code&gt;子接口的主要常用实现类有&lt;code&gt;ArrayList&lt;&#x2F;code&gt;、&lt;code&gt;LinkedList&lt;&#x2F;code&gt;、&lt;code&gt;Vector&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;List的一些方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;3&#x2F;20 16:57
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @description: List的方法演示
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ListMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;张无忌&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;张天志&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*在index位置插入元素e*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*注意：这里如果不指定下标的话，默认是以尾部追加的方式进行元素插入的*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Tisox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;list=[张无忌, Tisox, 张天志]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;list=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*addAll(inr index,Collection e)：从index位置开始将元素e中的所有元素添加进来*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; list2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        list2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;蜘蛛侠&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        list2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;钢铁侠&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;addAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,list2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;list=[张无忌, 蜘蛛侠, 钢铁侠, Tisox, 张天志]
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;list=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*int intdexOf(Object obj):返回obj在当前集合中首次出现的位置*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;indexOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;蜘蛛侠&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*int lastIndexOf(Object obj):返回obj在当前集合中最后一次出现的位置*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;凋残&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lastIndexOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;凋残&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*remove(int index):移除指定index位置的元素，并返回此元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;list=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*set(int index,Object ele):设置指定index位置出的元素为ele，相当于是替换元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;新的名字&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;list=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*subList(int fromIndex,int toIndex):返回从fromIndex到toIndex位置的子集合*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;返回一个左闭右开的区间
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; reslist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;subList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;relist=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;reslist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;List的三种遍历方式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于&lt;code&gt;ArrayList&lt;&#x2F;code&gt;、&lt;code&gt;LinkedList&lt;&#x2F;code&gt;和&lt;code&gt;Vector&lt;&#x2F;code&gt;都是&lt;code&gt;List&lt;&#x2F;code&gt;的实现子类，以下方法可以&lt;strong&gt;无缝切换&lt;&#x2F;strong&gt;，效果是一样的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: Tisox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;3&#x2F;20 19:18
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @description: List的三种遍历方式
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ListFor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;List list =new Vector();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new LinkedList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;List list = new ArrayList();
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;tom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;回锅肉&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;鱼香肉丝&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;砂锅粉&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*1.迭代器遍历*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt; iterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hasNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;[list]的[迭代器iterator]遍历=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;====================================&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*2.增强for遍历*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;[list]的[增强for]遍历=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;====================================&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*3.普通for循环遍历*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;[list]的[普通for循环]遍历=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;arraylist&quot;&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#arraylist&quot; aria-label=&quot;Anchor link for: arraylist&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;&lt;strong&gt;允许存入&lt;code&gt;null&lt;&#x2F;code&gt;值。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt; arrayList &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;arrayList.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;arrayList.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;arrayList.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;arrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;底层采用数组实现。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;线程不安全&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220320204436.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过它的源码可以看到，他是没有&lt;code&gt;synchronized&lt;&#x2F;code&gt;关键字修饰的。也正是因为如此，它的效率是比较高的，所以如果需要保证线程安全的场景下，不建议使用&lt;code&gt;ArrayList&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-2&quot;&gt;源码分析&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;**&lt;code&gt;ArrayList&lt;&#x2F;code&gt;中维护了一个&lt;code&gt;Object&lt;&#x2F;code&gt;类型的数组&lt;code&gt;elementData[]&lt;&#x2F;code&gt;。**源码如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;transient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; elementData;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的&lt;code&gt;elementData[]&lt;&#x2F;code&gt;数组的类型是&lt;code&gt;Object&lt;&#x2F;code&gt;类型，也就是说，它可以存放任意类型的数据，因为&lt;code&gt;Object&lt;&#x2F;code&gt;类是&lt;strong&gt;所有类的父类&lt;&#x2F;strong&gt;，也就是顶级父类。 关键字&lt;code&gt;transient&lt;&#x2F;code&gt;的作用是去除序列化，当某个属性被加上该关键字即表示它在进行序列化时会被忽略，不参与序列化操作。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;-3&quot;&gt;底层扩容原理&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;底层采用数组这种数据结构来实现，必然会有容量的限制，那么在它的底层是如何实现自动扩容的呢？这里以其中的&lt;code&gt;add()&lt;&#x2F;code&gt;方法进行浅析。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;有两个构造方法，分别是&lt;strong&gt;无参数构造和有参构造&lt;&#x2F;strong&gt;。下面是源码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;无参构造
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.elementData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;有参构造
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; initialCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;initialCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.elementData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;initialCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;initialCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.elementData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;EMPTY_ELEMENTDATA&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;throw new IllegalArgumentException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Illegal Capacity: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                                           initialCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;两个构造方法不仅在参数上有所区别，他们的底层扩容原理也是不一样的，先看一下无参数的&lt;code&gt; ArrayList()&lt;&#x2F;code&gt;构造。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，在&lt;strong&gt;无参构造的方法&lt;&#x2F;strong&gt;中，它将数组的初始容量设为&lt;code&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;code&gt;。也就是一个空对象数组。这一点可以从下面的源码得知。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220321195749.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下面尝试在集合中添加元素，来分析add方法的执行过程。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;使用无参构造对集合进行初始化
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;向其中添加10个元素
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;执行过程和扩容原理&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在初始化完成后，当我们触发add()时，它会先调用&lt;code&gt;valueOf()&lt;&#x2F;code&gt;方法对添加的元素进行一个&lt;strong&gt;装箱&lt;&#x2F;strong&gt;操作，这不是本次分析的重点，不再赘述。注意下面这个自动装箱的源码来自&lt;strong&gt;JDK11&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220321200829.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;装箱结束后，进入&lt;code&gt;add(E e)&lt;&#x2F;code&gt;这个方法，该方法是集合中的一个&lt;strong&gt;重载方法，接收一个泛型参数&lt;&#x2F;strong&gt;，源码如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ensureCapacityInternal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Increments modCount!!
&lt;&#x2F;span&gt;&lt;span&gt;    elementData[size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;首先，在执行正式的添加操作之前，会先执行&lt;code&gt;ensureCapacityInternal()&lt;&#x2F;code&gt;方法，该方法主要是用来&lt;strong&gt;确认集合的容量情况&lt;&#x2F;strong&gt;，决定是否需要扩容。再调用添加方法进行元素的添加。显然，这里出现的&lt;code&gt;ensureCapacityInternal()&lt;&#x2F;code&gt;方法是重点，源码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ensureCapacityInternal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;elementData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        minCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;, minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ensureExplicitCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;方法传入一个名为&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的&lt;code&gt;int&lt;&#x2F;code&gt;类型变量，表示数组最小容量。接着判断&lt;code&gt;elementData&lt;&#x2F;code&gt;是否是&lt;code&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;code&gt;默认值，由于我们选择的是无参构造，所以&lt;code&gt;if&lt;&#x2F;code&gt;语句中的条件是成立的。接下来&lt;code&gt;Math.max(DEFAULT_CAPACITY, minCapacity)&lt;&#x2F;code&gt;在&lt;strong&gt;默认容量&lt;&#x2F;strong&gt;和&lt;strong&gt;最小容量&lt;&#x2F;strong&gt;之间取一个最大值并赋给&lt;code&gt;minCapacity&lt;&#x2F;code&gt;，也就是更新&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值。关于默认容量&lt;code&gt;DEFAULT_CAPACITY&lt;&#x2F;code&gt;，下面是它的声明：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_CAPACITY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;执行之后，&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值将更新为10;也就是说，这个方法目的是为了确认&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值，而在&lt;code&gt;if&lt;&#x2F;code&gt;之后，又出现了一个&lt;code&gt;ensureExplicitCapacity(minCapacity)&lt;&#x2F;code&gt;方法，在&lt;code&gt;if&lt;&#x2F;code&gt;判断条件不满足的情况下执行，参数就是上面更新后的&lt;code&gt;minCapacity&lt;&#x2F;code&gt;，可以猜测，这个方法应该也是对是否需要扩容进行一个判断的算法。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ensureExplicitCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    modCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; elementData.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意,这里有一条为&lt;code&gt;modCount++;&lt;&#x2F;code&gt;的语句，他主要是记录当前集合被修改的次数，为了防止被多个线程操作，否则会抛异常。第4行中if的条件&lt;code&gt;minCapacity - elementData.length &amp;gt; 0&lt;&#x2F;code&gt;表示最小容量与当前数组元素容量的一个&lt;strong&gt;差值大于0是否成立&lt;&#x2F;strong&gt;，将会直接调用下一个方法进行扩容，也就是&lt;code&gt;grow()&lt;&#x2F;code&gt;方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;比方说，此时的&lt;code&gt;minCapacity=10&lt;&#x2F;code&gt;，&lt;code&gt;elementData=0&lt;&#x2F;code&gt;,显然&lt;code&gt;10-0&amp;gt;0&lt;&#x2F;code&gt;,也即是说，数组需要一个最小容量为10空间，而此时的容量为0，显然需要进行扩容操作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;下面是&lt;code&gt;grow()&lt;&#x2F;code&gt;方法，也是扩容的核心实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; elementData.length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ (&lt;&#x2F;span&gt;&lt;span&gt;oldCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; minCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; minCapacity;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_ARRAY_SIZE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hugeCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; minCapacity is usually close to size, so this is a win:
&lt;&#x2F;span&gt;&lt;span&gt;    elementData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;copyOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;elementData, newCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，方法开始会先将数组容量&lt;code&gt;elementData.length&lt;&#x2F;code&gt;赋值给一个中间变量&lt;code&gt;oldCapacity&lt;&#x2F;code&gt;。接着为变量&lt;code&gt;newCapacity&lt;&#x2F;code&gt;进行赋值，算法是将&lt;code&gt;oldCapacity&lt;&#x2F;code&gt;旧&lt;strong&gt;的容量+旧容量的二分之一&lt;&#x2F;strong&gt;赋值给该变量。注意这里&lt;code&gt;(oldCapacity &amp;gt;&amp;gt; 1)&lt;&#x2F;code&gt;表将&lt;code&gt;oldCapacity&lt;&#x2F;code&gt;右移一位，&lt;strong&gt;等同于除以2&lt;&#x2F;strong&gt;，用位运算可以提高执行效率。反过来，如果是左移的话，代表乘以&lt;code&gt;2&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;又由于前面已经知道&lt;code&gt;elemenatData&lt;&#x2F;code&gt;其实是等于&lt;code&gt;0&lt;&#x2F;code&gt;的，那么直接导致这条赋值语句结果为&lt;code&gt;0&lt;&#x2F;code&gt;，也就是&lt;code&gt;newCapacity==0&lt;&#x2F;code&gt;，所以它后面紧接着出现了两个判断。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果新的容量小于最小容量，那么将最小容量赋给这个新容量，&lt;strong&gt;完成一次扩容，此时数组的容量由0变为10.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;如果&lt;code&gt;newCapacity &amp;gt; MAX_ARRAY_SIZE &lt;&#x2F;code&gt;,那么&lt;code&gt;newCpapcity&lt;&#x2F;code&gt;的值由方法&lt;code&gt;hugeCapacity()&lt;&#x2F;code&gt;决定。这个后面再说，我们继续当前的分析，在执行完上面的判断语句之后，最后对&lt;code&gt;elemantData&lt;&#x2F;code&gt;进行重新赋值，核心方法&lt;code&gt;Arrays.copyOf(elementData, newCapacity)&lt;&#x2F;code&gt;,该方法的作用是将&lt;code&gt;newCapacity&lt;&#x2F;code&gt;的值复制给&lt;code&gt;elementData&lt;&#x2F;code&gt;。之后&lt;code&gt;elementData&lt;&#x2F;code&gt;里面将会存在&lt;strong&gt;10个null&lt;&#x2F;strong&gt;值.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;就是说，当我们&lt;strong&gt;首次&lt;&#x2F;strong&gt;使用该集合的&lt;strong&gt;无参构造&lt;&#x2F;strong&gt;初始化集合时，其实并不会触发&lt;strong&gt;1.5倍的底层扩容机制&lt;&#x2F;strong&gt;。注意，这里使用&lt;code&gt;copyOf()&lt;&#x2F;code&gt;方法的作用也是为了&lt;strong&gt;保留扩容之前已经存在集合中的元素&lt;&#x2F;strong&gt;，换句话说，每次扩容并不会导致已存在的元素丢失，而是在这些元素之后添加&lt;code&gt;N&lt;&#x2F;code&gt;个值为&lt;code&gt;null&lt;&#x2F;code&gt;的元素空间。比如这样:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;null值得位置就是扩容的容量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当以上扩容操作完成之后，执行会返回到之前的&lt;code&gt;add()&lt;&#x2F;code&gt;方法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ensureCapacityInternal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Increments modCount!!
&lt;&#x2F;span&gt;&lt;span&gt;    elementData[size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时的&lt;code&gt;elementData&lt;&#x2F;code&gt;已经由最初的空数组扩容为大小为10的容量，当执行完&lt;code&gt;elementData[size++] = e;&lt;&#x2F;code&gt;之后，新的容量中第一个位置会被替换为元素&lt;code&gt;1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意理解&lt;strong&gt;minCapacity&lt;&#x2F;strong&gt;和&lt;strong&gt;elementData&lt;&#x2F;strong&gt;的含义。前者的意思时我们用这个集合存放某些元素&lt;strong&gt;最少需要的空间&lt;&#x2F;strong&gt;，而后者表示此时这个集合&lt;strong&gt;本身拥有的空间&lt;&#x2F;strong&gt;，所以，扩容的目的在于扩张&lt;strong&gt;elementData&lt;&#x2F;strong&gt;的大小，以满足存放&lt;strong&gt;minCapacity&lt;&#x2F;strong&gt;所需。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;现在来看一下上面留下的**hugeCapacity(minCapacity)**方法，源码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hugeCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; overflow
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;throw new OutOfMemoryError&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_ARRAY_SIZE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_VALUE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_ARRAY_SIZE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;注意：以下是MAX_ARRAY_SIZE的常量定义。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_ARRAY_SIZE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_VALUE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;2147483647是Integer.MAX_VALUE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个方法其实就是对数组&lt;strong&gt;大小边界进行一个判断和限制&lt;&#x2F;strong&gt;，要求数组大小在&lt;code&gt;0&lt;&#x2F;code&gt;到&lt;code&gt;MAX_VALUE&lt;&#x2F;code&gt;之间。如果&lt;code&gt;&amp;lt;0&lt;&#x2F;code&gt;直接抛出一个&lt;code&gt;OutOfMemoryError&lt;&#x2F;code&gt;异常，否则返回一个值作为数组容量的上限，这里用了一个三元表达式作为返回语句。&lt;&#x2F;p&gt;
&lt;p&gt;如果&lt;code&gt;最小容量大于MAX_ARRAY_SIZE，&lt;&#x2F;code&gt;则将&lt;code&gt;Integer.MAX_VALUE&lt;&#x2F;code&gt;的值赋给它，否则还是用&lt;code&gt;MAX_ARRAY_SIZE。&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再看一下&lt;strong&gt;为什么这里****MAX_ARRAY_SIZE&lt;&#x2F;strong&gt;是&lt;strong&gt;Integer.MAX_VALUE-8&lt;&#x2F;strong&gt;，也即是**2147483647-8=2,147,483,639****而不是减其他数值？**关于这个问题，其实再源码的注释中就已经写清楚了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220322112254.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;大致意思就是如果直接使用&lt;strong&gt;Integer.MAX_VALUE&lt;&#x2F;strong&gt;的话，在某些虚拟机中，可能会出现溢出的问题。不过一般情况下，我们还是认为它的值可以直接看作是与&lt;strong&gt;Integer.MAX_VALUE&lt;&#x2F;strong&gt;相同。以下是来自&lt;code&gt;stackoverflow&lt;&#x2F;code&gt;的一个解答，可以参考一下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;35756277&#x2F;why-the-maximum-array-size-of-arraylist-is-integer-max-value-8&quot;&gt;Why the maximum array size of ArrayList is Integer.MAX_VALUE - 8?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;有参构造的扩容原理&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上面分析了调用&lt;strong&gt;无参构造器&lt;&#x2F;strong&gt;创建集合后，它底层的扩容原理，其实只要理解了之后。那么关于&lt;strong&gt;有参构造&lt;&#x2F;strong&gt;的扩容，就很容易理解了。&lt;&#x2F;p&gt;
&lt;p&gt;下面是它的有参构造器源码，前面也提到过。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * Constructs an empty list with the specified initial capacity.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@param  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;initialCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;  the initial capacity of the list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;IllegalArgumentException if the specified initial capacity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *         is negative
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;public ArrayList(int initialCapacity) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    if (initialCapacity &amp;gt; 0) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        this.elementData = new Object[initialCapacity];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    } else if (initialCapacity == 0) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        this.elementData = EMPTY_ELEMENTDATA;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    } else {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;        throw new IllegalArgumentException(&amp;quot;Illegal Capacity: &amp;quot;+initialCapacity);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码很容易理解，我们在调用该构造器进行初始化时传入一个初始大小&lt;code&gt;initialCapacity&lt;&#x2F;code&gt;作为数组的&lt;strong&gt;初始容量&lt;&#x2F;strong&gt;。如果该容量&lt;strong&gt;大于0，&lt;strong&gt;此时&lt;code&gt;elementData&lt;&#x2F;code&gt;数组会直接&lt;&#x2F;strong&gt;用该值作为数组的长度创建一个新的&lt;code&gt;Object&lt;&#x2F;code&gt;数组，以完成初始化&lt;&#x2F;strong&gt;。否则如果传入的初始值为&lt;code&gt;0&lt;&#x2F;code&gt;，会对&lt;code&gt;elementData&lt;&#x2F;code&gt;进行一个常量赋值操作，将数组初始化为&lt;code&gt;EMPTY_ELEMENTDATA&lt;&#x2F;code&gt;大小的数组，该常量定义如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;EMPTY_ELEMENTDATA &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= {}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是创建一个空数组。如果不在以上两种情况之外的，直接抛一个&lt;strong&gt;IllegalArgumentException&lt;&#x2F;strong&gt;异常结束。但是一般情况下，既然我们决定调用了该构造器，一般不会直接甩个&lt;code&gt;0&lt;&#x2F;code&gt;进去，这样做的意义不大。&lt;&#x2F;p&gt;
&lt;p&gt;在初始化完成后，进入添加方法，方法会先对现有的数组容量进行检查，如果发现所&lt;strong&gt;需最小容量大于当前初始化传入的容量&lt;&#x2F;strong&gt;，则会先进入&lt;code&gt;grow()&lt;&#x2F;code&gt;方法完成扩容，这里扩容不会进入第一个&lt;code&gt;if&lt;&#x2F;code&gt;判断，因为初始化传入的&lt;code&gt;elementData&lt;&#x2F;code&gt;&lt;strong&gt;必然是大于0的&lt;&#x2F;strong&gt;，程序会直接执行源码中的&lt;strong&gt;int newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1);&lt;strong&gt;这行逻辑，&lt;strong&gt;直接采取1.5倍扩容的机制&lt;&#x2F;strong&gt;对数组进行扩容后，将扩容后的整个数组空间直接复制一份，该操作会在原有元素的基础上追加扩容部分的空间，&lt;strong&gt;该部分的值默认使用null来填充&lt;&#x2F;strong&gt;，这些和前面分析&lt;&#x2F;strong&gt;无参构造扩容&lt;&#x2F;strong&gt;时候是一样的。此时再返回添加方法内部执行添加，添加成功之后之前扩容的&lt;code&gt;null&lt;&#x2F;code&gt;部分会被刚添加的元素取代，以此类推，直到下一次容量不够时，又再一次触发&lt;code&gt;1.5&lt;&#x2F;code&gt;b倍的扩容机制。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; elementData.length;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ (&lt;&#x2F;span&gt;&lt;span&gt;oldCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; minCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;     newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; minCapacity;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_ARRAY_SIZE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;     newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hugeCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; minCapacity is usually close to size, so this is a win:
&lt;&#x2F;span&gt;&lt;span&gt; elementData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;copyOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;elementData, newCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;实例演示&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过一个具体的例子，来解释帮助理解上面所说的扩容原理(无参构造)。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无参构造器&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;假设我们调用 了&lt;code&gt;ArrayList()&lt;&#x2F;code&gt;对集合&lt;code&gt;list&lt;&#x2F;code&gt;进行了初始化并尝试向其中添加元素，下面模拟这个大致过程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;初始化完成，创建一个空的对象数组&lt;code&gt;elementData[] = {}&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;进入&lt;code&gt;add()&lt;&#x2F;code&gt;方法，根据当前添加元素所需空间对已有空间进行判断，显然我们添加第一个元素时，&lt;code&gt;minCapacity=1,&lt;&#x2F;code&gt;而&lt;code&gt;elementData=0。&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;此时不忙着执行添加，而是调用&lt;code&gt;ensureCapacityInternal()&lt;&#x2F;code&gt;方法：
&lt;ol&gt;
&lt;li&gt;该方法发现，初始化的&lt;code&gt;elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;code&gt;，则执行一个&lt;code&gt;Math.max()&lt;&#x2F;code&gt;方法，该方法直接将&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值改为&lt;code&gt;10&lt;&#x2F;code&gt;。此时我们的&lt;code&gt;minCapacity=10&lt;&#x2F;code&gt;,而&lt;code&gt;elementData&lt;&#x2F;code&gt;还是&lt;code&gt;0&lt;&#x2F;code&gt;；&lt;&#x2F;li&gt;
&lt;li&gt;进入**&lt;code&gt;ensureExplicitCapacity()&lt;&#x2F;code&gt;**方法，满足判断条件发现，&lt;strong&gt;所需最小容量&amp;gt;当前容量&lt;&#x2F;strong&gt;，需要扩容，触发&lt;code&gt;grow()&lt;&#x2F;code&gt;方法。
&lt;ol&gt;
&lt;li&gt;检查并记录&lt;code&gt;elementData&lt;&#x2F;code&gt;的长度，发现此时该值为&lt;code&gt;0&lt;&#x2F;code&gt;，&lt;strong&gt;由于0的1.5倍还是0，此时扩容算法无意义不执行。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;进入第一个&lt;code&gt;if&lt;&#x2F;code&gt;判断，发现条件满足，直接将&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值赋给一个新的变量&lt;code&gt;newCapacity=10&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;执行数组的&lt;code&gt;copyOf()&lt;&#x2F;code&gt;方法，将会开辟一个容量为&lt;code&gt;10&lt;&#x2F;code&gt;的数组。&lt;&#x2F;li&gt;
&lt;li&gt;程序跳回&lt;code&gt;add()&lt;&#x2F;code&gt;方法，执行元素的添加。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;add()&lt;&#x2F;code&gt;方法执行结束。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;也就是说，如果我们调用无参构造器初始化集合，首次扩容并不会按照&lt;code&gt;1.5&lt;&#x2F;code&gt;倍的机制来，而是直接给你开一个大小为&lt;code&gt;10&lt;&#x2F;code&gt;的数组，只有当这&lt;code&gt;10&lt;&#x2F;code&gt;个空间全部用完之后，之后的每一次扩容，就都会采用&lt;code&gt;1.5&lt;&#x2F;code&gt;倍的机制进行扩容，因此首次调用的方法栈是比较绕的，但是从第二次开始，或者使用有参构造器初始化的时候就会少一些判断，空间不够，直接开始&lt;code&gt;1.5&lt;&#x2F;code&gt;倍扩容机制走起。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h5 id=&quot;-4&quot;&gt;1.5倍扩容怎么算？&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;blockquote&gt;
&lt;p&gt;假设当前容量值为&lt;code&gt;8&lt;&#x2F;code&gt;，下一次扩容的值就是&lt;code&gt;12&lt;&#x2F;code&gt;，算法过程很简单：&lt;&#x2F;p&gt;
&lt;p&gt;12 = 8+8&#x2F;2&lt;&#x2F;p&gt;
&lt;p&gt;= 8+4&lt;&#x2F;p&gt;
&lt;p&gt;=12&lt;&#x2F;p&gt;
&lt;p&gt;只不过，在源代码中，算法使用右移&lt;code&gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt;代替除法，要知道，&lt;strong&gt;位运算的速度是远快于四则运算的&lt;&#x2F;strong&gt;。由此，如果需要再次扩容的话，&lt;code&gt;12&lt;&#x2F;code&gt;的容量会扩容为&lt;code&gt;12+6 = 18&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;vector&quot;&gt;&lt;code&gt;Vector&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#vector&quot; aria-label=&quot;Anchor link for: vector&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;-5&quot;&gt;基本结构&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;code&gt;Vector&lt;&#x2F;code&gt;类的定义，它实现自&lt;code&gt;List&lt;&#x2F;code&gt;接口。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;AbstractList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RandomAccess&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Cloneable&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Serializable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它的底层实现也是基于对象数组，它由&lt;code&gt;protected&lt;&#x2F;code&gt;修饰符修饰：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; elementData;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Vector&lt;&#x2F;code&gt;是线程安全的，它的操作方法都有&lt;code&gt;synchronized&lt;&#x2F;code&gt;修饰，该关键字可以实现线程同步和互斥，所以他是线程安全的。比如其源码中的&lt;code&gt;indexOf()&lt;&#x2F;code&gt;方法，因此，一般在开发中，如果有线程安全的需要，可以考虑使用&lt;code&gt;Vector&lt;&#x2F;code&gt;。当然，这也并非是必须的，关于线程安全的集合或者说实现，还有专门的类去管理，&lt;code&gt;Vector&lt;&#x2F;code&gt;在&lt;code&gt;JDK1.0&lt;&#x2F;code&gt;版本中就有的，算是一个老前辈了，尽管它线程安全，但也不一定就是最佳的选择。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public synchronized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;indexOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; o, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; index ; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; elementCount ; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;elementData[i]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; index ; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; elementCount ; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;o.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;elementData[i]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;-6&quot;&gt;源码分析&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;h6 id=&quot;-7&quot;&gt;&lt;strong&gt;扩容机制&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;&lt;strong&gt;默认10满后，按照2倍扩容。如果指定大小，则每次按2倍扩容。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;创建一个无参的vector之后，它会默认直接给你一个大小为10的空间。直截了当。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接着执行添加操作，跳转到&lt;code&gt;add()&lt;&#x2F;code&gt;方法(这里就不再提自动装箱的操作了)，源码如下,咋一看是不是和前面分析的&lt;code&gt;ArrayList&lt;&#x2F;code&gt;的源码如出一辙？除了一个&lt;code&gt;modCount++&lt;&#x2F;code&gt;之外，还是会在添加元素之前先执行一个名为&lt;code&gt;ensureCapacityHelper&lt;&#x2F;code&gt;的方法，基于前面&lt;code&gt;ArrayList&lt;&#x2F;code&gt;源码的阅读理解，这里不用多想也能猜到，这个方法的作用，无非就是对目前的数组容量进行判断，看看是不是需要扩容。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public synchronized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    modCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ensureCapacityHelper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;elementCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    elementData[elementCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;进入&lt;code&gt;ensureCapacityHelper&lt;&#x2F;code&gt;的源码看看,可以看到这实现和&lt;code&gt;ArrayList&lt;&#x2F;code&gt;中的实现几乎一样，还是判断最小所需空间和当前数组的容量关系，显然，这里&lt;code&gt;elementData=10,&lt;&#x2F;code&gt;而&lt;code&gt;minCapacity=1&lt;&#x2F;code&gt;，&lt;strong&gt;不满足扩容的条件&lt;&#x2F;strong&gt;，因此这里不会进入&lt;code&gt;grow()&lt;&#x2F;code&gt;方法。直接返回&lt;code&gt;add()&lt;&#x2F;code&gt;执行元素的添加，一次添加执行结束。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ensureCapacityHelper&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; elementData.length &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下面我们假设，要添加第&lt;code&gt;11&lt;&#x2F;code&gt;个元素，此时原来的10个空间已经不够，自然会触发扩容机制，下面是该扩容方法的实现源码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 扩容方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; elementData.length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ ((&lt;&#x2F;span&gt;&lt;span&gt;capacityIncrement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt; capacityIncrement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; minCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; minCapacity;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_ARRAY_SIZE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        newCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hugeCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;minCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    elementData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;copyOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;elementData, newCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 关于capacityIncrement的定义：
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * The amount by which the capacity of the vector is automatically
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * incremented when its size becomes greater than its capacity.  If
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * the capacity increment is less than or equal to zero, the capacity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * of the vector is doubled each time it needs to grow.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@serial
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;    protected int capacityIncrement;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;根据源码了解到，它会先将&lt;code&gt;elementData&lt;&#x2F;code&gt;的长度放到一个名为&lt;code&gt;oldCapacity&lt;&#x2F;code&gt;的变量中并创建一个新的容量&lt;code&gt;newCapacity&lt;&#x2F;code&gt;,该变量的值就是扩容的核心原理，其中&lt;code&gt; int newCapacity = oldCapacity + ((capacityIncrement &amp;gt; 0) ? capacityIncrement : oldCapacity)&lt;&#x2F;code&gt;这段三元表达式会先判断&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;的值是否&lt;code&gt;&amp;gt;0&lt;&#x2F;code&gt;,如果成立，那么&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;的值保持不变，那么整个表达式就是&lt;code&gt;newCapacity = oldCapacity+capacityIncrement&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;否则将会是&lt;code&gt;newCapacity =oldCapacity+oldCapactity&lt;&#x2F;code&gt;,也就&lt;code&gt;newCapacity &lt;&#x2F;code&gt;会&lt;strong&gt;变为原来两倍的容量，&lt;strong&gt;最后依旧是采用&lt;code&gt;copyOf()&lt;&#x2F;code&gt;方法将扩容后的空间复制到原空间，完成扩容。关于其中两个&lt;code&gt;if&lt;&#x2F;code&gt;判断的逻辑和之前对&lt;code&gt;ArrayList&lt;&#x2F;code&gt;的分析是类似的，不再赘述。通过这个源码也发现了，这个&lt;code&gt;2&lt;&#x2F;code&gt;倍扩容的算法中，有一个名为&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;的&lt;&#x2F;strong&gt;容量增量&lt;&#x2F;strong&gt;，具体作用面会在下面有参构造器中进行分析。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;有参构造器源码分析&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;该构造器的源码如下，构造器是有两个参数的，其中一个便是上面提到的容量增量参数&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; initialCapacity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; capacityIncrement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;initialCapacity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;throw new IllegalArgumentException&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Illegal Capacity: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+
&lt;&#x2F;span&gt;&lt;span&gt;                                           initialCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.elementData &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;initialCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.capacityIncrement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; capacityIncrement;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;方法体首先会先调用父类的无参构造。如果我们不指定&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;的值，它默认是&lt;code&gt;0&lt;&#x2F;code&gt;，也就是&lt;strong&gt;无增量&lt;&#x2F;strong&gt;，一般在调用无参构造器时就是属于这种情况，**在没有明确容量增量时，扩容会按照原容量的2两倍进行，**如果指定具体的值，我们在&lt;code&gt;grow()&lt;&#x2F;code&gt;方法中看到，&lt;code&gt;  int newCapacity = oldCapacity + ((capacityIncrement &amp;gt; 0) ? capacityIncrement : oldCapacity);&lt;&#x2F;code&gt;这个表达式将产生一个新的容量值，&lt;strong&gt;该值的大小由原来的容量+指定的容量增量决定&lt;&#x2F;strong&gt;。那么可能会开始疑惑， 既然说了是&lt;code&gt;2&lt;&#x2F;code&gt;倍扩容，那么加一个容量增量算怎么回事？&lt;&#x2F;p&gt;
&lt;p&gt;如果指定了该增量的值，不就改变了2倍扩容的机制了吗？其实不完全是，在&lt;code&gt;vector&lt;&#x2F;code&gt;源码中，其实存在三个构造器，上面这个便是可以指定扩容增量的构造器，如果你不需要指定第二个参数，那么还可以看到，它还有一个普通的带一个参数的构造，源码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; initialCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;initialCapacity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;该构造器尽管只需要一个参数，但它在创建之后会默认给&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;赋值为0，这也就是不管你是空参构造还是带参构造对&lt;code&gt;Vector&lt;&#x2F;code&gt;进行初始化，在扩容时都会用到&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;这样一个参数，这也是扩容算法中三元表达式的意义，&lt;strong&gt;你可以不写，但我必须得用&lt;&#x2F;strong&gt;，所以才会有默认的&lt;code&gt;0&lt;&#x2F;code&gt;,这是不冲突的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*无参构造*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt; vector &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*指定一个参数：默认为集合的初始大小*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt; vector2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*指定两个参数：依次时集合大小和扩容时的容量增量*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt; vector3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#linkedlist&quot; aria-label=&quot;Anchor link for: linkedlist&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;-8&quot;&gt;基本结构&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LinkedList&lt;&#x2F;code&gt;底层实现采用了&lt;strong&gt;双向链表&lt;&#x2F;strong&gt;和&lt;strong&gt;双端队列&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;可以添加任意元素且元素可以重复(因为实现自List接口)，同时包括&lt;code&gt;null&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;非线程安全的集合，没有实现同步。&lt;&#x2F;li&gt;
&lt;li&gt;在其中维护的两个属性&lt;code&gt;first&lt;&#x2F;code&gt;和&lt;code&gt;last&lt;&#x2F;code&gt;分别指向首尾节点，&lt;code&gt;prev&lt;&#x2F;code&gt;指向前驱节点，&lt;code&gt;next&lt;&#x2F;code&gt;指向后继节点。&lt;&#x2F;li&gt;
&lt;li&gt;因此&lt;code&gt;LinkedList&lt;&#x2F;code&gt;的元素&lt;strong&gt;删除和添加的操作效率相对较高&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;-9&quot;&gt;源码分析&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;[待更新……]&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-10&quot;&gt;如何选择&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;如何选择使用&lt;code&gt;ArrayList&lt;&#x2F;code&gt;和&lt;code&gt;LinkedList&lt;&#x2F;code&gt;?根据我们实际的使用场景或者需求&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果涉及改查操作比较多，建议&lt;code&gt;ArrayList&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;如果增删操作比较多，建议&lt;code&gt;LinkedList&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;一般来说，在程序中&lt;code&gt;80%~90%&lt;&#x2F;code&gt;都是查询操作，因此大部分情况下会选择使用&lt;code&gt;ArrayList&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;当然，选择哪一个并非一成不变，在实际的项目中，甚至可能出现&lt;code&gt;ArrayList&lt;&#x2F;code&gt;和&lt;code&gt;LinkedList&lt;&#x2F;code&gt;同时使用的情况，也是正常的，所以要求最好都会使用。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;set&quot;&gt;&lt;code&gt;Set&lt;&#x2F;code&gt;接口&lt;a class=&quot;zola-anchor&quot; href=&quot;#set&quot; aria-label=&quot;Anchor link for: set&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;下面主要讲解&lt;code&gt;Set&lt;&#x2F;code&gt;子接口下的主要实现类。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;常用方法和实现&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Set.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Set的基本介绍&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无序(元素的添加与取出的顺序不一致)，无索引。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意理解这里的无序的含义，并不是说，每一次取出的顺序都是随机的，而是指当执行了一次取出之后，今后的每一次相同的操作，它取出的元素顺序都与第一次相同，但&lt;strong&gt;这个顺序又和添加进去的顺序不保持一致&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不允许重复元素。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;还有一点，由于它是&lt;code&gt;Collection&lt;&#x2F;code&gt;的子接口，自然也支持其父接口中的特性，比如迭代对象，增强for等等。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;hashset&quot;&gt;&lt;code&gt;HashSet&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#hashset&quot; aria-label=&quot;Anchor link for: hashset&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;-11&quot;&gt;基本结构&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;HashSet&lt;&#x2F;code&gt;作为&lt;code&gt;Set&lt;&#x2F;code&gt;典型的实现类之一，拥有&lt;code&gt;Set&lt;&#x2F;code&gt;的全部属性，这里不再赘述。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-12&quot;&gt;源码解读&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;h6 id=&quot;-13&quot;&gt;初始化与基本原理&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;我们先看一下&lt;code&gt;HashSet&lt;&#x2F;code&gt;的基本用法，其实，&lt;code&gt;HashSet&lt;&#x2F;code&gt;在实现上，就是一个&lt;code&gt;HashMap&lt;&#x2F;code&gt;,这一点可以从它的构造器说起。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; hashSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以下是&lt;code&gt;HashSet&lt;&#x2F;code&gt;的无参构造器源码，可以看到，当我们创建一个&lt;code&gt;HashSet&lt;&#x2F;code&gt;对象时，它在底层直接&lt;code&gt;new&lt;&#x2F;code&gt;了一个&lt;code&gt;HashMap&lt;&#x2F;code&gt;，这又不得不说一下&lt;code&gt;HashMap&lt;&#x2F;code&gt;的底层，它是由&lt;strong&gt;数组+链表+红黑树&lt;&#x2F;strong&gt;构成，所以相对来说是比较复杂的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220323200228.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    map &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new HashMap&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;换句话说，要分析&lt;code&gt;HashSet&lt;&#x2F;code&gt;的源码，其实就是分析&lt;code&gt;HashMap&lt;&#x2F;code&gt;的原理。&lt;code&gt;HashSet&lt;&#x2F;code&gt;一个明显的特点就是不能添加重复的元素，但这里的&lt;strong&gt;重复&lt;&#x2F;strong&gt;也许不是你想象中的那么简单。&lt;&#x2F;p&gt;
&lt;p&gt;下面开始分析一下其中的添加元素的&lt;code&gt;add()&lt;&#x2F;code&gt;方法在底层是如何实现的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;添加一个元素时，会先得到一个&lt;code&gt;hash&lt;&#x2F;code&gt;值，根据该值转成一个索引值。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;找到存储数据表&lt;code&gt;table&lt;&#x2F;code&gt;，检查该索引是否已在&lt;code&gt;table&lt;&#x2F;code&gt;中存在有元素&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果没有，直接将该元素加入。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;如果有，会调用&lt;code&gt;equals&lt;&#x2F;code&gt;方法进行比较操作，如果比较结果为&lt;code&gt;true&lt;&#x2F;code&gt;,添加失败，否则，将会在末尾添加元素。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;在&lt;code&gt;Java8&lt;&#x2F;code&gt;中，如果一条链表的元素个数达到&lt;code&gt;TREEIFY_THRESHOLD&lt;&#x2F;code&gt;且&lt;code&gt;table&lt;&#x2F;code&gt;的大小&lt;code&gt;&amp;gt;=&lt;&#x2F;code&gt;MIN_TREEIFY_CAPACITY,就会触发树化机制，即会由单链表结构转换为一棵红黑树。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;为例更好的理解它的执行过程和原理，我们按照下面这几行代码来讲解:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt; hashSet &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new HashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;hashSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;hashSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C++&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;hashSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hashSet=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;hashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;代码逻辑很简单，就是向&lt;code&gt;HashSet&lt;&#x2F;code&gt;中添加三个元素，其中有&lt;strong&gt;两个元素是重复&lt;&#x2F;strong&gt;的，这是为了理解它底层是如何判断元素重复的。&lt;&#x2F;p&gt;
&lt;p&gt;执行代码，首先会进入&lt;code&gt;HashSet&lt;&#x2F;code&gt;的构造器，直接创建一个值为空的&lt;code&gt;HashMap&lt;&#x2F;code&gt;，这点在上面已经说过。进入&lt;code&gt;add()&lt;&#x2F;code&gt;方法，它的实现源码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;HashSet中add方法的源码实现
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;PRESENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;方法很简单，直接调用了&lt;code&gt;map&lt;&#x2F;code&gt;的&lt;code&gt;put()&lt;&#x2F;code&gt;方法,注意到，这个方法除了我们需要添加的元素&lt;code&gt;e&lt;&#x2F;code&gt;之外，它还有一个名为&lt;code&gt;PRESENT&lt;&#x2F;code&gt;的常量参数，关于这个参数的理解，源码中是这样介绍的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Dummy value to associate with an Object in the backing Map
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;PRESENT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;PRESENT&lt;&#x2F;code&gt;其实是一个&lt;code&gt;static final&lt;&#x2F;code&gt;修饰的对象，在上面的方法中作为&lt;code&gt;put(k,v)&lt;&#x2F;code&gt;中&lt;code&gt;value&lt;&#x2F;code&gt;的占位，并没有其他实际的作用。这里不必深究。不知道有没有注意到，&lt;code&gt;add&lt;&#x2F;code&gt;方法中将&lt;code&gt;map.put(e,PRESENT)==null&lt;&#x2F;code&gt;作为返回值，为什么这里会是&lt;code&gt;null&lt;&#x2F;code&gt;呢？这和&lt;code&gt;HashMap&lt;&#x2F;code&gt;底层实现有关系，我们先继续往下，后面自然就会明白了。下面进入&lt;code&gt;put&lt;&#x2F;code&gt;方法内部看看。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;HashSet中map.put(e,PERSENT)方法源码
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;putVal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;方法中有一个&lt;code&gt;putVal&lt;&#x2F;code&gt;的方法，可以看到其中的第一个参数&lt;code&gt;hash(key)&lt;&#x2F;code&gt;表示通过这个方法获取&lt;code&gt;key&lt;&#x2F;code&gt;的&lt;code&gt;hash&lt;&#x2F;code&gt;值。这里的&lt;code&gt;key&lt;&#x2F;code&gt;也就是我们传入的待添加的元素，进入该方法：果然，&lt;code&gt;hash&lt;&#x2F;code&gt;方法的作用就是计算&lt;code&gt;key&lt;&#x2F;code&gt;的&lt;code&gt;hash值&lt;&#x2F;code&gt;，算法都在这条三元表达式当中了，可以简单看一下。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;HashMap中的hash()方法实现
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; h;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hashCode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;^ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;核心算法&lt;code&gt;(key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16)&lt;&#x2F;code&gt;，意思就是如果传入的&lt;code&gt;key&lt;&#x2F;code&gt;为&lt;code&gt;null&lt;&#x2F;code&gt;,那么直接返回0，也就是不执行任何实际操作。&lt;strong&gt;否则会使用&lt;code&gt;hashCode()&lt;&#x2F;code&gt;方法获取&lt;code&gt;key&lt;&#x2F;code&gt;的哈希码和无符号右移16位之后的值进行一个异或操作&lt;&#x2F;strong&gt;，将该异或的结果返回作为&lt;code&gt;key&lt;&#x2F;code&gt;最终的&lt;code&gt;hash&lt;&#x2F;code&gt;值。这样作主要是为了保证&lt;strong&gt;高16位和低16未的特征，减少碰撞，减低&lt;code&gt;hash&lt;&#x2F;code&gt;冲突的几率&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;注意，&lt;code&gt;hash&lt;&#x2F;code&gt;和&lt;code&gt;hashCode&lt;&#x2F;code&gt;并不是一回事。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的&lt;code&gt;hash&lt;&#x2F;code&gt;仅仅是用来在&lt;code&gt;HashMap&lt;&#x2F;code&gt;中计算&lt;code&gt;key&lt;&#x2F;code&gt;对应的散列码。它的算法中用到了&lt;code&gt;hashCode()&lt;&#x2F;code&gt;这个方法，&lt;code&gt;hashCode&lt;&#x2F;code&gt;是在&lt;code&gt;Objct&lt;&#x2F;code&gt;中定义的，用来获取每个元素对应的散列值，&lt;strong&gt;底层使用的C语言作为实现&lt;&#x2F;strong&gt;,属于&lt;code&gt;native&lt;&#x2F;code&gt;方法。换句话说，使用&lt;code&gt;hashCode()&lt;&#x2F;code&gt;方法可以计算&lt;code&gt;Java&lt;&#x2F;code&gt;中每一个元素的一个哈希值。而&lt;code&gt;hash()&lt;&#x2F;code&gt;方法在这里的作就相对局限，使用的算法也相对简单很多，具体的关于&lt;code&gt;hash和hashCode()&lt;&#x2F;code&gt;的内容，可以自己研究，这里不作展开。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;理解了&lt;code&gt;hash&lt;&#x2F;code&gt;的计算方式之后，继续往后看，在获取到&lt;code&gt;key&lt;&#x2F;code&gt;的&lt;code&gt;hash&lt;&#x2F;code&gt;，方法会返回进入到&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法中，这是整个添加操作的底层实现的核心源码，也是一个难点。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;putVal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; hash, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; onlyIfAbsent,
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; evict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; tab; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab.length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;.length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab[i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; hash]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        tab[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; k;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) ==&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;            e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instanceof TreeNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;putTreeVal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, tab, hash, key, value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; binCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;binCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    p.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;binCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab, hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) ==&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; existing mapping for key
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; oldValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.value;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;onlyIfAbsent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; oldValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                e.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldValue;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;modCount;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; threshold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;evict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在方法体的开始，定义了几个局部变量，以备后面使用(废话)。继续看下面的代码，这是方法体的第一个if判断，主要的作用是判断并创建一个&lt;code&gt;table&lt;&#x2F;code&gt;，注意，这里的&lt;code&gt;table&lt;&#x2F;code&gt;是一个数组+链表形式的结构，也就是数组每一个索引出的元素都是一条单链表的形式。这一点前面有提到。具体的逻辑是，&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab.length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;     n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;.length;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先，对于&lt;code&gt;if&lt;&#x2F;code&gt;中的&lt;code&gt;(tab = table) == null &lt;&#x2F;code&gt;条件，程序先将&lt;code&gt;table&lt;&#x2F;code&gt;赋值给&lt;code&gt;tab&lt;&#x2F;code&gt;变量，判断集合中是否已经存在&lt;code&gt;table&lt;&#x2F;code&gt;数据，或者说该数组的长度是否为&lt;code&gt;0&lt;&#x2F;code&gt;。如果上述条件有一个成立，则表示&lt;strong&gt;这是第一次向集合中添加元素&lt;&#x2F;strong&gt;，&lt;code&gt;hashMap&lt;&#x2F;code&gt;会自动调用&lt;code&gt;resize()&lt;&#x2F;code&gt;方法对&lt;code&gt;table[]&lt;&#x2F;code&gt;进行首次扩容，以用来存放接下来的元素，所以，明白了这个判断的作用，也就不难推测，为什么这条&lt;code&gt;if&lt;&#x2F;code&gt;判断语句会放在方法的开始了，也可以推测，只要不是首次添加元素，就不再会进入该判断，直接走后面的逻辑。那么现在的关注点就该转移到这个&lt;code&gt;resize()&lt;&#x2F;code&gt;方法中，看一下它的源码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; oldTab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; table;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;oldTab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; oldTab.length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; threshold;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; newCap, newThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;oldCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;oldCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAXIMUM_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            threshold &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_VALUE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldTab;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;newCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; oldCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                 oldCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            newThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; oldThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; double threshold
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;oldThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; initial capacity was placed in threshold
&lt;&#x2F;span&gt;&lt;span&gt;        newCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; oldThr;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; zero initial threshold signifies using defaults
&lt;&#x2F;span&gt;&lt;span&gt;        newCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        newThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_LOAD_FACTOR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;newThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; ft &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;newCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; loadFactor;
&lt;&#x2F;span&gt;&lt;span&gt;        newThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;newCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; ft &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;ft &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAX_VALUE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    threshold &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; newThr;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;rawtypes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;unchecked&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; newTab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;newCap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; newTab;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;oldTab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; oldCap; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;j&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; oldTab[j]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                oldTab[j] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    newTab[e.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;newCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instanceof TreeNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, newTab, j, oldCap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; preserve order
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; loHead &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, loTail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; hiHead &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, hiTail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; next;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.next;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; oldCap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;loTail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                                loHead &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;                                loTail.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;                            loTail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hiTail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                                hiHead &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;                                hiTail.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;                            hiTail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;loTail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                        loTail.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        newTab[j] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; loHead;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hiTail &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                        hiTail.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        newTab[j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; oldCap] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; hiHead;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; newTab;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那就看下它的扩容原理吧。首先呢，如前面说所，它开始就创建了一个&lt;code&gt;table[]&lt;&#x2F;code&gt;。将该数组的引用赋给&lt;code&gt;oldTab&lt;&#x2F;code&gt;,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; oldTab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; table;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意这里这个数组首次定义并非在这个方法中，而是在&lt;code&gt;HashMap&lt;&#x2F;code&gt;源码中有做的一个定义，&lt;strong&gt;它也是不可被序列化的&lt;&#x2F;strong&gt;。接着会先判断该&lt;code&gt;table&lt;&#x2F;code&gt;是否是首次创建，如果是，直接初始化为0，否则就是&lt;code&gt;oldTab&lt;&#x2F;code&gt;的大小，为什么会这么说呢，因为这个&lt;code&gt;resize()&lt;&#x2F;code&gt;方法可不只是执行这一次，在&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法的后续的逻辑中还会用到，也就是会出现再次扩容的情况，那么存在一个&lt;code&gt;oldTab&lt;&#x2F;code&gt;的值也就不难理解了吧。&lt;&#x2F;p&gt;
&lt;p&gt;如果&lt;code&gt;oldCap&amp;gt;0&lt;&#x2F;code&gt;，进一步判断它是否&lt;code&gt;&amp;gt;=&lt;&#x2F;code&gt;最大容量&lt;code&gt;MAXNUM_CAPACITY&lt;&#x2F;code&gt;,关于&lt;code&gt;MAXNUM_CAPACITY&lt;&#x2F;code&gt;的定义如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;MAXIMUM_CAPACITY定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果该条件成立，会给&lt;code&gt;threshod&lt;&#x2F;code&gt;重新赋一个新的容量值，即&lt;code&gt;Integer&lt;&#x2F;code&gt;的上限，反之进入下一个判断&lt;code&gt; ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)&lt;&#x2F;code&gt;,将&lt;code&gt;oldCap&lt;&#x2F;code&gt;左移1位,也就是两倍的&lt;code&gt;oldCap&lt;&#x2F;code&gt;赋给一个新的变量&lt;code&gt;newCap&lt;&#x2F;code&gt;,如果该值小于&lt;code&gt;MAXNUM_CAPACITY&lt;&#x2F;code&gt;并且原来的容量&lt;code&gt;oldCap&lt;&#x2F;code&gt;大于等于初始默认容量值&lt;code&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;code&gt;的话，就将新的&lt;code&gt;newThr&lt;&#x2F;code&gt;扩为原来(&lt;code&gt;oldThr&lt;&#x2F;code&gt;)的两倍大小。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;DEFAULT_INITIAL_CAPACITY定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_INITIAL_CAPACITY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; aka 16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;1&amp;lt;&amp;lt;4等价于1X2^4=2x2x2x2=16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里先对上面源码中涉及到的几个变量简单说明一下&lt;&#x2F;strong&gt;，&lt;strong&gt;不然频繁的&lt;code&gt;=&lt;&#x2F;code&gt;赋值操作一波又一波，可能会给整懵圈。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;oldCap&lt;&#x2F;code&gt;:数组原先(准备扩容之前)的容量。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;oldThr&lt;&#x2F;code&gt;：其实就是&lt;code&gt;threshold&lt;&#x2F;code&gt;的一个暂存局部变量，用来暂存&lt;code&gt;threshold&lt;&#x2F;code&gt;的值。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;threshold&lt;&#x2F;code&gt;：这是一个定义在&lt;code&gt;HashMap&lt;&#x2F;code&gt;的的全局变量(&lt;strong&gt;可以这么说，实际上&lt;code&gt;Java&lt;&#x2F;code&gt;中没有全局变量这种概念&lt;&#x2F;strong&gt;),它用来存放&lt;code&gt;table[]&lt;&#x2F;code&gt;的一个容量值，或者说&lt;strong&gt;阈值&lt;&#x2F;strong&gt;。所以最终决定是否需要扩容取决于这个全局变量来判断。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;newCap&lt;&#x2F;code&gt;:同理于&lt;code&gt;oldCap&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;继续回到最外层&lt;code&gt;if&lt;&#x2F;code&gt;判断的&lt;code&gt;else if&lt;&#x2F;code&gt;逻辑中，这里先是对&lt;code&gt;newThr&lt;&#x2F;code&gt;是否大于0作了判断，如果&lt;code&gt;&amp;gt;0&lt;&#x2F;code&gt;成立，那么新的容量&lt;code&gt;newCap&lt;&#x2F;code&gt;的值沿用&lt;code&gt;oldThr&lt;&#x2F;code&gt;,否则将会执行下面这段代码,&lt;code&gt;newCap&lt;&#x2F;code&gt;的值默认设置为&lt;code&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;code&gt;也就是&lt;code&gt;16&lt;&#x2F;code&gt;,并且&lt;code&gt;newThr&lt;&#x2F;code&gt;的值更新为&lt;code&gt;(int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);&lt;&#x2F;code&gt;。这里参与&lt;code&gt;*&lt;&#x2F;code&gt;运算的除了初始默认容量&lt;code&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;code&gt;外，还有一个重要的常量参数&lt;code&gt;DEFAULT_LOAD_FACTOR&lt;&#x2F;code&gt;，我们称为&lt;strong&gt;负载因子&lt;&#x2F;strong&gt;，换句话说，这个因子的值决定了你每次扩容的具体大小。它是默认值为&lt;code&gt;0.75&lt;&#x2F;code&gt;,也就是说当我们数组占用量达到本身容量的75%时，就会触发首次扩容(&lt;code&gt;resize&lt;&#x2F;code&gt;)操作。当然，最后还进行了强制类型转换为&lt;code&gt;int&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;所以不难理解，如果我们是首次使用&lt;code&gt;HashMap&lt;&#x2F;code&gt;进行&lt;code&gt;put&lt;&#x2F;code&gt;操作，方法会直接进入这一步进行初始化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; zero initial threshold signifies using defaults
&lt;&#x2F;span&gt;&lt;span&gt;    newCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    newThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_LOAD_FACTOR &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;具体一点说，当阈值达到&lt;code&gt;16*0.75&lt;&#x2F;code&gt;时，也即是16大小的容量用掉了12个大小时就会触发首次&lt;code&gt;resize&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这个&lt;strong&gt;负载因子&lt;&#x2F;strong&gt;不是固定不变的，而且有一点需要说明的是，这个&lt;code&gt;resize()&lt;&#x2F;code&gt;方法中，&lt;strong&gt;负载因子是可以手动传入的&lt;&#x2F;strong&gt;，这一点在&lt;code&gt;HashMap&lt;&#x2F;code&gt;的另一个构造方法中有体现，当然，这个后面再说。这里主要讲的还是无参构造器的执行原理，你需要理解&lt;code&gt;resize()&lt;&#x2F;code&gt;方法的两个主要作用，第一个就是上面巴拉巴拉这一堆，&lt;strong&gt;主要是用来对数组进行初始化工作&lt;&#x2F;strong&gt;(当然，你也可以理解为首次扩容，这只是一种说法而已，一般我们会将首次扩容称为初始化，因为其实&lt;strong&gt;扩容的概念是建立在已有容量的基础上的&lt;&#x2F;strong&gt;)，而此后再调用&lt;code&gt;resize()&lt;&#x2F;code&gt;就执行的是扩容工作了，但它的扩容工作可没有初始化这么简单。&lt;&#x2F;p&gt;
&lt;p&gt;但为了能更清晰的理解，我们还是继续首次&lt;code&gt;put&lt;&#x2F;code&gt;操作的主线进行分析。接着上面说，初始化结束之后，会得到一个初始的阈值&lt;code&gt;newThr=16&lt;&#x2F;code&gt;,并将该阈值重新赋给全局&lt;code&gt;threshold&lt;&#x2F;code&gt;保存。计算出&lt;code&gt;table[]&lt;&#x2F;code&gt;的一个初始大小之后，利用该值直接创建一个大小为&lt;code&gt;newCap&lt;&#x2F;code&gt;的新的&lt;code&gt;newTab&lt;&#x2F;code&gt;给&lt;code&gt;table&lt;&#x2F;code&gt;返回，有了这个&lt;code&gt;table&lt;&#x2F;code&gt;，我们就可以在里面存放元素了，比如存放一个字符串&lt;code&gt;Java&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;threshold &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; newThr;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;rawtypes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;unchecked&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; newTab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;newCap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;table &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; newTab;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但光是初始化一个16大小的&lt;code&gt;table&lt;&#x2F;code&gt;是远远不够的。我们知道，既然是数组里面存放元素，是需要一个索引的，根据这个索引去找到一个对应的位置，再将该元素覆盖上去，完成元素的添加。&lt;&#x2F;p&gt;
&lt;p&gt;所以我们先回到上一个方法&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法：接着上面切入进来的&lt;code&gt;resize()&lt;&#x2F;code&gt;方法之后讲解。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab.length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;.length;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上面这两行代码，也就是我们上面刚刚讲完的初始化操作的部分。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;看一下，在对&lt;code&gt;table&lt;&#x2F;code&gt;进行了初始化，并计算得到&lt;code&gt;key&lt;&#x2F;code&gt;的&lt;code&gt;hash&lt;&#x2F;code&gt;之后，后续的代码逻辑分解：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab[i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; hash]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    tab[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里就是根据&lt;code&gt;hash&lt;&#x2F;code&gt;值计算一个索引&lt;code&gt;i&lt;&#x2F;code&gt;。方法是&lt;code&gt;(n-1) &amp;amp; hash&lt;&#x2F;code&gt;,在获得索引之后，检查该索引位置的值&lt;code&gt;tab[i]&lt;&#x2F;code&gt;赋给变量&lt;code&gt;p&lt;&#x2F;code&gt;并判断是否为&lt;code&gt;null&lt;&#x2F;code&gt;，如果为&lt;code&gt;null&lt;&#x2F;code&gt;表示没有被使用，后面一句&lt;code&gt;tab[i] = newNode(hash, key, value, null);&lt;&#x2F;code&gt;直接将元素&lt;code&gt;key&lt;&#x2F;code&gt;存进去,当然，存入的元素除了我们自己传入的数据之外，还有计算出来的&lt;code&gt;hash&lt;&#x2F;code&gt;和一个&lt;code&gt;value&lt;&#x2F;code&gt;，传入&lt;code&gt;hash&lt;&#x2F;code&gt;主要是为了&lt;strong&gt;下一次计算，用来确定下次传入的值是否为重复元素。&lt;strong&gt;至于其中还有一个值为&lt;code&gt;null&lt;&#x2F;code&gt;的值，表示&lt;&#x2F;strong&gt;链表的下一个结点指向&lt;&#x2F;strong&gt;，当然，这里是首次&lt;code&gt;put&lt;&#x2F;code&gt;，所以&lt;code&gt;next&lt;&#x2F;code&gt;是不存在的，也就是&lt;code&gt;null&lt;&#x2F;code&gt;。当上面这段代码执行完毕之后，元素就被成功添加到&lt;code&gt;table&lt;&#x2F;code&gt;中了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;C:&#x2F;Users&#x2F;22170&#x2F;AppData&#x2F;Roaming&#x2F;Typora&#x2F;typora-user-images&#x2F;image-20220325162444469.png&quot; alt=&quot;image-20220325162444469&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过&lt;code&gt;debug&lt;&#x2F;code&gt;可以看到,&lt;code&gt;key&lt;&#x2F;code&gt;计算出的&lt;code&gt;hash=2301537&lt;&#x2F;code&gt;.那么这个索引就可以根据&lt;code&gt;(16-1)&amp;amp;2301537&lt;&#x2F;code&gt;计算出来，它的值是为&lt;code&gt;1&lt;&#x2F;code&gt;的，也就是数组中第二个位置的索引。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;C:&#x2F;Users&#x2F;22170&#x2F;AppData&#x2F;Roaming&#x2F;Typora&#x2F;typora-user-images&#x2F;image-20220325162819682.png&quot; alt=&quot;image-20220325162819682&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;元素添加之后，程序逻辑会直接执行到下面的代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;modCount;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; threshold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;evict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中的&lt;code&gt;++modCount&lt;&#x2F;code&gt;我在&lt;code&gt;ArrayList&lt;&#x2F;code&gt;源码分析的文章中已经提过，他们的作用是一样的。判断&lt;code&gt;if (++size &amp;gt; threshold)&lt;&#x2F;code&gt;，如果添加元素之后的数组容量&lt;code&gt;&amp;gt;&lt;&#x2F;code&gt;目前的阈值&lt;code&gt;threshold&lt;&#x2F;code&gt;，会触发&lt;code&gt;resize()&lt;&#x2F;code&gt;。关于&lt;code&gt;afterNodeInsertion(evict);&lt;&#x2F;code&gt;方法，是&lt;code&gt;HashMap&lt;&#x2F;code&gt;留给它的子类去实现的一个方法，所以它是个空的方法。类似的方法还有：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; Callbacks to allow LinkedHashMap post-actions
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { }
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; evict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { }
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeRemoval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接着&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法最后返回一个&lt;code&gt;null&lt;&#x2F;code&gt;作为方法的结束。&lt;strong&gt;所以还记得前面留的一个问题吗&lt;&#x2F;strong&gt;？在&lt;code&gt;HashSet&lt;&#x2F;code&gt;源码中的&lt;code&gt;add()&lt;&#x2F;code&gt;方法的方法体里面，它的返回值是判断是否为&lt;code&gt;null&lt;&#x2F;code&gt;,再看一下吧还是。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;PRESENT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;表示执行&lt;code&gt;HashSet&lt;&#x2F;code&gt;中的&lt;code&gt;add()&lt;&#x2F;code&gt;方法添加一个元素，它底层实际上调用了&lt;code&gt;HashMap&lt;&#x2F;code&gt;中的&lt;code&gt;put()&lt;&#x2F;code&gt;方法去实现，能否添加成功的依据就是该&lt;code&gt;put()&lt;&#x2F;code&gt;方法是否返回&lt;code&gt;null&lt;&#x2F;code&gt;,如果是，&lt;code&gt;HashSet&lt;&#x2F;code&gt;的&lt;code&gt;add()&lt;&#x2F;code&gt;方法就返回一个&lt;code&gt;true&lt;&#x2F;code&gt;,最终表示着我们利用&lt;code&gt;HashSet&lt;&#x2F;code&gt;成功的添加了一个元素。否则，添加失败！！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h6 id=&quot;-14&quot;&gt;去重原理&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;blockquote&gt;
&lt;p&gt;在理解了&lt;code&gt;HashMap&lt;&#x2F;code&gt;底层&lt;code&gt;table[]&lt;&#x2F;code&gt;的初始化逻辑之后，当我们向其中&lt;code&gt;put()&lt;&#x2F;code&gt;第二个元素时，它的底层是如何判断元素是否重复的呢？下面就以这个问题为主线开始分析。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;由于同样是添加的操作，前面的的几个步骤就不再赘述，比如底层调用&lt;code&gt;map.put()&lt;&#x2F;code&gt;，然后是&lt;code&gt;hash&lt;&#x2F;code&gt;的计算。直接进入&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法开始看。这里再贴一遍它的源码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;putVal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; hash, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; onlyIfAbsent,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; evict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; tab; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab.length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;.length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab[i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; hash]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        tab[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; k;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) ==&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;            e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instanceof TreeNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;putTreeVal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, tab, hash, key, value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; binCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;binCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    p.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;binCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab, hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) ==&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; existing mapping for key
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; oldValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.value;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;onlyIfAbsent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; oldValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                e.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldValue;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;modCount;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; threshold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;evict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;鉴于前面我们在添加第一个元素&lt;code&gt;Java&lt;&#x2F;code&gt;的时候，已经完成了&lt;code&gt;table[]&lt;&#x2F;code&gt;的初始化工作，所以下面这段代码不会再执行;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; table&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab.length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;.length;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而是直接带着前面计算得来得&lt;code&gt;Hash&lt;&#x2F;code&gt;通过与之前同样算法计算出元素&lt;code&gt;C++&lt;&#x2F;code&gt;(假设这是我们第二个添加的元素)在数组中的索引，代码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab[i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; hash]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; tab[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意哈，这里的&lt;code&gt;n&lt;&#x2F;code&gt;在初始化的时候已经计算出来，还是等于16的，改变的是&lt;code&gt;hash&lt;&#x2F;code&gt;值，假设为&lt;code&gt;65762&lt;&#x2F;code&gt;。那么根据上述算法计算得到它的索引为&lt;code&gt;15&amp;amp;65762=2&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;好了，既然索引也有了，并且我们添加的这个元素和第一个元素&lt;code&gt;Java&lt;&#x2F;code&gt;明显是不相等的，所以不会进入到&lt;code&gt;else if&lt;&#x2F;code&gt;判断中，因为&lt;code&gt;if&lt;&#x2F;code&gt;已经成立，后面的逻辑就是将该元素值直接添加到数组中索引为&lt;code&gt;2&lt;&#x2F;code&gt;的位置，当然，元素也是一个&lt;code&gt;Node&amp;lt;k,v&amp;gt;&lt;&#x2F;code&gt;类型。注意，这里存入参数中的最后一个值依旧还是&lt;code&gt;null&lt;&#x2F;code&gt;，因为前后两个元素并没有存放在同一条链表上，自然不会出现在尾部挂载的情况。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;下面将会进行第三个元素的添加，假设我们添加的元素是&lt;code&gt;Java&lt;&#x2F;code&gt;,是的，和&lt;strong&gt;首次添加的元素是相同的&lt;&#x2F;strong&gt;，看一下底层将会如何处理。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同样我们直接跳到&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法中。程序首先会进入到第二个&lt;code&gt;if&lt;&#x2F;code&gt;判断里，开始计算索引并作判断，也就是下面这段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab[i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; hash]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    tab[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意了，由于首次计算得出&lt;code&gt;Java&lt;&#x2F;code&gt;对应的索引为&lt;code&gt;2&lt;&#x2F;code&gt;,那么这次的结果也是相同的值，所以&lt;code&gt;if&lt;&#x2F;code&gt;中的条件显然不可能成立，因为索引为&lt;code&gt;2&lt;&#x2F;code&gt;的位置已经被占用，自然不会为&lt;code&gt;null&lt;&#x2F;code&gt;。所以程序将会进入下面的逻辑中：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; k;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) ==&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;        e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instanceof TreeNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;putTreeVal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, tab, hash, key, value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; binCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;binCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                p.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;binCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab, hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) ==&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; existing mapping for key
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; oldValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.value;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;onlyIfAbsent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; oldValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            e.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldValue;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;又是一堆&lt;code&gt;if else if&lt;&#x2F;code&gt;套娃操作。按照它的顺序，我们先分析第一个&lt;code&gt;if&lt;&#x2F;code&gt;的逻辑：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) ==&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;    e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;鉴于&lt;code&gt;()&lt;&#x2F;code&gt;中涉及到了三处逻辑运算，方便理解，我们将它逐层进行拆分讲解。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) ==&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先看&lt;code&gt;||&lt;&#x2F;code&gt;的左边&lt;code&gt;(k=p.key)==key&lt;&#x2F;code&gt;:意思是先将&lt;code&gt;p&lt;&#x2F;code&gt;中的&lt;code&gt;key&lt;&#x2F;code&gt;值赋给变量&lt;code&gt;k&lt;&#x2F;code&gt;,再与&lt;code&gt;key&lt;&#x2F;code&gt;进行一个比较，判断是否为同一个&lt;code&gt;key&lt;&#x2F;code&gt;值(对象)，注意了，这里的两个&lt;code&gt;key&lt;&#x2F;code&gt;的意思，前一个&lt;code&gt;key&lt;&#x2F;code&gt;(也就是&lt;code&gt;k&lt;&#x2F;code&gt;)**代表的是数组之前已经存在数组中的元素，**而后一个&lt;code&gt;key&lt;&#x2F;code&gt;&lt;strong&gt;就是当前传入的元素&lt;&#x2F;strong&gt;，具体的也就是指我们第一次存入的&lt;code&gt;Java&lt;&#x2F;code&gt;和本次存入的&lt;code&gt;Java&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;再看&lt;code&gt;||&lt;&#x2F;code&gt;右边&lt;code&gt;(key != null &amp;amp;&amp;amp; key.equals(k)&lt;&#x2F;code&gt;,这是一个&lt;code&gt;&amp;amp;&amp;amp;&lt;&#x2F;code&gt;操作,需要操作符两边的条件同时成立，整个条件才会成立。首先判断存入的&lt;code&gt;key&lt;&#x2F;code&gt;是否为&lt;code&gt;null&lt;&#x2F;code&gt;，再判断&lt;code&gt;key&lt;&#x2F;code&gt;和&lt;code&gt;k&lt;&#x2F;code&gt;是否为相同（注意这里用了&lt;code&gt;equals()&lt;&#x2F;code&gt;方法,该方法可被重写），判断是否为相同的内容。回到外层的&lt;code&gt;p.hash==hash&lt;&#x2F;code&gt;这个判断，就是将已有索引处对应的元素(元素是存在&lt;code&gt;Node&lt;&#x2F;code&gt;上的)的&lt;code&gt;hash&lt;&#x2F;code&gt;值取出与当前元素的&lt;code&gt;Hash&lt;&#x2F;code&gt;进行比较。&lt;&#x2F;p&gt;
&lt;p&gt;所以归纳起来也就是当二者&lt;code&gt;hash&lt;&#x2F;code&gt;相同并且&lt;code&gt;key&lt;&#x2F;code&gt;也相同(同一个对象)的情况下，执行&lt;code&gt;e=p&lt;&#x2F;code&gt;赋值操作，将原位置的值进行覆盖。&lt;&#x2F;p&gt;
&lt;p&gt;如果上面的条件不成立，会判断&lt;code&gt;p&lt;&#x2F;code&gt;是否是红黑树，如果是，就调用对应的添加方法&lt;code&gt;putTreeVal()&lt;&#x2F;code&gt;进行添加，也就是下面的代码。这里的 &lt;code&gt;instanceof&lt;&#x2F;code&gt;关键字用来判断一个对象是否为一个类的实例。另外，&lt;code&gt;putTreeVal()&lt;&#x2F;code&gt;方法内部涉及到大量红黑树的代码，相对复杂很多，如果跳进去的话，估计一时半会出不来，所以这里暂时不作探究，会另外分开来学习，还是围绕着主线继续分析。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;instanceof TreeNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;putTreeVal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, tab, hash, key, value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;否则，进入&lt;code&gt;else&lt;&#x2F;code&gt;逻辑中：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; binCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; ; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;binCount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p.next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            p.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;binCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab, hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;k &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) ==&lt;&#x2F;span&gt;&lt;span&gt; key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;k&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;开局一个&lt;code&gt;for&lt;&#x2F;code&gt;，目的明确，&lt;strong&gt;既然上面两种情况都不成立，那么说明该元素可能会在某一条链表节点上出现&lt;&#x2F;strong&gt;，比如下面这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Java-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;C++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Javascript-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Java
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以我们需要以遍历的方式去检查链表上的每一个节点，循环内部，通过&lt;code&gt;p&lt;&#x2F;code&gt;和&lt;code&gt;e&lt;&#x2F;code&gt;两个指针不停的循环比较。&lt;&#x2F;p&gt;
&lt;p&gt;如果过程中发现有一个和当前元素重复的元素，循环会立即结束，元素添加失败，否则就将当前元素直接挂到节点后面，完成添加。注意其中这段代码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;binCount &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab, hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;TREEIFY_THRESHOLD的定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是在进行&lt;strong&gt;添加之后对当前这条链表进行一个判断&lt;&#x2F;strong&gt;，如果长度&lt;code&gt;&amp;gt;=(TREEIFY_THRESHOLD=8)-1&lt;&#x2F;code&gt;的话，会调用&lt;code&gt;treeifBin()&lt;&#x2F;code&gt;方法对当前链表进行树化(转红黑树)，但是注意，光是这个条件满足还不足以开始树化，在这个方法的实现中，还添加了其他的添加用来判断，&lt;code&gt;treeifBin()&lt;&#x2F;code&gt;源码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; tab, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, index; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab.length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MIN_TREEIFY_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab[index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; hash]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; hd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, tl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replacementTreeNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                hd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                p.prev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tl;
&lt;&#x2F;span&gt;&lt;span&gt;                tl.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            tl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;tab[index] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; hd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            hd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;treeify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就是说，就算前面的条件(&lt;code&gt;&amp;gt;=8&lt;&#x2F;code&gt;)已经成立，这里还会进行一个判断，具体逻辑如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab.length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MIN_TREEIFY_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它还会判断当前这个&lt;code&gt;table&lt;&#x2F;code&gt;的大小是否&lt;code&gt;&amp;lt;MIN_TREEIFY_CAPACITY&lt;&#x2F;code&gt;也就是是否&lt;code&gt;&amp;lt;64&lt;&#x2F;code&gt;。如果这个条件成立，那么会先对数组进行一个&lt;code&gt;resize()&lt;&#x2F;code&gt;扩容操作，而不是直接转红黑树。最后如果添加失败，会返回一个之前元素的&lt;code&gt;value&lt;&#x2F;code&gt;值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; existing mapping for key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; oldValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.value;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span&gt;onlyIfAbsent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;||&lt;&#x2F;span&gt;&lt;span&gt; oldValue &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        e.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldValue;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6e2e32;color:#839496;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h6 id=&quot;-15&quot;&gt;扩容原理&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;前面对整个流程有了大致的了解之后，下面主要针对它的&lt;strong&gt;扩容原理&lt;&#x2F;strong&gt;进行一个简单的总结。&lt;&#x2F;p&gt;
&lt;p&gt;关于扩容的原理，先说结论：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HashSet&lt;&#x2F;code&gt;底层是&lt;code&gt;HashMap&lt;&#x2F;code&gt;，首次添加时，&lt;code&gt;table&lt;&#x2F;code&gt;数组的容量扩为16，初始临界值为12:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;threshold(阈值) = table.size()(table数组大小) * loadFactor(加载因子)&lt;&#x2F;p&gt;
&lt;p&gt;=16*0.75&lt;&#x2F;p&gt;
&lt;p&gt;=12&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果&lt;code&gt;table&lt;&#x2F;code&gt;数组使用的部分达到了阈值，就会触发扩容，具体的扩容为&lt;code&gt;16*2=32&lt;&#x2F;code&gt;,也就是&lt;strong&gt;会按照两倍的扩容&lt;&#x2F;strong&gt;方式进行，基于这个容量再次计算新的扩容阈值:&lt;code&gt;32*0.75=24&lt;&#x2F;code&gt;,也就是如果本次扩容后的容量(32)使用达到24之后，就会再次触发下一次的2倍扩容机制，以此类推。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;简单来说，以上就是&lt;code&gt;HashSet(本质HashMap)&lt;&#x2F;code&gt;的扩容原理，具体的，看下面源码分析。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;在resize()方法中有这样一段代码&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;newCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; oldCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;         oldCap &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    newThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; oldThr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; double threshold
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，新的容量是在原有容量的基础作了一个左移的操作，也就是和乘2是等效的，但用位运算效率会快很多。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是在pustVal()源码的部分代码：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;modCount;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; threshold&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;evict&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;resize();就是触发扩容时调用的扩容方法。具体的源码前面有讲过，不再赘述。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在Java8中，如果一条链表的元素个数达到&lt;code&gt; TREEIFY_THRESHOLD&lt;&#x2F;code&gt;且此时&lt;code&gt;table&lt;&#x2F;code&gt;的大小&amp;gt;=&lt;code&gt;MIN_TREEIFY_CAPACITY&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;时就会触发链表转红黑树的操作。提高性能。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面涉及到的两个常量在源代码中的定义如下：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MIN_TREEIFY_CAPACITY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;转红黑树的方法源码如下，这里只需要看看大致的执行逻辑就好，关于红黑树具体的实现，不是本章的主要内容。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; tab, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, index; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab.length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MIN_TREEIFY_CAPACITY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tab[index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; hash]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; hd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, tl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replacementTreeNode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;e, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                hd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                p.prev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; tl;
&lt;&#x2F;span&gt;&lt;span&gt;                tl.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            tl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; p;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; e.next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;tab[index] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; hd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            hd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;treeify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;tab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;注意如果只是满足链表长度达到8的条件时，它还是会采用&lt;code&gt;resize()&lt;&#x2F;code&gt;方法对数组扩容，而不是直接转红黑树。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;注意了！！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面提到的触发数组扩容的条件中，&lt;code&gt;size&lt;&#x2F;code&gt;的大小大于负载因子才会触发，这里的&lt;code&gt;size&lt;&#x2F;code&gt;指&lt;code&gt;的是数组和链表中元素的和&lt;&#x2F;code&gt;，也就是只要我们向其中添加一个元素，不论这个元素是存在数组第一个位置，还是存在链表中某个位置，&lt;code&gt;size都会自增1&lt;&#x2F;code&gt;，这是一个比较容易搞错的地方，&lt;strong&gt;不要认为size就是指数组的长度，这是错误的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;为什么不直接使用&lt;code&gt;hash&lt;&#x2F;code&gt;来计算索引，而是要进行取模运算？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果将哈希码映射到数组中的一个索引。可能会因为&lt;code&gt;hash&lt;&#x2F;code&gt;值过大而因此导致索引超出范围。所以一个最简单的方法是对哈希码和数组的长度进行模运算，如&lt;code&gt;hash(key) % n&lt;&#x2F;code&gt;。如此可以&lt;strong&gt;确保索引i总是在0和n之间。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;但是Java在实现的时候，用的并不是上面说的算法，而是将&lt;strong&gt;数组的长度n减去1之后再与&lt;code&gt;hash&lt;&#x2F;code&gt;作&lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;运算得到&lt;&#x2F;strong&gt;，实现代码如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; hash;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-16&quot;&gt;LinkedHashSet&lt;a class=&quot;zola-anchor&quot; href=&quot;#-16&quot; aria-label=&quot;Anchor link for: -16&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;-17&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-17&quot; aria-label=&quot;Anchor link for: -17&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;是&lt;code&gt;Set&lt;&#x2F;code&gt;接口的一个实现子类，也是&lt;code&gt;HashSet&lt;&#x2F;code&gt;的子类。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;的底层是一个&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;，底层维护了一个&lt;strong&gt;数组+双向链表&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;根据元素的&lt;code&gt;hashCode&lt;&#x2F;code&gt;值来决定元素的存储位置，同时&lt;strong&gt;使用链表来维护元素的次序&lt;&#x2F;strong&gt;，这就使得元素看起来是以插入的顺序保存的。&lt;&#x2F;li&gt;
&lt;li&gt;其次，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;也&lt;strong&gt;不允许添加重复元素&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;LinkedHashSet.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;中维护了一个&lt;code&gt;hash&lt;&#x2F;code&gt;表和双向链表，每一个节点有&lt;code&gt;pre&lt;&#x2F;code&gt;和&lt;code&gt;next&lt;&#x2F;code&gt;属性，这样可以形成双向链表。在添加元素时，先求&lt;code&gt;hash&lt;&#x2F;code&gt;值，再求索引，确定该元素在哈希表中的位置，然后将添加的元素加入到双向链表（如果已经存在，不添加(原理和&lt;code&gt;hashset类似&lt;&#x2F;code&gt;)）。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;-18&quot;&gt;源码解读&lt;a class=&quot;zola-anchor&quot; href=&quot;#-18&quot; aria-label=&quot;Anchor link for: -18&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;通过下面的示例来配合讲解：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; set &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new LinkedHashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;李&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1001&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果断点的方式，我们可以看到，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;的一个基本结构如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426085807.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过上图可以发现，其中存在一个&lt;code&gt;tail&lt;&#x2F;code&gt;和&lt;code&gt;head&lt;&#x2F;code&gt;的属性，这是典型的双向链表中才会用到的两个引用，或者指针(c&#x2F;c++)，&lt;strong&gt;代表双向链表的头尾指针&lt;&#x2F;strong&gt;。即进一步验证了前面提到的&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;的是一个&lt;code&gt;HashTable&lt;&#x2F;code&gt;和双向链表的组合。&lt;&#x2F;p&gt;
&lt;p&gt;其中的&lt;code&gt;table&lt;&#x2F;code&gt;类型其实是一个&lt;code&gt;HashMap$Node[]&lt;&#x2F;code&gt;类型，而每一个节点又是维护的&lt;code&gt;LinkedHashMap$Entry[]&lt;&#x2F;code&gt;类型。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426090925.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为什么数组为&lt;code&gt;HashMap$Node[]数组类型&lt;&#x2F;code&gt;而存放的元素却是&lt;code&gt;LinkedHashMap$Entry[]&lt;&#x2F;code&gt;类型？&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;说明&lt;code&gt;LinkedHashMap$Entry[]&lt;&#x2F;code&gt;肯定继&lt;strong&gt;承或者实现&lt;&#x2F;strong&gt;了&lt;code&gt;HashMap$Node[]&lt;&#x2F;code&gt;的，即通过&lt;strong&gt;数组多态&lt;&#x2F;strong&gt;的方式实现。注意这里的&lt;code&gt;$&lt;&#x2F;code&gt;符号标识$之后的类作为&lt;code&gt;$&lt;&#x2F;code&gt;之前的一个静态内部类，也即表示在&lt;code&gt;LinkedHashMap$Entry&lt;&#x2F;code&gt;中，&lt;code&gt;Entry&lt;&#x2F;code&gt;是&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;的一个&lt;strong&gt;静态内部类。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在&lt;code&gt;LinkdeHashMap&lt;&#x2F;code&gt;中我们可以找到对应的源码验证。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; before, after;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int hash&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hash, key, value, next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;从上述的源码中不仅说明&lt;code&gt;Entry&lt;&#x2F;code&gt;是&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;的内部类，也说明&lt;code&gt;LinkedHashMap$Entry[]&lt;&#x2F;code&gt;继承了&lt;code&gt;HashMap$Node[]&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;其中有两个&lt;code&gt;Entry&amp;lt;K,V&amp;gt;&lt;&#x2F;code&gt;类型的属性：&lt;code&gt;before&lt;&#x2F;code&gt;和&lt;code&gt;after&lt;&#x2F;code&gt;，可以理解为两个引用，主要用来完成各节点之间的连接。&lt;&#x2F;p&gt;
&lt;p&gt;同样，我们也可以通过查看&lt;code&gt;HashMap&lt;&#x2F;code&gt;的源码，验证上面的说法：&lt;code&gt;Node&lt;&#x2F;code&gt;同样作为其一个静态的内部类实现。并且该类还实现了其父接口&lt;code&gt;Map&lt;&#x2F;code&gt;中的&lt;code&gt;Entry&amp;lt;K,V&amp;gt;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;hash;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span&gt;key;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span&gt;value;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; next;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int hash&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; hash;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; key;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; next;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426092722.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在存储元素时，每一个元素中依然是使用的&lt;code&gt;key&lt;&#x2F;code&gt;来存储，而&lt;code&gt;value&lt;&#x2F;code&gt;只是一个&lt;code&gt;object&lt;&#x2F;code&gt;类型的占位符，这里没有实际的意义。因为在&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;中，我们&lt;strong&gt;不需要显式的去像Map中存一个&lt;code&gt;K,V&lt;&#x2F;code&gt;形式的值。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;当我们添加一个重复元素时，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;会直接调用父类&lt;code&gt;HashSet&lt;&#x2F;code&gt;中的比较方法，对重复元素进行一个判断并去重，其实这里的原理和之前讲的&lt;code&gt;HashSet&lt;&#x2F;code&gt;原理是一样的，当添加元素是，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;还是会直接调用父类&lt;code&gt;HashSet&lt;&#x2F;code&gt;中的&lt;code&gt;add()&lt;&#x2F;code&gt;方法(该方法本质还是调用&lt;code&gt;HashMap&lt;&#x2F;code&gt;中的&lt;code&gt;put()&lt;&#x2F;code&gt;方法)，接着是&lt;code&gt;putVal()&lt;&#x2F;code&gt;关于这两个方法的源码在前面讲&lt;code&gt;HashSet&lt;&#x2F;code&gt;源码的时候就已经讲过，这里不再赘述。所以说，经管是不同的结构实现，但在元素判重的原理上其实使用的还是同一个逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;说白了，LinkedHashSet本质上大部分还是HashMap&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LinkedHashset&lt;&#x2F;code&gt;底层维护了一个&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;结构，这一点可以类比于&lt;code&gt;HashSet&lt;&#x2F;code&gt;底层维护一个&lt;code&gt;HashMap&lt;&#x2F;code&gt;来进行对比记忆。而前面我们已经知道，&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;其实就是&lt;code&gt;HashMap&lt;&#x2F;code&gt;的一个子类。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;我们在理解了前面&lt;code&gt;HashSet&lt;&#x2F;code&gt;源码的基础上，只需要理解它底层的一个实现结构即可，也就是数组+双向链表的结构，回到一开始的哪个示例中，我们向set集合中添加了：&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“A”，120, User,123&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;之后，通过断点的方式可以看到他们之间的一个指向关系如下&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426100922.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图展示了内部元素节点中&lt;code&gt;after&lt;&#x2F;code&gt;和&lt;code&gt;before&lt;&#x2F;code&gt;的引用关系。仔细观察每一个&lt;code&gt;LinkedHashMap$Entry&lt;&#x2F;code&gt;后都会跟一个&lt;code&gt;@number&lt;&#x2F;code&gt;的标识，**这是用来标识该位置元素的一个唯一标记，或者你也可以理解为该元素在该结构中的一个地址。**因此，我们可以用该标识来唯一性的代表一元素值，注意其中每一各&lt;code&gt;after&lt;&#x2F;code&gt;或者&lt;code&gt;before&lt;&#x2F;code&gt;的指向关系，具体在后面我回画个图帮助理解。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;再跳出元素内部&lt;code&gt;Entry&lt;&#x2F;code&gt;，我们看到在&lt;code&gt;table&lt;&#x2F;code&gt;中有两个名为&lt;code&gt;head&lt;&#x2F;code&gt;和&lt;code&gt;tail&lt;&#x2F;code&gt;的引用属性。用来标识该双向链表的头尾节点。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426101903.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;将上面的逻辑以图片的形式展示出来大概就是下面这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;LinkedHashSet.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;简单捋一下：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;每向&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;中添加一个元素，首先会根据该元素计算一个&lt;code&gt;hash&lt;&#x2F;code&gt;值，用来确定它在上面图中&lt;code&gt;table&lt;&#x2F;code&gt;数组中的索引位置。&lt;&#x2F;li&gt;
&lt;li&gt;通过上面的步骤添加多个元素之后，元素内部是一个&lt;code&gt;Entry[]&lt;&#x2F;code&gt;类型的结构，其中每一个元素都有一个&lt;code&gt;after&lt;&#x2F;code&gt;和&lt;code&gt;before&lt;&#x2F;code&gt;属性，用&lt;strong&gt;来指向它的前一个元素和后一个元素的位置。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;再通过两个属性&lt;code&gt;head&lt;&#x2F;code&gt;和&lt;code&gt;tail&lt;&#x2F;code&gt;来指向整个链表的头和尾，从而构成一个&lt;strong&gt;完整的含有头尾指针(引用)的双向链表。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;将该链表具象化出来可以大致表示为图中右边部分。换句话说，这里的&lt;code&gt;after&lt;&#x2F;code&gt;和&lt;code&gt;before&lt;&#x2F;code&gt;其实就相当于平时常用的&lt;code&gt;pre&lt;&#x2F;code&gt;和&lt;code&gt;next&lt;&#x2F;code&gt;指针，即前驱后继指针，只不过命名不同而已，没什么高深莫测的。&lt;&#x2F;li&gt;
&lt;li&gt;注意，和前面&lt;code&gt;HashSet&lt;&#x2F;code&gt;的数组+单链表的结构类似，每一个索引位都可以是一条完整的双向链表，就像图中索引为7的位置一样，而不是每个索引为只能有一个链表节点，这取决于元素计算出来的&lt;code&gt;hash&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;正是由于双向链表的特性，使得我们添加的元素顺序是相对有序的，&lt;strong&gt;也就是添加的顺序和打印出来的顺序是一样的。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于扩容&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;如果使用无参数构造器初始化，那么它默认会开辟一个&lt;code&gt;16&lt;&#x2F;code&gt;大小的空间，负载因子依旧是&lt;code&gt;0.74&lt;&#x2F;code&gt;，首次扩容的阈值为&lt;code&gt;12&lt;&#x2F;code&gt;。这些数值是不是很眼熟？如果你看了前面&lt;code&gt;HashSet&lt;&#x2F;code&gt;的源码分析的话。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LinkedHashSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;.75&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;虽然讲的是&lt;code&gt;LinkdeHashSet&lt;&#x2F;code&gt;，但本质上分析的还是&lt;code&gt;HashSet&lt;&#x2F;code&gt;，再本质就是&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;，再继续套娃你会发现，&lt;strong&gt;就是讲的&lt;code&gt;HashMap&lt;&#x2F;code&gt;，可见这家伙才是主角。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;未完待续……&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>技巧就是效率，ChatGPT调教指北</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/ji-qiao-jiu-shi-xiao-lu-chatgpt-diao-jiao-zhi-bei/</link>
          <guid>https://ilikexff.cn/ji-qiao-jiu-shi-xiao-lu-chatgpt-diao-jiao-zhi-bei/</guid>
          <description xml:base="https://ilikexff.cn/ji-qiao-jiu-shi-xiao-lu-chatgpt-diao-jiao-zhi-bei/">&lt;h2 id=&quot;ji-qiao-jiu-shi-xiao-lu&quot;&gt;技巧就是效率&lt;a class=&quot;zola-anchor&quot; href=&quot;#ji-qiao-jiu-shi-xiao-lu&quot; aria-label=&quot;Anchor link for: ji-qiao-jiu-shi-xiao-lu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;很多人都知道&lt;code&gt;ChatGPT&lt;&#x2F;code&gt;很火很强，几乎无所不能，但跨越了重重门槛之才有机会使用的时候却有些迷茫，一时间不知道如何使用它。如果你就是把他当作一个普通的&lt;strong&gt;智能助手&lt;&#x2F;strong&gt;来看待，那与小爱同学有什么区别？甚至还差劲些，因为各大厂商的智能助手起码还知道实时的时间和天气情况，而&lt;code&gt;ChatGPT&lt;&#x2F;code&gt;却一无所知，那么，什么样的使用姿势才是正确且高效的呢？&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;chatgptneng-gan-shen-me&quot;&gt;ChatGPT能干什么？&lt;a class=&quot;zola-anchor&quot; href=&quot;#chatgptneng-gan-shen-me&quot; aria-label=&quot;Anchor link for: chatgptneng-gan-shen-me&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;包括但不限于:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;类别&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;学术论文&lt;&#x2F;td&gt;&lt;td&gt;它可以写各种类型的学术论文，包括科技论文、文学论文、社科论文等。它可以帮助你进行研究、分析、组织思路并编写出符合学术标准的论文。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;创意写作&lt;&#x2F;td&gt;&lt;td&gt;它可以写小说、故事、剧本、诗歌等创意性的文学作品，能够在描述情节和角色方面提供帮助。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;内容创作&lt;&#x2F;td&gt;&lt;td&gt;它可以写SEO文章、博客文章、社交媒体帖子、产品描述等各种类型的内容创作。它能够为你提供有趣、独特、易读的内容，帮助你吸引读者和提升品牌知名度。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;商业写作&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你编写商业计划书、市场调研报告、营销策略、商业简报、销售信件等。它可以用清晰、精炼的语言向你的潜在客户或投资者传达你的信息。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;学术编辑&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你进行学术论文、研究报告、学位论文等的编辑和校对工作，确保文本的正确性、一致性和完整性，并提供改进建议。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;翻译&lt;&#x2F;td&gt;&lt;td&gt;它可以进行英语和中文之间的翻译工作，包括但不限于学术文献、商业文档、网站内容、软件界面等。它可以保证翻译的准确性和专业性。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;数据分析&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你进行各种类型的数据分析，包括统计分析、文本分析、数据可视化等。它可以使用Python、R等工具来分析你的数据，并提供数据报告和可视化结果。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;技术文档&lt;&#x2F;td&gt;&lt;td&gt;它可以编写各种类型的技术文档，包括用户手册、技术规范、API文档、代码注释等。它可以使用清晰、准确、易懂的语言描述你的技术产品和流程。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;教育培训&lt;&#x2F;td&gt;&lt;td&gt;它可以编写各种类型的教育培训材料，包括课程大纲、课件、教学指南、教育评估等。它可以帮助你设计课程内容和教学方法，并为你制定适合你目标受众的培训计划。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;网站内容&lt;&#x2F;td&gt;&lt;td&gt;它可以编写网站的各种类型内容，包括首页、关于我们、服务介绍、博客文章等。它可以根据你的品牌和目标读者为你提供优质、富有吸引力的内容。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;研究咨询&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你进行研究、提供咨询意见和建议。它可以进行文献综述、研究设计、数据分析等工作，为你提供高质量、可靠的研究结果和建议。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;演讲稿&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你编写演讲稿、PPT等，包括商业演讲、学术演讲、庆典致辞等。它可以根据你的主题、目标听众和场合为你编写一份有说服力、生动有趣的演讲稿。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;个人陈述&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你编写个人陈述，包括申请大学、研究生、博士生、奖学金、工作等的个人陈述。它可以帮助你展现你的优势和价值观，并提供专业的写作建议。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;简历和求职信&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你编写简历和求职信，帮助你突出你的技能和经验，并为你提供吸引雇主和HR的技巧和建议。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;广告文案&lt;&#x2F;td&gt;&lt;td&gt;它可以编写各种类型的广告文案，包括产品广告、服务广告、品牌广告、活动宣传等。它可以为你编写具有吸引力、清晰明了的广告文案，让你的目标受众更容易接受你的产品或服务。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;SEO优化&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你优化你的网站、文章或其他内容的SEO。它可以使用关键词研究、内容优化等技术，帮助你提高排名、获得更多的流量和转换率。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;社交媒体&lt;&#x2F;td&gt;&lt;td&gt;它可以为你编写社交媒体内容，包括微博、脸书、Instagram等。它可以帮助你设计吸引人的标题、内容和图片，并为你提供有用的社交媒体营销策略。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;新闻稿&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你编写新闻稿，包括公司新闻、产品发布、重大事件等。它可以为你编写新闻稿、编辑和发布，以吸引媒体关注并提高品牌知名度。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;多语言翻译&lt;&#x2F;td&gt;&lt;td&gt;它可以提供各种语言之间的翻译服务，包括英文、中文、法文、德文、西班牙文、俄文等。它可以翻译各种类型的文件，包括技术文档、商务合同、宣传资料、学术论文等。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;电子商务&lt;&#x2F;td&gt;&lt;td&gt;它可以编写各种类型的电子商务内容，包括产品描述、产品说明书、电子商务博客文章等。它可以帮助你编写吸引人的产品描述，以及建立与客户的信任和忠诚度。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;旅游文案&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你编写旅游文案，包括旅游目的地介绍、旅游路线规划、旅游攻略、旅游博客等。它可以帮助你为你的读者提供有用的信息和建议，帮助他们计划自己的旅行。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;医疗文案&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你编写医疗文案，包括医疗产品说明、疾病预防、健康知识、医疗博客等。它可以帮助你使用专业的术语和语言，使你的文案更易于理解和接受。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;儿童读物&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你编写儿童读物，包括故事书、绘本、启蒙读物、课外阅读等。它可以使用有趣、生动的语言和图片，吸引孩子们的注意力，并帮助他们学习和成长。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;小说&lt;&#x2F;td&gt;&lt;td&gt;它可以帮助你编写小说，包括各种类型的小说，如言情、悬疑、恐怖、科幻等。它可以帮助你创造有趣、引人入胜的情节和角色，并为你提供专业的写作技巧和建议。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;diao-jiao-shi-zhan&quot;&gt;调教实战&lt;a class=&quot;zola-anchor&quot; href=&quot;#diao-jiao-shi-zhan&quot; aria-label=&quot;Anchor link for: diao-jiao-shi-zhan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-xie-yi-ben-yong-you-chu-ren-yi-liao-jie-ju-de-tui-li-xiao-shuo&quot;&gt;1.写一本拥有出人意料结局的推理小说。&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-xie-yi-ben-yong-you-chu-ren-yi-liao-jie-ju-de-tui-li-xiao-shuo&quot; aria-label=&quot;Anchor link for: 1-xie-yi-ben-yong-you-chu-ren-yi-liao-jie-ju-de-tui-li-xiao-shuo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“写一本拥有出人意料结局的推理小说。”&lt;&#x2F;p&gt;
&lt;p&gt;“写一个让读者参与其中的交互小说。”&lt;&#x2F;p&gt;
&lt;p&gt;“为孩子们写一本激励他们勇敢面对挑战的小说。”&lt;&#x2F;p&gt;
&lt;p&gt;“编写一个有关科技创新的未来世界的小说。”&lt;&#x2F;p&gt;
&lt;p&gt;“创造一个让读者感到沉浸其中的幻想故事。”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261222731.png&quot; alt=&quot;image-20230326122237610&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;linux&quot;&gt;2.充当&lt;code&gt;Linux&lt;&#x2F;code&gt;终端&lt;a class=&quot;zola-anchor&quot; href=&quot;#linux&quot; aria-label=&quot;Anchor link for: linux&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;完全可以使用&lt;code&gt;ChatGPT&lt;&#x2F;code&gt;就是一台行走的&lt;code&gt;Linux&lt;&#x2F;code&gt;,可以用来学习，查询&lt;code&gt;Linux&lt;&#x2F;code&gt;相关命令。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261222800.png&quot; alt=&quot;image-20230326122208316&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;&quot;&gt;3.充当英语翻译和改进者&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;妈妈再也不用担心我学不好英语了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261223841.png&quot; alt=&quot;image-20230326122323678&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-1&quot;&gt;4.充当英英词典(附中文解释)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261228282.png&quot; alt=&quot;image-20230326122847169&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-2&quot;&gt;5.充当前端智能思路助手&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可以替代某DN，某度。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;我想让你充当前端开发专家。我将提供一些关于Js、Node等前端代码问题的具体信息，而你的工作就是想出为我解决问题的策略。这可能包括建议代码、代码逻辑思路策略。我的第一个请求是“我需要能够动态监听某个元素节点距离当前电脑设备屏幕的左上角的X和Y轴，通过拖拽移动位置浏览器窗口和改变大小浏览器窗口。”&lt;&#x2F;p&gt;
&lt;p&gt;好的，要实现该功能，你可以使用JavaScript和DOM API来动态监听某个元素节点的位置，然后在拖动和改变浏览器窗口大小时更新其位置。这可以使用window对象的resize事件、以及元素的offsetLeft和offsetTop属性来完成。同时，你可以使用CSS来改变该元素节点的大小，并使用CSS动画实现平滑的移动效果。我会提供一个示例代码以供参考：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;javascript&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-javascript &quot;&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const element &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;getElementById&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;yourElementId&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let initialX&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;initialY&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentX&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentY&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mousedown&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;initialX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;clientX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;offsetLeft&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;initialY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;clientY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;offsetTop&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mousemove&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dragElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mouseup&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stopDragging&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dragElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;clientX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;initialX&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;clientY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;initialY&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; set the position of the element
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;}px&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;top &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;}px&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;stopDragging&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;removeEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mousemove&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dragElement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;document&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;removeEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;mouseup&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;stopDragging&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;window&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;addEventListener&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;event&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; update the position of the element
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;left &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;}px&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;top &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;currentY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;}px&lt;&#x2F;span&gt;&lt;span&gt;`;
&lt;&#x2F;span&gt;&lt;span&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;请将 “&lt;code&gt;yourElementId&lt;&#x2F;code&gt;” 替换为你所需元素节点的ID。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;6.担任面试官&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;免费的面试神奇。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261243437.png&quot; alt=&quot;image-20230326124313302&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261243095.png&quot; alt=&quot;image-20230326124343971&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261244654.png&quot; alt=&quot;image-20230326124407571&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-4&quot;&gt;7.文字冒险游戏&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在写这部分的时候差点在游戏里停不下来，哈哈哈。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261252807.png&quot; alt=&quot;image-20230326125222679&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261252182.png&quot; alt=&quot;image-20230326125244060&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261253949.png&quot; alt=&quot;image-20230326125306840&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-5&quot;&gt;8.做表格&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261257615.png&quot; alt=&quot;image-20230326125722494&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不妨把它做好的表格直接用起来，看看效果：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;&#x2F;th&gt;&lt;th&gt;生肖&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;鼠&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;牛&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;虎&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;兔&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;龙&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;蛇&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;马&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;羊&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;猴&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;鸡&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;狗&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;猪&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;非常nice！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-6&quot;&gt;9.充当旅游指南&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261300379.png&quot; alt=&quot;image-20230326130000273&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-7&quot;&gt;10.充当中国亲妈&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261302369.png&quot; alt=&quot;image-20230326130211267&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-8&quot;&gt;11.充当“电影&#x2F;书籍&#x2F;任何东西”中的“角色”&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这里只是一个示例，你可以把角色替换为自己喜欢的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261452120.png&quot; alt=&quot;image-20230326145210864&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-9&quot;&gt;12.作为广告商&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261453971.png&quot; alt=&quot;image-20230326145358781&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-10&quot;&gt;13.作为招聘人员&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261516646.png&quot; alt=&quot;image-20230326145706173&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-11&quot;&gt;14.扮疯子&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261517177.png&quot; alt=&quot;image-20230326151741035&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-12&quot;&gt;15.在学校担任讲师&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261520141.png&quot; alt=&quot;image-20230326152022997&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-13&quot;&gt;16.担任营养师&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261521052.png&quot; alt=&quot;image-20230326152144924&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-14&quot;&gt;17.简单的去重工具&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261524041.png&quot; alt=&quot;image-20230326152419912&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-15&quot;&gt;18.担任语言病理学家 (SLP)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261526437.png&quot; alt=&quot;image-20230326152610252&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-16&quot;&gt;19.扮演海绵宝宝的魔法海螺壳&lt;a class=&quot;zola-anchor&quot; href=&quot;#-16&quot; aria-label=&quot;Anchor link for: -16&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261529237.png&quot; alt=&quot;image-20230326152848114&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-17&quot;&gt;20.充当紧急响应专业人员&lt;a class=&quot;zola-anchor&quot; href=&quot;#-17&quot; aria-label=&quot;Anchor link for: -17&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261530046.png&quot; alt=&quot;image-20230326153027928&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-18&quot;&gt;21.充当正则表达式生成器&lt;a class=&quot;zola-anchor&quot; href=&quot;#-18&quot; aria-label=&quot;Anchor link for: -18&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261535558.png&quot; alt=&quot;image-20230326153404994&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-19&quot;&gt;22.充当全栈软件开发人员&lt;a class=&quot;zola-anchor&quot; href=&quot;#-19&quot; aria-label=&quot;Anchor link for: -19&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261535027.png&quot; alt=&quot;image-20230326153556941&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;好的，以下是一些关于使用 Golang 和 Angular 开发此应用程序的架构和代码的建议：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;架构设计&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;我们可以使用以下架构来实现该应用程序：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;数据库层：使用 MySQL 或 PostgreSQL 数据库存储用户和车辆信息。&lt;&#x2F;li&gt;
&lt;li&gt;服务层：使用 Golang 实现服务层，包括用户、车辆和身份验证服务。&lt;&#x2F;li&gt;
&lt;li&gt;Web 层：使用 Angular 实现 Web 层，包括用户注册、登录和车辆信息的 CRUD 操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;数据库设计&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;我们需要创建以下表来存储用户和车辆信息：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户表：存储用户的 ID、用户名、密码、角色等信息。&lt;&#x2F;li&gt;
&lt;li&gt;车辆表：存储车辆的 ID、车牌号、品牌、型号等信息。&lt;&#x2F;li&gt;
&lt;li&gt;用户车辆表：存储用户和车辆之间的关系，包括用户 ID 和车辆 ID。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;服务层实现&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;我们可以使用以下服务来实现该应用程序：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户服务：提供用户注册、登录和身份验证的功能。&lt;&#x2F;li&gt;
&lt;li&gt;车辆服务：提供车辆信息的 CRUD 操作功能。&lt;&#x2F;li&gt;
&lt;li&gt;身份验证服务：使用 JWT 实现身份验证功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以下是身份验证服务的实现代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;github.com&#x2F;dgrijalva&#x2F;jwt-go&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Claims &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;UserID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint64 &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;json:&amp;quot;user_id&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Role   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;string &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;json:&amp;quot;role&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;StandardClaims
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;GenerateToken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;userID &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;role &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;NewWithClaims&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SigningMethodHS256&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;38&lt;&#x2F;span&gt;&lt;span&gt;Claims&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;UserID&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;userID&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Role&lt;&#x2F;span&gt;&lt;span&gt;:   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;role&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;SignedString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseToken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokenString &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ParseWithClaims&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;tokenString&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;38&lt;&#x2F;span&gt;&lt;span&gt;Claims&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;func&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;jwt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;byte&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;secret&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;err
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Claims&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Claims&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ok &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Valid &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nil&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;errors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;New&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;invalid token&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;claims&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;Web 层实现&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;我们可以使用以下组件来实现 Web 层：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;用户注册组件：提供用户注册功能。&lt;&#x2F;li&gt;
&lt;li&gt;用户登录组件：提供用户登录功能。&lt;&#x2F;li&gt;
&lt;li&gt;车辆列表组件：显示用户拥有的车辆列表。&lt;&#x2F;li&gt;
&lt;li&gt;车辆详情组件：显示车辆的详细信息。&lt;&#x2F;li&gt;
&lt;li&gt;身份验证拦截器：使用 JWT 实现身份验证功能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;以下是身份验证拦截器的实现代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;typescript&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-typescript &quot;&gt;&lt;code class=&quot;language-typescript&quot; data-lang=&quot;typescript&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Injectable &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;@angular&#x2F;core&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Router &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;@angular&#x2F;router&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;HttpInterceptor&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;HttpRequest&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;HttpHandler &lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;@angular&#x2F;common&#x2F;http&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Injectable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;AuthInterceptor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;HttpInterceptor &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;constructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Router&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;intercept&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HttpRequest60any62&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HttpHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const token &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;localStorage&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;getItem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;const authReq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        headers: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Authorization&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Bearer ${&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;handle&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;authReq&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;router&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;navigate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;login&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以上是一个基本架构和代码实现，实现了用户角色注册和保存车辆信息的系统，并且有管理员、用户和公司角色，并使用 JWT 来确保安全。然而，实现这个 Web 应用程序还需要更多的细节和功能，如表单验证、错误处理、数据校验等，这些都需要更多的编程技能和经验。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-20&quot;&gt;23.担任数学历史老师&lt;a class=&quot;zola-anchor&quot; href=&quot;#-20&quot; aria-label=&quot;Anchor link for: -20&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261539809.png&quot; alt=&quot;image-20230326153917648&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-21&quot;&gt;24.扮演塔罗占卜师&lt;a class=&quot;zola-anchor&quot; href=&quot;#-21&quot; aria-label=&quot;Anchor link for: -21&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;202303261542546.png&quot; alt=&quot;image-20230326154219377&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;调教并没有结束，只是转移到了你的手里。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>免费激活全版本Typora，最新版为例</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/mian-fei-ji-huo-quan-ban-ben-typora-zui-xin-ban-wei-li/</link>
          <guid>https://ilikexff.cn/mian-fei-ji-huo-quan-ban-ben-typora-zui-xin-ban-wei-li/</guid>
          <description xml:base="https://ilikexff.cn/mian-fei-ji-huo-quan-ban-ben-typora-zui-xin-ban-wei-li/">&lt;h2 id=&quot;1-typorashi-ge-sha&quot;&gt;1.Typora是个啥?&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-typorashi-ge-sha&quot; aria-label=&quot;Anchor link for: 1-typorashi-ge-sha&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;​	可能很多人还没有听说过&lt;code&gt;Typora&lt;&#x2F;code&gt;这个软件，但相信不少人一定多少知道&lt;code&gt;Markdown&lt;&#x2F;code&gt;，这是一种方便易用且高效的文档格式，语法简单易学，此乃居家办公，出门加班必备之良品！&lt;&#x2F;p&gt;
&lt;p&gt;​	然本次的主角是&lt;code&gt;Typora&lt;&#x2F;code&gt;，所以更多关于&lt;code&gt;Markdown&lt;&#x2F;code&gt;的信息可以参考我往期的文章&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;mp.weixin.qq.com&#x2F;s&#x2F;j5VC_laebEu3o_5HEy_KyA&quot;&gt;效率神器Markdown&lt;&#x2F;a&gt;,里面包含了&lt;code&gt;Markdown&lt;&#x2F;code&gt;的相关介绍和常用的基础语法，并且在文章中也是推荐了&lt;code&gt;Typora&lt;&#x2F;code&gt;这款软件，建议配合使用，效果绝佳，效率翻倍。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104211323919.png&quot; alt=&quot;image-20230104211323919&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;code&gt;Typora&lt;&#x2F;code&gt;是一款跨平台的&lt;code&gt;Markdown&lt;&#x2F;code&gt;编辑器。它可以在不同的操作系统上使用，比如&lt;code&gt;Windows&lt;&#x2F;code&gt;、&lt;code&gt;macOS&lt;&#x2F;code&gt;和&lt;code&gt;Linux&lt;&#x2F;code&gt;。&lt;code&gt;Typora&lt;&#x2F;code&gt;的一大特点是它提供了一种所见即所得的编辑方式，可以让你在编写文本时直接看到最终的排版效果。它还提供了很多有用的功能，比如图片拖放、代码块高亮、实时预览和导出多种格式的文件等。&lt;&#x2F;p&gt;
&lt;p&gt;​	2021年11月，据 &lt;code&gt;Typora &lt;&#x2F;code&gt;官网，&lt;code&gt;Markdown &lt;&#x2F;code&gt;编辑器 &lt;code&gt;Typora &lt;&#x2F;code&gt;在长时间的免费测试之后，正式推出了&lt;code&gt;1.0&lt;&#x2F;code&gt;正式版，并开始收费。&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;code&gt;Typora &lt;&#x2F;code&gt;目前采用买断制，价格为 &lt;code&gt;14.99 美元&#x2F;89 元人民币&lt;&#x2F;code&gt;，支持 &lt;code&gt;macOS、Windows、Windows（ARM）、Linux&lt;&#x2F;code&gt; 系统，最多可在&lt;code&gt;3&lt;&#x2F;code&gt;台设备上使用， 还提供 &lt;code&gt;15&lt;&#x2F;code&gt; 天的免费试用。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面部分内容来自&lt;strong&gt;大智近妖&lt;&#x2F;strong&gt;的AI–&lt;code&gt;ChatGPT&lt;&#x2F;code&gt;。更多关于&lt;code&gt;ChatGPT&lt;&#x2F;code&gt;的使用可以参考我的另一篇文章&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.waer.ltd&#x2F;articles&#x2F;118&quot;&gt;最近很火的ChatGPT怎么玩？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104211743760.png&quot; alt=&quot;image-20230104211743760&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;2.为什么选择Typora?&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;简单易用、高效简洁&lt;&#x2F;li&gt;
&lt;li&gt;兼容性强，轻松跨平台&lt;&#x2F;li&gt;
&lt;li&gt;所见即所得、实时预览&lt;&#x2F;li&gt;
&lt;li&gt;软件轻量级、功能实用&lt;&#x2F;li&gt;
&lt;li&gt;对Markdown格式语法的支持完善&lt;&#x2F;li&gt;
&lt;li&gt;个人习惯(我大一入水无法自拔)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;3.Typora的激活方式&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-2&quot;&gt;3.1 激活说明&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;本次的免付费激活教程可以激活任意正版的Typora版本。所以具体需要激活哪一个版本号可以根据自己的需要来选择(Typora从版本&lt;code&gt;1.1&lt;&#x2F;code&gt;开始收费)，这里直接使用官方下载的最新版本(&lt;code&gt;V1.4&lt;&#x2F;code&gt;)进行教程演示。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-3&quot;&gt;3.2 选择激活版本&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，由于目前该方法仅仅支持windows平台，所以下载时请留意下载的版本类型。另外，有些机器会将激活文件当作危险程序识别，直接屏蔽即可，大可不必理会，还有就是如果激活之后使用一段时间发现提示未激活，可能是机器在更新或者安全软件扫毒的过程中把激活文件删除了，这种情况只需要重写走一遍下面的激活流程即可。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.typoraio.cn&#x2F;&quot;&gt;Typora官方下载地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-4&quot;&gt;3.3 安装Typora&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;安装方式和正常的软件安装一样，没什么需要注意的，不过个人建议不要把软件都装在C盘，如果你是内存暴发户那另说。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104204130644.png&quot; alt=&quot;image-20230104204130644&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装完成之后打开，如果没有激活的话，界面大概是下面这样子的，可能在&lt;strong&gt;试用期&lt;&#x2F;strong&gt;限上略有差异，&lt;strong&gt;无所谓，我会出手！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104204326194.png&quot; alt=&quot;image-20230104204326194&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;查看版本号，我们选择上图中的[不是现在]选项，就可以进入使用界面，选择【顶部的菜单】-&amp;gt;【帮助】菜单滑倒最后面就可以查看当前版本的版本号了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104204753782.png&quot; alt=&quot;image-20230104204753782&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到这里演示的确实是官方最新版的&lt;code&gt;v1.4.8&lt;&#x2F;code&gt;，中国人不骗中国人！&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-5&quot;&gt;3.4 激活步骤&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;首先把Typora关闭掉，如果打开了的话。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;复制下载解压之后的&lt;strong&gt;激活文件&lt;&#x2F;strong&gt;(&lt;strong&gt;文末有下载地址&lt;&#x2F;strong&gt;)。&lt;&#x2F;li&gt;
&lt;li&gt;打开&lt;code&gt;Typora&lt;&#x2F;code&gt;的安装位置，将方才复制的激活文件粘贴到此处&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104205140283.png&quot; alt=&quot;image-20230104205140283&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;此时回到桌面刷新一下，再次打开&lt;code&gt;Typora&lt;&#x2F;code&gt;，如果没有自动弹出下面的激活撒花界面，那么你可以通过【顶部菜单】-&amp;gt;【帮助】-&amp;gt;【我的许可证】去手动查看激活状态，撒个花庆祝一下。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104205353537.png&quot; alt=&quot;image-20230104205353537&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;至此，激活走完流程，如果你本来就熟悉&lt;code&gt;Typora&lt;&#x2F;code&gt;的使用，那么到这里就可以出门右拐了，大家各取所需，嫖到了就走吧，反正你也不会点个赞、分个享啥的,要你何用？🤓&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104210259555.png&quot; alt=&quot;image-20230104210259555&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;不然呢，还是建议你&lt;strong&gt;往下阅读。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-6&quot;&gt;4.Typora快速上手&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;抛开软件对Markdown的支持之外，这里主要简单说一下软件本身提供的一些功能。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-7&quot;&gt;4.1 强大的导入导出&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;支持包括&lt;code&gt;PDF&lt;&#x2F;code&gt;、&lt;code&gt;HTML&lt;&#x2F;code&gt;在内的10+种导出格式，日常需求轻松满足。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;【顶部菜单】-&amp;gt;【文件】-&amp;gt;【导入&#x2F;导出】&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104212536499.png&quot; alt=&quot;image-20230104212536499&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-8&quot;&gt;4.2 替换与搜索&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一个强大的文档编辑工具离不开搜索和替换功能，这是高频且很实用的设计。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;【顶部菜单】-&amp;gt;【编辑】-&amp;gt;【查找和替换】&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104212651063.png&quot; alt=&quot;image-20230104212651063&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-9&quot;&gt;4.3 语法指令可视化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这一点对于不熟悉&lt;code&gt;Markdown&lt;&#x2F;code&gt;语法或不习惯使用语法编辑的盆友很是友好，可以直接通过快捷键或者鼠标的方式选择文档所需的格式，比如各级标题、下划线、公式、图像、超链接、有序列表等等。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;【顶部菜单】-&amp;gt;【编辑】OR【格式】&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104213416312.png&quot; alt=&quot;image-20230104213416312&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-10&quot;&gt;4.4 丰富的视图支持&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这一点虽然没有和内容编辑直接挂钩，但在使用的体验上很是加分，该有的都用，懂得都懂！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;【顶部菜单】-&amp;gt;【视图】&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104213802543.png&quot; alt=&quot;image-20230104213802543&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-11&quot;&gt;4.5 丰富的主题支持&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这也是选择Typora的原因之一，Typora有自己的主题社区，里面有数十种(具体更多)主题，使用也是非常简单，将对应的主题文件直接下载到主题文件夹下即可使用(需要重启生效),比如我些这篇文章时候正在使用的&lt;code&gt;Drake Vue&lt;&#x2F;code&gt;主题，不仅如此，由于主题是以CSS样式的方式开发，如果你有一些前端的知识，还可以自定义自己的主题，实在是香喷喷。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;【顶部菜单】-&amp;gt;【主题】&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104214131013.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-12&quot;&gt;4.6 图片自动上传不是梦&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;说到&lt;code&gt;Typora&lt;&#x2F;code&gt;，可能很多人的一个痛点就是不能上传自己笔记中的图片到云上，每次都是本地路径存储，一旦本地文件更换位置或者删除，那图片就没办法再展示了，所以，&lt;code&gt;Typora&lt;&#x2F;code&gt;也是集成了自定义图床的方式对图片自动上传的支持。但使用起来略微需要一点门槛，说来话长，可以参考我的文章&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.waer.ltd&#x2F;articles&#x2F;107&quot;&gt;PicGo配置各种图床&lt;&#x2F;a&gt;,里面就包含了对&lt;code&gt;Typora&lt;&#x2F;code&gt;图片自动上传的详细操作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104220540344.png&quot; alt=&quot;image-20230104220540344&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;【顶部菜单】-&amp;gt;【文件】-&amp;gt;【偏好设置】-&amp;gt;【图像】&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20230104220838882.png&quot; alt=&quot;image-20230104220838882&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以上就是&lt;code&gt;Typora&lt;&#x2F;code&gt;软件本身的一些亮点及其基本使用。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-13&quot;&gt;5.后记:关于使用Typora的一些体验&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;说起来&lt;code&gt;Typora&lt;&#x2F;code&gt;，还是绕不开&lt;code&gt;Markdown&lt;&#x2F;code&gt;，由于专业的原因，我很早开始就接触了&lt;code&gt;Markdown&lt;&#x2F;code&gt;。抛开自身一些优势以及语法不说，市面上对该格式支持的软件也是越来越多，甚至是花枝招展。&lt;&#x2F;p&gt;
&lt;p&gt;前前后后用过了好几款同类型的软件,还记得名字的有以下几个:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;MWeb&lt;&#x2F;li&gt;
&lt;li&gt;Obsidian&lt;&#x2F;li&gt;
&lt;li&gt;思源笔记&lt;&#x2F;li&gt;
&lt;li&gt;Typora&lt;&#x2F;li&gt;
&lt;li&gt;Atom&lt;&#x2F;li&gt;
&lt;li&gt;SublimeText&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;还有一些比较小众或者是以插件化形式存在的就不一一列举了，使用一遍下来发现，兜兜转转还是回归到了&lt;code&gt;Typora&lt;&#x2F;code&gt;。可能吧&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;有的人真的会反反复复的喜欢上自己曾经喜欢过的东西,无特例，没来由！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;最后，激活文件我放百度云盘了，关注博客同名公众号之后回复【tpa激活】即可获取下载，当然了，如果有我QQ的可以直接Q我，怎么简单怎么来。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>readme</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/readme/</link>
          <guid>https://ilikexff.cn/readme/</guid>
          <description xml:base="https://ilikexff.cn/readme/">&lt;h1 id=&quot;shuo-ming-wen-dang&quot;&gt;说明文档&lt;a class=&quot;zola-anchor&quot; href=&quot;#shuo-ming-wen-dang&quot; aria-label=&quot;Anchor link for: shuo-ming-wen-dang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;mu-lu&quot;&gt;目录&lt;a class=&quot;zola-anchor&quot; href=&quot;#mu-lu&quot; aria-label=&quot;Anchor link for: mu-lu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ilikexff.cn&#x2F;readme&#x2F;#%E5%BF%AB%E6%8D%B7%E9%94%AE&quot;&gt;1. 快捷键&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ilikexff.cn&#x2F;readme&#x2F;#%E5%91%BD%E4%BB%A4&quot;&gt;2. 命令&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;快捷键&quot;&gt;快捷键&lt;a class=&quot;zola-anchor&quot; href=&quot;#快捷键&quot; aria-label=&quot;Anchor link for: 快捷键&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shift+h&#x2F;l&lt;&#x2F;code&gt; 在文件浏览器和文件查看器之间切换&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;j&#x2F;k&lt;&#x2F;code&gt; 滚动文件内容&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;j&#x2F;k&lt;&#x2F;code&gt; 在文件浏览器中导航文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;enter&lt;&#x2F;code&gt; 打开选中的文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;esc+command&lt;&#x2F;code&gt; 参见&lt;a href=&quot;https:&#x2F;&#x2F;ilikexff.cn&#x2F;readme&#x2F;#%E5%91%BD%E4%BB%A4&quot;&gt;命令&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;shift+t&#x2F;enter&lt;&#x2F;code&gt; 在新标签页打开文件&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tab&lt;&#x2F;code&gt; 切换到下一个标签页&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;shift+q&lt;&#x2F;code&gt; 关闭当前标签页&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;命令&quot;&gt;命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#命令&quot; aria-label=&quot;Anchor link for: 命令&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:help&lt;&#x2F;code&gt; 显示本帮助页面&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;:q&lt;&#x2F;code&gt; 退出网站&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;:set mouse=true|false&lt;&#x2F;code&gt; 切换鼠标显示（true=显示，false=隐藏）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>Redis必知必会</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/redis-bi-zhi-bi-hui/</link>
          <guid>https://ilikexff.cn/redis-bi-zhi-bi-hui/</guid>
          <description xml:base="https://ilikexff.cn/redis-bi-zhi-bi-hui/">&lt;h3 id=&quot;geng-xin-ri-zhi-tada&quot;&gt;更新日志🎉&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi-tada&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi-tada&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2022-10-06&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis持久化&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;RDB持久化&lt;&#x2F;li&gt;
&lt;li&gt;AOF持久化&lt;&#x2F;li&gt;
&lt;li&gt;调整目录结构&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-09-01&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;本次更新没有内容，就是调整一下目录结构。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-06-04 🎉&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增 &lt;code&gt;Redis&lt;&#x2F;code&gt;管理命令:trollface:&lt;&#x2F;li&gt;
&lt;li&gt;新增 &lt;code&gt;Redis&lt;&#x2F;code&gt;底层实现机制:trollface:&lt;&#x2F;li&gt;
&lt;li&gt;新增配套脑图:trollface:&lt;&#x2F;li&gt;
&lt;li&gt;修正已知错别字词和问题描述:trollface:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-08-03🎉&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正已知错别字词句:trollface:&lt;&#x2F;li&gt;
&lt;li&gt;调整文章部分内容的格式:trollface:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-8-19🎉&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增Redis高级数据结构和功能部分内容&lt;&#x2F;li&gt;
&lt;li&gt;Bitmap&lt;&#x2F;li&gt;
&lt;li&gt;HyperLogLog&lt;&#x2F;li&gt;
&lt;li&gt;GEO&lt;&#x2F;li&gt;
&lt;li&gt;事务、Lua脚本&lt;&#x2F;li&gt;
&lt;li&gt;发布订阅、Stream&lt;&#x2F;li&gt;
&lt;li&gt;Pipeline流水线&lt;&#x2F;li&gt;
&lt;li&gt;Redis模块&lt;&#x2F;li&gt;
&lt;li&gt;校对&#x2F;修复文章内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;redisjian-ji-ru-men&quot;&gt;Redis简洁入门&lt;a class=&quot;zola-anchor&quot; href=&quot;#redisjian-ji-ru-men&quot; aria-label=&quot;Anchor link for: redisjian-ji-ru-men&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;关于 &lt;code&gt;Redis&lt;&#x2F;code&gt;本身的一些语法、命令的使用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;jian-jie&quot;&gt;简介&lt;a class=&quot;zola-anchor&quot; href=&quot;#jian-jie&quot; aria-label=&quot;Anchor link for: jian-jie&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;是一款基于键值对的 &lt;code&gt;NoSQL&lt;&#x2F;code&gt;数据库，它的值支持多种数据结构，比如，字符串，哈希，列表，集合，有序集合(&lt;code&gt;sorted sets&lt;&#x2F;code&gt;)等。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;将所有的数据都存放在内存中，所以它的读写性能方面堪称秀儿。同时，它还可以将内存中的数据以快照或日志的形式保存在硬盘上，以保证数据的安全性。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;典型的应用场景包括：缓存、排行榜、计数器、社交网络、消息队列等等。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;传送门：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;redis.io&#x2F;&quot;&gt;官网&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoftarchive&#x2F;redis&#x2F;releases&quot;&gt;Windows版本下载&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-zhuang-shi-yong-windowsban-ben-yan-shi&quot;&gt;安装使用(Windows版本演示)&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-zhuang-shi-yong-windowsban-ben-yan-shi&quot; aria-label=&quot;Anchor link for: an-zhuang-shi-yong-windowsban-ben-yan-shi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;下载 &lt;code&gt;msi&lt;&#x2F;code&gt;文件，点击安装，一路 &lt;code&gt;next&lt;&#x2F;code&gt;即可。&lt;&#x2F;li&gt;
&lt;li&gt;上一步完事之后将其添加到环境变量。&lt;&#x2F;li&gt;
&lt;li&gt;上一步完事之后打开黑窗口。&lt;&#x2F;li&gt;
&lt;li&gt;输入 &lt;code&gt;redis-cli&lt;&#x2F;code&gt;回车。&lt;&#x2F;li&gt;
&lt;li&gt;如出现下图信息，表示安装成功并且服务以及启动。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15718680738493394672-9be9d203.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;&quot;&gt;简单使用&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-1&quot;&gt;换库&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;默认内置了16个库(0-15)&lt;&#x2F;p&gt;
&lt;p&gt;切库命令：&lt;code&gt;select [索引]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;命令&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;select 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;-2&quot;&gt;刷新&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不需要之前的操作数据，执行 &lt;code&gt;flushdb&lt;&#x2F;code&gt;可以将其刷掉。&lt;&#x2F;p&gt;
&lt;p&gt;命令&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;flushdb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-3&quot;&gt;字符串&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;存&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;以键值对的形式存储字符串形式的数据，如果需要存储以’-‘连接的字符串，用冒号【:】分隔。&lt;&#x2F;p&gt;
&lt;p&gt;示例：存储键为text-count，值为1的字符串。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;set test:count 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;取&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;获取存储的字符串数据也很简单，一条 &lt;code&gt;get&lt;&#x2F;code&gt;命令即可。&lt;&#x2F;p&gt;
&lt;p&gt;示例：取到 &lt;code&gt;key&lt;&#x2F;code&gt;为 &lt;code&gt;test:count&lt;&#x2F;code&gt;的 &lt;code&gt;value&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;get test:count
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;返回:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;&amp;quot;1&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;改&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;支持对存储的字符串数据进行一些基本的修改操作。&lt;&#x2F;p&gt;
&lt;p&gt;示例:将如上字符串&lt;strong&gt;加一、减一&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;#加一
&lt;&#x2F;span&gt;&lt;span&gt;incr test:count
&lt;&#x2F;span&gt;&lt;span&gt;#返回
&lt;&#x2F;span&gt;&lt;span&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;#---------------------
&lt;&#x2F;span&gt;&lt;span&gt;#减一
&lt;&#x2F;span&gt;&lt;span&gt;decr test:count
&lt;&#x2F;span&gt;&lt;span&gt;#返回
&lt;&#x2F;span&gt;&lt;span&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-4&quot;&gt;哈希&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;存&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;存储哈希的命令：&lt;code&gt;hset&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;由于哈希值本身也是kv的形式，所以需要两次进行key_value的输入。&lt;&#x2F;p&gt;
&lt;p&gt;示例：存于一个id为1,用户名为 &lt;code&gt;Tisox&lt;&#x2F;code&gt;的用户数据，名为【test-user】。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 存入用户id
&lt;&#x2F;span&gt;&lt;span&gt;hset test:user id 1
&lt;&#x2F;span&gt;&lt;span&gt;#提示：表示操作成功的提示
&lt;&#x2F;span&gt;&lt;span&gt;(integer) 1
&lt;&#x2F;span&gt;&lt;span&gt;#存入用户名
&lt;&#x2F;span&gt;&lt;span&gt;hset test:username Tisox
&lt;&#x2F;span&gt;&lt;span&gt;#提示
&lt;&#x2F;span&gt;&lt;span&gt;(integer) 1
&lt;&#x2F;span&gt;&lt;span&gt;#------------------------------
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;取&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;和字符串存取类似，哈希的取值命令为 &lt;code&gt;hget&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;示例：对上述存入的test-user信息进行读取。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;#取id
&lt;&#x2F;span&gt;&lt;span&gt;hget test:user id
&lt;&#x2F;span&gt;&lt;span&gt;#返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;#-----------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;#取用户名
&lt;&#x2F;span&gt;&lt;span&gt;hget test:user username
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Tisox&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-5&quot;&gt;列表&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;里的列表比较特殊，它存储数据的方式可以从左右两边进行，可以视为一个横向的容器。&lt;&#x2F;p&gt;
&lt;p&gt;容器的左右两边都可以进行存取操作。并且列表是有序可重复的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;存&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;从左边存入：101 102 103&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 从左边存入101 102 103
&lt;&#x2F;span&gt;&lt;span&gt;lpush test:ids 101 102 103
&lt;&#x2F;span&gt;&lt;span&gt;# 提示
&lt;&#x2F;span&gt;&lt;span&gt;(integer) 3
&lt;&#x2F;span&gt;&lt;span&gt;# 查看其长度
&lt;&#x2F;span&gt;&lt;span&gt;llen test:ids
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;(integer) 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;查&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;列表支持不同的方式进行查看&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 按索引查看
&lt;&#x2F;span&gt;&lt;span&gt;lindex test:ids 0
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;103&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;lindex test:ids 2
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;101&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# 按范围查看
&lt;&#x2F;span&gt;&lt;span&gt;lrange test:ids 0 2
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;1) &amp;quot;103&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;2) &amp;quot;102&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;3) &amp;quot;101&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;取&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于列表的特性，其取值也可以看作是队列或者栈的出队、出栈等操作。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 从右侧弹出一个值
&lt;&#x2F;span&gt;&lt;span&gt;lpop test:ids 
&lt;&#x2F;span&gt;&lt;span&gt;#返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;101&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;lpop test:ids 
&lt;&#x2F;span&gt;&lt;span&gt;#返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;102&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-6&quot;&gt;集合&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;集合(sets)，无序且不重复。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;存&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;往集合中存入一个key为test-language ，值为 &lt;code&gt;Java&lt;&#x2F;code&gt;,&lt;code&gt;C++&lt;&#x2F;code&gt;,&lt;code&gt;Python&lt;&#x2F;code&gt;的数据。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 存入
&lt;&#x2F;span&gt;&lt;span&gt;add  test:language Java C++ Python
&lt;&#x2F;span&gt;&lt;span&gt;# 提示
&lt;&#x2F;span&gt;&lt;span&gt;(integer) 3
&lt;&#x2F;span&gt;&lt;span&gt;# -----------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;# 统计集合中有多少个元素
&lt;&#x2F;span&gt;&lt;span&gt;scard test:language
&lt;&#x2F;span&gt;&lt;span&gt;# 返回 5
&lt;&#x2F;span&gt;&lt;span&gt;#------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;# 从集合中随机弹出一个元素:应用场景：【抽奖业务】
&lt;&#x2F;span&gt;&lt;span&gt;spop test:language 
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Java&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;spop test:language 
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Python&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;查&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;查看集合中的元素&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 查看当前集合中的剩余元素
&lt;&#x2F;span&gt;&lt;span&gt;smembers test:language
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;C++&amp;quot; # 因为上面已经随机弹出了另外两个数据，所以就剩下了&amp;quot;Python&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-7&quot;&gt;有序集合(sorted sets)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;给每一个存入的值附加一个分数，按照该分数进行排序的集合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;存&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;添加学生数据&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 添加学生以及其分数
&lt;&#x2F;span&gt;&lt;span&gt;zadd test:students 10 aaa 20 bbb 30 ccc 40 ddd 50 eee
&lt;&#x2F;span&gt;&lt;span&gt;# 提示
&lt;&#x2F;span&gt;&lt;span&gt;(integer) 5
&lt;&#x2F;span&gt;&lt;span&gt;# 统计集合元素个数
&lt;&#x2F;span&gt;&lt;span&gt;zcard test:students
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;(integer) 5
&lt;&#x2F;span&gt;&lt;span&gt;# 查询某个值的分数
&lt;&#x2F;span&gt;&lt;span&gt;zscore test :students ccc
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;30&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# 返回目的按照分数排行(0、1、2、3、4.....)
&lt;&#x2F;span&gt;&lt;span&gt;zrank test:students ccc
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;2
&lt;&#x2F;span&gt;&lt;span&gt;# 按照排序，取0-2大小的值
&lt;&#x2F;span&gt;&lt;span&gt;zrange test:students 0 2
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;1) &amp;quot;aaa&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;2) &amp;quot;bbb&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;3) &amp;quot;ccc&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-8&quot;&gt;全局命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;字面意思，这些命令针对全局生效。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# keys *
&lt;&#x2F;span&gt;&lt;span&gt;keys *
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;1) &amp;quot;test:user&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;2) &amp;quot;test:language&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;3) &amp;quot;text:count&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;4) &amp;quot;test:ids&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;5) &amp;quot;test:students&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# ----------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;# keys test*
&lt;&#x2F;span&gt;&lt;span&gt;keys test*
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;1) &amp;quot;test:user&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;2) &amp;quot;test:language&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;3) &amp;quot;text:count&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;4) &amp;quot;test:ids&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;5) &amp;quot;test:students&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# ------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;# 查看类型
&lt;&#x2F;span&gt;&lt;span&gt;type test:user
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;hash
&lt;&#x2F;span&gt;&lt;span&gt;# 查看某个key是否存在
&lt;&#x2F;span&gt;&lt;span&gt;exists test:user
&lt;&#x2F;span&gt;&lt;span&gt;# 返回
&lt;&#x2F;span&gt;&lt;span&gt;1 #表示存在
&lt;&#x2F;span&gt;&lt;span&gt;# 输出key
&lt;&#x2F;span&gt;&lt;span&gt;del test:user
&lt;&#x2F;span&gt;&lt;span&gt;# ---------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;# 设置有效期：秒为单位，过期自动删除
&lt;&#x2F;span&gt;&lt;span&gt;expire test:students 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;redis&quot;&gt;管理 &lt;code&gt;Redis&lt;&#x2F;code&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#redis&quot; aria-label=&quot;Anchor link for: redis&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;前面所有的命令都是基于key的基础上进行的，那么又怎样取管理和操作这些key呢？&lt;&#x2F;p&gt;
&lt;p&gt;以下是一些用来管理 &lt;code&gt;key&lt;&#x2F;code&gt;的常用命令：这里只作一个列举，不会全部进行演示。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 选择库
&lt;&#x2F;span&gt;&lt;span&gt;select index
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;index为redis库的索引，共有0-15个索引16个库，默认启用第一个库，索引为0。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 查看全部的key
&lt;&#x2F;span&gt;&lt;span&gt;keys *
&lt;&#x2F;span&gt;&lt;span&gt;# 通过通配符进行匹配查看
&lt;&#x2F;span&gt;&lt;span&gt;# 查看所有key中以my开头的key
&lt;&#x2F;span&gt;&lt;span&gt;keys my*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，如果数据量很大的情况下，一般不建议直接使用 &lt;code&gt;keys*&lt;&#x2F;code&gt;进行查看，该操作的时间复杂度是O(N)，的，数据量太大可能会导致阻塞崩溃。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 查看当前库中有多少key
&lt;&#x2F;span&gt;&lt;span&gt;dbsize
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 清理库中的key
&lt;&#x2F;span&gt;&lt;span&gt;flushdb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个危险且强大的命令，如果使用不当，可能造成将所有的key全部删除，是不可逆的操作，在使用时应该三思。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 查看key的数据类型
&lt;&#x2F;span&gt;&lt;span&gt;type key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 判断某个key是否存在
&lt;&#x2F;span&gt;&lt;span&gt;exists key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 随机返回一个key
&lt;&#x2F;span&gt;&lt;span&gt;randomkey
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 给key重命名
&lt;&#x2F;span&gt;&lt;span&gt;rename key newkey
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;建议在使用时结合 &lt;code&gt;nx&lt;&#x2F;code&gt;参数使用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 删除一个或者多个key
&lt;&#x2F;span&gt;&lt;span&gt;del key1 key2 .....
&lt;&#x2F;span&gt;&lt;span&gt;# 或者
&lt;&#x2F;span&gt;&lt;span&gt;unlink key1 key2 ....
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;del&lt;&#x2F;code&gt;带阻塞，&lt;code&gt;unlink&lt;&#x2F;code&gt;则没有。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 渐进式遍历key
&lt;&#x2F;span&gt;&lt;span&gt;# 基础用法，跟一个整数作为游标，表示从何处开始遍历
&lt;&#x2F;span&gt;&lt;span&gt;scan 0
&lt;&#x2F;span&gt;&lt;span&gt;# 进阶用法
&lt;&#x2F;span&gt;&lt;span&gt;scan 0 match counter* count 10
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;counter*&lt;&#x2F;code&gt;表示匹配的规则，所有以该字符开头的key,&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;count&lt;&#x2F;code&gt;后的数值表示每轮遍历的数量。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;为了方便演示 &lt;code&gt;scan&lt;&#x2F;code&gt;的用法，我们需要有一定数量的key。可以使用 &lt;code&gt;redis&lt;&#x2F;code&gt;自带的压力测试工具来生成这些测试数据。&lt;&#x2F;p&gt;
&lt;p&gt;这个工具存在于 &lt;code&gt;&#x2F;usr&#x2F;bin&#x2F;redisbenmark&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# redisbenchmark的使用命令
&lt;&#x2F;span&gt;&lt;span&gt;redis-benchmark -c 5 -n 100 -r 1000 -a reids密码
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的命令中：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;5&lt;&#x2F;code&gt;表示启动的客户端数量&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;100&lt;&#x2F;code&gt;表示请求数量&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;1000&lt;&#x2F;code&gt;表示插入的数据量&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;密码&lt;&#x2F;code&gt;表示你登录redis客户端的密码&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8142905571278033607-e14b7bcc.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;以上就是 &lt;code&gt;管理redis&lt;&#x2F;code&gt;部分的全部内容&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-9&quot;&gt;Redis底层实现机制&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-10&quot;&gt;Redis的对象体系&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-11&quot;&gt;类型与编码&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;在redis中，每一种数据类型的底层都是由一种或者多种编码进行实现的，具体如下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;int&lt;&#x2F;p&gt;
&lt;p&gt;embstr&lt;&#x2F;p&gt;
&lt;p&gt;raw&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;list&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ziplist&lt;&#x2F;p&gt;
&lt;p&gt;linkedlist&lt;&#x2F;p&gt;
&lt;p&gt;quicklist&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;hash&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ziplist&lt;&#x2F;p&gt;
&lt;p&gt;hashtable&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;set&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;intset&lt;&#x2F;p&gt;
&lt;p&gt;hashtable&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;zset&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;ziplist&lt;&#x2F;p&gt;
&lt;p&gt;skiplist&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;可以看到，某一种编码可以同时应用在不同的数据类型的实现中。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-12&quot;&gt;查看类型编码&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;在前面有提到过一个命令：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;type key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是用来查看某个key的数据类型，这里的类型即指的是上面诸如 &lt;code&gt;String,hash,set....&lt;&#x2F;code&gt;。而不能查看他们对应源码实现上所用的数据编码。可以通过下面的命令查看：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;object encoding key
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4741955633716788992-17fef530.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-13&quot;&gt;源码结构查看&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;具体的源码会在下一节中进行展开，这里介绍redis源码的结构。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;数据结构&lt;&#x2F;th&gt;&lt;th&gt;数据类型&lt;&#x2F;th&gt;&lt;th&gt;数据库&lt;&#x2F;th&gt;&lt;th&gt;服务端与客户端&lt;&#x2F;th&gt;&lt;th&gt;其他&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;动态字符串sds.c&lt;&#x2F;td&gt;&lt;td&gt;对象object.c&lt;&#x2F;td&gt;&lt;td&gt;数据库db.c&lt;&#x2F;td&gt;&lt;td&gt;事件驱动ae.c,ae_epoll.c&lt;&#x2F;td&gt;&lt;td&gt;主从复制replication.c&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;压缩列表ziplist.c&lt;&#x2F;td&gt;&lt;td&gt;字符串t_string.c&lt;&#x2F;td&gt;&lt;td&gt;持久化rdb.c,aof.c&lt;&#x2F;td&gt;&lt;td&gt;网络连接anet.c,networking.c&lt;&#x2F;td&gt;&lt;td&gt;哨兵sentinel.c&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;快速列表quicklist.c&lt;&#x2F;td&gt;&lt;td&gt;列表t_list.c&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;服务端server.c&lt;&#x2F;td&gt;&lt;td&gt;集群cluster.c&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;整数集合intset.c&lt;&#x2F;td&gt;&lt;td&gt;哈希t_hash.c&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;客户端redis-cli.c&lt;&#x2F;td&gt;&lt;td&gt;其他类型hyperloglog.c,geo.c&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;字典dict.c&lt;&#x2F;td&gt;&lt;td&gt;集合t_set.c&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;有序集合t_zset.c&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;-14&quot;&gt;简单动态字符串&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-15&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;简单动态字符串(SDS)，是 &lt;code&gt;Simple Dynamic String&lt;&#x2F;code&gt;的缩写，是 &lt;code&gt;Redis&lt;&#x2F;code&gt;内部自定义实现的一种数据类型。在 &lt;code&gt;Redis&lt;&#x2F;code&gt;数据库内部，包含字符串的键值对在底层都是由 &lt;code&gt;SDS&lt;&#x2F;code&gt;实现的，它还被用于缓冲区的实现，如 &lt;code&gt;AOF&lt;&#x2F;code&gt;缓冲区、客户端的输入缓冲区。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;set text &amp;quot;hello world&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;rpush names &amp;quot;john&amp;quot; &amp;quot;lucy&amp;quot; &amp;quot;tony&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;sadd users &amp;quot;liubei&amp;quot; &amp;quot;guanyu&amp;quot; &amp;quot;zhangfei&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;诸如上面的类型，底层实现都用到了SDS.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;学过或者了解过C语言的都知道，C语言它是有字符串这种数据类型的，那为什么 &lt;code&gt;Redis&lt;&#x2F;code&gt;不是直接使用原生的字符串类型，而是自己自定义呢？&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;C语言中，其实并没有实现意义上的字符串类型，而是将单个字符串储在 &lt;code&gt;char&lt;&#x2F;code&gt;类型的数组中，进而来表示字符串。&lt;&#x2F;li&gt;
&lt;li&gt;C语言用空字符 &lt;code&gt;\0&lt;&#x2F;code&gt;来标记字符串的结束，空字符串不是数字0，它的 &lt;code&gt;ASCII&lt;&#x2F;code&gt;码值为0；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;从上面的信息中，总结了以下几点原因，导致不能直接使用原生字符串，而是需要自定义。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Redis%E4%B8%AD%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E5%AD%97%E7%AC%A6%E4%B8%B2.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;获取长度的复杂度高：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;C字符串的实现中是不记自身长度的，想要获取字符串的长度就必须遍历整个字符串来统计，这种方式复杂度为 &lt;code&gt;O(n)&lt;&#x2F;code&gt;，但要知道，在 &lt;code&gt;Redis&lt;&#x2F;code&gt;中，获取字符串的长度是一个操作频繁的需求，因此为了提升性能，必须降低操作的复杂度。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;内存分配十分频繁：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;几乎每次修改C字符串，程序就要对保存的这个字符串的数组重新分配一次内存空间。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不能保证二进制安全：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;因为C字符串以空字符串结尾，所以不适合保存二进制数据(内部可能携带空字符串)。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-16&quot;&gt;源码实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-16&quot; aria-label=&quot;Anchor link for: -16&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;对源码这里不作深入的研究，只作了解。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;鉴于几个比较典型的版本来分别看一下他们在 &lt;code&gt;SDS&lt;&#x2F;code&gt;的实现的源码中是怎样的逻辑。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Redis3.2之前的是实现&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;下面是v3.0中对sds结构的自定义实现源码：这是sds的头文件sds.h，具体的实现逻辑在sds.c中。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*sds.h*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sdshdr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;已使用的字节数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; len;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;未使用的字节数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; free;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;保存字符串的数组
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;上面代码的意思大致是这样的，默认会开辟一个buf[]字符数组来存储需要的字符串，该字符数组的长度为
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;len&lt;&#x2F;code&gt;的长度加上空闲的空间长度 &lt;code&gt;free&lt;&#x2F;code&gt;。&lt;code&gt;len&lt;&#x2F;code&gt;用来实时存储并记录当前已使用掉的字符空间，它可以实时的返回字符串的长度，从而可以将获取长度这个操作的复杂度降到常数的 &lt;code&gt;O(1)&lt;&#x2F;code&gt;级别。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;而
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;free&lt;&#x2F;code&gt;的作用相当于一个预留空间，这部分空间未必是一开始就能全部用上的，可能会在用户修改字符串数量之后用上，通过这种&lt;strong&gt;空间预分配和惰性空间&lt;&#x2F;strong&gt;释放修改字符串时所需的内存分配次数。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;此外，SDS不会对buf中的数据作任何的限制，因为它采用len属性来判定字符串是否结束，它依然以空字符(
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;\0&lt;&#x2F;code&gt;)结尾，这样其内部可以方便的重用一部分C字符串库中的函数。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;预分配&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;用于优化增长操作，即不仅为其分配存放字符串所需的空间，还会为其分配一定大小的额外空间，如果修改后的SDS长度小于 &lt;code&gt;1MB&lt;&#x2F;code&gt;,则分配的未使用空间与 &lt;code&gt;len&lt;&#x2F;code&gt;相同，否则分配的未使用空间为 &lt;code&gt;1MB&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;惰性释放&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;用来优化缩短操作，当检测到SDS缩短时，程序不会立即重新分配内存，而是使用 &lt;code&gt;free&lt;&#x2F;code&gt;属性记录这些字节。也就是将缩短后空余出来的空间加到 &lt;code&gt;free&lt;&#x2F;code&gt;中，以备下一次增长时使用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;不足之处&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在该版本的源码实现中，除了具备上述优点之外，也是有不足之处的，比如 &lt;code&gt;len&lt;&#x2F;code&gt;，&lt;code&gt;free&lt;&#x2F;code&gt;，都是无符号int类型,他们在C语言中一般占用4个字节的空间，但对于较短的字符串来说，这免不了造成了一定空间的浪费。&lt;&#x2F;p&gt;
&lt;p&gt;为什么会这么说，一个 &lt;code&gt;len&lt;&#x2F;code&gt;不过4个字节，加上 &lt;code&gt;free&lt;&#x2F;code&gt;也不过8个字节，这么就浪费空间了呢？别忘了，在 &lt;code&gt;Redis&lt;&#x2F;code&gt;核心中，它的数据一般都是存在内存中的，内存对它来说确实值得 &lt;code&gt;斤斤计较&lt;&#x2F;code&gt;,再者，&lt;code&gt;SDS&lt;&#x2F;code&gt;实现的数据类型在整个的 &lt;code&gt;Redis&lt;&#x2F;code&gt;数据结构中占用的比例是相当大的，当数量达到一定量级，浪费的空间可不是几个字节能搞定的。&lt;&#x2F;p&gt;
&lt;p&gt;附&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;tree&#x2F;3.0&#x2F;src&quot;&gt;redis3.0源码地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上面提到了这种方案的一些弊端，那么在后续的版本中，自然也得到了优化，毕竟写出 &lt;code&gt;Redis&lt;&#x2F;code&gt;的那些大佬可不是盖的，我们能想到的，他们自然也想到了。所以下面是优化后的版本，也就是在 &lt;code&gt;v3.2&lt;&#x2F;code&gt;中相同部分的实现源码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* Note: sdshdr5 is never used, we just access the flags byte directly.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * However is here to document the layout of type 5 SDS strings. *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;__attribute__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;__packed__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sdshdr5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned char&lt;&#x2F;span&gt;&lt;span&gt; flags; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* 3 lsb of type, and 5 msb of string length *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;__attribute__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;__packed__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sdshdr8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span&gt; len; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* used *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span&gt; alloc; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* excluding the header and null terminator *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned char&lt;&#x2F;span&gt;&lt;span&gt; flags; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* 3 lsb of type, 5 unused bits *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;__attribute__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;__packed__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sdshdr16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint16_t&lt;&#x2F;span&gt;&lt;span&gt; len; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* used *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint16_t&lt;&#x2F;span&gt;&lt;span&gt; alloc; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* excluding the header and null terminator *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned char&lt;&#x2F;span&gt;&lt;span&gt; flags; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* 3 lsb of type, 5 unused bits *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;__attribute__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;__packed__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sdshdr32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt; len; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* used *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt; alloc; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* excluding the header and null terminator *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned char&lt;&#x2F;span&gt;&lt;span&gt; flags; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* 3 lsb of type, 5 unused bits *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;__attribute__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;__packed__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sdshdr64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint64_t&lt;&#x2F;span&gt;&lt;span&gt; len; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* used *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint64_t&lt;&#x2F;span&gt;&lt;span&gt; alloc; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* excluding the header and null terminator *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned char&lt;&#x2F;span&gt;&lt;span&gt; flags; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* 3 lsb of type, 5 unused bits *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;主要的优化方向：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过字符串长度，将其分为5种类型，分别为1字节、2字节、4字节、8字节、小于1字节。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;__attribute__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;__packed__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sdshdr8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span&gt; len; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;使用的字节数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint8_t&lt;&#x2F;span&gt;&lt;span&gt; alloc; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;全部的字节数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned char&lt;&#x2F;span&gt;&lt;span&gt; flags; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;低3位存储类型，高5位预留
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;存放实际的内容
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在 &lt;code&gt;v3.2&lt;&#x2F;code&gt;版本的优化中，针对每一个长度定义了不同的结构体处理，还新增了一个 &lt;code&gt;char&lt;&#x2F;code&gt; 类型的 &lt;code&gt;flag&lt;&#x2F;code&gt;属性。这个属性是用来标记数据类型的，属性占1个字节(8位)，其中3位用来标记类型，剩余的5位作为预留空间待用。&lt;&#x2F;p&gt;
&lt;p&gt;==在处理小于1字节的情况上，它的结构体是定义如下==：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;__attribute__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;__packed__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sdshdr5 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned char&lt;&#x2F;span&gt;&lt;span&gt; flags; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;低3位存储类型，高5位存储长度
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span&gt; buf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;存放实际的内容
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;==注意到==，这里去掉了 &lt;code&gt;len&lt;&#x2F;code&gt;和 &lt;code&gt;alloc&lt;&#x2F;code&gt;属性不代表它不存储长度，而是将长度和类型标记合二为一。既然存储的长度小于1字节，那么在8位长度中，用前3位来标记数据类型，后5位存储长度是足够的，因此没必要开辟额外的属性。这样的作法更有效的利用空间。&lt;&#x2F;p&gt;
&lt;p&gt;在每一个结构体的定义中有这样一段修饰符：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;__attribute__ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;((&lt;&#x2F;span&gt;&lt;span&gt;__packed__&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是用来将结构体中内存的分配规则指定为==按照1字节来对齐==，如此可以进一步的节约内存。而在默认不作处理的情况下，它对结构体内存的分配规则是按照其中各个属性的字节最小公倍数来对齐的，相对比较浪费。&lt;&#x2F;p&gt;
&lt;p&gt;附&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;tree&#x2F;3.2&quot;&gt;Redis3.2源码地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-17&quot;&gt;整数集合&lt;a class=&quot;zola-anchor&quot; href=&quot;#-17&quot; aria-label=&quot;Anchor link for: -17&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E6%95%B4%E6%95%B0%E9%9B%86%E5%90%88%E5%8E%9F%E7%90%86.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-18&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-18&quot; aria-label=&quot;Anchor link for: -18&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;整数集合(intset)是一个有序的、存储整型数据的结构；其中的元素按照值由小到大的顺序排列。&lt;&#x2F;p&gt;
&lt;p&gt;它可以保存 &lt;code&gt;int16_t,int32_t,int64_t&lt;&#x2F;code&gt;类型的整数值，在存储数据时，整数集合可以保证内部不出现重复数据。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-19&quot;&gt;源码实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-19&quot; aria-label=&quot;Anchor link for: -19&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;在 &lt;code&gt;Redis&lt;&#x2F;code&gt;中并没有大范围的使用到整数集合这样的编码，只有当一个set只包含整数元素，并且这个set的元素数量不多时，&lt;code&gt;Redis&lt;&#x2F;code&gt;才会使用整数集合作为set的底层实现。这个的数量是可以通过配置文件进行配置的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;集合的升级与降级&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;升级&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;当添加新的元素，&lt;strong&gt;其类型比现有元素类型都长时&lt;&#x2F;strong&gt;，集合需要先升级再添加。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;根据新元素的类型，扩展集合底层数组空间，并为新元素分配空间。&lt;&#x2F;li&gt;
&lt;li&gt;将现有元素都转成与新元素相同的类型，并将其存储到正确的位置上。&lt;&#x2F;li&gt;
&lt;li&gt;将新元素添加到数组之内。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;降级&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;整数集合不支持降级，一旦对数组进行了升级，编码就会一直保持升级的状态。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;升级的优点:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;让一个整数数组同时支持 &lt;code&gt;int16_t,int32_t,int64_t&lt;&#x2F;code&gt;,最简单的方法是使用 &lt;code&gt;int64_t&lt;&#x2F;code&gt;,但这样显然浪费内存空间，而升级操作可以尽量的节约内存的使用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;升级的缺点：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;每次向集合中添加数据都可能会引起升级，而每次升级都需要对底层数组中所有的元素进行**类型转换，&lt;strong&gt;所以向集合中添加新元素的时间&lt;&#x2F;strong&gt;复杂度是O(n)**的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;下面是 &lt;code&gt;v3.2&lt;&#x2F;code&gt;版本中对该结构的定义；&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; intset &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt; encoding;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;编码类型
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint32_t&lt;&#x2F;span&gt;&lt;span&gt; length;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;元素数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;int8_t&lt;&#x2F;span&gt;&lt;span&gt; contents&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;元素数组
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;intset&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意其中的元素数组的类型虽然声明是 &lt;code&gt;int8_t&lt;&#x2F;code&gt;的，但实际上不是说只能存 &lt;code&gt;int8_t&lt;&#x2F;code&gt;类型的元素，具体的，在后面的源码中，对它作了一些设计。&lt;&#x2F;p&gt;
&lt;p&gt;在 &lt;code&gt;intset.c&lt;&#x2F;code&gt;中：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; INTSET_ENC_INT16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; INTSET_ENC_INT32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; INTSET_ENC_INT64. &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6e2e32;color:#839496;&quot;&gt;*&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;INTSET_ENC_INT16 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;int16_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;INTSET_ENC_INT32 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;int32_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;INTSET_ENC_INT64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;sizeof&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;int64_t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是说 &lt;code&gt;contents&lt;&#x2F;code&gt;数组的实际类型取决于 &lt;code&gt;encoding&lt;&#x2F;code&gt;属性的值。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;encoding=INTSET_ENC_INT16-&amp;gt;contents存储int16_t类型的值。&lt;&#x2F;li&gt;
&lt;li&gt;encoding=INTSET_ENC_INT32-&amp;gt;contents存储int32_t类型的值。&lt;&#x2F;li&gt;
&lt;li&gt;encoding=INTSET_ENC_INT64-&amp;gt;contents存储int64_t类型的值。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;上面的常量定义可以在 &lt;code&gt;intset.c&lt;&#x2F;code&gt;中找到。&lt;&#x2F;p&gt;
&lt;p&gt;附&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.2&#x2F;src&#x2F;intset.c&quot;&gt;Redis3.2版本源码地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-20&quot;&gt;字典&lt;a class=&quot;zola-anchor&quot; href=&quot;#-20&quot; aria-label=&quot;Anchor link for: -20&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E5%AD%97%E5%85%B8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;字典又称散列表，是一种用来&lt;strong&gt;存储键值对&lt;&#x2F;strong&gt;的数据结构。C语言没有内置这种数据结构，所以 &lt;code&gt;Redis&lt;&#x2F;code&gt;构建了自己的字典规范。&lt;&#x2F;p&gt;
&lt;p&gt;字典在 &lt;code&gt;Redis&lt;&#x2F;code&gt;中的应用广泛，redis数据库底层就是采用它实现的，字典也是集合，哈希类型的底层实现之一；redis的哨兵模式，就是以字典存储所有的主从节点的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-21&quot;&gt;字典的实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-21&quot; aria-label=&quot;Anchor link for: -21&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;字典实现主要涉及三个结构体：字典、哈希表、哈希表节点。其中，每一个哈希表节点保持一个键值对，每一个哈希表由多个哈希表节点构成，而字典则是对哈希表的进一步封装。看一下哈希表在 &lt;code&gt;dict.h&lt;&#x2F;code&gt;中的定义源码：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;dict&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; dict &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;字典类型，内置若干特定的操作函数
&lt;&#x2F;span&gt;&lt;span&gt;    dictType &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;type;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;该字典特有的私有数据
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;privdata;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;哈希表数组，固定长度为2
&lt;&#x2F;span&gt;&lt;span&gt;    dictht ht&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;rehash标识，存储rehash的偏移量，默认-1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; rehashidx; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;记录绑定在此字典上，正在运行的迭代器数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; iterators; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dict&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;dictht&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; dictht &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;节点数组
&lt;&#x2F;span&gt;&lt;span&gt;    dictEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span&gt;table;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;数组大小
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span&gt; size;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;掩码(size-1)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span&gt; sizemask;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;已用节点数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span&gt; used;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dictht&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;dictEntry&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; dictEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;键
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;key;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;union &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;val;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;uint64_t&lt;&#x2F;span&gt;&lt;span&gt; u64;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;int64_t&lt;&#x2F;span&gt;&lt;span&gt; s64;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; d;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt; v;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;值
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;下一节点
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; dictEntry &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;next;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dictEntry&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大致的结构关系：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15490133664593073653-aae3b9b9.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-22&quot;&gt;哈希算法&lt;a class=&quot;zola-anchor&quot; href=&quot;#-22&quot; aria-label=&quot;Anchor link for: -22&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;关于哈希算法的具体逻辑其实和语言无关，核心思想是类似的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;向字典中添加新的键值对时，程序需要先根据键来计算出对应的一个哈希值，再根据哈希值计算出索引值，最后将此键值对封装在哈希表节点中后，放到节点数组的指定索引上，关键步骤参考如下代码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 使用哈希函数计算键的哈希值
&lt;&#x2F;span&gt;&lt;span&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;dict-&amp;gt;type-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hashFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;使用哈希值和掩码，计算索引值
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;等价于哈希值和哈希表容量取余，使用位运算提高效率
&lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;hash &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt; dict-&amp;gt;ht&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;sizemask&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上面只是一个大体的逻辑关系，具体的源码实现可以参考&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;redis&#x2F;redis&#x2F;blob&#x2F;3.2&#x2F;src&#x2F;dict.c&quot;&gt;dict.c源码&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;键冲突问题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;当多个键被分配到了节点数组的同一个索引上时，则这些键发生冲突(哈希冲突)。&lt;&#x2F;li&gt;
&lt;li&gt;为了解决哈希冲突，&lt;code&gt;Redis&lt;&#x2F;code&gt;采用链表来解决冲突，即使用next指针将这些节点链接起来，形成单向链表。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;的哈希表中没有设计表尾指针，每次添加新节点时都是将新节点插入到表头的位置，而非表尾追加。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-23&quot;&gt;ReHASH&lt;a class=&quot;zola-anchor&quot; href=&quot;#-23&quot; aria-label=&quot;Anchor link for: -23&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在 &lt;code&gt;Redis&lt;&#x2F;code&gt;中，哈希表的扩容和缩容是通过rehash实现的，执行 &lt;code&gt;rehash&lt;&#x2F;code&gt;的大致步骤如下：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;为字典的 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;哈希表分配内存空间。
&lt;ol&gt;
&lt;li&gt;如果是执行扩容操作，则 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;的大小为第一个大于等于 &lt;code&gt;ht[0].used*2&lt;&#x2F;code&gt;的$2^{n}$&lt;&#x2F;li&gt;
&lt;li&gt;如果执行的是缩容操作，则 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;的大小为第一个小于等于 &lt;code&gt;ht[0].used&lt;&#x2F;code&gt;的$2^{n}$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;将存储在 &lt;code&gt;ht[0]&lt;&#x2F;code&gt;中的数据迁移到 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;上。
&lt;ol&gt;
&lt;li&gt;重新计算键的哈希和索引，然后将键值对放置到 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;哈希表的指定位置上。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;将字典的 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;哈希表晋升为默认哈希表
&lt;ol&gt;
&lt;li&gt;迁移完成后，清空 &lt;code&gt;ht[0]&lt;&#x2F;code&gt;，再交换 &lt;code&gt;ht[0]&lt;&#x2F;code&gt;和 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;的值，为下一次 &lt;code&gt;REHASH&lt;&#x2F;code&gt;做准备。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;触发rehash的条件：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;服务器目前没有执行 &lt;code&gt;bgsave&lt;&#x2F;code&gt;或者 &lt;code&gt;bgrewriteof&lt;&#x2F;code&gt;命令，并且哈希表的负载因子大于1；&lt;&#x2F;li&gt;
&lt;li&gt;服务器正在执行上述两个命令，且哈希表的负载因子大于等于5&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;只要满足上面两个条件之一，就会触发rehash。&lt;&#x2F;p&gt;
&lt;p&gt;其中，负载因子的计算公式：$load_factor=\frac{ht[0].used}{ht[0].size}$&lt;&#x2F;p&gt;
&lt;p&gt;另外，当哈希表的负载因子小于0.1时，程序会自动开始对哈希表执行收缩操作。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;rehash的详细步骤&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为了避免rehash对服务器性能造成影响，rehash操作不是一次性完成，而是渐进式的分为多次进行。详细过程如下：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;为 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;分配空间，让字典同时持有 &lt;code&gt;ht[0]&lt;&#x2F;code&gt;和 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;两个哈希表。&lt;&#x2F;li&gt;
&lt;li&gt;将字典中的索引计数器 &lt;code&gt;rehashidx&lt;&#x2F;code&gt;设置为0,表示将开始 &lt;code&gt;rehash&lt;&#x2F;code&gt;操作。&lt;&#x2F;li&gt;
&lt;li&gt;在 &lt;code&gt;rehash&lt;&#x2F;code&gt;期间，每次对字典执行添加、删除、修改、查找等操作时，程序除了执行指定的操作之外，还会顺带将 &lt;code&gt;ht[0]&lt;&#x2F;code&gt;中位于 &lt;code&gt;rehashidx&lt;&#x2F;code&gt;上所有的键值对迁移到 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;中，再将 &lt;code&gt;rehashidx&lt;&#x2F;code&gt;的值加一。&lt;&#x2F;li&gt;
&lt;li&gt;随着字典不断被访问，最终在某个时刻，&lt;code&gt;ht[0]&lt;&#x2F;code&gt;上所有的键值对都被迁移到 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;上，此时程序将 &lt;code&gt;rehashidx&lt;&#x2F;code&gt;属性值设置为-1，标识 &lt;code&gt;rehash&lt;&#x2F;code&gt;操作完成。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;rehash期间的访问规则&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;在rehash期间啊，字典会同时持有两个哈希表，此时的访问将按照下面的规则进行处理：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;新添加的键值对，一律被保存在 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;中；&lt;&#x2F;li&gt;
&lt;li&gt;其他诸如删除、修改、查找等操作会同时在两个哈希表上进行，即程序会先尝试在 &lt;code&gt;ht[0]&lt;&#x2F;code&gt;中访问要操作的数据，如果不存在则添加到 &lt;code&gt;ht[1]&lt;&#x2F;code&gt;中访问，再对访问到的数据做相应的处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E5%AD%97%E5%85%B8%E4%B8%8Erehash.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-24&quot;&gt;链表&lt;a class=&quot;zola-anchor&quot; href=&quot;#-24&quot; aria-label=&quot;Anchor link for: -24&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;链表(&lt;code&gt;LinkedList&lt;&#x2F;code&gt;)是一种有序的数据结构，且增删效率较高，同样，C语言中也是没有内置该种数据结构的， 所以 &lt;code&gt;Redis&lt;&#x2F;code&gt;构建了自己的链表实现。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;链表在 &lt;code&gt;Redis&lt;&#x2F;code&gt;中应用广泛：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作为列表的底层实现之一；&lt;&#x2F;li&gt;
&lt;li&gt;发布与订阅、慢查询、监视器等功能也用到了链表；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;服务器采用链表保存多个客户端的状态信息；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;客户端输出缓冲区是在链表的基础上实现的；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-25&quot;&gt;链表的结构实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-25&quot; aria-label=&quot;Anchor link for: -25&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;链表的实现主要涉及两个结构体，定义如下，下面的源码也可以在 &lt;code&gt;adlist.h&lt;&#x2F;code&gt;中找到：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; listNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;前驱节点
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; listNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;prev;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;后继节点
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; listNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;next;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;节点的值
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;value;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;listNode&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; list &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;头结点
&lt;&#x2F;span&gt;&lt;span&gt;    listNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;head;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;尾节点
&lt;&#x2F;span&gt;&lt;span&gt;    listNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;tail;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;复制节点
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;dup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;释放节点
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;free&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;比较节点的值
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;节点数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span&gt; len;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;链表(双端链表)也算是比较基础的一种数据结构类型了，这里不再赘述。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-26&quot;&gt;压缩列表&lt;a class=&quot;zola-anchor&quot; href=&quot;#-26&quot; aria-label=&quot;Anchor link for: -26&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;压缩列表(ziplist)，是 &lt;code&gt;Redis&lt;&#x2F;code&gt;为了节约内存而设计的一种线性数据结构，它是由一系列具有特殊编码的连续内存块构成；一个压缩列表可以包含任意多个节点，每个节点可以保存一个字节数组或者一个整数值。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在 &lt;code&gt;Redis&lt;&#x2F;code&gt;中，列表、哈希、有序集合都直接或者间接的使用了压缩列表。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-27&quot;&gt;压缩列表的实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-27&quot; aria-label=&quot;Anchor link for: -27&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;压缩列表相对来说，是一种比较复杂的结构，下面是它的结构示意图：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3542764156159951676-8655c71b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;组成说明：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13068101954839675270-3be5f3c0.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;节点构成&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2328242434026149105-73b41d3b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;previous_entry_length&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;该属性以字节为单位，记录当前节点的前一节点的长度，其自身占据1字节或5字节：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;如果前一节点的长度小于254字节，则“pel”属性的长度为1字节，前一节点的长度就保存&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;在这一个字节内；&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;如果前一节点的长度达到254字节，则“pel”属性的长度为5字节，其中第一个字节被设置&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;为0xFE，之后的四个字节用来保存前一节点的长度；&lt;&#x2F;p&gt;
&lt;p&gt;基于“pel”属性，程序便可以通过指针运算，根据当前节点的起始地址计算出前一节点的起始&lt;&#x2F;p&gt;
&lt;p&gt;地址，从而实现从表尾向表头的遍历操作。&lt;&#x2F;p&gt;
&lt;p&gt;content属性负责保存节点的值（字节数组或整数），其类型和长度则由encoding属性决定。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12147610790668578545-357227d7.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-28&quot;&gt;压缩列表的连锁更新&lt;a class=&quot;zola-anchor&quot; href=&quot;#-28&quot; aria-label=&quot;Anchor link for: -28&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;添加引起的连锁更新&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;e1~en节点长度介于250-253字节之间。&lt;&#x2F;li&gt;
&lt;li&gt;将一个长度大于等于254字节的节点new添加到表头&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1708813867418129375-24240af5.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;删除引起的连锁更新&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;e1~en节点的长度均介于250字节~253字节之间；&lt;&#x2F;li&gt;
&lt;li&gt;big节点长度大于等于254，small节点长度小于254，将small节点删除；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18257202356962324488-edea3371.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-29&quot;&gt;连锁更新的影响&lt;a class=&quot;zola-anchor&quot; href=&quot;#-29&quot; aria-label=&quot;Anchor link for: -29&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;最坏情况下，连锁更新需要对压缩列表执行N次空间的重新分配&lt;&#x2F;li&gt;
&lt;li&gt;每次分配的最坏情况复杂度为 &lt;code&gt;O(N)&lt;&#x2F;code&gt;,所以连锁更新的最坏复杂度为$O(N^{2})$&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;连锁更新出现的概率很低，压缩列表中需要恰好有多个连续的，长度介于250-253字节的节点；适当控制节点的数量可以消除这种影响，即便出现连锁更新，对性能也不会造成任何影响。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E5%8E%8B%E7%BC%A9%E5%88%97%E8%A1%A8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-30&quot;&gt;快速列表&lt;a class=&quot;zola-anchor&quot; href=&quot;#-30&quot; aria-label=&quot;Anchor link for: -30&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-31&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-31&quot; aria-label=&quot;Anchor link for: -31&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;快速列表(quicklist)是 &lt;code&gt;Redis3.2&lt;&#x2F;code&gt;新引入的数据结构，该结构是链表和压缩列表的结合；&lt;&#x2F;p&gt;
&lt;p&gt;快速列表中的每个节点是一个压缩列表，这种设计能够在时间效率和空间效率之间实现较好的折中。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在 &lt;code&gt;v3.2&lt;&#x2F;code&gt;之前，列表类型是采用压缩列表以及双向链表实现的，但 &lt;code&gt;v3.2&lt;&#x2F;code&gt;开始，改用了快速列表作为底层的唯一实现。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-32&quot;&gt;快速列表的实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-32&quot; aria-label=&quot;Anchor link for: -32&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;下面的结构定义源码在 &lt;code&gt;quicklist.h&lt;&#x2F;code&gt;中可以找到。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; quicklistNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;前驱节点
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; quicklistNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;prev;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;后继节点
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; quicklistNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;next;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;ziplist
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;zl;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;ziplist的字节数量
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; sz;  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;ziplist的元素个数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; count &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;编码方式(RAW==1,LZF==2)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; encoding &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;;  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;容器类型(NONE==1 or ZIPLIST==2)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; container &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;该节点是否被压缩
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; recompress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;用于测试期间的验证
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; attempted_compress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;预留字段
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; extra &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;quicklistNode&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; quicklist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;头结点
&lt;&#x2F;span&gt;&lt;span&gt;    quicklistNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;head;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;尾节点
&lt;&#x2F;span&gt;&lt;span&gt;    quicklistNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;tail;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;压缩列表的元素总数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span&gt; count;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;快速列表的节点个数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; len;  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;单个节点的填充因子
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; fill &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;;      
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;不参与压缩的节点个数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned int&lt;&#x2F;span&gt;&lt;span&gt; compress &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;* depth of end nodes not to compress;0=off *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;quicklist&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;简单的说，快速列表是由一个带有头尾节点等属性构成的列表，列表每一个元素又是一条双向链表构成，双向链表的每一个元素再由一个个的压缩列表组成。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-33&quot;&gt;压缩数据的机制&lt;a class=&quot;zola-anchor&quot; href=&quot;#-33&quot; aria-label=&quot;Anchor link for: -33&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;为了进一步降低 &lt;code&gt;ziplist&lt;&#x2F;code&gt;占用的内存空间，&lt;code&gt;Redis&lt;&#x2F;code&gt;允许采用 &lt;code&gt;LZF&lt;&#x2F;code&gt;算法对 &lt;code&gt;ziplist&lt;&#x2F;code&gt;进行压缩。该算法的基本思想是，如果数据与前面出现重复的，记录重复位置以及长度，否则直接记录原始数据，压缩后的数据分为多个片段，每个片段包括解释字段和数据字段两个部分，其中数据字段可能不存在。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-6465232837391552858-14f3dbc8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-34&quot;&gt;跳跃表&lt;a class=&quot;zola-anchor&quot; href=&quot;#-34&quot; aria-label=&quot;Anchor link for: -34&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-35&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-35&quot; aria-label=&quot;Anchor link for: -35&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有序集合的底层可以采用数组、链表、平衡树等结构来实现。数组不便于元素的插入和删除，链表的查询效率低平衡树&#x2F;红黑树的效率高但是实现复杂；&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;采用跳跃表(skiplist)来作为有序集合的一种实现方案，跳跃表的查询复杂度平均为$O(log^{N})$,效率堪比红黑树，实现上却比红黑树简单很多。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-36&quot;&gt;跳跃表的实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-36&quot; aria-label=&quot;Anchor link for: -36&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;提到跳跃表之前，先看一下普通链表，链表的插入、删除复杂度为$O(1)$,而查找的复杂度为$O(N)$;明显查找的效率成本是比较高的，特别是在数据量很大的情况下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9381234620865177275-6fe7e6df.png&quot; alt=&quot;image-20220419171135748&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如在上面的这条链表中查找值为60的节点，就需要遍历前面5个节点，这也是就效率拉跨的原因。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;而跳跃表的实现原理就是从链表中选取一部分的节点，组成一个新的链表，并以此作为原始链表的一级索引。&lt;&#x2F;p&gt;
&lt;p&gt;再从一级索引中选取部分节点组成一个新链表作为原始链表的二级索引，以此递归。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14360181100709264284-f94fa7c6.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;有了这个结构之后，我们在查找某个节点元素的时候，就会由原来的遍历几乎所有节点变成遍历部分节点甚至无需遍历，直接根据索引定位元素，这样的操作效率会高很多。&lt;&#x2F;p&gt;
&lt;p&gt;就上图来说，同样是查找60这个节点，在链表中需要遍历前面5个节点，而在跳跃表中只需要三次。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;跳跃表中查找元素会优先从高层开始查找，若 &lt;code&gt;next&lt;&#x2F;code&gt;节点值大于目标值，或 &lt;code&gt;next&lt;&#x2F;code&gt;指针指向 &lt;code&gt;null&lt;&#x2F;code&gt;，则从当前节点下降一层继续往后找。比如 &lt;code&gt;L2-&amp;gt;L1-&amp;gt;L0&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;跳跃表的实现主要涉及两个结构体：&lt;code&gt;zskiplist&lt;&#x2F;code&gt;,&lt;code&gt;zskiplistNode&lt;&#x2F;code&gt;,在 &lt;code&gt;v3.0&lt;&#x2F;code&gt;版本之前，他们被定义在 &lt;code&gt;redis.h&lt;&#x2F;code&gt;中，该版本之后，被改为在 &lt;code&gt;server.h&lt;&#x2F;code&gt;中。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; zskiplistNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 节点数据
&lt;&#x2F;span&gt;&lt;span&gt;    sds ele;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 节点分值
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; score;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 后退指针
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; zskiplistNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;backward;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 层级数组（各节点不一样）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; zskiplistLevel &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 前进指针
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; zskiplistNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;forward;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 跨度（节点间的距离，用于计算排名）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span&gt; span;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt; level&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;zskiplistNode&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; zskiplist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 表头指针、表尾指针
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; zskiplistNode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;header, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;tail;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 跳跃表的长度（除表头之外的节点总数）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned long&lt;&#x2F;span&gt;&lt;span&gt; length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 跳跃表的高度（除表头之外的最高层数）
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; level;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;zskiplist&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以借助下面的结构图来理解。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1267573584945415792-d266d494.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;节点层高的范围是[1,ZSKIP_MAXLEVEL]，在Redis 6中层高的最大值为32；&lt;&#x2F;li&gt;
&lt;li&gt;头节点是特殊节点，它的层高为32，不存储数据和分值，也不计入跳跃表的总长度和高度；&lt;&#x2F;li&gt;
&lt;li&gt;创建节点时，程序会生成一个[1,32)之间的随机值作为该节点的层高，&lt;strong&gt;并且生成算法符合幂次定律，&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;即越大的数出现的概率越小。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-37&quot;&gt;小结&lt;a class=&quot;zola-anchor&quot; href=&quot;#-37&quot; aria-label=&quot;Anchor link for: -37&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;跳跃表由多层构成，它的每一层都是一个有序链表，数据依次递增；&lt;&#x2F;li&gt;
&lt;li&gt;跳跃表有一个头节点，它是一个32层的结构，内部不存储实际数据；&lt;&#x2F;li&gt;
&lt;li&gt;跳跃表包含有头尾指针，分别指向跳跃表的第一个和最后一个节点；&lt;&#x2F;li&gt;
&lt;li&gt;除头节点外，层数最多的节点的层高为跳跃表的高度；&lt;&#x2F;li&gt;
&lt;li&gt;除头节点外，一个元素在上层有序链表中出现，则它一定能够会在下层有序链表中出现；&lt;&#x2F;li&gt;
&lt;li&gt;跳跃表每层的最后一个节点指向NULL；&lt;&#x2F;li&gt;
&lt;li&gt;最底层的有序链表包含所有的节点，最底层的节点个数为跳跃表的长度；&lt;&#x2F;li&gt;
&lt;li&gt;每个节点包含一个后退指针，头节点和第一个节点指向NULL，其他节点指向最底层的前一节点。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-38&quot;&gt;Redis对象的底层实现&lt;a class=&quot;zola-anchor&quot; href=&quot;#-38&quot; aria-label=&quot;Anchor link for: -38&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-39&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-39&quot; aria-label=&quot;Anchor link for: -39&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;数据库中的键值对用对象来表示，键是一个对象，值也是一个对象,使用了 &lt;code&gt;redisObject&lt;&#x2F;code&gt;结构来表示一个对象，该结构的源码如下：&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; redis.h, server.h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;typedef struct&lt;&#x2F;span&gt;&lt;span&gt; redisObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; type&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 对象类型
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; encoding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 对象编码
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;unsigned&lt;&#x2F;span&gt;&lt;span&gt; lru&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;LRU_BITS; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 访问时间
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; refcount; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 引用计数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;ptr; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 指向底层数据结构
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;robj&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;-40&quot;&gt;对象的类型&lt;a class=&quot;zola-anchor&quot; href=&quot;#-40&quot; aria-label=&quot;Anchor link for: -40&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15214922292377603851-a4f92b5e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-41&quot;&gt;对象的编码&lt;a class=&quot;zola-anchor&quot; href=&quot;#-41&quot; aria-label=&quot;Anchor link for: -41&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17167900588883492109-69a0901e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-42&quot;&gt;对象的访问时间&lt;a class=&quot;zola-anchor&quot; href=&quot;#-42&quot; aria-label=&quot;Anchor link for: -42&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;lru&lt;&#x2F;code&gt;属性用于记录对象最后一次被程序访问的时间，可用来实现缓存淘汰策略；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;OBJECT IDLETIME&lt;&#x2F;code&gt;命令可以打印出某个键的空闲时间，该事件由 &lt;code&gt;lru&lt;&#x2F;code&gt;计算而来。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;OBJECT IDELTIME命令的实现是比较特殊的，通过该命令访问键时，不会修改其 &lt;code&gt;lru&lt;&#x2F;code&gt;属性。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-43&quot;&gt;对象的引用计数&lt;a class=&quot;zola-anchor&quot; href=&quot;#-43&quot; aria-label=&quot;Anchor link for: -43&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;refcount&lt;&#x2F;code&gt;属性用于记录对象的引用次数：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在创建一个新对象时，引用计数的值会被初始化为1&lt;&#x2F;li&gt;
&lt;li&gt;当对象被一个新程序使用时，它的引用计数值为加1&lt;&#x2F;li&gt;
&lt;li&gt;当对象不再被某个程序使用时，它的引用计数会减1&lt;&#x2F;li&gt;
&lt;li&gt;当对象的引用计数值变为0时，它所占用的内存空间将会被释放。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;对象的引用计数可用于实现对象的内存回收以及对象共享功能。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;会在初始化服务器时，创建一万个字符串对象，这些对象包含了从0到9999的所有整数值。当服务器需要用到值为0到9999的字符串对象时，就会使用这些共享对象，而不是创建新的对象。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-44&quot;&gt;Redis对象的类型与编码&lt;a class=&quot;zola-anchor&quot; href=&quot;#-44&quot; aria-label=&quot;Anchor link for: -44&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-45&quot;&gt;字符串&lt;a class=&quot;zola-anchor&quot; href=&quot;#-45&quot; aria-label=&quot;Anchor link for: -45&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7364565992217828706-8d503093.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;embstr&lt;&#x2F;code&gt;和 &lt;code&gt;raw&lt;&#x2F;code&gt;编码都采用 &lt;code&gt;SDS&lt;&#x2F;code&gt;来存储字符串。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;raw&lt;&#x2F;code&gt;编码会调用2次内存分配函数，分配两块内存空间，分别存储 &lt;code&gt;redisObject&lt;&#x2F;code&gt;和 &lt;code&gt;SDS&lt;&#x2F;code&gt;结构。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;embstr&lt;&#x2F;code&gt;编码只调用1次内存分配，分配一块内存空间，连续存储 &lt;code&gt;redisObject&lt;&#x2F;code&gt;和 &lt;code&gt;SDS&lt;&#x2F;code&gt;结构。&lt;&#x2F;li&gt;
&lt;li&gt;浮点数在 &lt;code&gt;redis&lt;&#x2F;code&gt;中也是作为字符串来存储的，在需要的时候，程序会将字符串值直接转换回浮点数。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;没有为 &lt;code&gt;embstr&lt;&#x2F;code&gt;编码的字符串提供修改函数，所以该编码的字符串实际是只读的，对 &lt;code&gt;embstr&lt;&#x2F;code&gt;编码的字符串执行修改时，程序会将字符串从 &lt;code&gt;embstr&lt;&#x2F;code&gt;转换为 &lt;code&gt;raw&lt;&#x2F;code&gt;，再执行修改操作。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%BC%96%E7%A0%81%E4%B8%8E%E5%AE%9E%E7%8E%B0.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-46&quot;&gt;哈希&lt;a class=&quot;zola-anchor&quot; href=&quot;#-46&quot; aria-label=&quot;Anchor link for: -46&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;哈希对象的编码可以是 &lt;code&gt;zipllist&lt;&#x2F;code&gt;或者 &lt;code&gt;hashtable&lt;&#x2F;code&gt;；&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;同时满足下面条件时，哈希对象采用 &lt;code&gt;ziplist&lt;&#x2F;code&gt;编码，否则采用 &lt;code&gt;hashtable&lt;&#x2F;code&gt;编码。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;哈希对象保存的所有键值对中的键和值，其字符串长度都小于64字节。&lt;&#x2F;li&gt;
&lt;li&gt;哈希对象保存的键值对数量小于512个。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;可以在 &lt;code&gt;redis&lt;&#x2F;code&gt;配置文件中通过下面的配置修改上述的触发条件。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;hash-max-ziplist-value
&lt;&#x2F;span&gt;&lt;span&gt;hash-max-ziplist-entries
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;ziplist编码采用压缩列表作为底层实现，hashtable编码采用字典作为底层实现。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E5%93%88%E5%B8%8C%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A0%81.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-47&quot;&gt;列表&lt;a class=&quot;zola-anchor&quot; href=&quot;#-47&quot; aria-label=&quot;Anchor link for: -47&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;在3.2版本之前，列表对象的编码可以是 &lt;code&gt;ziplist&lt;&#x2F;code&gt;或者 &lt;code&gt;linkedlist&lt;&#x2F;code&gt;；在同时满足下列条件时，列表对象采用 &lt;code&gt;ziplist&lt;&#x2F;code&gt;编码实现，否则采用 &lt;code&gt;linkedlist&lt;&#x2F;code&gt;编码。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;列表对象保存的所有字符串元素长度都小于64字节。&lt;&#x2F;li&gt;
&lt;li&gt;列表对象保存的元素数量小于512个。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;同样可以在 &lt;code&gt;redis&lt;&#x2F;code&gt;配置文件中通过下面的配置修改上述的触发条件&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;hash-max-ziplist-value
&lt;&#x2F;span&gt;&lt;span&gt;hash-max-ziplist-entries
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;从3.2开始，列表对象的编码升级为 &lt;code&gt;quicklist&lt;&#x2F;code&gt;；&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ziplist、linkedlist、quicklist编码分别采用压缩列表、双端链表、快速列表作为底层实现&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E5%88%97%E8%A1%A8%E7%BB%93%E6%9E%84%E4%B8%8E%E7%BC%96%E7%A0%81.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-48&quot;&gt;集合&lt;a class=&quot;zola-anchor&quot; href=&quot;#-48&quot; aria-label=&quot;Anchor link for: -48&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;集合对象的编码可以是 &lt;code&gt;intset&lt;&#x2F;code&gt;或者 &lt;code&gt;hashtable&lt;&#x2F;code&gt;；&lt;&#x2F;p&gt;
&lt;p&gt;同时满足下面条件时，集合对象采用 &lt;code&gt;intset&lt;&#x2F;code&gt;编码，否则采用 &lt;code&gt;hashtable&lt;&#x2F;code&gt;编码；&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;集合对象保存的元素都是整数值。&lt;&#x2F;li&gt;
&lt;li&gt;集合对象保存的元素不超过512个。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可以通过修改 &lt;code&gt;set-max-intset-entries&lt;&#x2F;code&gt;选项改变上述条件。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;intset编码采用整数集合作为底层实现，hashtable编码采用字典作为底层实现，字典的键存储字符串，字典的值全部为NULL&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-49&quot;&gt;有序集合&lt;a class=&quot;zola-anchor&quot; href=&quot;#-49&quot; aria-label=&quot;Anchor link for: -49&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;有序集合对象的编码可以时 &lt;code&gt;ziplist&lt;&#x2F;code&gt;或者 &lt;code&gt;skipllist&lt;&#x2F;code&gt;；&lt;&#x2F;p&gt;
&lt;p&gt;同时满足下面条件时使用 &lt;code&gt;ziplist&lt;&#x2F;code&gt;编码，否则使用 &lt;code&gt;skiplist&lt;&#x2F;code&gt;编码。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;有序集合保存的元素数量不超过128个。&lt;&#x2F;li&gt;
&lt;li&gt;有序集合保存的所有元素的成员长度都小于64字节。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;可以通过修改 &lt;code&gt;zset-max-ziplist-entries,zset-max-ziplist-value&lt;&#x2F;code&gt;改变上述条件。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ziplist编码底层采用压缩列表实现，skiplist底层采用zset结构实现&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span&gt;typeof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct&lt;&#x2F;span&gt;&lt;span&gt; zset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;字典，保存了从成员到分值的映射关系
&lt;&#x2F;span&gt;&lt;span&gt;    dict &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;dict;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;跳跃表，按分值由小到大保存所有集合元素
&lt;&#x2F;span&gt;&lt;span&gt;    zskiplist &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;zsl;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;zset;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E9%9B%86%E5%90%88.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-50&quot;&gt;Redis的线程模型&lt;a class=&quot;zola-anchor&quot; href=&quot;#-50&quot; aria-label=&quot;Anchor link for: -50&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-51&quot;&gt;单线程的redis&lt;a class=&quot;zola-anchor&quot; href=&quot;#-51&quot; aria-label=&quot;Anchor link for: -51&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;是单线程的，主要是指 &lt;code&gt;redis&lt;&#x2F;code&gt;的网络IO和键值对读写是由一个线程来完成的。&lt;&#x2F;p&gt;
&lt;p&gt;而 &lt;code&gt;redis&lt;&#x2F;code&gt;的其他功能，比如持久化、异步删除、集群数据同步等，则是依赖其他线程来执行的。&lt;&#x2F;p&gt;
&lt;p&gt;所以说关于 &lt;code&gt;redis&lt;&#x2F;code&gt;是单线程这个问题不能一口咬定，需要了解它背后的原因。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;除了redis之外，像Nginx、Node.js也是单线程的，但他们也都是高性能的服务器。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-52&quot;&gt;为什么采用单线程&lt;a class=&quot;zola-anchor&quot; href=&quot;#-52&quot; aria-label=&quot;Anchor link for: -52&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;单线程的优势：
&lt;ul&gt;
&lt;li&gt;单线程可以简化数据结构和算法的实现。&lt;&#x2F;li&gt;
&lt;li&gt;对于服务器端程序来说，线程切换和锁通常是性能杀手，而单线程避免了线程切换和竞争所产生的消耗。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;单线程的劣势：
&lt;ul&gt;
&lt;li&gt;如果某个命令执行时间过长，会造成其他命令的阻塞，对于redis这种高性能的服务器来说这是致命的。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;的大部分操作是在内存上完成的，这是它实现高性能的一个重要原因，其次，它还采用了IO多路复用的机制，使得它在网络IO操作中能并发的处理大量的客户端请求，实现高吞吐率。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;redis单线程IO模型示意图&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3366639650907358298-92951f51.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;由图可知，它的单线程主要是指在&lt;strong&gt;文件事件分派器&lt;&#x2F;strong&gt;这部分的实现上。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-53&quot;&gt;高级数据结构和功能&lt;a class=&quot;zola-anchor&quot; href=&quot;#-53&quot; aria-label=&quot;Anchor link for: -53&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-54&quot;&gt;Bitmap&lt;a class=&quot;zola-anchor&quot; href=&quot;#-54&quot; aria-label=&quot;Anchor link for: -54&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Bitmap%E4%BD%8D%E5%9B%BE.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-55&quot;&gt;基本概念&lt;a class=&quot;zola-anchor&quot; href=&quot;#-55&quot; aria-label=&quot;Anchor link for: -55&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Bitmap&lt;&#x2F;code&gt;本身不是一种数据类型，它实际上就是前面学过的字符串，但他可以对字符串进行按位的操作。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;为&lt;code&gt;Bitmap&lt;&#x2F;code&gt;单独提供了一套命令，所以使用&lt;code&gt;Bitmap&lt;&#x2F;code&gt;与使用普通字符串的方式不同。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;可以把&lt;&#x2F;strong&gt;&lt;code&gt;Bitmap&lt;&#x2F;code&gt;看作是一个以位为单位的数组，数组的每个单元只能存储0和1，数组的下标叫做偏移量。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220422160439.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;当用户执行命令尝试对一个&lt;&#x2F;strong&gt;&lt;code&gt;bitmap&lt;&#x2F;code&gt;进行设置的时候，如果该&lt;code&gt;bitmap&lt;&#x2F;code&gt;不存在，或者大小不满足用户想要执行的设置操作，&lt;code&gt;redis&lt;&#x2F;code&gt;则会对被设置的&lt;code&gt;bitmap&lt;&#x2F;code&gt;进行扩展，使得&lt;code&gt;bitmap&lt;&#x2F;code&gt;可以满足用户的设置需求。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;对&lt;code&gt;bitmap&lt;&#x2F;code&gt;的扩展操作是以字节为单位进行的，所以扩展后的位图包含的二进制数量可能会比用户需要的稍微多一些，并且在扩展&lt;code&gt;bitmap&lt;&#x2F;code&gt;的同时，&lt;code&gt;redis&lt;&#x2F;code&gt;还会将所有为未被设置的二进制的值初始化为0。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-56&quot;&gt;常用命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-56&quot; aria-label=&quot;Anchor link for: -56&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;setbit命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;给bit设置键值对，注意bit是按位操作的，设置的时候是通过索引将指定位设置为1或者0.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 假设我们将下面的数据的末位都设置为1
&lt;&#x2F;span&gt;&lt;span&gt;00000001 00000001 00000001 00000001
&lt;&#x2F;span&gt;&lt;span&gt;setbit bitmap1 7 1
&lt;&#x2F;span&gt;&lt;span&gt;setbit bitmap1 15 1
&lt;&#x2F;span&gt;&lt;span&gt;setbit bitmap1 23 1
&lt;&#x2F;span&gt;&lt;span&gt;setbit bitmap1 31 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一个字节等于8位。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-6349124328389551436-f51bd740.png&quot; alt=&quot;image-20220422162449303&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;getbit命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;一般情况下，有set，自然有get,该命令用来获取指定索引处的值。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 获取索引为 7 15 4的值
&lt;&#x2F;span&gt;&lt;span&gt;getbit bitmap1 7
&lt;&#x2F;span&gt;&lt;span&gt;getbit bitmap1 15
&lt;&#x2F;span&gt;&lt;span&gt;getbit bitmap1 4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2268966638942972624-e0ecbe62.png&quot; alt=&quot;image-20220422162836255&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bitcount命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;用来统计指定key上1的个数，也可以统计指定的范围。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 统计bitmap1上1的个数
&lt;&#x2F;span&gt;&lt;span&gt;bitcount bitmap1
&lt;&#x2F;span&gt;&lt;span&gt;# 统计bitmap1上 0到1位置的1的个数，
&lt;&#x2F;span&gt;&lt;span&gt;bitcount bitmap1 0 1
&lt;&#x2F;span&gt;&lt;span&gt;# 统计bitmap1上倒数第一和第2个字节上1的个数
&lt;&#x2F;span&gt;&lt;span&gt;bitcount bitmap1 -2 -1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16060851603572119256-1e672969.png&quot; alt=&quot;image-20220422164018148&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;解释一下，这里的索引指是以字节为单位的，某个字节上值为1的位的个数。而不是每个字节位的索引。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bitpos命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;返回字符串中设置为 1 或 0 的第一位的位置。注意是第一个位置。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;BITPOS key bit [ start [ end [ BYTE | BIT]]]
&lt;&#x2F;span&gt;&lt;span&gt;# 返回整个bitmap1上值位为1的索引位置。
&lt;&#x2F;span&gt;&lt;span&gt;bitpos bitmap1 1
&lt;&#x2F;span&gt;&lt;span&gt;# 返回bitmap1上1到3范围内位值为1的位置
&lt;&#x2F;span&gt;&lt;span&gt;# 比如00000001 00000001 00000001 00000001中以字节为单位的索引分别是0 1 2 3
&lt;&#x2F;span&gt;&lt;span&gt;bitpos bitmap1 1 1 3
&lt;&#x2F;span&gt;&lt;span&gt;# 上面命令返回00000001 00000001 00000001中首个出现1的位置，那就是字节单位为1-3中位为单位索引的第15也即是第二个00000001中1的索引位置，即15
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12834835531903324739-c2d239cf.png&quot; alt=&quot;image-20220422164647801&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;bitop命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在多个键（包含字符串值）之间进行位操作，并将结果存储在目标键中。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;BITOP operation destkey key [key ...]
&lt;&#x2F;span&gt;&lt;span&gt;# 将bitmap1和bitmap2进行或运算之后的结果存储在bitmap3中。
&lt;&#x2F;span&gt;&lt;span&gt;bitop or bitmap3 bitmap1 bitmap2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;bitmap1: 00000001 00000001 00000001 00000001&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;bitmap2: 10000000 10000000 10000000 10000000&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;结果:&lt;&#x2F;strong&gt;		&lt;strong&gt;10000001 10000001  10000001 10000001&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5166212872315137887-0648b8fc.png&quot; alt=&quot;image-20220422170805331&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;其他如按位与，非，异或可以去官方文档查看。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-57&quot;&gt;应用场景据举例&lt;a class=&quot;zola-anchor&quot; href=&quot;#-57&quot; aria-label=&quot;Anchor link for: -57&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;记录用户一年的签到数据：&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;示例：user:9527:2022-&amp;gt;00101101 10010001 ……..&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;说明：从第一天开始，以天数为索引记录，0表示未签，1表示已签，记录一年的数据只需要368位(64字节)即可。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-58&quot;&gt;HyperLogLog&lt;a class=&quot;zola-anchor&quot; href=&quot;#-58&quot; aria-label=&quot;Anchor link for: -58&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;HyperLogLog.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-59&quot;&gt;简介&lt;a class=&quot;zola-anchor&quot; href=&quot;#-59&quot; aria-label=&quot;Anchor link for: -59&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;同样，它也不是新的数据类型，本质还是字符串类型。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;HyperLogLog&lt;&#x2F;code&gt;是一个专门为了计算集合的基数而创建的概率算法，其优点在于它十分的节约内存空间；&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;只需要&lt;&#x2F;strong&gt;&lt;code&gt;12KB&lt;&#x2F;code&gt;的内存就可以对**2^{64}**个元素进行计数，其标准误差为&lt;code&gt;0.81%&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-60&quot;&gt;常用命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-60&quot; aria-label=&quot;Anchor link for: -60&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pfadd命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PFADD key [element [element …]]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;向指定key中添加一个或者多个元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 向hlll 中添加1  2 3
&lt;&#x2F;span&gt;&lt;span&gt;pfadd hlll 1 2 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pfcount命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;PFCOUNT key [key …]&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;返回指定key中元素的统计个数，如果key不存在返回0.注意返回的结果是去重后的计数。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 统计key为hlll的基数
&lt;&#x2F;span&gt;&lt;span&gt;pfcount hlll
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pfmerge命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PFMERGE destkey sourcekey [sourcekey …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;将多个key值合并到指定的key中。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220423173316.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-61&quot;&gt;HyperLogLog的使用场景&lt;a class=&quot;zola-anchor&quot; href=&quot;#-61&quot; aria-label=&quot;Anchor link for: -61&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;统计网站的独立访客（UV）：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;示例：uv:20200101 -&amp;gt; 1.1.1.101, 1.1.1.102, 1.1.1.103, 1.1.1.102, 1.1.1.103, …&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;说明：每当用户来访时，都通过HLL记录他的IP，可以统计出每个数据集的基数，也可以对多个数据集进行合并！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用set集合也可以实现同样的功能，但在内存的使用率上却不是一个等级的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;假设网站每天的UV为1000万。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220423151729.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;通过上表不难感受到，当时间达到一定程度时，对空间的需求差别是非常大的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-62&quot;&gt;GEO&lt;a class=&quot;zola-anchor&quot; href=&quot;#-62&quot; aria-label=&quot;Anchor link for: -62&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;GEO.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-63&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-63&quot; aria-label=&quot;Anchor link for: -63&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GEO&lt;&#x2F;code&gt;是&lt;code&gt;redis&lt;&#x2F;code&gt;在&lt;code&gt;3.2&lt;&#x2F;code&gt;版本中新增的功能，该功能允许用户将经纬度格式的地理坐标存储到redis中，并对这些坐标执行基于距离的计算以及范围查找等功能。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;为&lt;code&gt;GEO&lt;&#x2F;code&gt;功能提供了一系列的命令，通过这些命令可以实现：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将位置的名称以及他们的经纬度存储到集合中。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;根据给定的位置名称，从位置集合中抽取与之对应的经纬度。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;计算两个位置之间的直线距离。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;根据给定的经纬度或者位置，找出以该位置为中心，指定半径范围内的其他位置。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;GEO不是一种新的数据类型，它的本质其实还是有序集合。通过GEO命令存储地理数据时，redis会将经纬度转换成一个geohash值，并以该值为分数，以位置名称为成员，将数据存入一个有序集合中。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-64&quot;&gt;常用命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-64&quot; aria-label=&quot;Anchor link for: -64&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;约定&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为了方便演示，下面的地理坐标均为浙江省杭州市的真实经纬度数据，演示将使用这些准备好的数据进行。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 杭州西湖
&lt;&#x2F;span&gt;&lt;span&gt;120.12199 30.226122 xihu
&lt;&#x2F;span&gt;&lt;span&gt;# 余杭区
&lt;&#x2F;span&gt;&lt;span&gt;119.987408 30.275946 yuhang
&lt;&#x2F;span&gt;&lt;span&gt;# 临安区
&lt;&#x2F;span&gt;&lt;span&gt;119.719616 30.24036 linan
&lt;&#x2F;span&gt;&lt;span&gt;# 萧山区
&lt;&#x2F;span&gt;&lt;span&gt;120.263439 30.184583 xiaoshan
&lt;&#x2F;span&gt;&lt;span&gt;# 临平区
&lt;&#x2F;span&gt;&lt;span&gt;120.300518 30.422897 linping
&lt;&#x2F;span&gt;&lt;span&gt;# 柯桥区
&lt;&#x2F;span&gt;&lt;span&gt;120.300518 30.413423 keqiao
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;坐标数据可以去这里获取&lt;&#x2F;strong&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.bejson.com&#x2F;convert&#x2F;map&#x2F;&quot;&gt;地理经纬度查询&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;geoadd命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GEOADD key [ NX | XX] [CH] longitude latitude member [ longitude latitude member …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;向集合中添加一个或多个经纬度地理数据。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 以杭州为key，将上述几个坐标添加到集合中。
&lt;&#x2F;span&gt;&lt;span&gt;geoadd hangzhou 经度 纬度 对应的地名
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424163814.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;geopos命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GEOPOS key member [member …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;返回指定key的地名的经纬度数据。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 返回上述地理位置的全部经纬度数据
&lt;&#x2F;span&gt;&lt;span&gt;geopos hangzhou xihu yuhang linan xiaoshan linping keqiao
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424164644.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;geodist命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GEODIST key member1 member2 [ M | KM | FT | MI]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;返回两个地名之间的距离，可以指定距离的单位。可以指定距离单位米、千米、英里、英尺&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 返回西湖到萧山之间的距离,默认单位为米
&lt;&#x2F;span&gt;&lt;span&gt;geodist hangzhou xihu xiaoshan
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424170009.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;georadius命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GEORADIUS key longitude latitude radius M | KM | FT | MI [WITHCOORD] [WITHDIST] [WITHHASH] [ COUNT count [ANY]] [ ASC | DESC] [STORE key] [STOREDIST key]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;返回指定位置半径范围内的地名。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 返回西湖200千米半径范围内的其他地名
&lt;&#x2F;span&gt;&lt;span&gt;georadius hangzhou 120.12199 30.226122 200 km 
&lt;&#x2F;span&gt;&lt;span&gt;# 指定返回值中携带对应地名的经纬度数据
&lt;&#x2F;span&gt;&lt;span&gt;georadius hangzhou 120.12199 30.226122 200 km  withcoord 
&lt;&#x2F;span&gt;&lt;span&gt;# 指定返回值中携带对应地名的经纬度数据并限定返回的数据条数为3
&lt;&#x2F;span&gt;&lt;span&gt;georadius hangzhou 120.12199 30.226122 200 km  withcoord count 3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424171403.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424171417.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424171912.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;georadiusbymember命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GEORADIUSBYMEMBER key member radius M | KM | FT | MI [WITHCOORD] [WITHDIST] [WITHHASH] [ COUNT count [ANY]] [ ASC | DESC] [STORE key] [STOREDIST key]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;命令和上一个命令的作用是一样的，不过这是通过指定地名进行返回，而上一个命令是通过指定经纬度返回。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424172326.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;geohash命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;GEOHASH key member [member …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;返回指定位置的地理经纬度的哈希值。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424172502.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;既然geo的本质是有序集合，那么使用有序集合的命令也可以操作geo数据。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424172926.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-65&quot;&gt;发布订阅&lt;a class=&quot;zola-anchor&quot; href=&quot;#-65&quot; aria-label=&quot;Anchor link for: -65&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-66&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-66&quot; aria-label=&quot;Anchor link for: -66&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;提供了基于&lt;strong&gt;发布&#x2F;订阅&lt;&#x2F;strong&gt;模式的消息机制，此模式下，消息的发布者和订阅者不直接通信，发布者只是将消息发布到指定的频道上，而订阅该频道的每个客户端都可以接收到这个消息；&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;当客户端新订阅某个频道时，它无法接收该频道之前的消息，因为&lt;&#x2F;strong&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;不会对发布的消息进行持久化。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-67&quot;&gt;常用命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-67&quot; aria-label=&quot;Anchor link for: -67&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为了方便演示，我将同时打开多个(3个)&lt;&#x2F;strong&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;客户端，将当前的客户端作为发布者，其他三个客户端作为订阅者，演示发布&#x2F;订阅的基本使用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;publish命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PUBLISH channel message&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;发布者用来发布一个消息，会自动创建消息的主题。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 在Java的新闻主题中发布一条消息
&lt;&#x2F;span&gt;&lt;span&gt;publish news:java &amp;quot;hello java&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# 在js的新闻主题中发布一条消息
&lt;&#x2F;span&gt;&lt;span&gt;publish news:js &amp;quot;javascript&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424194249.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;subscribe命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;SUBSCRIBE pattern [ pattern …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;用在订阅端订阅发布者的内容，完成订阅之后会自动进入阻塞状态，等待接收发布者发布的消息。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 在客户端1中订阅上面发布的Java主题消息。
&lt;&#x2F;span&gt;&lt;span&gt;subscribe news:java
&lt;&#x2F;span&gt;&lt;span&gt;# 在客户端2中订阅上面发布的js主题消息。
&lt;&#x2F;span&gt;&lt;span&gt;subscribe news:java
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424195046.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;接下来我们在发布者客户端发一条消息试试。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;publish news:java &amp;quot;This is java&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;可以看到，当我发布成功之后，有订阅的两个客户端会收到消息提示。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424195232.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424195349.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在订阅者中的&lt;&#x2F;strong&gt;&lt;code&gt;(Integer) 1&lt;&#x2F;code&gt;代表该客户端的订阅数。而在发布者中这代表收到该条发布消息的客户端数量。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;psubscribe命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PSUBSCRIBE pattern [ pattern …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;和上一个命令类似，也是用在客户端订阅中，不同的是，该命令支持模式匹配订阅，可以通过通配符的形式同时订阅多个主题的消息。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 在客户端3中通过模式匹配同时订阅前面的两个主题(java和js)主题
&lt;&#x2F;span&gt;&lt;span&gt;psubscribe news:*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424200155.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;此时我们通过发布者客户端发布的消息在客户端3中都能收到。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424200317.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pubsub命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;PUBSUB CHANNELS [pattern]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;返回主题列表。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 看看与news相关的订阅有哪些。
&lt;&#x2F;span&gt;&lt;span&gt;pubsub channels newws*
&lt;&#x2F;span&gt;&lt;span&gt;# numsub 参数，返回指定主题被订阅数（非模式订阅）
&lt;&#x2F;span&gt;&lt;span&gt;# numpat 参数 返回指定主题被订阅数，模式订阅
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220424203814.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;unsubscribe命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;UNSUBSCRIBE [channel [channel …]]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;取消订阅。该命令某些客户端中无法生效。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 取消订阅news:js
&lt;&#x2F;span&gt;&lt;span&gt;unsubscribe news:js
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;-68&quot;&gt;应用场景&lt;a class=&quot;zola-anchor&quot; href=&quot;#-68&quot; aria-label=&quot;Anchor link for: -68&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;广播系统&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;用户订阅某项服务，当该服务的作者发布内容时，这些订阅的用户可以得到即时的消息通知。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;消息队列&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;可以用于多个业务&#x2F;系统之间的通信，如A系统处理了某项业务，可以通过发布消息的方式通知B系统。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-69&quot;&gt;Stream(1)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-69&quot; aria-label=&quot;Anchor link for: -69&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Redis%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-70&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-70&quot; aria-label=&quot;Anchor link for: -70&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stream是Redis 5.0新增加的数据类型，它是一个功能强大的、支持多播的、可持久化的消息队列。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220425181450.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在Stream出现之前，redis中可以用来实现消息队列的方式主要有：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;列表&lt;&#x2F;strong&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;优点：可以快速的将新消息追到列表的尾部并且支持阻塞模式。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缺点：如果要查找包含指定数据的元素，或者进行范围查找，需要遍历整个列表。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;有序集合&lt;&#x2F;strong&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;优点：可以有效的进行范围查找，适合实现延时队列。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缺点：不支持阻塞模式。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;发布订阅：&lt;&#x2F;strong&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;优点：可以将消息发送给多个客户端，并且支持阻塞模式。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;缺点：发送即忘的策略会导致离线的客户端丢失消息，所以无法实现可靠的消息队列。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;-71&quot;&gt;Stream的特征&lt;a class=&quot;zola-anchor&quot; href=&quot;#-71&quot; aria-label=&quot;Anchor link for: -71&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Stream&lt;&#x2F;code&gt;是一个消息链表，它将所有加入的消息都串接起来，每个消息都有一个唯一的ID&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Stream&lt;&#x2F;code&gt;中的消息可以持久化，&lt;code&gt;Redis&lt;&#x2F;code&gt;重启之后消息不会丢失。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Stream&lt;&#x2F;code&gt;可以挂载多个消费组，每个消费都有一个游标，用于标识当前消费组的消费进度。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Stream&lt;&#x2F;code&gt;中消费组的状态是独立的，互相不影受响，即同一流内的消息会被多个消费组共享。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;消费组可以挂载多个消费者，这些消费者之间是竞争关系，任意消费者处理了消息都会使得游标向后移动。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;消费者内部有个状态变量&lt;&#x2F;strong&gt;&lt;code&gt;PEL&lt;&#x2F;code&gt;(&lt;code&gt;Pending Entries List&lt;&#x2F;code&gt;),它记录了当前已被客户端读取的消息。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;-72&quot;&gt;常用命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-72&quot; aria-label=&quot;Anchor link for: -72&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;演示之前，先开启多个客户端，方便演示生产者&#x2F;消费者模式。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xadd命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XADD key [NOMKSTREAM] [ MAXLEN | MINID [ = | ~] threshold [LIMIT count]] * | id field value [ field value …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;往Stream流里添加一条或者多条消息。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 向流中写入用户信息。
&lt;&#x2F;span&gt;&lt;span&gt;xadd mystream * name lisi age 23 .....
&lt;&#x2F;span&gt;&lt;span&gt;# 这里的*代表该消息的ID我使用系统自己生成的ID，它的格式是：时间戳-序号
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426144858.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xlen命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XLEN key&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;返回指定流中的消息数。若指定的key不存在返回0&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426145448.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xrange命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XRANGE key start end [COUNT count]&lt;&#x2F;p&gt;
&lt;p&gt;XREVRANGE key end start [COUNT count]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;返回指定范围内的消息数据。默认是由小到大的顺序。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 查看刚刚添加的所有消息数据
&lt;&#x2F;span&gt;&lt;span&gt;xrange mystream - + 
&lt;&#x2F;span&gt;&lt;span&gt;# - ,+ 用来指定开始到结束的范围内的全部数据。
&lt;&#x2F;span&gt;&lt;span&gt;# 也可以使用count 参数限定返回结果的条数。
&lt;&#x2F;span&gt;&lt;span&gt;# XREVRANGE 则是倒序返回，用法一样。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426150502.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426150748.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xdel命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XDEL key id [id …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;删除指定节点消息，通过ID指定。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426151112.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xtrim命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XTRIM key MAXLEN | MINID [ = | ~] threshold [LIMIT count]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;修剪消息流，指定删除超出某个范围之外的数据。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 保留5个以内的数据，表示超出5个的都被删除
&lt;&#x2F;span&gt;&lt;span&gt;xtrim mystream maxlen 5
&lt;&#x2F;span&gt;&lt;span&gt;# 新添加的消息会被追到尾部，同时检查如果数量大于5的部分将会被删除
&lt;&#x2F;span&gt;&lt;span&gt;xadd mystream maxlen 5 * name lisi age 99
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;下面切到另一个客户端，演示消费者命令。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xread命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key …] id [id …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;消费指定一个或者多个流中消息数据。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;xread streams mystream 0-0
&lt;&#x2F;span&gt;&lt;span&gt;# streams表示同时消费多个流
&lt;&#x2F;span&gt;&lt;span&gt;# 0-0表示从每个消息流的起始位置开始消费
&lt;&#x2F;span&gt;&lt;span&gt;# 你也可以根据实际需求消费指定数量的消息
&lt;&#x2F;span&gt;&lt;span&gt;# 以阻塞模式进行消费
&lt;&#x2F;span&gt;&lt;span&gt;xread block 10000 count 3 streams mystream 0-0
&lt;&#x2F;span&gt;&lt;span&gt;# 上面的命令如果再次执行消费的话，ID不能再使用0-0开始，而是之前命令返回的最后一条消息的ID
&lt;&#x2F;span&gt;&lt;span&gt;# 以此类推，如果后面没有消息可以继续消费，该方法会进入指定时间内的阻塞状态。超时退出，否则如果生产者有数据，则会立即消费
&lt;&#x2F;span&gt;&lt;span&gt;xread block 10000 count 3 streams mystream $
&lt;&#x2F;span&gt;&lt;span&gt;# 上面的命令只会消费指定流中新增的消息，之前的消息不会被消费
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426152427.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426152628.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;以上就是生产者和单个消费者模式的全部演示内容，其余内容将在后半部分进行演示。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-73&quot;&gt;Stream(2)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-73&quot; aria-label=&quot;Anchor link for: -73&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-74&quot;&gt;消费组&lt;a class=&quot;zola-anchor&quot; href=&quot;#-74&quot; aria-label=&quot;Anchor link for: -74&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;演示以消费组的方式进行消费。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xgroup create 命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XGROUP CREATE key groupname id | $ [MKSTREAM] [ENTRIESREAD entries_read]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;创建消费组。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 创建消费组g1，消费mystrean流中的消息，从头开始消费
&lt;&#x2F;span&gt;&lt;span&gt;xgroup create mystream g1 0
&lt;&#x2F;span&gt;&lt;span&gt;# 创建消费组g2，消费mystrean流中的消息，从尾开始消费
&lt;&#x2F;span&gt;&lt;span&gt;xgroup create mystream g1 $
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xinfo stream命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XINFO STREAM key [FULL [COUNT count]]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;返回指定流的具体信息。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426155038.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xinfo groups 命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;返回指定流中消费组的信息。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426155234.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xinfo consumers命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;返回指定流中消费组中消费者的信息。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xpending命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XPENDING key group [ [IDLE min-idle-time] start end count [consumer]]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;查看指定消费组中待处理的消息。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426155657.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;以上命令全部在生产者客户端使用。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;xreadgroup命令&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds] [NOACK] STREAMS key [key …] id [id …]&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;以消费组的模式进行消费。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# c1表示组g1中的一个消费者&amp;gt;表示从指定流中的头部开始消费
&lt;&#x2F;span&gt;&lt;span&gt;xreadgroup group g1 c1 count 1 block 10000 streams mystream &amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426160528.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;关于消费者2的方式是类似的，不过它只能消费尾部的消息，在阻塞时间内，我们可以在生产者端发送一条消息，消费者会自动消费。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-75&quot;&gt;Pipeline&lt;a class=&quot;zola-anchor&quot; href=&quot;#-75&quot; aria-label=&quot;Anchor link for: -75&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-76&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-76&quot; aria-label=&quot;Anchor link for: -76&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;客户端执行一条命令分为四个步骤：发送命令、命令排队、命令执行、返回结果。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;其中第一步和第四步称为&lt;&#x2F;strong&gt;&lt;code&gt;Round Trip Time(RTT)&lt;&#x2F;code&gt;,即往返时间。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;提供了批量操作命令（如mget,mset等），可以有效的节约RTT。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;但大部分命令是不支持批量的，若要执行N次这样的命令，则需要消耗N次RTT。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;为了改善上面的问题，使用Pipeline（流水线），它可以有效的减少RTT。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;流水线允许客户端把任意多条&lt;&#x2F;strong&gt;&lt;code&gt;redis&lt;&#x2F;code&gt;命令打包在一起，然后一次性的将他们发送给服务器。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;服务器会将流水线包含的所有的命令处理之后，一次性的将他们的执行结果返回给客户端。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426171137.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Pipeline和批量命令的对比&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;批量命令是原子性的，而流水线不支持。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;批量命令是一个命令对应多个key,流水线则支持多个命令。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;批量命令是redis服务端支持的，而流水线需要服务端和客户端共同支持。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;每次封装的流水线命令不宜过多，否则会增加客户端的等待时间，也会造成一定的网络阻塞。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;建议将一次打包的大量命令拆分为多个流水线来实现。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-77&quot;&gt;基本演示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-77&quot; aria-label=&quot;Anchor link for: -77&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;演示一条简单的流水线命令。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;echo -en &amp;#39;*3\r\ns3\r\nset\r\ns5\r\ncount\r\ns3\r\n100\r\n*2\r\ns4\r\nincr\r\ns5\r\ncount\r\n&amp;#39; | redis-cli --piple -a 密码
&lt;&#x2F;span&gt;&lt;span&gt;# 就是将key为ncount的值设置为100并自增1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意该命令不能在客户端登录状态下执行，必须退出该状态执行之后再登录查看执行结果。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-78&quot;&gt;事务&lt;a class=&quot;zola-anchor&quot; href=&quot;#-78&quot; aria-label=&quot;Anchor link for: -78&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;%E4%BA%8B%E5%8A%A1.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-79&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-79&quot; aria-label=&quot;Anchor link for: -79&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;提供了简单的事务功能，该功能主要由&lt;code&gt;multi&lt;&#x2F;code&gt;和&lt;code&gt;exec&lt;&#x2F;code&gt;命令实现：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;multi&lt;&#x2F;code&gt;命令代表事务的开始，&lt;code&gt;exec&lt;&#x2F;code&gt;命令代表事务的结束，他们之间按顺序执行。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;当客户端执行&lt;&#x2F;strong&gt;&lt;code&gt;multi&lt;&#x2F;code&gt;命令之后，他就进入了事务模式，这时用户输入所有命令会按顺序放入一个事务队列中。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;当客户端执行&lt;&#x2F;strong&gt;&lt;code&gt;exec&lt;&#x2F;code&gt;命令之后，它才开始执行当前事务，执行成功后它会按照命令入队顺序返回各个命令执行的结果。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;若要取消事务，使用&lt;&#x2F;strong&gt;&lt;code&gt;discard&lt;&#x2F;code&gt;代替&lt;code&gt;exec&lt;&#x2F;code&gt;命令即可，它会清空事务队列中已有的命令，并让客户端退出事务模式。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么说&lt;&#x2F;strong&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;提供是简单事务功能？&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;redis事务不支持回滚。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;redis事务总是支持&lt;&#x2F;strong&gt;&lt;code&gt;ACID&lt;&#x2F;code&gt;(原子性、一致性、隔离性、持久性)中的&lt;code&gt;ACI&lt;&#x2F;code&gt;特性，当它运行在特定的持久化模式下时，也支持&lt;code&gt;D&lt;&#x2F;code&gt;特性。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-80&quot;&gt;带乐观锁的事务&lt;a class=&quot;zola-anchor&quot; href=&quot;#-80&quot; aria-label=&quot;Anchor link for: -80&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;很多时候，要确保事务中的数据没有被其他客户端修改才执行该事务。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;提供了&lt;code&gt;watch&lt;&#x2F;code&gt;命令来解决这类问题，这是一种乐观锁的机制。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;客户端通过&lt;&#x2F;strong&gt;&lt;code&gt;watch&lt;&#x2F;code&gt;命令，要求服务器对一个或多个key进行监视，如果在客户端执行事务之前，这些key发生了变化，则服务器将拒绝执行客户端提交的事务，并向它返回一个空值。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;-81&quot;&gt;命令演示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-81&quot; aria-label=&quot;Anchor link for: -81&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3243124093778569358-85ba9d91.png&quot; alt=&quot;image-20220426192238792&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-82&quot;&gt;Lua脚本&lt;a class=&quot;zola-anchor&quot; href=&quot;#-82&quot; aria-label=&quot;Anchor link for: -82&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-83&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-83&quot; aria-label=&quot;Anchor link for: -83&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Lua语言是在1993年由巴西一个大学研究小组发明的，其设计的目标是作为嵌入式持续移植到其他应用程序，由C语言实现，虽然简单小巧，但是功能强大，很多应用都选择它作为脚本语言，尤其是在游戏领域。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.lua.org&quot;&gt;Lua官网&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;redis从2.6版本开始引入了Lua脚本，很方便的对redis服务器的功能进行了扩展：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;redis服务器内置了Lua解释器，可以直接使用Lua脚本。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Lua脚本可以直接调用redis命令，并使用Lua语言及其内置的函数处理命令的结果。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;redis服务器在执行Lua脚本的过程中，不会执行其他客户端发送的命令或者脚本，执行过程是原子性的。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-84&quot;&gt;使用介绍&lt;a class=&quot;zola-anchor&quot; href=&quot;#-84&quot; aria-label=&quot;Anchor link for: -84&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;EVAL script numkeys key [key ...] arg [arg ...]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;**script参数用于传递脚本本身； **&lt;&#x2F;li&gt;
&lt;li&gt;**numkeys参数用于指定脚本需要处理的键的数量； **&lt;&#x2F;li&gt;
&lt;li&gt;**参数key可以是任意多个，用来指定被脚本处理的键，在脚本中通过KEYS数组来访问这些参数key； **&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;参数arg可以是任意多个，用来指定传递给脚本的附加参数，在脚本中通过ARGV数组来访问这些参数arg。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;SCRIPT LOAD script&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;EVEALSHA sha1 numkeys key [key….] arg [arg…]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;SCRIPT LOAD命令用来将指定的脚本解释器存在服务器上，并返回对应的SHA1校验和。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;EVEALSHA命令用来执行已被缓存的脚本，它后面的sha1参数是脚本对应的SHA1校验和。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在Lua脚本中执行Redis命令(command-命令名称，省略号-命令参数): redis.call(command, …), redis.pcall(command, …) 二者唯一的区别是对错误的处理方式不同，前者在命令出错时会返回一个错误， 后者会将错误封装起来，返回一个表示错误的Lua表格。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-85&quot;&gt;管理脚本&lt;a class=&quot;zola-anchor&quot; href=&quot;#-85&quot; aria-label=&quot;Anchor link for: -85&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 将指定的脚本缓存到redis服务器上。
&lt;&#x2F;span&gt;&lt;span&gt;SCRIPT LOAD script
&lt;&#x2F;span&gt;&lt;span&gt;# 检查校验和对应的脚本是否存在于redis服务器中。
&lt;&#x2F;span&gt;&lt;span&gt;SCRIPT EXISTS sha1 [sha1....]
&lt;&#x2F;span&gt;&lt;span&gt;# 移除所有已缓存的脚本
&lt;&#x2F;span&gt;&lt;span&gt;SCRIPT FLUSH
&lt;&#x2F;span&gt;&lt;span&gt;# 强制停止正在运行的脚本
&lt;&#x2F;span&gt;&lt;span&gt;SCRIPT KILL
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;lua-time-limit配置&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;该配置项定义了Lua脚本不受限制运行的时长，其默认值为5000； 2. 当脚本的运行时间超过该值时，向服务器发送请求的客户端将得到一个 错误的回复，提示用户可以使用SCRIPT KILL或SHUTDOWN NOSAVE 命令来终止脚本或者直接关闭服务器。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;SCRIPT KILL命令执行后&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;**如果正在运行的Lua脚本尚未执行过任何写命令，则服务器终止该脚本， 回到正常状态，继续处理客户端的请求； **&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;如果正在运行的Lua脚本已经执行过写命令，服务器不会直接终止脚本 并回到正常状态，这种情况下，用户只能通过SHUTDOWN NOSAVE命令， 在不持久化的情况下关闭服务器。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;-86&quot;&gt;脚本使用&lt;a class=&quot;zola-anchor&quot; href=&quot;#-86&quot; aria-label=&quot;Anchor link for: -86&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;演示一些简单的Lua脚本命令。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 打印一个字符串。
&lt;&#x2F;span&gt;&lt;span&gt;eval &amp;#39;return &amp;quot;Hello Lua!&amp;quot;&amp;#39; 0
&lt;&#x2F;span&gt;&lt;span&gt;# 向redis中添加一个set类型的键值对 Hello:Lua
&lt;&#x2F;span&gt;&lt;span&gt;eval &amp;#39;redis.call(&amp;quot;set&amp;quot;,KEYS[1],ARGV[1])&amp;#39; 1 Hello Lua
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;命令中，我们通过&lt;&#x2F;strong&gt;&lt;code&gt;redis.call()&lt;&#x2F;code&gt;来接收redis命令。“set”表示存入一个字符串，键值对的具体内容通过参数的形式传入，而不是写死。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;所以后的&lt;&#x2F;strong&gt;&lt;code&gt;KEYS[1],ARGV[1]&lt;&#x2F;code&gt;代表从后面&lt;code&gt;Hello Lua&lt;&#x2F;code&gt;分别取第一个值就是对应的key和value的值，Lua索引从1开始。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220428154547.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 使用for循环向set集合中512个添加数据
&lt;&#x2F;span&gt;&lt;span&gt;eval &amp;#39;for i=1,512 do redis.call(&amp;quot;sadd&amp;quot;,KEYS[1],i) end&amp;#39; 1 test:set:1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220428160030.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 缓存脚本
&lt;&#x2F;span&gt;&lt;span&gt;script load &amp;#39;for i=1,512 do redis.call(&amp;quot;sadd&amp;quot;,KEYS[1],i) end&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;# 加载脚本
&lt;&#x2F;span&gt;&lt;span&gt;evalsha &amp;quot;f1b96e57574c72649eda263530f0ae2215313f67&amp;quot; 1 test:set:2
&lt;&#x2F;span&gt;&lt;span&gt;# 检查脚本是否存在
&lt;&#x2F;span&gt;&lt;span&gt;script exists &amp;quot;f1b96e57574c72649eda263530f0ae2215313f67&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;# 删除脚本
&lt;&#x2F;span&gt;&lt;span&gt;script flush
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220428163743.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-87&quot;&gt;模块&lt;a class=&quot;zola-anchor&quot; href=&quot;#-87&quot; aria-label=&quot;Anchor link for: -87&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-88&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-88&quot; aria-label=&quot;Anchor link for: -88&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Redis&lt;&#x2F;code&gt;提供了流水线、事务、Lua脚本，用于扩展redis服务器的功能，但这些功能都有一定的缺陷；&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;这些扩展方式都必须基于现有的数据结构或功能来实现，无法支持用户自定义的数据结构。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;他们在编程方面都比较复杂，比如涉及&lt;&#x2F;strong&gt;&lt;code&gt;watch&lt;&#x2F;code&gt;的命令就很容易出错，而Lua脚本又需要熟悉Lua语法。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;无论是事务还是Lua脚本，在性能方面都会有一些损耗，对于哪些性能敏感的用户来说无法满足。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;redis在4.0增加了“模块”这个功能，它允许开发者通过redis开放的一簇API，基于C语言（能与C交互的语言）在redis之上构建任意复杂的、全新的数据结构和功能。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;对于开发者，redis为他们提供了一个可以按需扩展redis的机会，对于普通用户，有了大量的第三方定制功能可以拿来使用，他们可以将redis应用在更多领域。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-89&quot;&gt;使用模块&lt;a class=&quot;zola-anchor&quot; href=&quot;#-89&quot; aria-label=&quot;Anchor link for: -89&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;开发模块：&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;官方API手册:&lt;&#x2F;strong&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;modules-api-ref&quot;&gt;https:&#x2F;&#x2F;redis.io&#x2F;topics&#x2F;modules-api-ref&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编译模块&lt;&#x2F;strong&gt;
&lt;strong&gt;不同模块的编译方式各有不同，大部分会在文档中做出详细的说明；&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;载入模块&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 配置文件
&lt;&#x2F;span&gt;&lt;span&gt;loadmodule &#x2F;path&#x2F;to&#x2F;mymodule.so
&lt;&#x2F;span&gt;&lt;span&gt;# 启动命令
&lt;&#x2F;span&gt;&lt;span&gt;redis-server loadmodule &#x2F;path&#x2F;to&#x2F;mymodule.so
&lt;&#x2F;span&gt;&lt;span&gt;# redsi命令
&lt;&#x2F;span&gt;&lt;span&gt;module load &#x2F;path&#x2F;to&#x2F;mymodule.so
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;-90&quot;&gt;Redis整合大全&lt;a class=&quot;zola-anchor&quot; href=&quot;#-90&quot; aria-label=&quot;Anchor link for: -90&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主要记录各种第三方与 &lt;code&gt;Redis&lt;&#x2F;code&gt;的整合使用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-91&quot;&gt;Spring整合Redis&lt;a class=&quot;zola-anchor&quot; href=&quot;#-91&quot; aria-label=&quot;Anchor link for: -91&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;spring&lt;&#x2F;code&gt;对 &lt;code&gt;redis&lt;&#x2F;code&gt;进行了比较完善的整合，使用方式也比较简单，主要分为三步。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;引入依赖&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-data-redis --&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;org.springframework.boot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;spring-boot-starter-data-redis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;2.6.3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置 &lt;code&gt;Redis&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;配置数据量参数&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;以 &lt;code&gt;application.properties&lt;&#x2F;code&gt;配置文件为例&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;pre data-lang=&quot;properties&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-properties &quot;&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 配置Redis：RedisProperties类
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;spring.redis.database&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;11
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;spring.redis.host&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;localhost
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;spring.redis.port &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;6379
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;编写配置类、构造 &lt;code&gt;RedisTemplate&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: Tisox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;1&#x2F;28 10:08
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @description: 编写redis配置类
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Configuration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;RedisConfig &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Bean
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RedisTemplate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;redisTemplate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RedisConnectionFactory &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*实例化*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RedisTemplate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; template &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new RedisTemplate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        template.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setConnectionFactory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;factory&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*设置key的序列化方式*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        template.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setKeySerializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RedisSerializer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*设置value的序列化方式*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        template.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setValueSerializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RedisSerializer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*设置哈希的key的序列化方式*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        template.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setHashKeySerializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RedisSerializer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*设置哈希的value的序列化方式*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        template.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setHashValueSerializer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RedisSerializer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        template.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;afterPropertiesSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; template;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;访问 &lt;code&gt;Redis&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;redisTemplate.opsForValue()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redisTemplate.opsForHash()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redisTemplate.opsForList()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redisTemplate.opsForSet()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;redisTemplate.opsForZset()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;官方文档&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;spring.io&#x2F;projects&#x2F;spring-data-redis&quot;&gt;SpringDataRedis&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18189869574447350559-029b1e56.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;演示demo&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: Tisox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;1&#x2F;28 10:16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @description: spring整合redis使用测试demo
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Slf4j
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RunWith&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SpringRunner&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SpringBootTest
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;ContextConfiguration&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;classes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CommunityApplication&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;RedisTests &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Autowired
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RedisTemplate &lt;&#x2F;span&gt;&lt;span&gt;redisTemplate;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;----------------------字符串--------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Test
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testStrings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; redisKey  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;test:count&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*存*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*取*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*加*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;increment&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*减*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;decrement&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;执行结果：
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;---------------------------哈希-------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;       @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Test
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testHashTests&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; redisKey &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;test:user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*存*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForHash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForHash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Tisox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*取*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForHash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForHash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;执行结果：
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;Tisox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;----------------------------列表--------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Test
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testLists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;test:ids&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*存*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;leftPush&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;101&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;leftPush&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;102&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;leftPush&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;103&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*取*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt; redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*pop*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;leftPop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;leftPop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;leftPop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;执行结果
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;3
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;103
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;[103, 102, 101]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;103
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;102
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;101
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;-----------------------集合-------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;      @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Test
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testSetson&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;test:language&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*存*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C++&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;甲骨文&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*取*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;members&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;执行结果
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;4
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;python
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;[甲骨文, C++, java]
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;------------------------有序集合--------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Test
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testSortedSets&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;test:students&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*存*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;王萌萌&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;赵诗倩&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;肖鹤云&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;78&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;张成&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;陶映红&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*取*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;zCard&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;score&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;肖鹤云&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reverseRank&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;李诗情&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;opsForZSet&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;removeRange&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisKey,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;执行结果
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;5
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;78.0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;[陶映红, 肖鹤云, 王萌萌, 李诗情]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;---------------------------------全局命令--------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;      @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Test
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;testKeys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;test:user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hasKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;test:user&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;))&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*设置过期时间：10秒*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;        redisTemplate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;expire&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;test:students&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;TimeUnit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;SECONDS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;执行结果:自测
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-92&quot;&gt;持久化与复制&lt;a class=&quot;zola-anchor&quot; href=&quot;#-92&quot; aria-label=&quot;Anchor link for: -92&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-93&quot;&gt;RDB持久化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-93&quot; aria-label=&quot;Anchor link for: -93&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;RDB%E6%8C%81%E4%B9%85%E5%8C%96.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-94&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-94&quot; aria-label=&quot;Anchor link for: -94&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;RDB(Redis Database)&lt;&#x2F;code&gt;是redis默认采用的持久化方式，它以快照的形式将进程数据持久化到硬盘中；&lt;code&gt;RDB&lt;&#x2F;code&gt;会创建一个经过压缩的二进制文件，文件以&lt;code&gt;.rdb&lt;&#x2F;code&gt;结尾。内部存储各个数据库的键值对数据等信息，它的触发方式有两种：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;手动触发:通过SAVE或BGSAVE命令触发RDB持久化操作，创建&lt;code&gt;.rdb&lt;&#x2F;code&gt;文件。&lt;&#x2F;li&gt;
&lt;li&gt;自动触发：通过配置选项，让服务器在满足条件时自动执行BGSAVE命令。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;-95&quot;&gt;命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-95&quot; aria-label=&quot;Anchor link for: -95&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SAVE命令&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;要求服务器以同步方式创建一个记录了当前所有数据库数据的&lt;code&gt;.rdb&lt;&#x2F;code&gt;文件。在SAVE命令执行期间，redis服务器将会阻塞，直到&lt;code&gt;.rdb&lt;&#x2F;code&gt;文件创建完毕为止。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;BGSAVE命令&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;该命令是异步版本的SAVE命令，它会使用redis服务器进程的子进程创建一个&lt;code&gt;.rdb&lt;&#x2F;code&gt;文件。该命令在创建子进程时会存在短暂的阻塞，之后服务器便可以继续处理其他客户端的请求。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;BGSAVE命令是对SAVE阻塞问题做的优化，redis内部所有涉及RBD的操作都采用BGSAVE的方式，而SAVE命令已经废弃。&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;-96&quot;&gt;配置选项&lt;a class=&quot;zola-anchor&quot; href=&quot;#-96&quot; aria-label=&quot;Anchor link for: -96&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;save&amp;lt;seconds&amp;gt; &amp;lt;changes&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;如果服务器在&lt;code&gt;seconds&lt;&#x2F;code&gt;秒内，对数据库总共执行了&lt;code&gt;changes&lt;&#x2F;code&gt;次修改，则自动执行一次BGSAVE命令；&lt;&#x2F;li&gt;
&lt;li&gt;可以同时配置多个save选项，当给定选项中的&lt;strong&gt;任意一个条件满足时&lt;&#x2F;strong&gt;，则自动执行一次BGSAVE命令；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;为了避免同时使用多个触发条件而导致服务器过于频繁地执行BGSAVE，redis服务器在每次成功创建.rdb文件之后，负责将自动触发BGSAVE命令的时间计数器以及修改计数器清零并重新计数，无论这个&lt;code&gt;.rdb&lt;&#x2F;code&gt;文件是由自动触发的BGSAVE创建还是由用户执行SAVE或BGSAVE命令创建，都是如此。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-97&quot;&gt;流程原理&lt;a class=&quot;zola-anchor&quot; href=&quot;#-97&quot; aria-label=&quot;Anchor link for: -97&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;BGSAVE的流程&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430112532.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;若父进程存在正在执行的子进程，直接返回；&lt;&#x2F;li&gt;
&lt;li&gt;fork操作执行过程中，父进程进入阻塞状态；&lt;&#x2F;li&gt;
&lt;li&gt;fork完成之后，父进程继续响应其他命令；&lt;&#x2F;li&gt;
&lt;li&gt;创建&lt;code&gt;.rdb&lt;&#x2F;code&gt;文件，并存储父进程内存中的数据；&lt;&#x2F;li&gt;
&lt;li&gt;父进程得到通知，以新文件替换旧的&lt;code&gt;.rdb&lt;&#x2F;code&gt;文件；&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BGSAVE的原理&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430113006.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;COW(Copy On Write)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;code&gt;Linux&lt;&#x2F;code&gt;系统中，可以通过&lt;code&gt;glibc&lt;&#x2F;code&gt;中的&lt;code&gt;fork&lt;&#x2F;code&gt;函数创建一个子进程，该进程和父进程完全相同，并且共享父进程的内存空间。&lt;&#x2F;p&gt;
&lt;p&gt;当父进程中任意进程需要修改内存中的数据时，会将对应的&lt;code&gt;page&lt;&#x2F;code&gt;进行复制，然后对副本进行修改操作。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-98&quot;&gt;RDB优缺点&lt;a class=&quot;zola-anchor&quot; href=&quot;#-98&quot; aria-label=&quot;Anchor link for: -98&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;优点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;RDB生成紧凑压缩的二进制文件，体积小，使用该文件恢复数据的速度非常快；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;缺点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;BGSAVE每次运行都要执行fork操作创建子进程，属于重量级操作，不宜频繁执行，所以RDB持久化没办法做到实时的持久化。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;-99&quot;&gt;操作演示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-99&quot; aria-label=&quot;Anchor link for: -99&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;删除已有的持久化文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;找到dump.rdb文件并删除。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430142042.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;打开redis.conf文件，如下，可以看到，当900秒内有一次改动或者300秒内10次改动以及60秒内的1000次改动都会触发RDB。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430142259.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;向服务器中随便存点数据之后输入save，手动触发持久化。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430142717.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再查看dumpp.rdb:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;od -c dump.rdb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430143400.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-100&quot;&gt;RDB文件结构&lt;a class=&quot;zola-anchor&quot; href=&quot;#-100&quot; aria-label=&quot;Anchor link for: -100&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-101&quot;&gt;文件结构&lt;a class=&quot;zola-anchor&quot; href=&quot;#-101&quot; aria-label=&quot;Anchor link for: -101&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430145736.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;标识符的内容为&lt;code&gt;REDIS&lt;&#x2F;code&gt;五个字符，redis服务器在尝试载入RDB文件的时候，可以通过这个标识符快速的判断该文件是否为真正的RDB文件；&lt;&#x2F;li&gt;
&lt;li&gt;版本号是一个字符串格式的数字，长度为4个字符串，目前最新的RDB文件版本为第9版，因此RDB文件的版本号将为字符串“0009”。&lt;&#x2F;li&gt;
&lt;li&gt;版本附加信息记录了生成RDB文件的redis服务器及其所在的平台信息，比如服务器的版本号，宿主及其的架构、创建RDB文件时的时间等。&lt;&#x2F;li&gt;
&lt;li&gt;数据库记录了redis服务器存储的所有数据库数据，当服务器包含多个数据库数据时，各个数据库的数据将按照数据库号码从小到大排列。&lt;&#x2F;li&gt;
&lt;li&gt;如果redis服务器启用了复制功能，那么服务器将在RDB文件中的Lua脚本缓存部分保存所有已被缓存的Lua脚本；&lt;&#x2F;li&gt;
&lt;li&gt;EOF用于标识RDB正文内容的末尾，它的实际值为二进制值&lt;code&gt;0xFF&lt;&#x2F;code&gt;,当redis服务器读取到这个EOF时，就知道正文部分已经全部读取完毕了；&lt;&#x2F;li&gt;
&lt;li&gt;CRC64校验和是一个无符号的64位整数，redis服务器在读入RDB文件时会通过这个校验和来检查RDB文件是否有出错或者损坏的情况出现。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;-102&quot;&gt;载入RDB文件&lt;a class=&quot;zola-anchor&quot; href=&quot;#-102&quot; aria-label=&quot;Anchor link for: -102&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;检查文件开头的标识符是否为&lt;code&gt;REDIS&lt;&#x2F;code&gt;,如果是则继续后面的操作，否则抛出错误并终止载入操作。&lt;&#x2F;li&gt;
&lt;li&gt;检查RDB文件的版本号，以此来判断当前redis服务器能否读取这一版本号的RDB文件。&lt;&#x2F;li&gt;
&lt;li&gt;根据文件中记录的设备附加信息，执行相应的操作和设置。&lt;&#x2F;li&gt;
&lt;li&gt;检查文件的数据库数据是否为空，若不为空则执行下面的操作：
&lt;ol&gt;
&lt;li&gt;根据文件记录的数据库号码，切换至正确的数据库。&lt;&#x2F;li&gt;
&lt;li&gt;根据文件记录的键值对总数量以及带有过期时间的键值对数量，设置数据库底层数据结构；&lt;&#x2F;li&gt;
&lt;li&gt;逐个载入文件记录的所有的键值对数据，并在数据库中重建这些键值对。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;如果服务器启用了复制功能，则将之前缓存的Lua脚本重新载入缓存中。&lt;&#x2F;li&gt;
&lt;li&gt;遇到EOF标识，确认RDB正文已全部读取完毕，&lt;&#x2F;li&gt;
&lt;li&gt;载入RCR64校验和，把它与载入数据期间计算出来的CRC64校验和进行对比，以此判断被载入的数据是否完好无损。&lt;&#x2F;li&gt;
&lt;li&gt;RDB文件载入完毕，服务器开始接受客户端的请求。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-103&quot;&gt;AOF持久化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-103&quot; aria-label=&quot;Anchor link for: -103&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;AOF%E6%8C%81%E4%B9%85%E5%8C%96-m1.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-104&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-104&quot; aria-label=&quot;Anchor link for: -104&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;AOF(Append Only File)，解决了数据持久化的实时性，是目前redis持久化的主流方式；它以独立日志的方式，记录每次写入命令、重启时再重新执行AOF中的命令来恢复数据。AOF的工作流程包括：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;写入命令(append)&lt;&#x2F;li&gt;
&lt;li&gt;同步命令(sync)&lt;&#x2F;li&gt;
&lt;li&gt;文件重写(rewrite)&lt;&#x2F;li&gt;
&lt;li&gt;重启加载(load)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430155018.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;AOF默认不开启，需要修改配置项来启用它：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;appendonly yes # 启用AOF 
&lt;&#x2F;span&gt;&lt;span&gt;appendfilename &amp;quot;appendonly.aof&amp;quot; # 设置文件名
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;AOF以文本协议格式写入命令，这种格式在前面的内容中提到过。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;为什么采用这种格式？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;文本协议具有很好的兼容性；&lt;&#x2F;li&gt;
&lt;li&gt;直接采用文本协议格式，可以避免二次处理的开销；&lt;&#x2F;li&gt;
&lt;li&gt;文本协议具有可读性，方便直接修改和处理；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-105&quot;&gt;文件同步&lt;a class=&quot;zola-anchor&quot; href=&quot;#-105&quot; aria-label=&quot;Anchor link for: -105&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;为了提高程序的写入性能，现代操作系统会把针对硬盘的多次写入操作优化为一次：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;当程序调用&lt;code&gt;write&lt;&#x2F;code&gt;对文件写入时，系统不会直接把数据写入硬盘，而是先将数据写入内存的缓冲区中。&lt;&#x2F;li&gt;
&lt;li&gt;当达到特定的时间周期或缓冲区写满时，系统才会执行&lt;code&gt;flush&lt;&#x2F;code&gt;操作，将缓冲区数据冲洗到硬盘中；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这种优化机制虽然提高了性能，但也给程序的写入操作带来了不确定性：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;对于&lt;code&gt;AOF&lt;&#x2F;code&gt;这样的持久化功能来说，冲洗机制将直接影响&lt;code&gt;AOF&lt;&#x2F;code&gt;持久化的安全性；&lt;&#x2F;li&gt;
&lt;li&gt;为了消除上述机制的不确定性。&lt;code&gt;redis&lt;&#x2F;code&gt;向用户提供了&lt;code&gt;appendfsync&lt;&#x2F;code&gt;选项，来控制系统冲洗&lt;code&gt;AOF&lt;&#x2F;code&gt;的频率；、&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Linux&lt;&#x2F;code&gt;的&lt;code&gt;glibc&lt;&#x2F;code&gt;提供了&lt;code&gt;fsync&lt;&#x2F;code&gt;函数，可以将指定的文件强制性的从缓冲区刷到硬盘，上述的选项也是基于该函数实现。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430160947.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-106&quot;&gt;操作演示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-106&quot; aria-label=&quot;Anchor link for: -106&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;redis.conf配置文件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430153938.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;将&lt;code&gt;appendonly&lt;&#x2F;code&gt;置为yes,下面的文件名不需要改动。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;重启服务&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;redis-server &#x2F;root&#x2F;6379&#x2F;redis.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430154223.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;往redis中存入一些数据之后查看该文件的内容：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430154454.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-107&quot;&gt;AOF的优缺点&lt;a class=&quot;zola-anchor&quot; href=&quot;#-107&quot; aria-label=&quot;Anchor link for: -107&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;与&lt;code&gt;RDB&lt;&#x2F;code&gt;持久化可能丢失大量的数据相比，&lt;code&gt;AOF&lt;&#x2F;code&gt;持久化的安全性要高很多。&lt;&#x2F;li&gt;
&lt;li&gt;通过使用&lt;code&gt;everysec&lt;&#x2F;code&gt;选项，用户可以将数据丢失的时间窗口限制在&lt;code&gt;1&lt;&#x2F;code&gt;秒内；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AOF&lt;&#x2F;code&gt;文件存储的时协议文本，它的体积要比二进制格式的&lt;code&gt;.rdb&lt;&#x2F;code&gt;文件大很多；&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;AOF&lt;&#x2F;code&gt;需要通过执行&lt;code&gt;AOF&lt;&#x2F;code&gt;文件中的命令来恢复数据，其恢复的速度也比&lt;code&gt;RDB&lt;&#x2F;code&gt;慢很多。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;AOF&lt;&#x2F;code&gt;在进行重写时也需要创建子进程，在数据库体积较大时，将会占用大量的资源，会导致服务器的短暂阻塞。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-108&quot;&gt;AOF的重写机制&lt;a class=&quot;zola-anchor&quot; href=&quot;#-108&quot; aria-label=&quot;Anchor link for: -108&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-109&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-109&quot; aria-label=&quot;Anchor link for: -109&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;随着写入操作的不断进行，&lt;code&gt;AOF&lt;&#x2F;code&gt;文件内会包含越来越多的冗余命令：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;已经超时的数据；&lt;&#x2F;li&gt;
&lt;li&gt;已经删除的数据；&lt;&#x2F;li&gt;
&lt;li&gt;多次经过修改的数据；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;冗余命令不仅增加了&lt;code&gt;AOF&lt;&#x2F;code&gt;文件的体积，也会严重影响到恢复数据的速度；&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;为了减少冗余命令，从而提高恢复数据的速度，&lt;code&gt;redis&lt;&#x2F;code&gt;提供了&lt;code&gt;AOF&lt;&#x2F;code&gt;重写的功能；&lt;&#x2F;li&gt;
&lt;li&gt;该功能可以生成一个全新的&lt;code&gt;AOF&lt;&#x2F;code&gt;文件，并让文件只包含恢复当前数据库数据所需的尽可能少的命令；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;-110&quot;&gt;触发方式&lt;a class=&quot;zola-anchor&quot; href=&quot;#-110&quot; aria-label=&quot;Anchor link for: -110&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;手动触发&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;BGREWRITEAOF
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;自动触发&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 设置触发AOF重写所需的最小文件体积，即当AOF文件体积达到该值时，触发AOF重写；
&lt;&#x2F;span&gt;&lt;span&gt;auto-aof-rewrite-min-size &amp;lt;value&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;# 设置AOF重写所需的文件增长比例，即当AOF文件体积比上次重写后的体积增长一倍时，触发AOF重写；
&lt;&#x2F;span&gt;&lt;span&gt;auto-aof-rewrite-percentage &amp;lt;value&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;-111&quot;&gt;AOF重写的流程&lt;a class=&quot;zola-anchor&quot; href=&quot;#-111&quot; aria-label=&quot;Anchor link for: -111&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;执行&lt;code&gt;AOF&lt;&#x2F;code&gt;重写
&lt;ol&gt;
&lt;li&gt;若正在执行&lt;code&gt;AOF&lt;&#x2F;code&gt;重写，则直接返回；&lt;&#x2F;li&gt;
&lt;li&gt;若正在执行&lt;code&gt;BGSAVE&lt;&#x2F;code&gt;操作，则延迟到&lt;code&gt;BGSAVE&lt;&#x2F;code&gt;完成后再执行；&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;执行&lt;code&gt;fork&lt;&#x2F;code&gt;操作创建子进程；&lt;&#x2F;li&gt;
&lt;li&gt;继续响应请求;
&lt;ol&gt;
&lt;li&gt;将新的写入命令存到&lt;code&gt;aof_buf&lt;&#x2F;code&gt;中，进而同步到硬盘，保持原有的逻辑；&lt;&#x2F;li&gt;
&lt;li&gt;将新的写入命令存到&lt;code&gt;rewrite_buf&lt;&#x2F;code&gt;，防止重写操作遗漏这些数据；&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;写入新的&lt;code&gt;AOF&lt;&#x2F;code&gt;文件；&lt;&#x2F;li&gt;
&lt;li&gt;启用新的&lt;code&gt;AOF&lt;&#x2F;code&gt;文件：
&lt;ol&gt;
&lt;li&gt;发信号给父进程，父进程更新统计信息；&lt;&#x2F;li&gt;
&lt;li&gt;将&lt;code&gt;rewrite_buf&lt;&#x2F;code&gt;中的数据刷入到新的&lt;code&gt;AOF&lt;&#x2F;code&gt;文件；&lt;&#x2F;li&gt;
&lt;li&gt;使用新的&lt;code&gt;AOF&lt;&#x2F;code&gt;文件替换旧的文件，完成&lt;code&gt;AOF&lt;&#x2F;code&gt;重写；&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;AOF.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-112&quot;&gt;重启加载&lt;a class=&quot;zola-anchor&quot; href=&quot;#-112&quot; aria-label=&quot;Anchor link for: -112&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220430170634.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-113&quot;&gt;Redis踩坑宝典&lt;a class=&quot;zola-anchor&quot; href=&quot;#-113&quot; aria-label=&quot;Anchor link for: -113&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;记录在 &lt;code&gt;Redis&lt;&#x2F;code&gt;使用过程中遇到了一些问题、踩过的坑。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-114&quot;&gt;Redis面试技能&lt;a class=&quot;zola-anchor&quot; href=&quot;#-114&quot; aria-label=&quot;Anchor link for: -114&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;搜集整理关于 &lt;code&gt;Redis&lt;&#x2F;code&gt;的面试题目、面试技巧。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-115&quot;&gt;Redis使用技巧&lt;a class=&quot;zola-anchor&quot; href=&quot;#-115&quot; aria-label=&quot;Anchor link for: -115&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;总结一些 &lt;code&gt;Redis&lt;&#x2F;code&gt;方面的使用技巧、方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>_Rust开源密码工具xpwd中文版变更日志</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/rust-kai-yuan-mi-ma-gong-ju-xpwd-zhong-wen-ban-bian-geng-ri-zhi/</link>
          <guid>https://ilikexff.cn/rust-kai-yuan-mi-ma-gong-ju-xpwd-zhong-wen-ban-bian-geng-ri-zhi/</guid>
          <description xml:base="https://ilikexff.cn/rust-kai-yuan-mi-ma-gong-ju-xpwd-zhong-wen-ban-bian-geng-ri-zhi/">&lt;h2 id=&quot;v1-0-0&quot;&gt;v1.0.0&lt;a class=&quot;zola-anchor&quot; href=&quot;#v1-0-0&quot; aria-label=&quot;Anchor link for: v1-0-0&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;启动项目构思并建立项目计划&lt;&#x2F;li&gt;
&lt;li&gt;完成项目搭建，项目命名为“DigitShield“&lt;&#x2F;li&gt;
&lt;li&gt;实现核心功能：快速密码生成&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;v1-0-1&quot;&gt;v1.0.1&lt;a class=&quot;zola-anchor&quot; href=&quot;#v1-0-1&quot; aria-label=&quot;Anchor link for: v1-0-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;采纳新名称(quick_pswd)及暂定Logo&lt;&#x2F;li&gt;
&lt;li&gt;新增功能：密码强度检测&lt;&#x2F;li&gt;
&lt;li&gt;为已实现功能添加命令行支持&lt;&#x2F;li&gt;
&lt;li&gt;上传至&lt;code&gt;crates.io&lt;&#x2F;code&gt;，引入&lt;code&gt;cargo install&lt;&#x2F;code&gt;作为一种新的安装方式&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;v1-0-2&quot;&gt;v1.0.2&lt;a class=&quot;zola-anchor&quot; href=&quot;#v1-0-2&quot; aria-label=&quot;Anchor link for: v1-0-2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;新增密码生成后的桌面微弹窗通知！&lt;&#x2F;li&gt;
&lt;li&gt;调整主函数代码结构&lt;&#x2F;li&gt;
&lt;li&gt;修复项目字符logo&lt;&#x2F;li&gt;
&lt;li&gt;发布&lt;code&gt;v1.0.2&lt;&#x2F;code&gt;版本&lt;&#x2F;li&gt;
&lt;li&gt;新增scoop分发安装渠道的支持&lt;&#x2F;li&gt;
&lt;li&gt;美化结果输出，调整代码结构&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;v1-0-3&quot;&gt;v1.0.3&lt;a class=&quot;zola-anchor&quot; href=&quot;#v1-0-3&quot; aria-label=&quot;Anchor link for: v1-0-3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;对命令行部分的逻辑进行整体重构，提高代码可维护性、健壮性&lt;&#x2F;li&gt;
&lt;li&gt;对输出结果的美化进行调整&lt;&#x2F;li&gt;
&lt;li&gt;新增根据用户自定义词典生成随机短口令&lt;&#x2F;li&gt;
&lt;li&gt;优化&lt;code&gt;lib.rs&lt;&#x2F;code&gt;中的代码结构&lt;&#x2F;li&gt;
&lt;li&gt;更新用法示例，由于代码的调整，使用方法改动较大&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;v1-0-4&quot;&gt;v1.0.4&lt;a class=&quot;zola-anchor&quot; href=&quot;#v1-0-4&quot; aria-label=&quot;Anchor link for: v1-0-4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;新增谷歌浏览器插件，浏览器上使用，得心应手&lt;&#x2F;li&gt;
&lt;li&gt;插件目前支持密码生成和密码强度检测两个核心功能&lt;&#x2F;li&gt;
&lt;li&gt;虽然强度等级划分与cli不同，但不影响实际使用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>Rust中的move语义随笔</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/rust-zhong-de-move-yu-yi-sui-bi/</link>
          <guid>https://ilikexff.cn/rust-zhong-de-move-yu-yi-sui-bi/</guid>
          <description xml:base="https://ilikexff.cn/rust-zhong-de-move-yu-yi-sui-bi/">&lt;p&gt;在Rust中，“move 语义” 涉及将所有权（ownership）从一个变量转移到另一个变量的概念。当将一个值赋给另一个变量时，默认情况下会发生移动操作，这意味着原始变量不再拥有该值，而新变量成为该值的所有者。这种操作可以防止数据竞争和内存安全问题，并在编译时捕获潜在的错误。Move 语义是 Rust 的核心概念之一，有助于确保代码的安全性和并发性，因此，非常有必要单独拎出来强化强化。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;1-mo-ren-yi-dong&quot;&gt;1. 默认移动&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-mo-ren-yi-dong&quot; aria-label=&quot;Anchor link for: 1-mo-ren-yi-dong&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;默认移动意味着在&lt;code&gt;Rust&lt;&#x2F;code&gt;中，当你将一个值分配给另一个新变量或者说作为参数传递到函数中时这个过程使用的是&lt;code&gt;move&lt;&#x2F;code&gt;而非&lt;code&gt;clone&lt;&#x2F;code&gt;.这代表者该值的所有权也会随之被转移到新的变量中。&lt;&#x2F;p&gt;
&lt;p&gt;考虑下面的代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;Hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;message&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; h1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; Hi &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        message: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; h2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; h1;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;h1:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, h1.message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;h2:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, h2.message&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240529110455074.png&quot; alt=&quot;image-20240529110455074&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上面的代码中，我们创建了一个结构体，在第一步（箭头）中，执行了&lt;code&gt;h2=h1&lt;&#x2F;code&gt;时，此时&lt;code&gt;h1&lt;&#x2F;code&gt;的所有权就已经被移动到了&lt;code&gt;h2&lt;&#x2F;code&gt;中，&lt;code&gt;h1&lt;&#x2F;code&gt;随之失效，当我们再次使用&lt;code&gt;h1&lt;&#x2F;code&gt;时会编译失败。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240529110802394.png&quot; alt=&quot;image-20240529110802394&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这些操作都是&lt;code&gt;Rust&lt;&#x2F;code&gt;中默认的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;2. 作为函数参数时&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;当我们将 &lt;code&gt;struct &lt;&#x2F;code&gt;实例作为参数传递给函数时，该 &lt;code&gt;struct &lt;&#x2F;code&gt;被移动到函数中。这意味着传递的原始变量不再有效，不能再次使用。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, user.name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;马超&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们定义了一个&lt;code&gt;User&lt;&#x2F;code&gt;结构体，并创建了一个函数&lt;code&gt;say&lt;&#x2F;code&gt;，它的参数就是这个结构体。函数功能很简单，就是打印结构体中字段的内容。&lt;&#x2F;p&gt;
&lt;p&gt;在主函数中，构建了&lt;code&gt;User&lt;&#x2F;code&gt;结构体之后将它传递给函数使用。这之后，我们尝试打印这个结构体，但是编译无法通过，这是因为我们的结构体的所有权已经转移到了函数中，不能被再次使用。&lt;&#x2F;p&gt;
&lt;p&gt;那么，如果我们还是需要继续这个结构体怎么办呢？可以通过使用引用传递参数的方式，或者说使用&lt;code&gt;clone&lt;&#x2F;code&gt;，这样可以避免所有权的转移。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;传递引用&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, user.name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;马超&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;clone&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Debug, Clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;say&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;: User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hi,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, user.name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; User &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        name: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;马超&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;say&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;user.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;user:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, user&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;3. 返回中的转移&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在Rust中，当一个函数返回一个结构体时，结构体的所有权会从函数的作用域转移到调用作用域。这意味着结构体从函数的作用域移动到调用作用域。以下是一个示例来演示这种行为：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;Debug&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyStruct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;: String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;create_struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt; MyStruct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    MyStruct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt; data &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; my_struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;create_struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{:?}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, my_struct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 这行代码可以正常工作
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 下面这行代码会导致编译错误，因为my_struct已经被移动
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;{:?}&amp;quot;, my_struct);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在这个示例中，&lt;code&gt;create_struct&lt;&#x2F;code&gt;函数创建一个&lt;code&gt;MyStruct&lt;&#x2F;code&gt;实例并返回它。当在&lt;code&gt;main&lt;&#x2F;code&gt;函数中将&lt;code&gt;my_struct&lt;&#x2F;code&gt;赋值为&lt;code&gt;create_struct&lt;&#x2F;code&gt;的返回值时，结构体的所有权转移到了&lt;code&gt;my_struct&lt;&#x2F;code&gt;。因此，你可以打印&lt;code&gt;my_struct&lt;&#x2F;code&gt;一次，但如果在结构体已经被移动后尝试再次使用&lt;code&gt;my_struct&lt;&#x2F;code&gt;，将会导致编译错误。&lt;&#x2F;p&gt;
&lt;p&gt;如果您需要在函数调用后继续使用结构体，可以返回结构体的引用而不是结构体本身。这样，所有权不会被转移，原始结构体仍然有效。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;4. Move关键字&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;move&lt;&#x2F;code&gt;关键字会显式的触发所有权的强制转移。注意，这里说的是转移、而不是复制。&lt;&#x2F;p&gt;
&lt;p&gt;举个&lt;code&gt;move&lt;&#x2F;code&gt;在闭包中使用的栗子：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;do_sth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;World&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; closure &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{} {}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x, y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;closure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; println!(&amp;quot;x :{}&amp;quot;, x);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do_sth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定义 &lt;code&gt;do_sth&lt;&#x2F;code&gt; 函数&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;函数 &lt;code&gt;do_sth&lt;&#x2F;code&gt; 定义了两个可变字符串变量 &lt;code&gt;x&lt;&#x2F;code&gt; 和 &lt;code&gt;y&lt;&#x2F;code&gt;，分别初始化为 &lt;code&gt;&quot;Hello&quot;&lt;&#x2F;code&gt; 和 &lt;code&gt;&quot;World&quot;&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;创建并立即执行带 &lt;code&gt;move&lt;&#x2F;code&gt; 的闭包&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;do_sth&lt;&#x2F;code&gt; 函数内部，定义了一个匿名闭包（通过 &lt;code&gt;|| { ... }&lt;&#x2F;code&gt; 形式）并赋值给了变量 &lt;code&gt;closure&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;闭包前面的 &lt;code&gt;move&lt;&#x2F;code&gt; 关键字是重点。它指示闭包在其被调用时，会“移动”捕获的变量（在这里是 &lt;code&gt;x&lt;&#x2F;code&gt; 和 &lt;code&gt;y&lt;&#x2F;code&gt;）的所有权进入闭包内部，而不是仅仅借用它们。这意味着一旦闭包执行完毕，原始变量 &lt;code&gt;x&lt;&#x2F;code&gt; 和 &lt;code&gt;y&lt;&#x2F;code&gt; 将不再可用，因为它们的所有权已经被转移给了闭包。&lt;&#x2F;li&gt;
&lt;li&gt;闭包体内的代码是打印 &lt;code&gt;x&lt;&#x2F;code&gt; 和 &lt;code&gt;y&lt;&#x2F;code&gt; 的内容。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;调用闭包&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;closure();&lt;&#x2F;code&gt; 来执行这个闭包，输出结果为 &lt;code&gt;&quot;Hello World&quot;&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;注释掉的 println!&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;之后有一行被注释掉的代码 &lt;code&gt;&#x2F;&#x2F; println!(&quot;x :{}&quot;, x);&lt;&#x2F;code&gt;。由于闭包使用了 &lt;code&gt;move&lt;&#x2F;code&gt;，变量 &lt;code&gt;x&lt;&#x2F;code&gt; 和 &lt;code&gt;y&lt;&#x2F;code&gt; 的所有权已经被转移给闭包，所以在闭包执行后，尝试访问 &lt;code&gt;x&lt;&#x2F;code&gt; 会引发编译错误，因为 &lt;code&gt;x&lt;&#x2F;code&gt; 已不再有效。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;在 &lt;code&gt;main&lt;&#x2F;code&gt; 函数中调用 &lt;code&gt;do_sth&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main&lt;&#x2F;code&gt; 函数简单调用了 &lt;code&gt;do_sth()&lt;&#x2F;code&gt;，执行上述过程。最终程序输出 &lt;code&gt;&quot;Hello World&quot;&lt;&#x2F;code&gt;，且不会尝试访问已被移动的变量。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;5. Copy trait&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;在&lt;code&gt;Rust&lt;&#x2F;code&gt;中，某些类型是默认实现了&lt;code&gt;Copy trait&lt;&#x2F;code&gt;的，这意味着他们的值在被移动是发生的是复制，源值将保留不变。这些类型包括了诸如整数、浮点、布尔、字符等基本数据类型；&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;x is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的代码中，虽然我们执行了&lt;code&gt;y=x&lt;&#x2F;code&gt;的赋值操作，但由于基本类型实现了&lt;code&gt;Copy trait&lt;&#x2F;code&gt;,所以源值&lt;code&gt;x&lt;&#x2F;code&gt;还是3；&lt;&#x2F;p&gt;
&lt;p&gt;与之对比的是没有实现&lt;code&gt;Copy trait&lt;&#x2F;code&gt; 的&lt;code&gt;String&lt;&#x2F;code&gt;类型；&lt;&#x2F;p&gt;
&lt;p&gt;``rust
fn main() {
let x = 3;
let y = x;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;println!(&amp;quot;x is {}&amp;quot;, x);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![image-20240529164255374](https:&#x2F;&#x2F;images.waer.ltd&#x2F;notes&#x2F;image-20240529164255374.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 在这里， 操作`y = x` 执行后 `x`被移动 。 `x` 移动后不再有效。并且编译报错信息也给出了提示，该类型没有实现`Copy trait`;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;注意，任何完全由复制类型组成的类型也是具有`Copy`属性的。 例如：
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;```rust
&lt;&#x2F;span&gt;&lt;span&gt;#[derive(Debug, Copy, Clone)]
&lt;&#x2F;span&gt;&lt;span&gt;struct Point {
&lt;&#x2F;span&gt;&lt;span&gt;    x: i32,
&lt;&#x2F;span&gt;&lt;span&gt;    y: i32,
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fn main() {
&lt;&#x2F;span&gt;&lt;span&gt;    let origin = Point { x: 1, y: 2 };
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    let point = origin;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&amp;quot;origin is {:?}&amp;quot;, origin);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上述例子中，由于结构体中的字段都是&lt;code&gt;i32&lt;&#x2F;code&gt;的整型，而整型默认实现了&lt;code&gt;Copy trait&lt;&#x2F;code&gt;，此时这个结构体也默认拥有了该特性，当我们执行了&lt;code&gt;let point = origin;&lt;&#x2F;code&gt;之后打印&lt;code&gt;origin&lt;&#x2F;code&gt;的值依旧是原来的结构体，说明它执行了复制操作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;6. 小结&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Rust&lt;&#x2F;code&gt;中采取移动的一些优势：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;性能：移动不需要值得副本，因此速度很快。&lt;&#x2F;li&gt;
&lt;li&gt;内存：如果不移动，则每当传递或者重新分配值时，就需要更多得内存分配；&lt;&#x2F;li&gt;
&lt;li&gt;唯一性：移动可以强制保持所有权得惟一，确定在给定时间只有一个变量拥有该值，也为内存安全提供了保证；&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>SpringBoot Web开发精解</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/springboot-webkai-fa-jing-jie/</link>
          <guid>https://ilikexff.cn/springboot-webkai-fa-jing-jie/</guid>
          <description xml:base="https://ilikexff.cn/springboot-webkai-fa-jing-jie/">&lt;h2 id=&quot;springmvcji-chu-hui-gu&quot;&gt;SpringMVC基础回顾&lt;a class=&quot;zola-anchor&quot; href=&quot;#springmvcji-chu-hui-gu&quot; aria-label=&quot;Anchor link for: springmvcji-chu-hui-gu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;当在&lt;code&gt; Spring Boot&lt;&#x2F;code&gt; 中引入 &lt;code&gt;Web &lt;&#x2F;code&gt;模块时，&lt;code&gt;SpringBoot&lt;&#x2F;code&gt; 会帮我们自动配置 &lt;code&gt;Web &lt;&#x2F;code&gt;相关的组件，其中 &lt;code&gt;Spring MVC&lt;&#x2F;code&gt; 便是最重要的部分。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;MVC.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;组件介绍&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;上图是 &lt;code&gt;SpringMVC&lt;&#x2F;code&gt; 的工作原理图。先介绍一下原理图中涉及的各个组件。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;DispatcherServlet&lt;&#x2F;strong&gt;:前端控制器，是整个流程的&lt;strong&gt;控制中心&lt;&#x2F;strong&gt;，由它调用其他组件处理用户请求。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HandlerMapping&lt;&#x2F;strong&gt;:处理器映射器，负责根据用户请求的&lt;code&gt;URL&lt;&#x2F;code&gt;找到相应的&lt;code&gt;Handler&lt;&#x2F;code&gt;处理器。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;HandlerAdapter&lt;&#x2F;strong&gt;:处理器适配器，根据处理器映射器(&lt;code&gt;HandlerMapping&lt;&#x2F;code&gt;)找到&lt;code&gt;Handler&lt;&#x2F;code&gt;的相关信息，依据持定的规则去执行相关的处理器&lt;code&gt;Handler&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Handler&lt;&#x2F;strong&gt;:处理器，负责执行用户的请求，&lt;code&gt;Controller&lt;&#x2F;code&gt;便是处理器。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ViewResolver&lt;&#x2F;strong&gt;:视图解析器，**首先根据逻辑视图名解析成物理视图名即具体的页面地址，**再生成&lt;code&gt;View&lt;&#x2F;code&gt;视图对象，最后对&lt;code&gt;View&lt;&#x2F;code&gt;进行渲染将处理结果通过页面展示给用户。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;ModelAndView&lt;&#x2F;strong&gt;:使用&lt;code&gt;ModelAndView&lt;&#x2F;code&gt;类用来处理该数据的视图。当控制器处理完请求后，通常控制器将会包含视图名称以及一些模型属性的&lt;code&gt;ModelAndView&lt;&#x2F;code&gt;对象返回给&lt;code&gt;DispatcherServlet&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;-1&quot;&gt;工作流程&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;介绍完组件的功能后，接着来梳理一下 &lt;code&gt;SpringMVC&lt;&#x2F;code&gt; 工作流程。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;用户向服务器发送请求至前端控制器 &lt;code&gt;DispatcherServlet&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DispathcherServlet &lt;&#x2F;code&gt;调用 &lt;code&gt;HandlerMapping&lt;&#x2F;code&gt;，由此得知由哪个&lt;code&gt; Handler(Controller)&lt;&#x2F;code&gt;来处理该请求。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HandlerMapping &lt;&#x2F;code&gt;找到具体的处理器，生成处理器对象及处理器拦截器一并返回给 &lt;code&gt;DispathcherServlet&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DispathcherServlet &lt;&#x2F;code&gt;调用 &lt;code&gt;HandlerAdapter &lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HandlerAdapter &lt;&#x2F;code&gt;经过适配调用具体的 &lt;code&gt;Handler&lt;&#x2F;code&gt;，也叫做控制器（&lt;code&gt;Controller&lt;&#x2F;code&gt;）。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Handler &lt;&#x2F;code&gt;处理完请求后返回 &lt;code&gt;ModelAndView &lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HandlerAdapter &lt;&#x2F;code&gt;将后端处理器的结果 &lt;code&gt;ModelAndView &lt;&#x2F;code&gt;反馈给 &lt;code&gt;DispathcherServlet&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DispathcherServlet &lt;&#x2F;code&gt;将 &lt;code&gt;ModelAndView &lt;&#x2F;code&gt;传给 视图解析器 &lt;code&gt;ViewResolver &lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;ViewResolver &lt;&#x2F;code&gt;根据 &lt;code&gt;ModelAndView &lt;&#x2F;code&gt;中的视图名称返回具体的 &lt;code&gt;View &lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DispathcherServlet &lt;&#x2F;code&gt;将 &lt;code&gt;ModelAndView &lt;&#x2F;code&gt;中的模型数据填充到视图中，渲染视图。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;DispathcherServlet &lt;&#x2F;code&gt;将结果响应给用户。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;用户向服务器发送请求给前端控制器，前端控制器收到请求之后调用处理映射器得到该请求由那个处理器进行处理，结果反馈给前端控制器，前端控制器再将该结果发给控制适配器，调用具体的处理器处理(&lt;code&gt;Controller&lt;&#x2F;code&gt;)并返回一个&lt;code&gt;MV&lt;&#x2F;code&gt;，处理器将该&lt;code&gt;MV&lt;&#x2F;code&gt;模型返回给前端控制器，前端控制器得到之后调用视图解析器解析该模型，完了得到一个视图&lt;code&gt;view&lt;&#x2F;code&gt;，再将该视图通过前端页面渲染到浏览器，展现给用户。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;## SpringMVC基础回顾
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;当在` Spring Boot` 中引入 `Web `模块时，`SpringBoot` 会帮我们自动配置 `Web `相关的组件，其中 `Spring MVC` 便是最重要的部分。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;![](https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;MVC.png)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 组件介绍
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;**上图是 `SpringMVC` 的工作原理图。先介绍一下原理图中涉及的各个组件。**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;- **DispatcherServlet**:前端控制器，是整个流程的**控制中心**，由它调用其他组件处理用户请求。
&lt;&#x2F;span&gt;&lt;span&gt;- **HandlerMapping**:处理器映射器，负责根据用户请求的`URL`找到相应的`Handler`处理器。
&lt;&#x2F;span&gt;&lt;span&gt;- **HandlerAdapter**:处理器适配器，根据处理器映射器(`HandlerMapping`)找到`Handler`的相关信息，依据持定的规则去执行相关的处理器`Handler`。
&lt;&#x2F;span&gt;&lt;span&gt;- **Handler**:处理器，负责执行用户的请求，`Controller`便是处理器。
&lt;&#x2F;span&gt;&lt;span&gt;- **ViewResolver**:视图解析器，**首先根据逻辑视图名解析成物理视图名即具体的页面地址，**再生成`View`视图对象，最后对`View`进行渲染将处理结果通过页面展示给用户。
&lt;&#x2F;span&gt;&lt;span&gt;- **ModelAndView**:使用`ModelAndView`类用来处理该数据的视图。当控制器处理完请求后，通常控制器将会包含视图名称以及一些模型属性的`ModelAndView`对象返回给`DispatcherServlet`.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 工作流程
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;**介绍完组件的功能后，接着来梳理一下 `SpringMVC` 工作流程。**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;1. 用户向服务器发送请求至前端控制器 `DispatcherServlet`。
&lt;&#x2F;span&gt;&lt;span&gt;2. `DispathcherServlet `调用 `HandlerMapping`，由此得知由哪个` Handler(Controller)`来处理该请求。
&lt;&#x2F;span&gt;&lt;span&gt;3. `HandlerMapping `找到具体的处理器，生成处理器对象及处理器拦截器一并返回给 `DispathcherServlet`。
&lt;&#x2F;span&gt;&lt;span&gt;4. `DispathcherServlet `调用 `HandlerAdapter `。
&lt;&#x2F;span&gt;&lt;span&gt;5. `HandlerAdapter `经过适配调用具体的 `Handler`，也叫做控制器（`Controller`）。
&lt;&#x2F;span&gt;&lt;span&gt;6. `Handler `处理完请求后返回 `ModelAndView `。
&lt;&#x2F;span&gt;&lt;span&gt;7. `HandlerAdapter `将后端处理器的结果 `ModelAndView `反馈给 `DispathcherServlet`。
&lt;&#x2F;span&gt;&lt;span&gt;8. `DispathcherServlet `将 `ModelAndView `传给 视图解析器 `ViewResolver `。
&lt;&#x2F;span&gt;&lt;span&gt;9. `ViewResolver `根据 `ModelAndView `中的视图名称返回具体的 `View `。
&lt;&#x2F;span&gt;&lt;span&gt;10. `DispathcherServlet `将 `ModelAndView `中的模型数据填充到视图中，渲染视图。
&lt;&#x2F;span&gt;&lt;span&gt;11. `DispathcherServlet `将结果响应给用户。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; 用户向服务器发送请求给前端控制器，前端控制器收到请求之后调用处理映射器得到该请求由那个处理器进行处理，结果反馈给前端控制器，前端控制器再将该结果发给控制适配器，调用具体的处理器处理(`Controller`)并返回一个`MV`，处理器将该`MV`模型返回给前端控制器，前端控制器得到之后调用视图解析器解析该模型，完了得到一个视图`view`，再将该视图通过前端页面渲染到浏览器，展现给用户。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</description>
      </item>
      <item>
          <title>SpringSecurity</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/springsecurity/</link>
          <guid>https://ilikexff.cn/springsecurity/</guid>
          <description xml:base="https://ilikexff.cn/springsecurity/"></description>
      </item>
      <item>
          <title>SSM框架实现集成短信验证码功能</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/ssm-kuang-jia-shi-xian-ji-cheng-duan-xin-yan-zheng-ma-gong-neng/</link>
          <guid>https://ilikexff.cn/ssm-kuang-jia-shi-xian-ji-cheng-duan-xin-yan-zheng-ma-gong-neng/</guid>
          <description xml:base="https://ilikexff.cn/ssm-kuang-jia-shi-xian-ji-cheng-duan-xin-yan-zheng-ma-gong-neng/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2022-09-03 晚&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本次更新无新内容，仅调整目录结构&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;yan-zheng-ma-gong-neng&quot;&gt;验证码功能&lt;a class=&quot;zola-anchor&quot; href=&quot;#yan-zheng-ma-gong-neng&quot; aria-label=&quot;Anchor link for: yan-zheng-ma-gong-neng&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际开发中，验证码功能已经是一个很常见的模块了。
今天就来给自己的项目加一个属于自己的短信验证码功能。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;zhun-bei-gong-zuo&quot;&gt;准备工作&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhun-bei-gong-zuo&quot; aria-label=&quot;Anchor link for: zhun-bei-gong-zuo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在开始敲代码之前，你需要准备一下。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.yuntongxun.com&#x2F;?ly=baidu-pz-p&amp;amp;qd=cpc&amp;amp;xl=ds&amp;amp;kw=12006270&quot;&gt;容联云&lt;&#x2F;a&gt;平台账号一个。&lt;&#x2F;li&gt;
&lt;li&gt;可以正常收发短信的手机一台。&lt;&#x2F;li&gt;
&lt;li&gt;一台可用的计算机。&lt;&#x2F;li&gt;
&lt;li&gt;怎么说也得会一点Java吧【本文以SSM项目集成为例】。&lt;&#x2F;li&gt;
&lt;li&gt;会一点JavaScript或者jQuery。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kai-shi-lu&quot;&gt;开始撸&lt;a class=&quot;zola-anchor&quot; href=&quot;#kai-shi-lu&quot; aria-label=&quot;Anchor link for: kai-shi-lu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;xian-kan-kan-zui-hou-de-yang-shi&quot;&gt;先看看最后的样式&lt;a class=&quot;zola-anchor&quot; href=&quot;#xian-kan-kan-zui-hou-de-yang-shi&quot; aria-label=&quot;Anchor link for: xian-kan-kan-zui-hou-de-yang-shi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10700891916562075776-7c2ef8f7.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;登录官网，进入控制台找到如下几个重要的key保存下来，后面需要用到。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1220627229440284181-acd23658.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;找到页面中【开发手册】&amp;gt;【SDK参考】
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12422133158768438033-a14ac3c0.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;如此打开便可以找到Java需要安装的依赖，将maven依赖复制过来，放入pom.xml文件中正确的位置。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;groupId&amp;gt;com.cloopen&amp;lt;&#x2F;groupId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;artifactId&amp;gt;java-sms-sdk&amp;lt;&#x2F;artifactId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;version&amp;gt;1.0.3&amp;lt;&#x2F;version&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13592634646042885320-d414f365.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;处理后端核心业务&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;service层处理验证码发送逻辑&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于不涉及与数据库的交互，可以将下面的短信验证码的业务逻辑直接在服务层进行处理即可。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11745832972173914333-55ae2419.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;具体的：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在如下位置将你对应的密钥填入。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span&gt;restAPI.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setAccount&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;你的countID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 初始化主账号名称和主账号令牌
&lt;&#x2F;span&gt;&lt;span&gt;restAPI.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setAppId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;你的countToken&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;以下部分是对所生成验证码范围的设置，我是随机六位，你可以自定义你的规则。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*生成随机六位验证码*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span&gt; random &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Random&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; codes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;; i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;  codes &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;nextInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;使用短信验证码模板：由于我们是未上线的测试，所以可以使用的模板是由限定的。可以自己参考文档，具体的，我的配置如下。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 请使用管理控制台中已创建应用的APPID
&lt;&#x2F;span&gt;&lt;span&gt;result &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; restAPI.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sendTemplateSMS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;userPhone, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{&lt;&#x2F;span&gt;&lt;span&gt;codes, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;设置验证码的有效期&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;实际开发中，验证码是不可以一直有效的，我们应该设置一个有效期限，比如2分钟有效，过期只能重新发送获取新的验证码，下面是我利用session进行的实现，提供参考，你也用可以缓存或者redis等方式实现。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*设置验证码有效期为2分钟*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setMaxInactiveInterval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;处理前端页面和校验逻辑&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;后台核心业务结束之后，就可以进行前端页面的编写。首先，有一个提供输入手机号的控件是必须的【&lt;strong&gt;当然，特殊业务场景可能不一定需要显式的输入&lt;&#x2F;strong&gt;】 不要杠！！
总而言之，要发送短信验证码，你得有一个验证码的接收对象吧，这个对象便是一个可用的手机号。具体的：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在页面中放一个输入验证码的控件，当然还需要一个发送验证码的按钮。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14383750180005044555-568cff4d.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;由于不可能让用户频繁的发送验证码，我们还需要对点击的按钮进行限制，一般的做法是，当用户点击一次发送按钮之后便将该按钮进行禁用掉，避免频繁的被点击，倒计时一分钟后解除禁用，可以再次发送。
这样的需求比较简单，可通过简单的JS进行实现。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;JavaScript&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-JavaScript &quot;&gt;&lt;code class=&quot;language-JavaScript&quot; data-lang=&quot;JavaScript&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;*短信再次发送倒计时*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;outime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;#getCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;#getCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;重新发送&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;#getCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;s后重新发送&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;outime&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;以上实现只是一种参考，实现方式没有局限。
当时出于安全考虑，这样的前端校验是不够的，实际开发中，一般还会再服务端进行再一次的校验逻辑，实现也比较简单，具体不再赘述。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;添加测试的手机号
由于是测试用，所以不是所有手机号都可以接受到验证码的短信，需要在控制台绑定测试用的手机号，操作很简单，不再赘述。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;来看看最终的成果。&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9567963583923876937-61c53beb.jpeg&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>提问的智慧转载</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/ti-wen-de-zhi-hui-zhuan-zai/</link>
          <guid>https://ilikexff.cn/ti-wen-de-zhi-hui-zhuan-zai/</guid>
          <description xml:base="https://ilikexff.cn/ti-wen-de-zhi-hui-zhuan-zai/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2022-9-15 午时 于 杭州&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在原文的基础结构上调整了文章目录结构&lt;&#x2F;li&gt;
&lt;li&gt;简单进行了一下md的格式化&lt;&#x2F;li&gt;
&lt;li&gt;修改封面配图&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yin&quot;&gt;引&lt;a class=&quot;zola-anchor&quot; href=&quot;#yin&quot; aria-label=&quot;Anchor link for: yin&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;​	在黑客世界里，当提出一个技术问题时，你能得到怎样的回答？这取决于挖出答案的难度，同样取决于你提问的方法。本指南旨在帮助你提高发问技巧，以获取你最想要的答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　首先你必须明白，黑客们只偏爱艰巨的任务，或者能激发他们思维的好问题。 如若不然，我们还来干吗？如果你有值得我们反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼，可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“问得好！”是发自内心的大力称赞。&lt;&#x2F;p&gt;
&lt;p&gt;　　尽管黑客们有蔑视简单问题和不友善的坏名声，有时看起来似乎我们对新手，对知识贫乏者怀有敌意，但其实不是那样的。&lt;&#x2F;p&gt;
&lt;p&gt;　　我们不想掩饰对这样一些人的蔑视–他们不愿思考，或者在发问前不去完成他们应该做的事。这种人只会谋杀时间–他们只愿索取，从不付出，无端消耗我们的时间，而我们本可以把时间用在更有趣的问题或者更值得回答的人身上。 我们称这样的人为“失败者”（由于历史原因，我们有时把它拼作“lusers”）。&lt;&#x2F;p&gt;
&lt;p&gt;　　我们在很大程度上属于志愿者，从繁忙的生活中抽出时间来解惑答疑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是抛弃那些看起来象失败者的家伙，以便更高效的利用时间来回答胜利者的问题。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你觉得我们过于傲慢的态度让你不爽，让你委屈，不妨设身处地想想。我们并没有要求你向我们屈服–事实上，我们中的大多数人最喜欢公平交易不过了，只要你付出小小努力来满足最起码的要求，我们就会欢迎你加入到我们的文化中来。但让我们帮助那些不愿意帮助自己的人是没有 意义的。如果你不能接受这种“歧视”，我们建议你花点钱找家商业公司签个技术支持协议得了，别向黑客乞求帮助。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你决定向我们求助，当然不希望被视为失败者，更不愿成为失败者中的一员。立刻得到有效答案的最好方法，就是象胜利者那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。&lt;&#x2F;p&gt;
&lt;p&gt;　　（欢迎对本指南提出改进意见。任何建议请E-mail至&lt;a href=&quot;mailto:esr@thyrsus.com&quot;&gt;esr@thyrsus.com&lt;&#x2F;a&gt;，然而 请注意，本文并非网络礼节的通用指南，我通常会拒绝无助于在技术论坛得到有用答案的建议。） （当然，如果你写中文，最好还是寄&lt;a href=&quot;mailto:DHGrand@hotmail.com&quot;&gt;DHGrand@hotmail.com&lt;&#x2F;a&gt;;-）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ti-wen-zhi-qian&quot;&gt;提问之前&lt;a class=&quot;zola-anchor&quot; href=&quot;#ti-wen-zhi-qian&quot; aria-label=&quot;Anchor link for: ti-wen-zhi-qian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;　　在通过电邮、新闻组或者聊天室提出技术问题前，检查你有没有做到：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;通读手册，试着自己找答案。&lt;&#x2F;li&gt;
&lt;li&gt;在FAQ里找答案（一份维护得好的FAQ可以包罗万象:）。&lt;&#x2F;li&gt;
&lt;li&gt;在网上搜索（个人推荐google~~~）。&lt;&#x2F;li&gt;
&lt;li&gt;向你身边精于此道的朋友打听。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;　　当你提出问题的时候，首先要说明在此之前你干了些什么；这将有助于树立你的形象：你不是一个妄图不劳而获的乞讨者，不愿浪费别人的时间。如果提问者能从答案中学到东西，我们更乐于回答他的问题。&lt;&#x2F;p&gt;
&lt;p&gt;　　周全的思考，准备好你的问题，草率的发问只能得到草率的回答，或者根本得不到任何答案。越表现出在寻求帮助前为解决问题付出的努力，你越能得到实质性的帮助。&lt;&#x2F;p&gt;
&lt;p&gt;　　小心别问错了问题。如果你的问题基于错误的假设，普通黑客（J. Random Hacker）通常会用无意义的字面解释来答复你，心里想着“蠢问题…”，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。&lt;&#x2F;p&gt;
&lt;p&gt;　　决不要自以为够资格得到答案，你没这种资格。毕竟你没有为这种服务支付任何报酬。你要自己去“挣”回一个答案，靠提出一个有内涵的，有趣的，有思维激励作用的问题–一个对社区的经验有潜在贡献的问题，而不仅仅是被动的从他人处索要知识–去挣到这个答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　另一方面，表明你愿意在找答案的过程中做点什么，是一个非常好的开端。“谁能给点提示？”、“我这个例子里缺了什么？”以及“我应该检查什么地方？”比“请把确切的过程贴出来”更容易得到答复。因为你显得只要有人指点正确的方向，你就有完成它的能力和决心。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zen-yang-ti-wen&quot;&gt;怎样提问&lt;a class=&quot;zola-anchor&quot; href=&quot;#zen-yang-ti-wen&quot; aria-label=&quot;Anchor link for: zen-yang-ti-wen&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;jin-shen-xuan-ze-lun-tan&quot;&gt;谨慎选择论坛&lt;a class=&quot;zola-anchor&quot; href=&quot;#jin-shen-xuan-ze-lun-tan&quot; aria-label=&quot;Anchor link for: jin-shen-xuan-ze-lun-tan&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　小心选择提问的场合。如果象下面描述的那样，你很可能被忽略掉或者被看作失败者：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在风马牛不相及的论坛贴出你的问题&lt;&#x2F;li&gt;
&lt;li&gt;在探讨高级技巧的论坛张贴非常初级的问题；反之亦然&lt;&#x2F;li&gt;
&lt;li&gt;在太多的不同新闻组交叉张贴&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;yong-ci-tie-qie-yu-fa-zheng-que-pin-xie-wu-wu&quot;&gt;用辞贴切，语法正确，拼写无误&lt;a class=&quot;zola-anchor&quot; href=&quot;#yong-ci-tie-qie-yu-fa-zheng-que-pin-xie-wu-wu&quot; aria-label=&quot;Anchor link for: yong-ci-tie-qie-yu-fa-zheng-que-pin-xie-wu-wu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　我们从经验中发现，粗心的写作者通常也是马虎的思考者（我敢打包票）。 回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。&lt;&#x2F;p&gt;
&lt;p&gt;　　正确的拼写，标点符号和大小写很重要。
　　更一般的说，如果你的提问写得象个半文盲，你很有可能被忽视。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你在使用非母语的论坛提问，你可以犯点拼写和语法上的小错–但决不能在思考上马虎（没错，我们能弄清两者的分别）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-han-yi-feng-fu-miao-shu-zhun-que-de-biao-ti&quot;&gt;使用含义丰富，描述准确的标题&lt;a class=&quot;zola-anchor&quot; href=&quot;#shi-yong-han-yi-feng-fu-miao-shu-zhun-que-de-biao-ti&quot; aria-label=&quot;Anchor link for: shi-yong-han-yi-feng-fu-miao-shu-zhun-que-de-biao-ti&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　在邮件列表或者新闻组中，大约50字以内的主题标题是抓住资深专家注意力 的黄金时机。别用喋喋不休的“帮帮忙”（更别说“救命啊！！！！！”这 样让人反感的话）来浪费这个机会。不要妄想用你的痛苦程度来打动我们， 别用空格代替问题的描述，哪怕是极其简短的描述。&lt;&#x2F;p&gt;
&lt;p&gt;　　蠢问题： 救命啊！我的膝上机不能正常显示了！
　　聪明问题： XFree86 4.1下鼠标光标变形，Fooware MV1005的显示芯片。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你在回复中提出问题，记得要修改内容标题，表明里面有一个问题。一个看起来象“Re：测试”或者“Re：新bug”的问题很难引起足够重视。另外，引用并删减前文的内容，给新来的读者留下线索。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jing-que-miao-shu-xin-xi-liang-da&quot;&gt;精确描述，信息量大&lt;a class=&quot;zola-anchor&quot; href=&quot;#jing-que-miao-shu-xin-xi-liang-da&quot; aria-label=&quot;Anchor link for: jing-que-miao-shu-xin-xi-liang-da&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;谨慎明确的描述症状。&lt;&#x2F;li&gt;
&lt;li&gt;提供问题发生的环境（机器配置、操作系统、应用程序以及别的什么）。&lt;&#x2F;li&gt;
&lt;li&gt;说明你在提问前是怎样去研究和理解这个问题的。&lt;&#x2F;li&gt;
&lt;li&gt;说明你在提问前采取了什么步骤去解决它。&lt;&#x2F;li&gt;
&lt;li&gt;罗列最近做过什么可能有影响的硬件、软件变更。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;　　尽量想象一个黑客会怎样反问你，在提问的时候预先给他答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　Simon Tatham写过一篇名为《如何有效的报告Bug》的出色短文。强力推荐你也读一读。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hua-bu-zai-duo&quot;&gt;话不在多&lt;a class=&quot;zola-anchor&quot; href=&quot;#hua-bu-zai-duo&quot; aria-label=&quot;Anchor link for: hua-bu-zai-duo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　你需要提供精确有效的信息。这并不是要求你简单的把成吨的出错代码或者数据完全转储摘录到你的提问中。如果你有庞大而复杂的测试条件，尽量把它剪裁得越小越好。&lt;&#x2F;p&gt;
&lt;p&gt;　　这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得 到回答的机会增加；第二，简化问题使你得到有用答案的机会增加；第三，在提炼 你的bug报告的过程中，也许你自己就能找出问题所在或作出更正。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-shuo-zheng-zhuang-bu-shuo-cai-xiang&quot;&gt;只说症状，不说猜想&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhi-shuo-zheng-zhuang-bu-shuo-cai-xiang&quot; aria-label=&quot;Anchor link for: zhi-shuo-zheng-zhuang-bu-shuo-cai-xiang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　告诉黑客们你认为问题是怎样引起的没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，不要加进你自己的理解和推论。让黑客们来诊断吧。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;蠢问题： 我在内核编译中一次又一次遇到SIG11错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？
聪明问题： 我自制的一套K6&#x2F;233系统，主板是FIC-PA2007 （VIA Apollo VP2芯片组），256MB Corsair PC133 SDRAM，在内核编译中频频产生SIG11错误，从开机20分钟以后就有这种情况，开机 前20分钟内从没发生过。重启也没有用，但是关机一晚上就又能工作20分钟。所有 内存都换过了，没有效果。相关部分的典型编译记录如下…。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;an-shi-jian-shun-xu-lie-chu-zheng-zhuang&quot;&gt;按时间顺序列出症状&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-shi-jian-shun-xu-lie-chu-zheng-zhuang&quot; aria-label=&quot;Anchor link for: an-shi-jian-shun-xu-lie-chu-zheng-zhuang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　对找出问题最有帮助的线索，往往就是问题发生前的一系列操作，因此，你的说明 应该包含操作步骤，以及电脑的反应，直到问题产生。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你的说明很长（超过四个段落），在开头简述问题会有所帮助，接下来按时间顺序详述。这样黑客们就知道该在你的说明中找什么。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ming-bai-ni-xiang-wen-shen-me&quot;&gt;明白你想问什么&lt;a class=&quot;zola-anchor&quot; href=&quot;#ming-bai-ni-xiang-wen-shen-me&quot; aria-label=&quot;Anchor link for: ming-bai-ni-xiang-wen-shen-me&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　漫无边际的提问近乎无休无止的时间黑洞。最能给你有用答案的人也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞不太感冒，因此也可以说他们对漫无边际的提问不大感冒。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你明确表述需要回答者做什么（提供建议，发送一段代码，检查你的补丁或是别的），就最有可能得到有用的答案。这会定出一个时间和精力的上限，便于回答者集中精力来帮你，这很凑效。要理解专家们生活的世界，要把专业技能想象为充裕的资源，而回复的时间则是贫乏的资源。解决你的问题需要的时间越少，越能从忙碌的专家口中掏出答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　因此，优化问题的结构，尽量减少专家们解决它所需要的时间，会有很大的帮助–这通常和简化问题有所区别。因此，问“我想更好的理解X，能给点提示吗？”通常比问“你能解释一下X吗？”更好。如果你的代码不能工作，问问它有什么地方不对，比要求别人替你修改要明智得多。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bie-wen-ying-gai-zi-ji-jie-jue-de-wen-ti&quot;&gt;别问应该自己解决的问题&lt;a class=&quot;zola-anchor&quot; href=&quot;#bie-wen-ying-gai-zi-ji-jie-jue-de-wen-ti&quot; aria-label=&quot;Anchor link for: bie-wen-ying-gai-zi-ji-jie-jue-de-wen-ti&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　黑客们总是善于分辨哪些问题应该由你自己解决；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qu-chu-wu-yi-yi-de-yi-wen&quot;&gt;去除无意义的疑问&lt;a class=&quot;zola-anchor&quot; href=&quot;#qu-chu-wu-yi-yi-de-yi-wen&quot; aria-label=&quot;Anchor link for: qu-chu-wu-yi-yi-de-yi-wen&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　别用无意义的话结束提问，例如“有人能帮我吗？”或者“有答案吗？”。 首先：如果你对问题的描述不很合适，这样问更是画蛇添足。其次：由于这 样问是画蛇添足，黑客们会很厌烦你–而且通常会用逻辑上正确的回答来表 示他们的蔑视，例如：“没错，有人能帮你”或者“不，没答案”。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qian-xun-jue-mei-you-hai-chu-er-qie-chang-bang-da-mang&quot;&gt;谦逊绝没有害处，而且常帮大忙&lt;a class=&quot;zola-anchor&quot; href=&quot;#qian-xun-jue-mei-you-hai-chu-er-qie-chang-bang-da-mang&quot; aria-label=&quot;Anchor link for: qian-xun-jue-mei-you-hai-chu-er-qie-chang-bang-da-mang&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;彬　　彬有礼，多用“请”和“先道个谢了”。让大家都知道你对他们花费时间义务提供帮助心存感激。然而，如果你有很多问题无法解决，礼貌将会增加你得到有用答案的机会。&lt;&#x2F;p&gt;
&lt;p&gt;　　（我们注意到，自从本指南发布后，从资深黑客处得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得“先谢了”的言外之意是过后就不会再感谢任何人了。我们的建议是：都道谢。）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-ti-jie-jue-hou-jia-ge-jian-duan-shuo-ming&quot;&gt;问题解决后，加个简短说明&lt;a class=&quot;zola-anchor&quot; href=&quot;#wen-ti-jie-jue-hou-jia-ge-jian-duan-shuo-ming&quot; aria-label=&quot;Anchor link for: wen-ti-jie-jue-hou-jia-ge-jian-duan-shuo-ming&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个补充说明。补充说明不必很长或是很深入；简单的一句“你好，原来是网线出了问题！谢谢大家–Bill”比什么也不说要强。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇学术论文更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。除了表示礼貌和反馈信息以外，这种补充有助于他人在邮件列表&#x2F;新闻组&#x2F;论坛中搜索对你有过帮助的完整解决方案，这可能对他们也很有用。最后（至少？），这种补充有助于所有提供过帮助的人从中得到满足感。如果你自己不是老手或者黑客，那就相信我们，这种感觉对于那些你向他们求助的导师或者专家而言，是非常重要的。问题久拖未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次贴出新问题时尝到甜头。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huan-shi-bu-dong&quot;&gt;还是不懂&lt;a class=&quot;zola-anchor&quot; href=&quot;#huan-shi-bu-dong&quot; aria-label=&quot;Anchor link for: huan-shi-bu-dong&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;　　如果你不是很理解答案，别立刻要求对方解释。象你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），去理解它。如果你真的需要对方解释，记得表现出你已经学到了点什么。比方说，如果我回答你：“看来似乎是zEntry被阻塞了；你应该先清除它。”，然后：一个很糟的后续问题：“zEntry是什么？” 聪明的问法应该是这样：“哦~~~我看过帮助了但是只有-z和-p两个参数中提到了zEntry而且还都没有清楚的解释:&amp;lt;你是指这两个中的哪一个吗？还是我看漏了什么？”&lt;&#x2F;p&gt;
&lt;h2 id=&quot;san-si-er-hou-wen&quot;&gt;三思而后问&lt;a class=&quot;zola-anchor&quot; href=&quot;#san-si-er-hou-wen&quot; aria-label=&quot;Anchor link for: san-si-er-hou-wen&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;以下是几个经典蠢问题，以及黑客在拒绝回答时的心中所想：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我能在哪找到X程序？
问题：我的程序&#x2F;配置&#x2F;SQL申明没有用
问题：我的Windows有问题，你能帮我吗？
问题：我在安装Linux（或者X）时有问题，你能帮我吗？
问题：我怎么才能破解root帐号&#x2F;窃取OP特权&#x2F;读别人的邮件呢？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提问：我能在哪找到X程序？
回答：就在我找到它的地方啊蠢货–搜索引擎的那一头。天呐！还有人不会用Google吗？&lt;&#x2F;p&gt;
&lt;p&gt;提问：我的程序（配置、SQL申明）没有用
回答：这不算是问题吧，我对找出你的真正问题没兴趣–如果要我问你二十个问题才找得出来的话–我有更有意思的事要做呢。&lt;&#x2F;p&gt;
&lt;p&gt;在看到这类问题的时候，我的反应通常不外如下三种：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;你还有什么要补充的吗？&lt;&#x2F;li&gt;
&lt;li&gt;真糟糕，希望你能搞定。&lt;&#x2F;li&gt;
&lt;li&gt;这跟我有什么鸟相关？&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提问：我的Windows有问题，你能帮我吗？
回答：能啊，扔掉萎软的垃圾，换Linux吧。&lt;&#x2F;p&gt;
&lt;p&gt;提问：我在安装Linux（或者X）时有问题，你能帮我吗？
回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的Linux用户组寻求手把手的指导吧（你能在这儿找到用户组的清单）。&lt;&#x2F;p&gt;
&lt;p&gt;提问：我怎么才能破解root帐号&#x2F;窃取OP特权&#x2F;读别人的邮件呢？
回答：想要这样做，说明你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hao-wen-ti-pi-wen-ti&quot;&gt;好问题，坏问题&lt;a class=&quot;zola-anchor&quot; href=&quot;#hao-wen-ti-pi-wen-ti&quot; aria-label=&quot;Anchor link for: hao-wen-ti-pi-wen-ti&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;　　最后，我举一些例子来说明，怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。&lt;&#x2F;p&gt;
&lt;p&gt;蠢问题：我可以在哪儿找到关于Foonly Flurbamatic的资料？
&#x2F;&#x2F; 这种问法无非想得到“STFW”这样的回答。&lt;&#x2F;p&gt;
&lt;p&gt;聪明问题：我用Google搜索过“Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？
&#x2F;&#x2F; 这个问题已经STFW过了，看起来他真的遇到了麻烦。&lt;&#x2F;p&gt;
&lt;p&gt;蠢问题：我从FOO项目找来的源码没法编译。它怎么这么烂？
&#x2F;&#x2F; 他觉得都是别人的错，这个傲慢自大的家伙&lt;&#x2F;p&gt;
&lt;p&gt;聪明问题：FOO项目代码在Nulix 6.2版下无法编译通过。我读过了FAQ，但里面没有提到跟Nulix有关的问题。这是我编译过程的记录，我有什么做得不对的地方吗？
&#x2F;&#x2F; 他讲明了环境，也读过了FAQ，还指明了错误，并且他没有把问题的责任推到别人头上，这个家伙值得留意。&lt;&#x2F;p&gt;
&lt;p&gt;蠢问题：我的主板有问题了，谁来帮我？
&#x2F;&#x2F; 普通黑客对这类问题的回答通常是：“好的，还要帮你拍拍背和换尿布吗？” ，然后按下删除键。&lt;&#x2F;p&gt;
&lt;p&gt;聪明问题：我在S2464主板上试过了X、Y和Z，但没什么作用，我又试了A、B和C。请注意当我尝试C时的奇怪现象。显然边带传输中出现了收缩，但结果出人意料。在多处理器主板上引起边带泄漏的通常原因是什么？谁有好主意接下来我该做些什么测试才能找出问题？
&#x2F;&#x2F; 这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　在最后一个问题中，注意“告诉我答案”和“给我启示，指出我还应该做什么诊断工作”之间微妙而又重要的区别。事实上，后一个问题源自于2001年8月在Linux内核邮件列表上的一个真实的提问。我（Eric）就是那个提出问题的人。我在Tyan S2464主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决那一问题的重要信息。&lt;&#x2F;p&gt;
&lt;p&gt;　　通过我的提问方法，我给了大家值得玩味的东西；我让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，邀请他们与我共同探讨。我告诉他们我所走过的弯路，以避免他们再浪费时间，这是一种对他人时间价值的尊重。后来，当我向每个人表示感谢，并且赞赏这套程序（指邮件列表中的讨论 –译者注）运作得非常出色的时候，一个Linux内核邮件列（lkml）成员表示，问题得到解决并非由于我是这个列表中的“名人”，而是因为我用了正确的方式来提问。我们黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我象个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，给编写这个指南的人一些指导。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhao-bu-dao-da-an-zen-me-ban&quot;&gt;找不到答案怎么办&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhao-bu-dao-da-an-zen-me-ban&quot; aria-label=&quot;Anchor link for: zhao-bu-dao-da-an-zen-me-ban&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;　　如果仍得不到答案，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。&lt;&#x2F;p&gt;
&lt;p&gt;　　总的说来，简单的重复张贴问题是个很糟的想法。这将被视为无意义的喧闹。&lt;&#x2F;p&gt;
&lt;p&gt;　　你可以通过其它渠道获得帮助，这些渠道通常更适合初学者的需要。有许多网上的以及本地的用户组，由狂热的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。&lt;&#x2F;p&gt;
&lt;p&gt;　　另外，你可以向很多商业公司寻求帮助，不论公司大还是小（Red Hat 和LinuxCare 就是两个最常见的例子）。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了–完全可能如此–你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。&lt;&#x2F;p&gt;
&lt;p&gt;　　对大众化的软件，就象Linux之类而言，每个开发者至少会有上万名用户。根本不可能由一个人来处理来自上万名用户的求助电话。要知道，即使你要为帮助付费，同你必须购买同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件要高得多，且内容也不那么丰富）。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;转载源版权信息&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Copyright (C) 2001 by Eric S. Raymond
中文版 Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux)
英文版：&lt;a class=&quot;&quot; href=&quot;http:&#x2F;&#x2F;www.tuxedo.org&#x2F;~esr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;http:&#x2F;&#x2F;www.tuxedo.org&#x2F;~esr&#x2F;faqs&#x2F;smart-questions.html&lt;&#x2F;a&gt;
感谢 Eric 的耐心指点和同意，本文才得以完成并发布，
本指南 英文版版权为 Eric Steven Raymond 所有，
中文版版权由 D.H.Grand[nOBODY&#x2F;Ginux] 所有&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>图解二进制</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/tu-jie-er-jin-zhi/</link>
          <guid>https://ilikexff.cn/tu-jie-er-jin-zhi/</guid>
          <description xml:base="https://ilikexff.cn/tu-jie-er-jin-zhi/">&lt;blockquote&gt;
&lt;p&gt;说明：以下均指8位二进制数形式&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在了解原码之前，先熟悉几个名词.。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-qi-shu&quot;&gt;机器数&lt;a class=&quot;zola-anchor&quot; href=&quot;#ji-qi-shu&quot; aria-label=&quot;Anchor link for: ji-qi-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;数字在计算机中的二进制表现形式。分正负。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;图解&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-11621301338766896621-6fb9b906.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;真值&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;有符号数转二进制之后，其原来对应的值位&lt;strong&gt;真值&lt;&#x2F;strong&gt;，带符号的二进制转为其他进制之后的值称为&lt;em&gt;&lt;strong&gt;形式值&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;图解&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：红色的数字1是十进制-3转二进制之后的符号位&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-10098498248002566295-65794642.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-1&quot;&gt;原码&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;符号位+真值的绝对值，即是带符号的二进制数&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;举例：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;十进制&lt;&#x2F;th&gt;&lt;th&gt;二进制原码&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;+1（正一）&lt;&#x2F;td&gt;&lt;td&gt;0000 0001&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;-1（负一）&lt;&#x2F;td&gt;&lt;td&gt;1000 0001&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：八位二进制取值范围[-127,127]即为[1111 1111,0111 1111]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-2&quot;&gt;反码&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;正数的反码是它本身&lt;&#x2F;li&gt;
&lt;li&gt;负数的反码是在其原码基础上，符号位不变，其余位取反&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;图解：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-1331049284497249101-350ced31.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-3&quot;&gt;补码&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;正数的补码是其本身&lt;&#x2F;li&gt;
&lt;li&gt;负数的补码是在原码基础上，符号位不变，其余位取反后加一&lt;&#x2F;li&gt;
&lt;li&gt;即等价于在反码基础上+1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;图解&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-3796841612373007066-2a7f291f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：二进制加法在后面会介绍&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-4&quot;&gt;番外篇：为什么会有补码的出现？？？？&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;计算机中只有加法&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;从小学开始，亲爱的数学老师就告诉我们，在数学中，一个数减去另一个数&lt;&#x2F;p&gt;
&lt;p&gt;等于该数加上另一个数的相反数(负数)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;举个栗子：用原码计算 &lt;code&gt;1-1=1+(-1)=0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-14180390376761256158-e506c130.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;∴易知，利用二进制原码进行计算时，出现了错误的结果，&lt;code&gt;显然1-1=0而不等于-2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;你可能已经想到，既然原码不行，那么用反码怎么样？继续看…..&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;举个栗子：用反码计算 &lt;code&gt;1-1=1+(-1)=0&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-18027988502619096185-e1dbbd1b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;h2 id=&quot;-5&quot;&gt;注意啦！！！&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;最后的计算结果是&lt;code&gt;-0&lt;&#x2F;code&gt;(负零)，虽然在数学上，0和-0可以等价，但在计算机中不行，因为已经有实例证出，两个二进制反码相减的结果等于-0的数并不唯一，了解更多，可以&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;百度&lt;&#x2F;a&gt;，或者自己摸索。这里不再赘述。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;∴ 在利用其反码进行计算时，也出现了不合理的结论，可见光有原码和反码并不完善，接下来有请压轴大佬补码出场。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-3663699271995589813-b745d611.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;由此,通过&lt;em&gt;&lt;strong&gt;补码&lt;&#x2F;strong&gt;&lt;&#x2F;em&gt;大佬的一番操作，终于将1-1=0证出，成功捍卫了二进制减法的地位！！！！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-6&quot;&gt;进制转换（二进制与十进制）&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;老规矩，正式进入内容之前，有必要了解一下几个相关的概念。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;基数&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;数值位&lt;code&gt;x&lt;&#x2F;code&gt;进制，其基数就是&lt;code&gt;x&lt;&#x2F;code&gt; —这里给出个人笔记上理解，喜欢完整解释的自行 &lt;a href=&quot;https:&#x2F;&#x2F;ilikexff.cn&#x2F;tu-jie-er-jin-zhi&#x2F;www.baidu.com&quot;&gt;百度&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;举个栗子：&lt;strong&gt;十进制的基数位10，二进制的基数位2&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;权&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;也称&lt;strong&gt;位权&lt;&#x2F;strong&gt; 数进制中每一位固定位置对应的单位值。&lt;&#x2F;p&gt;
&lt;p&gt;举个栗子：&lt;&#x2F;p&gt;
&lt;p&gt;十进制的第二位的权位 10，第三位权位100，类推成立&lt;&#x2F;p&gt;
&lt;p&gt;二进制第二位的权位2&lt;&#x2F;p&gt;
&lt;p&gt;第三位权位4 类推成立&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;总结：对于N进制数，整数部分第&lt;code&gt;i&lt;&#x2F;code&gt;位的权为$N^{i-1}$&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14138108637687718183-e49ae0e8.jpeg&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;而小数部分第&lt;code&gt;j&lt;&#x2F;code&gt;位权为$N^{(-j)}$&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;系数，基数，幂的图示&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-5964279234040226951-da5d98dc.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-7&quot;&gt;十进制转二进制（整数）&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-4551935672665525332-bb3ad661.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;小结：记住&lt;strong&gt;除基倒取余&lt;&#x2F;strong&gt; 即确定基数，将原值一直除以基数再记录得到的余数，最后倒着将余数写出，根据情况补位即可完成转换。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-8&quot;&gt;二进制转十进制（整数）&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;补齐二进制位数（注意符号位：0表正，1表负）&lt;&#x2F;li&gt;
&lt;li&gt;将位数乘以对应的权值&lt;&#x2F;li&gt;
&lt;li&gt;相加即可&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;举个栗子：将二进制1010转十进制&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-15253076057933170102-d0fec7fa.jpeg&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特别的，若补足位的二进制符号位为1时，要先取反再换算。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-14174307743488397285-39098105.jpeg&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;小数和负数的进制转换后序更新…..&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-9&quot;&gt;按位与，或，异或，左右移运算&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-10&quot;&gt;按位与（&amp;amp;）&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;图解：&lt;code&gt;3 &amp;amp; 5 = 1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-1224537827999265403-1200d014.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-11&quot;&gt;按位或|&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;图解：&lt;code&gt;2 | 4 = 6&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-13024199376254218033-a33176a7.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-12&quot;&gt;按位异或 ^&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;图解：&lt;code&gt;6 ^ 7 = 1&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-5223363497533853791-b7cfeeb4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-13&quot;&gt;按位非～&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;图解：&lt;code&gt;～ （-5） = 4&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-11736361739125057160-1c147fcc.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-14&quot;&gt;左移运算&amp;lt;&amp;lt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;文解：&lt;code&gt;(-5)&amp;lt;&amp;lt;2=(-20)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;位移对象时进制数的补码&lt;&#x2F;li&gt;
&lt;li&gt;将二进制码左移&lt;code&gt;x&lt;&#x2F;code&gt;位，空出的位置用&lt;code&gt;0&lt;&#x2F;code&gt;填充&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;(-5)的补码：1111 1011
&lt;&#x2F;span&gt;&lt;span&gt;左移2位： 1110 1100
&lt;&#x2F;span&gt;&lt;span&gt;转位原码：1001 0100(-20)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;-15&quot;&gt;右移运算&amp;gt;&amp;gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;文解：&lt;code&gt;(-5)&amp;gt;&amp;gt;2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;(-5)的补码：1111 1011
&lt;&#x2F;span&gt;&lt;span&gt;右移2位：   1111 1110
&lt;&#x2F;span&gt;&lt;span&gt;求出原码:   0000 0010(-2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：上述步骤中的求原码不是必须的，为了方便讲解而已。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-16&quot;&gt;二进制加法&lt;a class=&quot;zola-anchor&quot; href=&quot;#-16&quot; aria-label=&quot;Anchor link for: -16&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;两整数二进制相加时，从低位（右边）开始&lt;&#x2F;li&gt;
&lt;li&gt;依次对每一位进行加法运算&lt;&#x2F;li&gt;
&lt;li&gt;规则：&lt;code&gt;1+1=10,1+0=1,0+0=0,0+1=1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;注意&lt;code&gt;1+1=10&lt;&#x2F;code&gt;满足进位条件，需要向前一位进1，0写在本位&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;图解：&lt;code&gt;23+13 = 36&lt;&#x2F;code&gt;的二进制加法&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;solo-fetchupload-16673569776653302162-32b6139f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS:二进制的减法，乘法和除法与其他部分相关内容将在后序的笔记中更新…感谢阅读与指正。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：&lt;&#x2F;strong&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;support-plan?invite_code=1hq2mccc3t0zm&quot;&gt;https:&#x2F;&#x2F;cloud.tencent.com&#x2F;developer&#x2F;support-plan?invite_code=1hq2mccc3t0zm&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>wblog博客线上部署</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/wblog-bo-ke-xian-shang-bu-shu/</link>
          <guid>https://ilikexff.cn/wblog-bo-ke-xian-shang-bu-shu/</guid>
          <description xml:base="https://ilikexff.cn/wblog-bo-ke-xian-shang-bu-shu/">&lt;h1 id=&quot;springbootbo-ke-bu-shu&quot;&gt;SpringBoot博客部署&lt;a class=&quot;zola-anchor&quot; href=&quot;#springbootbo-ke-bu-shu&quot; aria-label=&quot;Anchor link for: springbootbo-ke-bu-shu&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;huan-jing-zhun-bei&quot;&gt;环境准备&lt;a class=&quot;zola-anchor&quot; href=&quot;#huan-jing-zhun-bei&quot; aria-label=&quot;Anchor link for: huan-jing-zhun-bei&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;bo-ke-xiang-mu-di-zhi&quot;&gt;博客项目地址&lt;a class=&quot;zola-anchor&quot; href=&quot;#bo-ke-xiang-mu-di-zhi&quot; aria-label=&quot;Anchor link for: bo-ke-xiang-mu-di-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;xiaoyivip&#x2F;wblog&quot;&gt;wblog&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;an-zhuang-jdk&quot;&gt;安装JDK&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-zhuang-jdk&quot; aria-label=&quot;Anchor link for: an-zhuang-jdk&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;JDK8以上就行，但建议使用JDK11，下面以JDK11为例。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;下载安装&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;apt-get install openjdk-11-jdk
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置环境变量&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;打开source &#x2F;etc&#x2F;profile，添加如下内容&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;export JAVA_HOME=&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;java-11-openjdk-amd64
&lt;&#x2F;span&gt;&lt;span&gt;export JRE_HOME=${JAVA_HOME}&#x2F;jre
&lt;&#x2F;span&gt;&lt;span&gt;export CLASSPATH=.:${JAVA_HOME}&#x2F;lib:${JRE_HOME}&#x2F;lib
&lt;&#x2F;span&gt;&lt;span&gt;export PATH=${JAVA_HOME}&#x2F;bin:$PATH
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看版本&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;java -version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3602254078247600542-9c357ab0.png&quot; alt=&quot;image-20220803211815252&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;&quot;&gt;安装MySQL&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;安装MySQL5.7docker版本。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;#安装docker
&lt;&#x2F;span&gt;&lt;span&gt;apt install docker.io
&lt;&#x2F;span&gt;&lt;span&gt;# 安装mysql
&lt;&#x2F;span&gt;&lt;span&gt;docker pull mysql:5.7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;服务器安全组中务必放行3307端口，用来远程连接数据库。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;启动mysql&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo docker run -p 3307:3306 --name mysql \
&lt;&#x2F;span&gt;&lt;span&gt;-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql \
&lt;&#x2F;span&gt;&lt;span&gt;-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql \
&lt;&#x2F;span&gt;&lt;span&gt;-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql&#x2F;conf.d \
&lt;&#x2F;span&gt;&lt;span&gt;-e MYSQL_ROOT_PASSWORD=root \
&lt;&#x2F;span&gt;&lt;span&gt;-d mysql:5.7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;3307:3306做了映射，所以外部访问3307即可。当然你自己可以定义用哪些端口号。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看运行状态&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;docker ps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9167600971788706633-a3ea3958.png&quot; alt=&quot;image-20220803215758185&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看日志&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;docker logs mysql
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;其他&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 停止服务
&lt;&#x2F;span&gt;&lt;span&gt;docker stop mysql
&lt;&#x2F;span&gt;&lt;span&gt;# 删除镜像
&lt;&#x2F;span&gt;&lt;span&gt;docker rm mysql
&lt;&#x2F;span&gt;&lt;span&gt;# 重启docker
&lt;&#x2F;span&gt;&lt;span&gt;systemctl restart docker
&lt;&#x2F;span&gt;&lt;span&gt;# 开启开机自启
&lt;&#x2F;span&gt;&lt;span&gt;systemctl enable docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;还有很多关于docker的操作，就自己去补课了。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;导入数据库&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;我这里用的navcat远程客户端操作。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-1&quot;&gt;打jar包&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;使用IDEA打开项目，配置好数据库信息。安装下图操作，生成一个jar包。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3072198618708967127-79399790.png&quot; alt=&quot;image-20220803222349511&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;等待打包完成。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17224273844050347074-c8fca056.png&quot; alt=&quot;image-20220803222535253&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-2&quot;&gt;部署&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;在服务器上创建一个目录，用来存放项目的目录。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 创建目录
&lt;&#x2F;span&gt;&lt;span&gt;mkdir -p &#x2F;root&#x2F;user&#x2F;wblog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;上传刚刚打好的jar包到&#x2F;wblog目录下。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;上传的方法很多，可以用scp命令，也可以用其他ssh客户端，比如xshell，finalshell等。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17730941740274466687-1cd570c4.png&quot; alt=&quot;image-20220803223110362&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;执行命令，运行jar包。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;该命令也是需要切换到wblog目录下执行的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;nohup java -jar jarname.jar &amp;amp;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;jarname.jar指的就是刚刚上传到目录下的jar包，一定要带.jar后最的全称。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;按回车执行之后会出现下面的结果&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1125235331687397903-9ab47699.png&quot; alt=&quot;image-20220805094045051&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;当然了，我这个只是演示，没有在指定的目录下，这就表示jar包已经成功跑起来了，如何查看目前正在运行的java服务呢？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;ps -ef | grep java
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;当然，方法并不唯一。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15287188662961552216-05c913bd.png&quot; alt=&quot;image-20220805094334324&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;查看的结果如上图，箭头所指的就是改服务的PID，后期如果需要，我们可以通过&lt;&#x2F;strong&gt; &lt;code&gt;kill&lt;&#x2F;code&gt;命令将该进程杀死，再重新运行新的java进程。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;上面的步骤走完，不出意外的话，我们打开浏览器，输入服务器的IP访问8080端口就可以正常访问博客网站了。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220805094708232.png&quot; alt=&quot;image-20220805094708232&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;域名访问配置&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在开始之前，默认你已经买了属于自己的域名并且完成备案(非大陆服务器忽略)工作，否则是没办法继续这一步的，网站会被拦截。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说到服务器、域名，国内有很多不错的供应商，比如什么阿里云、百度云、腾讯云、华为云等等，还有一些小的云服务提供商我自己也都用过，但是最后还是回到了阿里云，首先是靠谱，其次价格也厚道，当然了，如果你是新人，还有很多的优惠可以拿这里不打广告，只作个人推荐，我下面也是以阿里云的域名配置为例。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;进入阿里云控制台，找到域名DNS解析。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17026155254490032888-680a222f.png&quot; alt=&quot;image-20220805095717699&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如果没有域名，点击【添加域名】，之后等待解析，【DNS服务器状态】显示正常之后，点击域名进入域名解析详情：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3412956773532835750-68e8a908.png&quot; alt=&quot;image-20220805095853201&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;点击【添加记录】我们添加两个A记录即可，具体如下：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220805100835296.png&quot; alt=&quot;image-20220805100835296&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意，【主机记录】的对方每次只能添加一种记录，所以需要执行两次【添加记录】的操作，分别是www和@。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;www记录的意思就是解析以www开头的记录，映射到对应的IP地址上，而@表示直接解析域名。举个例子：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;www.ilikexff.xyz
&lt;&#x2F;span&gt;&lt;span&gt;ilikexff.xyz
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;上面的两个域名都可以被正常解析访问。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;配置完域名解析之后，我们就可以通过域名进行访问了，方法就是直接将之前的IP地址部分替换为刚刚解析的域名，但是8080端口号不能少，否则是不能正常访问的哈，这是因为我们访问是服务器默认访问的80端口，而我们项目用的端口是8080，所以这里要将端口进行转发，将8080端口转发到域名，使得直接访问域名即可访问到对应的网站，而不再需要输入端口号。这也就是下一步&lt;&#x2F;strong&gt;反向代理技术。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11604968184632008855-1176ff2f.png&quot; alt=&quot;image-20220805101248762&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-4&quot;&gt;反向代理&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;反向代理我们用的是nginx服务。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;安装nginx.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;apt install nginx -y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置nginx&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 切换到nginx的配置目录，创建一个针对博客的配置文件
&lt;&#x2F;span&gt;&lt;span&gt;cd &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;# 创建blog.conf配置文件
&lt;&#x2F;span&gt;&lt;span&gt;touch blog.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;配置内容&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;由于我们是对每一个服务采用独立的配置文件，所以不需要在原生的nginx.conf中作配置，只需要独立的配置&lt;&#x2F;strong&gt; &lt;code&gt;blog.conf&lt;&#x2F;code&gt;即可，因为在源配置文件中有这样一句：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8906456079742622821-7ae4393b.png&quot; alt=&quot;image-20220805102226124&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;这就表示改配置文件会把在&#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;目录下的所有以.conf结尾的文件都自动的包含进来进行加载使用。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在blog.conf中添加下面的内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;    listen       80;
&lt;&#x2F;span&gt;&lt;span&gt;    server_name  www.ilikexff.xyz ilikexff.xyz;
&lt;&#x2F;span&gt;&lt;span&gt;    location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_pass   http:&#x2F;&#x2F;103.133.176.214:8080;
&lt;&#x2F;span&gt;&lt;span&gt;        index  index.html index.htm;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header Host $host;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Real-Ip $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;        proxy_set_header X-Forwarded-For $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    access_log &#x2F;logs&#x2F;ilikexff.xyz.access.log;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;作为使用教程，我们只需要大致了解下面几点即可：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;listen       : 监听80端口，也就是我们上面提到的默认访问端口&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;server_name:服务名，这里指的就是需要将服务转发到哪些地址，比如前面配好的两个域名。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;proxy_pass : 反向代理的地址，也就是使用IP访问时候的地址，他会将该地址直接转发到配置好的域名下，达到访问域名即可访问站点的效果。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;access_log：日志记录文件。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于nginx，作为一篇搭建教程来说，上面的东西足够了，但是作为一门技术来说，上面的东西又只是皮毛，所以想要了解更多的内容还是得自己去学。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;到此为止，反向代理部分就结束了，重启nginx服务之后，在浏览器输入:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ilikexff.cn&#x2F;wblog-bo-ke-xian-shang-bu-shu&#x2F;www.ilikexff.xyz&quot;&gt;www.ilikexff.xyz&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;ilikexff.xyz&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;两个域名之一都可以正常访问站点了，无需再追加8080端口。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;下面给几个关于nginx得常用命令：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 启动
&lt;&#x2F;span&gt;&lt;span&gt;systemctl start nginx
&lt;&#x2F;span&gt;&lt;span&gt;# 停止
&lt;&#x2F;span&gt;&lt;span&gt;systemctl stop nginx
&lt;&#x2F;span&gt;&lt;span&gt;# 重启
&lt;&#x2F;span&gt;&lt;span&gt;systemctl reload nginx
&lt;&#x2F;span&gt;&lt;span&gt;# 状态查看
&lt;&#x2F;span&gt;&lt;span&gt;systemctl status nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-5&quot;&gt;https加密访问&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;经过上面反向代理步骤，我们已经可以通过域名访问博客了&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220805105436017.png&quot; alt=&quot;image-20220805105436017&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;但是如上显示，访问得时候浏览器会提示网站不安全，即我们还是通过普通得http协议进行访问，这是一种很不安全的协议，任何中间人都可以通过技术手段对网站收发的数据进行拦截，尽管说作为普通的博客站点，我们也许没有如支付，转账等敏感的操作，但是安全起见，我们需要使用到另外一种协议，HTTPS(HTTP+SSL)，就目前而言，这是一种足够安全的协议，具体为什么安全，这是个话题，请自行了解。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;(很多博客都有友链功能，很多朋友的博客对友链的要求都需要是https安全访问的，所以这一步必不可少)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;申请SSL证书&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;同样以阿里云为例：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;yundun.console.aliyun.com&#x2F;?p=cas#&#x2F;certExtend&#x2F;free&quot;&gt;证书申请&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17953626554636537916-8fd9aa86.png&quot; alt=&quot;image-20220731200753336&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13168835631517441019-fc7d82c5.png&quot; alt=&quot;image-20220731200851618&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;下载证书之后，在&lt;&#x2F;strong&gt; &lt;code&gt;etc&#x2F;nginx&#x2F;&lt;&#x2F;code&gt;新建一个 &lt;code&gt;cert&lt;&#x2F;code&gt;文件夹，把证书中两个后缀名为.pem和.key的文件重命名为 &lt;code&gt;sslconfigure.pem&lt;&#x2F;code&gt;和 &lt;code&gt;sslconfigure.key&lt;&#x2F;code&gt;，并放到cert目录下，方便管理。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-6041888645467205060-f74966d8.png&quot; alt=&quot;image-20220805111607151&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;在之前的&lt;&#x2F;strong&gt; &lt;code&gt;blog.conf&lt;&#x2F;code&gt;配置文件中新增如下内容：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;upstream backend {
&lt;&#x2F;span&gt;&lt;span&gt;    server localhost:8080; # Solo 监听端口
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;# 这里存放之前的内容部分
&lt;&#x2F;span&gt;&lt;span&gt;server {
&lt;&#x2F;span&gt;&lt;span&gt;        listen 443 ssl;  # 1.1版本后这样写
&lt;&#x2F;span&gt;&lt;span&gt;        server_name www.iliexff.xyz; #填写绑定证书的域名
&lt;&#x2F;span&gt;&lt;span&gt;       
&lt;&#x2F;span&gt;&lt;span&gt;        ssl_certificate &amp;quot;&#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;sslconfigure.pem&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        ssl_certificate_key &amp;quot;&#x2F;etc&#x2F;nginx&#x2F;cert&#x2F;sslconfigure.key&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;        ssl_session_timeout 5m;
&lt;&#x2F;span&gt;&lt;span&gt;        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置
&lt;&#x2F;span&gt;&lt;span&gt;        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置
&lt;&#x2F;span&gt;&lt;span&gt;        ssl_prefer_server_ciphers on;
&lt;&#x2F;span&gt;&lt;span&gt;      location &#x2F; {
&lt;&#x2F;span&gt;&lt;span&gt;            proxy_pass http:&#x2F;&#x2F;backend$request_uri;
&lt;&#x2F;span&gt;&lt;span&gt;            proxy_set_header Host $host:$server_port;
&lt;&#x2F;span&gt;&lt;span&gt;            proxy_set_header X-Real-IP  $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;            proxy_set_header http_x_forwarded_for $remote_addr;
&lt;&#x2F;span&gt;&lt;span&gt;            client_max_body_size 10m;
&lt;&#x2F;span&gt;&lt;span&gt; root   html; #站点目录，绝对路径
&lt;&#x2F;span&gt;&lt;span&gt;            index  index.html index.htm;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;重启nginx&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;systemctl reload nginx
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;再次访问博客&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14611797948156626831-254ae22e.png&quot; alt=&quot;image-20220805112253826&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;哇哦！这不就成功了吗？so easy to happy!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;全剧终，附上我的博客地址，欢迎成功走到这一步的小伙伴来换个友链哈！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>效率工具Markdown</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/xiao-lu-gong-ju-markdown/</link>
          <guid>https://ilikexff.cn/xiao-lu-gong-ju-markdown/</guid>
          <description xml:base="https://ilikexff.cn/xiao-lu-gong-ju-markdown/">&lt;!-- ## 概念概述

[百科链接](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;markdown&#x2F;3245829?fr=aladdin)

`Markdown`是一种[轻量级标记语言](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;轻量级标记语言&#x2F;52671915)，创始人为约翰·格鲁伯（英语：`John Gruber`）。 它允许人们使用易读易写的[纯文本格式](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;纯文本格式&#x2F;9862288)编写文档，然后转换成有效的`XHTML`（或者`HTML`）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。

由于`Markdown`的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用`Markdown`来撰写帮助文档或是用于论坛上发表消息。 如[GitHub](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;GitHub&#x2F;10145341)、[Reddit](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;Reddit&#x2F;1272010)、[Diaspora](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;Diaspora&#x2F;10726893)、[Stack Exchange](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;Stack Exchange&#x2F;13777796)、[OpenStreetMap](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;OpenStreetMap&#x2F;3171606) 、[SourceForge](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;SourceForge&#x2F;6562141)、[简书](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;简书&#x2F;5782216)等，甚至还能被使用来撰写[电子书](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;电子书&#x2F;346054)。

## 标题格式

* 用#号开头并空一格输入文字表示标题
* 一个井号代表一级标题，以此类推

&gt; 实例：
&gt;
&gt; # h1
&gt;
&gt; ## h2
&gt;
&gt; #### h4

## 文本格式

- 两个*号包围表示字体加粗
- 三个星或者下划线号表示斜体

## 有序列表

一个加号减号或者星号开头代表有序列表

&gt; 实例：
&gt;
&gt; - Java
&gt; - C++
&gt; - JS

## 无序列表

使用数字+.+一个空格

&gt; 实例：
&gt;
&gt; 1. 学习
&gt; 2. 游戏
&gt; 3. 听音乐

## 代码

三个```开头即可插入代码

三个```编程语言名称即可插入指定编程语言的代码块

```c++
cout&lt;&lt;&quot;hello Tisox&quot;&lt;&lt;endl;
```

## 数学公式

如果要在文本行中插入数学公式

在公式前后加上一个$符号

如果要插入一个数学区块，在公式前后分别加上两个$$符号

$$
f(x)=x^2+3
$$

## 表格

| 表头   | 表头   |
| ------ | ------ |
| 单元格 | 单元格 |
| 单元格 | 单元格 |

&gt; 实例：
&gt; 竖线&#x27;|&#x27;构造表格列结构
&gt; 多虚线&#x27;----&#x27;构造表格行结构

## 链接

&gt; 格式：&#x27;\[]()&#x27;
&gt; [] 中书写超链接的名称
&gt; () 中书写超链接地址

[八尺妖剑的博客](https:&#x2F;&#x2F;www.waer.ltd)

## 图片

&gt; 格式：&#x27;\!\[]()&#x27;

- 开头一个感叹号 !
- 接着一个方括号，里面放上图片的替代文字
- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 &#x27;title&#x27; 属性的文字。

## 转义字符

Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：

![image-20220906143617280](https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220906143617280.png)

## 案例

| 名称 | 列表                 | 元祖               | 字典                       | 集合               |
| ---- | -------------------- | ------------------ | -------------------------- | ------------------ |
| 英文 | list                 | tuple              | dict                       | set                |
| 表示 | \[]                  | \()                | \{key1:value1,key2:value2} | \{,,,}             |
| 特点 | 不需要具有相同的类型 | 元祖的元素不能修改 | 键值对形式                 | 无序的不重复元素列 |

****

## 使用技巧

### 技巧一

&gt; 如何在序列表之后插入代码块。实现下面的效果：

1. 下面是一段代码

   ```java
   while(day++ &lt; life.length) {
       love++;&#x2F;&#x2F;♥♥♥
   }
   return FGTWDLHNN_1000;
   ```

2. 下面还是一段代码块

   ```cpp
   while(day++ &lt; life.length) {
       love++;&#x2F;&#x2F;♥♥♥
   }
   return FGTWDLHNN_1000;
   ```

   ****

**实现方式**

&gt; - 按照有序列表的语法打出第1个序号，后跟需要的文字说明。
&gt; - 在上一步的文字说明写完之后直接按下&lt;kbd&gt;回车键&lt;&#x2F;kbd&gt;此时会在下一行形成序号2，但这不是我们想要的，我们需要在这个序号2的位置放一块代码片段。
&gt; - 接着上一步的&lt;kbd&gt;回车&lt;&#x2F;kbd&gt;操作之后出现序号2，此时我们再按一下&lt;kbd&gt;Tab&lt;&#x2F;kbd&gt;,之后会把新的序号2变成序号1的子序号1.
&gt; - 紧接上一步，出现子序号1时，我们按下&lt;kbd&gt;删除&lt;&#x2F;kbd&gt;把子序号删除掉，保持删除后的光标位置不要动
&gt; - 在上一步删除操作结束后，我们直接在光标处开始使用代码块的\```languageType语法正常插入自己的代码。
&gt; - 到这里，你已经成功在序号1后插入一段代码块了，那么我们光标移出代码块的位置，直接按下&lt;kbd&gt;回车&lt;&#x2F;kbd&gt;
&gt; - 你会发现它会自动工具上一条序号的大小自动排版下一个序号，也就是序号2，到此为止，我们重复上面的步骤，就可以如此往复的在每一个序号之后插入代码块，实现上面这种效果了。

**动图演示**

![md](https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;md.gif)

[视频版地址](https:&#x2F;&#x2F;clipchamp.com&#x2F;watch&#x2F;zprdxKQOycu)

****

##  参考&#x2F;资源

- [markdown官网](https:&#x2F;&#x2F;www.markdownguide.org&#x2F;)
- [Typora软件下载](https:&#x2F;&#x2F;www.typora.io&#x2F;) --&gt;
</description>
      </item>
      <item>
          <title>邪恶的非常量全局变量</title>
          <pubDate>Thu, 15 Jun 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/xie-e-de-fei-chang-liang-quan-ju-bian-liang/</link>
          <guid>https://ilikexff.cn/xie-e-de-fei-chang-liang-quan-ju-bian-liang/</guid>
          <description xml:base="https://ilikexff.cn/xie-e-de-fei-chang-liang-quan-ju-bian-liang/">&lt;p&gt;在编程过程中,避免使用全局变量是一个良好的编程实践建议。当然,这里的全局变量主要是指 &lt;strong&gt;非常量全局变量&lt;&#x2F;strong&gt;;&lt;&#x2F;p&gt;
&lt;p&gt;尽管在小型项目中,这一点似乎看起来人畜无害,但是在大型项目中往往会出现很多问题。&lt;&#x2F;p&gt;
&lt;p&gt;新手程序员往往比较喜欢使用大量的全局变量,因为这样使用起来方便直接,特别是当设计到不同函数的多次调用传递参数时。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;若无特别说明,本文后续内容中提到的全局变量均指 &lt;strong&gt;非常量全局变量&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;quan-ju-bian-liang-de-qian-zai-wei-xian&quot;&gt;全局变量的潜在危险&lt;a class=&quot;zola-anchor&quot; href=&quot;#quan-ju-bian-liang-de-qian-zai-wei-xian&quot; aria-label=&quot;Anchor link for: quan-ju-bian-liang-de-qian-zai-wei-xian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;到目前为止,全局变量危险的最大原因是因为他们的值可以在任何地方被任何调用的函数更改,并且程序员没有简单的方法知道这种情况的发生,考虑下面程序:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; g_mode; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 声明全局变量（默认会被初始化为0）
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;doSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    g_mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 将全局变量 g_mode 设置为 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    g_mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 注意：这是将全局变量 g_mode 设置为 1，而不是声明一个局部的 g_mode 变量！
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;doSomething&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 程序员可能仍然期望 g_mode 的值是 1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; 但是 doSomething 函数已经将其更改为 2！
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;g_mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;未检测到威胁。&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;发射核导弹...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;请注意，程序员将变量&lt;code&gt;g_mode&lt;&#x2F;code&gt;设置为&lt;em&gt;1&lt;&#x2F;em&gt; ，然后调用&lt;code&gt;doSomething()&lt;&#x2F;code&gt; 。除非程序员明确知道&lt;code&gt;doSomething()&lt;&#x2F;code&gt;将更改&lt;code&gt;g_mode&lt;&#x2F;code&gt;的值，否则他或她可能不会期望&lt;code&gt;doSomething()&lt;&#x2F;code&gt;更改该值！因此， &lt;code&gt;main()&lt;&#x2F;code&gt;的其余部分并不像程序员期望的那样工作,这就导致一枚无情的核弹被发射,恭喜你喜提一份 &lt;strong&gt;公牢&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;简而言之,全局变量使得程序的状态不可预测,每一个函数调用都具有潜在的危险,并且程序员没有简单的方法来查看和防范这些危险。那么,有什么理由不使用局部变量呢?&lt;&#x2F;p&gt;
&lt;p&gt;除此之外,还有很多其他不推荐使用全局变量的充分理由。&lt;&#x2F;p&gt;
&lt;p&gt;对于全局变量,下面的代码并不罕见:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;someFunction&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;g_mode &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; do something good
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就短短的几行代码,假设此时你的程序出现错误无法工作,因为全局变量g_mode的值是3而不是4导致。你怎么解决?很好,你首先需要找到名为g_mode的全局变量可能存在的位置并追踪它的赋值等操作,这些工作不仅仅值涉及到你这点代码,很有可能存在于很多毫不相干的代码中!&lt;&#x2F;p&gt;
&lt;p&gt;将局部变量声明为尽可能靠近其使用位置的关键原因之一是，这样做可以最大限度地减少您需要查看以了解变量的作用的代码量。&lt;&#x2F;p&gt;
&lt;p&gt;全局变量处于相反的一端——因为它们可以在任何地方访问，您可能必须查看整个程序才能了解它们的用法。在小项目中，这可能不是问题。但在大项目中,谁说得准呢是吧?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如,你发现某个全局变量在你的项目中被引用了545次。如果你一开始没有很好的文档跟踪记录,那么你可能必须仔细查看这个变量在每一个地方的使用,以了解它在不同情况下的使用方式、生效条件、影响的逻辑功能等等。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;另外,全局变量还会降低程序模块化程度和灵活性 :&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当函数依赖全局变量时，函数的行为可能受到外部状态的影响，无法单独测试或理解其逻辑。&lt;&#x2F;p&gt;
&lt;p&gt;例如，函数可能隐式依赖某个全局变量的值，而这个值又可能在其他地方被改变，导致函数的行为不可预测。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果函数与全局变量绑定过紧，这个函数就无法在其他场景中复用，除非那些场景中也包含相同的全局变量。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;quan-ju-bian-liang-de-chu-shi-hua-wen-ti&quot;&gt;全局变量的初始化问题&lt;a class=&quot;zola-anchor&quot; href=&quot;#quan-ju-bian-liang-de-chu-shi-hua-wen-ti&quot; aria-label=&quot;Anchor link for: quan-ju-bian-liang-de-chu-shi-hua-wen-ti&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;静态变量(包括全局变量)的初始化时程序启动的一部分,在&lt;code&gt;main&lt;&#x2F;code&gt;函数执行之前,这分为两个阶段执行:&lt;&#x2F;p&gt;
&lt;p&gt;第一阶段称为&lt;strong&gt;静态初始化&lt;&#x2F;strong&gt;。静态初始化分为两个步骤：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局变量带有&lt;&#x2F;strong&gt; constexpr &lt;strong&gt;初始化器（包括字面值）的会被初始化为这些指定的值&lt;&#x2F;strong&gt;，这被称为&lt;strong&gt;常量初始化&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;没有初始化器的全局变量会被初始化为零&lt;&#x2F;strong&gt;。由于零是一个 constexpr 值，因此零初始化也被认为是静态初始化的一种形式。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;第二个阶段被称为&lt;strong&gt;动态初始化&lt;&#x2F;strong&gt;。这一阶段更为复杂和细致，但其核心是：&lt;strong&gt;带有非&lt;&#x2F;strong&gt; constexpr &lt;strong&gt;初始化器的全局变量会在此阶段被初始化&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;以下是一个非 constexpr 初始化器的示例：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;g_something&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; non-constexpr initialization
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在单个文件中，对于每个阶段，全局变量通常按定义顺序进行初始化（对于动态初始化阶段，此规则有一些例外）。鉴于此，需要小心，不要让变量依赖于稍后才会初始化的其他变量的初始化值。例如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; forward declaration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; forward declaration
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;g_x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; g_x is initialized first
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;g_y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() }&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initX&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; g_y; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F; g_y isn&amp;#39;t initialized when this is called
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initY&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; g_x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; g_y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;更严重的问题是,静态对象在不同翻译单元之间的初始化顺序是不明确的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;给定两个.cpp文件,任意一个文件都可以首先初始化全局变量。如果其中a.cpp中某个具有静态持续时间的变量使用b.cpp中定义的静态持续时间进行变量初始化,则b.cpp中的变量有50%的几率尚未初始化。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;shi-yong-quan-ju-bian-liang-de-yi-xie-jian-yi&quot;&gt;使用全局变量的一些建议&lt;a class=&quot;zola-anchor&quot; href=&quot;#shi-yong-quan-ju-bian-liang-de-yi-xie-jian-yi&quot; aria-label=&quot;Anchor link for: shi-yong-quan-ju-bian-liang-de-yi-xie-jian-yi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;首先,在全局变量名加上&lt;code&gt;g_&lt;&#x2F;code&gt;前缀,或者更好的做法是将他们放在命名空间中,以减少出现命名冲突的可能性:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;例如,下面的代码;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; gravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9.8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; gravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以调整为:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;constants
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; gravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9.8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; constants::gravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; are global&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6e2e32;color:#839496;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;其次,一个不错的做法是对变量进行“封装化”,而不是允许直接访问全局变量。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;确保变量只能从声明文件内访问,例如将其设置为static或者const,然后提供外部访问函数来处理该变量。这些功能可以确保维护正确的使用,例如进行输入验证、范围检测等。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在编写使用全局变量的独立函数时,不要直接在函数体中使用该变量,相反,我们应该将其作为函数参数传递使用。这样一来,如果你的函数需要在某些情况下使用不同的值,只需要修改参数即可,这也是模块化编程的一种良好实践。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;例如:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;constants
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; gravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9.8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;instantVelocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; constants::gravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; time;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;instantVelocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;建议的写法是:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;constants
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;constexpr &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double&lt;&#x2F;span&gt;&lt;span&gt; gravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;9.8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;instantVelocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int time&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;double gravity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; gravity &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; time;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    std::cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;instantVelocity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, constants::gravity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#dc322f;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;感谢阅读!&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>MySQL_事务特性与隔离级别详解</title>
          <pubDate>Tue, 07 Feb 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/mysql-shi-wu-te-xing-yu-ge-chi-ji-bie-xiang-jie/</link>
          <guid>https://ilikexff.cn/mysql-shi-wu-te-xing-yu-ge-chi-ji-bie-xiang-jie/</guid>
          <description xml:base="https://ilikexff.cn/mysql-shi-wu-te-xing-yu-ge-chi-ji-bie-xiang-jie/">&lt;h2 id=&quot;shi-wu-te-xing&quot;&gt;事务特性&lt;a class=&quot;zola-anchor&quot; href=&quot;#shi-wu-te-xing&quot; aria-label=&quot;Anchor link for: shi-wu-te-xing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;wu-da-lang-de-qing-ren-jie&quot;&gt;武大郎的情人节&lt;a class=&quot;zola-anchor&quot; href=&quot;#wu-da-lang-de-qing-ren-jie&quot; aria-label=&quot;Anchor link for: wu-da-lang-de-qing-ren-jie&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;照本宣科的概念总是味同嚼蜡。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在介绍&lt;code&gt;MySQL&lt;&#x2F;code&gt;事务的概念之前，先通过一个简单但比较经典的案例，看看为什么数据库会有事务、需要事务。&lt;&#x2F;p&gt;
&lt;p&gt;当前时间是 &lt;code&gt;2023-2-6&lt;&#x2F;code&gt; 。这不过几天就是一年一度的 &lt;strong&gt;&lt;del&gt;情人&lt;&#x2F;del&gt;节&lt;&#x2F;strong&gt; 了，你不得给你女朋友微信转个&lt;code&gt;520&lt;&#x2F;code&gt;？那么问题来了，你的&lt;code&gt;520&lt;&#x2F;code&gt;块&lt;code&gt;RMB&lt;&#x2F;code&gt;如何保证从自己的银行卡转出去之后一定准确无误抵达女朋友银行卡上？&lt;&#x2F;p&gt;
&lt;p&gt;我们假设你女朋友卡上现在余额1000元，自己银行卡也是1000元，具体信息如下:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;姓名&lt;&#x2F;th&gt;&lt;th&gt;银行卡余额&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;女朋友(潘金莲)&lt;&#x2F;td&gt;&lt;td&gt;￥1000&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;你自己(武大郎)&lt;&#x2F;td&gt;&lt;td&gt;￥1000&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;正常情况下，在转账结束之后，自己和潘金莲卡上的信息如下:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;姓名&lt;&#x2F;th&gt;&lt;th&gt;银行卡余额&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;潘金莲&lt;&#x2F;td&gt;&lt;td&gt;￥1520&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;武大郎&lt;&#x2F;td&gt;&lt;td&gt;￥480&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;为了保证你的&lt;code&gt;520&lt;&#x2F;code&gt;块一定会准确无误的转到女朋友潘金莲卡里而不是随机一个人的银行卡上(比如转到博主我的卡里),这就涉及到了数据库的事务特性，用来保证&lt;strong&gt;武大郎&lt;&#x2F;strong&gt;银行卡减少&lt;code&gt;520&lt;&#x2F;code&gt;块，&lt;strong&gt;潘金莲&lt;&#x2F;strong&gt;卡里就一定会增加&lt;code&gt;520&lt;&#x2F;code&gt;块的这个过程(或者说达到这个结果)，使得转账整个操作要么全部成功，要么全部失败。这就是&lt;code&gt;MySQL&lt;&#x2F;code&gt;事务。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;si-da-te-xing&quot;&gt;四大特性&lt;a class=&quot;zola-anchor&quot; href=&quot;#si-da-te-xing&quot; aria-label=&quot;Anchor link for: si-da-te-xing&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20230206193522.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;MySQL&lt;&#x2F;code&gt;数据库是完全支持事务操作的。&lt;&#x2F;p&gt;
&lt;p&gt;事务是一组顺序的数据库操作操作，其执行就像是一个单独的工作单元一样。换句话说，除非组内的每个单独操作都成功，否则事务永远不会完成。如果事务中的任何操作失败，则整个事务将失败。&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;code&gt;MySQL&lt;&#x2F;code&gt;中，事务主要有下面四大特性，也就是常说的&lt;code&gt;ACID&lt;&#x2F;code&gt;四大属性。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;原子性&lt;&#x2F;strong&gt;(&lt;code&gt;A&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;用来确保所有操作要么全部成功，要么全部失败(回滚到操作之前的状态)。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;比如武大郎给潘金莲转账&lt;code&gt;520&lt;&#x2F;code&gt;块这个操作，转账之后要保证武大郎转过去&lt;code&gt;520&lt;&#x2F;code&gt;都到了潘金莲卡里，自己卡里少了&lt;code&gt;520&lt;&#x2F;code&gt;，潘金莲卡里多了&lt;code&gt;520&lt;&#x2F;code&gt;。这个操作过程是在一个事务内执行，所以对于该事务来说，这是一个无法也不应该拆分的操作，就是原子性。&lt;&#x2F;p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;strong&gt;一致性(&lt;code&gt;C&lt;&#x2F;code&gt;)&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;确保数据库在成功提交事务之后的一个正确状态。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;比如武大郎给潘金莲转账&lt;code&gt;￥520&lt;&#x2F;code&gt;，潘金莲和武大郎卡里的钱同时增减&lt;code&gt;￥520&lt;&#x2F;code&gt;,这个过程是同时进行的，要么全部提交，转账结束，要么全部不提交，转账失败。&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;strong&gt;隔离性(&lt;code&gt;I&lt;&#x2F;code&gt;)&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;通过引入锁的概念，实现即使在并发环境下，事务之间不会相互影响，独立运行。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;武大郎给潘金莲转过去的&lt;code&gt;￥520&lt;&#x2F;code&gt;,并不会被武大郎或者潘金莲身边也在进行转账的其他人收到，也就是说，&lt;code&gt;MySQL&lt;&#x2F;code&gt;的&lt;code&gt;隔离性&lt;&#x2F;code&gt;保证了彼此转账操作之间的独立。&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;&lt;strong&gt;持久性(&lt;code&gt;D&lt;&#x2F;code&gt;)&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;确保在数据库系统出现故障的情况下，已经提交执行的事务结果仍然存在，也就是事务一旦提交成功，这个事务所带来的结果将会是永久性的，不能再次被修改，无法撤回。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;武大郎给潘金莲转账的&lt;code&gt;￥520&lt;&#x2F;code&gt;,一旦被潘金莲确认并成功收款之后，这&lt;code&gt;￥520&lt;&#x2F;code&gt;将会一直存在潘金莲卡里，而武大郎卡里减少的&lt;code&gt;￥520&lt;&#x2F;code&gt;也将不会返回，这一整个过程已经被持久化。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;&quot;&gt;事务的使用&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在&lt;code&gt;MySQL&lt;&#x2F;code&gt;中，事务以&lt;code&gt;START TRANSACTION&lt;&#x2F;code&gt;开始，以&lt;code&gt;COMMIT&lt;&#x2F;code&gt;(提交)或者&lt;code&gt;ROLLBACK&lt;&#x2F;code&gt;(回滚)结束。语法格式如下。(或者你也可以使用&lt;code&gt;BEGIN&lt;&#x2F;code&gt;来代替&lt;code&gt;START TRANSACTION&lt;&#x2F;code&gt;)。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;START TRANSACTION&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;{sql statement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;{sql statement &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;COMMIT or ROLLBACK&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;COMMIT&lt;&#x2F;code&gt;主要用于提交事务，当一个事务完成时，可以使用&lt;code&gt;COMMIT&lt;&#x2F;code&gt;命令提交事务，事务一旦成功提交，那么本次事务执行的操作将会全部生效。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;ROLLBACK&lt;&#x2F;code&gt;命令则是用来回滚事务的，如果数据库执行出现异常或者主动执行回滚操作，那么本次事务所有的修改都会回到解放前，之前所有的修改将会全部失效。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;下面开始阅读长篇爱情故事《&lt;strong&gt;武大郎的情人节&lt;&#x2F;strong&gt;》在故事中学习事务的使用。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-1&quot;&gt;&lt;strong&gt;第一回:大郎转账又止&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;此时还没到情人节，武大郎和潘金莲荷包里都还有&lt;code&gt;￥1000&lt;&#x2F;code&gt;，此时武大郎小情人&lt;strong&gt;西施&lt;&#x2F;strong&gt;也登场了，它卡里有&lt;code&gt;￥1500&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; users;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | name   | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 潘金莲 |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 武大郎 |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 西施   |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1500&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;After a long time......&lt;&#x2F;code&gt;，就是今天，就是这个时候，情人节到来，一个万里无云的清晨，此时武大郎已经在和面了，突然想起来今天时情人节，于是停下手中的擀面杖，短粗黝黑的手掌习惯性的在包了浆的围巾上揩了一把，掏出来兜里的手机。&lt;&#x2F;p&gt;
&lt;p&gt;只见他看了一眼屏幕，手指轻轻往上一划，手机就解开了，哦买嘎！原来是刚出来的&lt;code&gt;iPhone15PorMax&lt;&#x2F;code&gt;。打开微信，准备给潘金莲转个&lt;code&gt;￥520&lt;&#x2F;code&gt;…&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 开始转账
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;START TRANSACTION&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;520 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;武大郎&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;520 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;潘金莲&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就是一瞬间的事，它突然想起来自己还有一个小情人 &lt;strong&gt;西施&lt;&#x2F;strong&gt;。这可不好办啊，不能只给一个人转啊，都是肉，这得雨露均沾啊，一看自己卡里只有&lt;code&gt;1000&lt;&#x2F;code&gt;块，如果给潘金莲转&lt;code&gt;520&lt;&#x2F;code&gt;，那西施这就不够了呀，所以他取消了这次得转账操作。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 取消转账
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ROLLBACK&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;另一头的潘金莲无聊的打开自己的支付宝一看余额，哎呦卧槽，这死鬼怎么跟个木头一样，情人节也不表示表示，一点儿都不浪漫…&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | name   | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 潘金莲 |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 武大郎 |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;听了武大郎的故事，我一下子就悟了，原来这就是**&lt;code&gt;MySQL&lt;&#x2F;code&gt;事务的回滚**啊！&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-2&quot;&gt;第二回:潘金莲收款甚是欢喜&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;转眼也是到了下午，武大郎的烧饼摊子很是火热，有一个人前来买瓜,不对。前来买烧饼的人络绎不绝。大郎看着眼前人都是成双成对，心里不免一阵失落，要是潘美人儿在身边该多好啊，如此想着，他买烧饼的节奏也在不停的加快了。时不时会听到一阵播报声:&lt;code&gt;支付宝到账100元…支付宝到账55元…&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;武大郎&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;03&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;晚上回到家里，打开支付宝一看，今天卖烧饼赚了&lt;code&gt;500&lt;&#x2F;code&gt;块。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;武大郎&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | name   | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 武大郎 |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1500&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大郎面露笑容，这下可以给两个大美人儿转&lt;code&gt;520&lt;&#x2F;code&gt;了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 开始转账(开始事务)
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;START TRANSACTION&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 扣除自己卡里1040块
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;520 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;武大郎&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;520 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;武大郎&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 给潘金莲转了520
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;520 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;潘金莲&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 给西施也转了520块
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; users &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;520 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;西施&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;转账结束，此时三个人的卡里余额情况:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; users;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | name   | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 潘金莲 |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1520&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 武大郎 |   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;460&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 西施   |  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2020&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+-------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;支付宝到账520元....&lt;&#x2F;code&gt;。潘金莲和西施的手机同时传来提示。当然，两人并没有挨在一起，此时西施正趟在一个男人怀里，妩媚多姿，很是骚气。&lt;&#x2F;p&gt;
&lt;p&gt;快看，眼前这个男人目光如剑，死死的盯着怀里这个女人，一股没来由的怒气把头上的帽子都冲掉了。哇哦，这个男人正是前往东土大唐取经的唐三藏，难怪是个光头。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;看了大郎的这第二回，我又悟了，原来这就是&lt;code&gt;MySQL&lt;&#x2F;code&gt;事务的提交啊,秒!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;大型长篇连续爱情故事《&lt;strong&gt;武大郎的情人节&lt;&#x2F;strong&gt;》到这里就暂告一段落了，接下提一下关于&lt;code&gt;MySQL&lt;&#x2F;code&gt;的事务自动提交。&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;code&gt;MySQL&lt;&#x2F;code&gt;中，默认支持并开启事务的自动提交，也就是**&lt;code&gt;AUTOCOMMIT&lt;&#x2F;code&gt;**。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;MySQL&lt;&#x2F;code&gt; 默认将 &lt;code&gt;AUTOCOMMIT &lt;&#x2F;code&gt;设置为 &lt;code&gt;true&lt;&#x2F;code&gt;，这意味着每个单独的语句都作为其自己的事务执行并自动提交。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; users;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上述语句开启自动提交时，则与下面的语句等效。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;START TRANSACTION&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; users;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;COMMIT&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;事务自动提交会在我们手动指定事务时被关闭，可以通过下面的命令开启或者关闭事务自动提交。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span&gt; AUTOCOMMIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 或者
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span&gt; AUTOCOMMIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; OFF
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;使用下面的命令可以查看当前数据库&lt;code&gt;AUTOCOMMIT&lt;&#x2F;code&gt;变量的取值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; SHOW VARIABLES &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LIKE &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;AUTOCOMMIT&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;---------------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| Variable_name | Value |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;---------------+-------+
&lt;&#x2F;span&gt;&lt;span&gt;| autocommit    | ON    |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;---------------+-------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;事务的面试题&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;mysql&quot;&gt;&lt;code&gt;MySQL&lt;&#x2F;code&gt;事务是原子的吗？&lt;a class=&quot;zola-anchor&quot; href=&quot;#mysql&quot; aria-label=&quot;Anchor link for: mysql&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;是的。每个事务中执行过程中，如果一切正常，那么该事务所有语句将被执行，如果该过程出现异常，所有语句都不会得到执行。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;mysql-1&quot;&gt;如何修改&lt;code&gt;MySQL&lt;&#x2F;code&gt;事务超时等待时间?&lt;a class=&quot;zola-anchor&quot; href=&quot;#mysql-1&quot; aria-label=&quot;Anchor link for: mysql-1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;MySQL&lt;&#x2F;code&gt;中，事务等待超时使用的是&lt;code&gt;innodb_lock_wait_timeout&lt;&#x2F;code&gt;变量来控制的，默认超时时间是&lt;code&gt;50&lt;&#x2F;code&gt;秒，如果希望修改这个超时时间，可以根据实际需要修改变量的值，比如：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;innodb_lock_wait_timeout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;mysql-2&quot;&gt;&lt;code&gt;MySQL&lt;&#x2F;code&gt;是否支持嵌套事务?&lt;a class=&quot;zola-anchor&quot; href=&quot;#mysql-2&quot; aria-label=&quot;Anchor link for: mysql-2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;MySQL&lt;&#x2F;code&gt;不支持嵌套事务。因为无论何时启动事务，他都会隐式的提交到本地(最终会写入磁盘)，比如在同一张表中使用嵌套事务，那么内部事务已经成为外部事务的一部分，此时表在获取锁时将会是不确定的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;ddl&quot;&gt;&lt;code&gt;DDL&lt;&#x2F;code&gt;语句都能回滚吗？&lt;a class=&quot;zola-anchor&quot; href=&quot;#ddl&quot; aria-label=&quot;Anchor link for: ddl&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;有些语句是不能回滚的。比如&lt;code&gt;DDL（Data Definition Language）&lt;&#x2F;code&gt;语句。**例如，**创建表、更改表、删除字段或表等。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;事务隔离机制&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;事务可以指定一个隔离级别。这个级别可以定义一个事务必须与其他事务所操作得到资源或者数据的隔离程度。通过设置合理的隔离级别，可以有效的防止事务带来的一些副作用，比如脏读、幻读。&lt;&#x2F;p&gt;
&lt;p&gt;在处理数据库事务时，如果没有选择好合适的隔离级别，很可能会对我们的项目业务产生严重的影响，所以作为一个&lt;code&gt;Coder&lt;&#x2F;code&gt;或者&lt;code&gt;DBA&lt;&#x2F;code&gt;，了解&lt;code&gt;MySQL&lt;&#x2F;code&gt;事务隔离级别是非常有必要的。&lt;&#x2F;p&gt;
&lt;p&gt;在正式开始隔离级别的内容之前，先了解一下数据库事务中常见的几种读现象。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-5&quot;&gt;三大读现象&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20230206205150.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;dirty-read&quot;&gt;1.脏读(&lt;code&gt;dirty read&lt;&#x2F;code&gt;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#dirty-read&quot; aria-label=&quot;Anchor link for: dirty-read&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;事务&lt;code&gt;B&lt;&#x2F;code&gt;读取了事务&lt;code&gt;A&lt;&#x2F;code&gt;未提交的事务，这就是脏读。&lt;&#x2F;p&gt;
&lt;p&gt;这种情况是比较糟糕的，因为我们不知道其他事务是否最终会被&lt;strong&gt;提交或回滚&lt;&#x2F;strong&gt;。因此，如果发生回滚，我们可能最终会使用&lt;strong&gt;不正确&lt;&#x2F;strong&gt;的数据，也就是读到&lt;strong&gt;脏数据&lt;&#x2F;strong&gt;了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20230206194814.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;non-repeatable-read&quot;&gt;2.不可重复读(&lt;code&gt;non-repeatable read&lt;&#x2F;code&gt;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#non-repeatable-read&quot; aria-label=&quot;Anchor link for: non-repeatable-read&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;一个事务A两次读取同一条记录但读取到不同的值，这是因为这条记录可能在别人(事务A)两次查询之间被事务B进行了更新操作导致。为什么叫 &lt;strong&gt;不可重复读&lt;&#x2F;strong&gt;，就是你第二次读取(重复读)到的数据和第一次已经不一样了，如此便失去了重复读取的意义。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20230206200702.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;phantom-read&quot;&gt;3.幻读(&lt;code&gt;phantom read&lt;&#x2F;code&gt;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#phantom-read&quot; aria-label=&quot;Anchor link for: phantom-read&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;幻读和不可重复读类似，但幻读会影响查询的多行数据而不是一行。&lt;&#x2F;p&gt;
&lt;p&gt;一个事务读取符合某些查询条件的数据。另一个用户做了合理的插入更新或删除而影响了该查询的结果。这发生在另一个会话插入或删除的记录刚好与你查询的&lt;code&gt;WHERE&lt;&#x2F;code&gt;子句相匹配的记录匹配。因此重复查询会导致返回不同的记录，就像出现了幻觉一样。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;咦？为什么我两次相同的查询却出现不同的结果？？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20230206200538.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;除了上述三大情况之外，细分其实还有包括 &lt;strong&gt;读、写偏差&lt;&#x2F;strong&gt;、 &lt;strong&gt;更新丢失&lt;&#x2F;strong&gt;，这些可以理解为上述三种情况的细化，后续有时间再更新进来，现在主讲的是&lt;strong&gt;隔离级别&lt;&#x2F;strong&gt;的问题。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-6&quot;&gt;四大隔离级别&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20230206205532.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为了处理上述的 &lt;strong&gt;三大读现象&lt;&#x2F;strong&gt; 美国国家标准协会（&lt;code&gt;ANSI&lt;&#x2F;code&gt;）定义了&lt;code&gt;4&lt;&#x2F;code&gt;个标准隔离级别，为了方便理解记忆，下面我将按照隔离级别&lt;strong&gt;从低到高&lt;&#x2F;strong&gt;的顺序罗列。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;read-uncommitted&quot;&gt;1.读未提交(&lt;code&gt;read uncommitted&lt;&#x2F;code&gt;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#read-uncommitted&quot; aria-label=&quot;Anchor link for: read-uncommitted&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;在四大隔离级别中，这是级别最低的隔离机制。这个级别的事务可以看到其他未提交的事务写入的数据，这个级别的隔离机制几乎等于什么也没做，所以是完全可能导致&lt;strong&gt;脏读&lt;&#x2F;strong&gt;现象的发生的。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;read-committed&quot;&gt;2.读已提交(&lt;code&gt;read committed&lt;&#x2F;code&gt;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#read-committed&quot; aria-label=&quot;Anchor link for: read-committed&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;这个级别的隔离机制可以感知到被其他事务提交了的数据，正因为如此，它也可以阻止&lt;strong&gt;脏读&lt;&#x2F;strong&gt;的发生。但该机制不能阻止&lt;strong&gt;不可重复度&lt;&#x2F;strong&gt;和&lt;strong&gt;幻读&lt;&#x2F;strong&gt;现象。&lt;code&gt;PostgreSQL &lt;&#x2F;code&gt;默认使用此隔离级别。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;repeatable-read&quot;&gt;3.可重复读(&lt;code&gt;repeatable read&lt;&#x2F;code&gt;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#repeatable-read&quot; aria-label=&quot;Anchor link for: repeatable-read&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;该级别所指定语句不能读取&lt;strong&gt;已被其他事务修改但尚未提交的数据&lt;&#x2F;strong&gt;，并且在当前事务完成之前，&lt;strong&gt;其他事务不能修改已被当前事务读取的数据&lt;&#x2F;strong&gt;，它可以确保一个查询总是会返回相同的结果，不管这个查询执行多少次。因此，该级别的隔离机制，可以有效阻止 &lt;strong&gt;脏读&lt;&#x2F;strong&gt;、&lt;strong&gt;不可重复读&lt;&#x2F;strong&gt;现象。&lt;code&gt;MySQL&lt;&#x2F;code&gt;默认使用这种隔离级别。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;serializable&quot;&gt;4.可序列化(&lt;code&gt;serializable&lt;&#x2F;code&gt;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#serializable&quot; aria-label=&quot;Anchor link for: serializable&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;可序列化。这是最高的隔离级别。在这个级别中运行的并发事务被保证能够产生相同的结果，就像它们按照某种顺序一个接一个地执行而不重叠一样。类似于队列模型，所有的事务操作都会被加锁后顺序执行。所以基本上可以阻止上述提到的&lt;strong&gt;三大读现象&lt;&#x2F;strong&gt;的发生，但一般情况下却不推荐使用，因为存在频繁加锁的机制，从而会导致性能的拉跨,尽管它已经很强大了，但依然无法阻止数据一致性问题的发生。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-7&quot;&gt;隔离级别&amp;amp;读现象关系&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;下面通过一些具体的例子，探究总结 &lt;strong&gt;四大隔离级别和三大读现象之间的关系&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-8&quot;&gt;隔离级别的查看&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;MySQL&lt;&#x2F;code&gt;中，可以使用下面的命令来查看当前数据库事务使用了何种隔离级别。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; @@transaction_isolation;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| @@transaction_isolation |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| REPEATABLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;READ         |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;08&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，我当前数据库默认使用的额就是&lt;strong&gt;可重复读&lt;&#x2F;strong&gt;级别。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;MySQL&lt;&#x2F;code&gt;中，除了当前数据库的默认隔离级别外，数据库还设置了一个全局隔离级别。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; @@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;transaction_isolation&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;--------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| @@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;global&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;transaction_isolation&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;--------------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| REPEATABLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;READ                |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;--------------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;09&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;默认全局也是&lt;strong&gt;可重复读&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-9&quot;&gt;隔离级别的修改&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;如果需要修改当前数据库的隔离级别，看这里：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; session transaction isolation level read uncommitted;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过使用上面的命令，你可以将当前数据库的隔离级别随意更换为你需要的级别，只需要替换命令中&lt;code&gt;level&lt;&#x2F;code&gt;后面的变量为你自己想更换的级别名称即可。查看刚才的修改是否生效：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; @@transaction_isolation;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| @@transaction_isolation |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| READ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;UNCOMMITTED        |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;-10&quot;&gt;隔离级别的关系&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;下面通过案例的实践，进一步讨论隔离级别和读现象的关系。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;-11&quot;&gt;读未提交演示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;开始实践操作之前，先将事务&lt;code&gt;TX1&lt;&#x2F;code&gt;和&lt;code&gt;TX2&lt;&#x2F;code&gt;的隔离级别均修改为&lt;code&gt;read uncommitted;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; session transaction isolation level read uncommitted;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;打开两个命令行窗口，分别开启事务。注意，在&lt;code&gt;MySQL&lt;&#x2F;code&gt;中，&lt;code&gt;start transaction&lt;&#x2F;code&gt;和&lt;code&gt;begin&lt;&#x2F;code&gt;都可以用来开启事务。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;start transaction&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;在事务1中做一个简单的查询。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;目前三个人的账户余额都是&lt;code&gt;￥100&lt;&#x2F;code&gt;,接下来在事务&lt;code&gt;TX2&lt;&#x2F;code&gt;中查询id为1的账户。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当然，通过事务&lt;code&gt;TX2&lt;&#x2F;code&gt;查询出来 &lt;strong&gt;汪淼&lt;&#x2F;strong&gt;的账户余额也是&lt;code&gt;100RMB&lt;&#x2F;code&gt;,下面我们通过&lt;code&gt;TX1&lt;&#x2F;code&gt;来给汪淼账户减去10块钱。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#  TX1 汪淼账户扣除10元
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1 再次查询账户余额为90元
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;04&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;59&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意了！尽管此时我们在&lt;code&gt;TX1&lt;&#x2F;code&gt;中已经将汪淼的余额扣除了10块，但并没有提交该事务。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;通过事务&lt;code&gt;TX2&lt;&#x2F;code&gt;执行和&lt;code&gt;TX1&lt;&#x2F;code&gt;同样的查询，获取汪淼的余额信息。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意看！！事务&lt;code&gt;TX2&lt;&#x2F;code&gt;的查询结果竟然也是&lt;code&gt;￥90&lt;&#x2F;code&gt;,明显&lt;code&gt;TX2&lt;&#x2F;code&gt;也看到了&lt;code&gt;TX1&lt;&#x2F;code&gt;作的修改，但注意此时对于&lt;code&gt;TX1&lt;&#x2F;code&gt;来说，自己的事务都还没有&lt;code&gt;COMMIT&lt;&#x2F;code&gt;,却被&lt;code&gt;TX2&lt;&#x2F;code&gt;感知到了，这明显就是有问题的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;所以这是一个脏读现象，它的发生是因为我们使用了读-未提交的隔离级别。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h5 id=&quot;-12&quot;&gt;读已提交演示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;在演示&lt;code&gt;Read committed&lt;&#x2F;code&gt;之前，先把第一个演示的两个事务全部&lt;code&gt;COMMIT&lt;&#x2F;code&gt;，完成事务提交。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;COMMIT&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;COMMIT&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;执行下面的几条命令，将&lt;code&gt;TX1&lt;&#x2F;code&gt;和&lt;code&gt;TX2&lt;&#x2F;code&gt;的事务隔离级别设置为&lt;code&gt;Read committed&lt;&#x2F;code&gt;并开启事务。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- TX1 + TX2 
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; session transaction isolation level read committed;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; @@transaction_isolation;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| @@transaction_isolation |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| READ&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;COMMITTED          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code&gt;TX1&lt;&#x2F;code&gt;z中查看所有的账户情况。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼   |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;通过事务&lt;code&gt;TX2&lt;&#x2F;code&gt;查看汪淼余额。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;同样的，再使用&lt;code&gt;TX1&lt;&#x2F;code&gt;来扣除汪淼账户余额的10块。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1 
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在我们已经成功将汪淼的余额修改为&lt;code&gt;￥80&lt;&#x2F;code&gt;,那么这个操作对于&lt;code&gt;TX2&lt;&#x2F;code&gt;来说是否可见呢？验证一下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，尽管&lt;code&gt;TX1&lt;&#x2F;code&gt;作的修改尚未提交，但在&lt;code&gt;TX2&lt;&#x2F;code&gt;中看到的还是之前&lt;code&gt;TX1&lt;&#x2F;code&gt;未修改的内容，也就是&lt;code&gt;￥90&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;这是因为我们使用的是&lt;strong&gt;读-提交&lt;&#x2F;strong&gt;的隔离级别，由于事务&lt;code&gt;TX1&lt;&#x2F;code&gt;还没有提交，它写的数据不能被其他事务看到。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，通过上面的两个实践发现，&lt;strong&gt;读-提交&lt;&#x2F;strong&gt;级别&lt;strong&gt;可以防止脏读现象的发生&lt;&#x2F;strong&gt;，那么，对于 &lt;strong&gt;不可重复读&lt;&#x2F;strong&gt;以及 &lt;strong&gt;幻读&lt;&#x2F;strong&gt;的隔离效果如何呢？我们拭目以待。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;在&lt;code&gt;TX2&lt;&#x2F;code&gt;中，执行&lt;code&gt;select * from money where balance &amp;gt;= 90;&lt;&#x2F;code&gt;,然后回到&lt;code&gt;TX1&lt;&#x2F;code&gt;并提交事务。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼   |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1 
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;COMMIT&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;回到&lt;code&gt;TX2&lt;&#x2F;code&gt;查询发现，此时汪淼余额确实变为了&lt;code&gt;￥80&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，获得汪淼账户的同一个查询会返回不同的值，这是&lt;strong&gt;不可重复&lt;&#x2F;strong&gt;的读取现象。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;Ok,&lt;&#x2F;code&gt;我们再次再&lt;code&gt;TX2&lt;&#x2F;code&gt;中执行之前执行过一次的&lt;code&gt;select * from money where balance &amp;gt;= 90;&lt;&#x2F;code&gt;语句，看看结果。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;90&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;对比之前的执行结果发现，这次我们只得到2条记录，而不是之前的3条，因为&lt;code&gt;TX1&lt;&#x2F;code&gt;提交后，汪淼账户的余额已经减少到80，自然不能再次满足&lt;code&gt;balance&amp;gt;=90&lt;&#x2F;code&gt;这个查询条件。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;执行了相同的查询，但返回了一组不同的行，这是由于其他已提交的事务导致有一条记录已经消失了。这就是所谓的&lt;strong&gt;幻读现象&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;由此，可以得出结论：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;读-提交的隔离级别只能防止脏读，但仍然允许不可重复读和幻读现象的出现。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接下来，我们先将上面未提交的&lt;code&gt;TX2&lt;&#x2F;code&gt;进行提交之后在继续探索更高级别的隔离机制和读现象的关系。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;COMMIT&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol&gt;
&lt;li&gt;执行下面的命令，将两个事务的隔离级别修改为&lt;code&gt;repeatable read&lt;&#x2F;code&gt;可重复读并开启事务。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1 + TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; session transaction isolation level repeatable read;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; @@transaction_isolation;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| @@transaction_isolation |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| REPEATABLE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;READ         |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;现在让我们查询&lt;code&gt;TX1&lt;&#x2F;code&gt;中的所有账户。然后查询&lt;code&gt;TX2&lt;&#x2F;code&gt;中ID为1的账户。同时查询所有余额至少为80元的账户。以用来验证幻读是否仍然发生。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼   |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼   |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;OK,现在回到&lt;code&gt;TX1&lt;&#x2F;code&gt;，从其余额中减去&lt;code&gt;10&lt;&#x2F;code&gt;。然后查看所有的账户在&lt;code&gt;TX1&lt;&#x2F;code&gt;中的当前状态。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼   |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 11&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;08&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;现在我们可以看到汪淼的账户余额已经减少到70元。&lt;&#x2F;p&gt;
&lt;p&gt;注意，在这里我们已经没必要再去检查 &lt;strong&gt;脏读&lt;&#x2F;strong&gt;的隔离情况，因为在之前更低级别的隔离中已经作了隔离，在MySQL隔离级别中有下面这样一个规则:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何在较低的隔离水平上被阻止的现象都不会有机会在较高的水平上发生，这一点很容易理解。&lt;strong&gt;手持红码的你不可能上得了飞机，因为你连地铁或者公交都上不去。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;我们提交事务&lt;code&gt;TX1&lt;&#x2F;code&gt;再通过&lt;code&gt;TX2&lt;&#x2F;code&gt;查看是否能感知到&lt;code&gt;TX1&lt;&#x2F;code&gt;所作得修改。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;COMMIT&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到现在这个查询返回得是汪淼账户的旧版本，余额为80元，尽管&lt;code&gt;TX1&lt;&#x2F;code&gt;已经将其改为70元并成功提交。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是因为可重复读取隔离级别确保所有的读取查询都是&lt;strong&gt;可重复的&lt;&#x2F;strong&gt;，这意味着它总是返回相同的结果，即使期间有其他事务做了修改并成功提交。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;我们在&lt;code&gt;TX2&lt;&#x2F;code&gt;中再次运行&lt;code&gt;balance&amp;gt;=80&lt;&#x2F;code&gt;的条件查询。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼   |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 10&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;19&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;正如你所看到的，它仍然返回与之前一样的&lt;code&gt;3&lt;&#x2F;code&gt;条记录。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;因此，在这个可重复读取的隔离级别中，&lt;strong&gt;幻读&lt;&#x2F;strong&gt;现象也被阻止了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;那么现在我想知道如果我们在&lt;code&gt;TX2&lt;&#x2F;code&gt;中也进行更新操作，从汪淼的账户余额中减去10，会发生什么？结果是将余额改为70，还是60，或者是其他意料之外的结果呢？纸上得来终觉浅，试试就知道了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;UPDATE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SET&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; 
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;62&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 12&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;57&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;结果显示，汪淼账户余额现在是60元，显然这是正确的值，因为&lt;code&gt;TX1&lt;&#x2F;code&gt;已经提交了修改余额为70元的事务变更。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;尽管这个结果看起来是正确的，但换个角度，在数学角度看&lt;code&gt;TX2&lt;&#x2F;code&gt;的结果是没有意义的，因为在上一个查询中，&lt;code&gt;TX2&lt;&#x2F;code&gt;的结果还是显示的汪淼账户余额为&lt;code&gt;￥80&lt;&#x2F;code&gt;,这个基础上做了一个&lt;code&gt;balance-10&lt;&#x2F;code&gt;的操作之后再查询就变成了&lt;code&gt;￥60&lt;&#x2F;code&gt;，也就是说，余额直接从&lt;code&gt;80&lt;&#x2F;code&gt;降到了&lt;code&gt;60&lt;&#x2F;code&gt;，这在数学上是不符合逻辑的，因为此事务仍然受到来自其他事务的并发更新的干扰。也即是说导致了数据不一致的问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;回滚&lt;code&gt;TX2&lt;&#x2F;code&gt;的事务，继续完成更高级别隔离机制的探索。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ROLLBACK&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 11&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;08&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;-13&quot;&gt;可序列化&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h5&gt;
&lt;p&gt;终于走到了最后的&lt;code&gt;BOSS&lt;&#x2F;code&gt;,可序列化隔离级别。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;国际惯例，依旧先确保把两个事务隔离级别修改为&lt;code&gt;SERIALIZABLE&lt;&#x2F;code&gt;并开启事务。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1+TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; session transaction isolation level serializable;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;select&lt;&#x2F;span&gt;&lt;span&gt; @@transaction_isolation;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| @@transaction_isolation |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| SERIALIZABLE            |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-------------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;code&gt;TX1&lt;&#x2F;code&gt;查询全部账户信息，&lt;code&gt;TX2&lt;&#x2F;code&gt;只查询汪淼的个人账户信息。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼   |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 11&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;08&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 11&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;08&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;09&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;通过&lt;code&gt;TX1&lt;&#x2F;code&gt;将汪淼的余额再扣&lt;code&gt;￥10&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt; accounts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 超时
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1205 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Lock wait timeout exceeded; try restarting transaction
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;奇怪的是，更新操作被阻塞了，等待一段时间之后出现了超时提示。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;原因是，在可序列化隔离级别中，&lt;code&gt;MySQL&lt;&#x2F;code&gt;隐含地将所有普通&lt;code&gt;SELECT&lt;&#x2F;code&gt;查询转换为&lt;code&gt;SELECT FOR SHARE&lt;&#x2F;code&gt;。从而使得持有&lt;code&gt;SELECT FOR SHARE&lt;&#x2F;code&gt;锁的事务只允许其他事务读取记录，但不允许&lt;code&gt;UPDATE&lt;&#x2F;code&gt;或&lt;code&gt;DELETE&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;所以有了这种锁机制的参与，上面出现过的&lt;strong&gt;数据集不一致&lt;&#x2F;strong&gt;的情况就不存在了。&lt;&#x2F;p&gt;
&lt;p&gt;所以这里还需要格外注意一个问题，当你在你的项目中使用&lt;strong&gt;可序列化的隔离级别时&lt;&#x2F;strong&gt;，请确保你已经实现了事务重试策略，以防发生超时。&lt;&#x2F;p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;回滚方才的&lt;code&gt;TX1&lt;&#x2F;code&gt;,重新开启事务。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ROLLBACK&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner  | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼   |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 11&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;08&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt; | 史强   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;39&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; | 叶文洁 |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 09&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;52&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+--------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ol start=&quot;5&quot;&gt;
&lt;li&gt;现在我们重新复现上面一个操作，但这次会在&lt;code&gt;TX1&lt;&#x2F;code&gt;更新超时之前，我们在&lt;code&gt;TX2&lt;&#x2F;code&gt;中执行同样的更新操作，看下结果如何？&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1213 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Deadlock found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span&gt; trying to get lock; try restarting transaction
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;71&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意，我们分别在&lt;code&gt;TX1&lt;&#x2F;code&gt;和&lt;code&gt;TX2&lt;&#x2F;code&gt;中执行同一条查询语句，这导致两个事务都会进入相互等待的过程，知道其中一个&lt;code&gt;TX&lt;&#x2F;code&gt;结束或者等待超时，这就是&lt;strong&gt;死锁&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1213 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; Deadlock found &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;when&lt;&#x2F;span&gt;&lt;span&gt; trying to get lock; try restarting transaction
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以在实际开发中，在使用 &lt;strong&gt;可序列化&lt;&#x2F;strong&gt; 隔离级别时需要考虑出现死锁的情况。&lt;&#x2F;p&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;回滚&lt;code&gt;TX1&lt;&#x2F;code&gt;和&lt;code&gt;TX2&lt;&#x2F;code&gt;并重新开启事务。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1 + TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ROLLBACK&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;begin&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;70&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 11&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;08&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;09&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以发现此时两个事务的查询结果都是统一的。&lt;&#x2F;p&gt;
&lt;ol start=&quot;7&quot;&gt;
&lt;li&gt;现在我们来更新&lt;code&gt;TX1&lt;&#x2F;code&gt;并提交&lt;code&gt;TX2&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;--
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX2
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;COMMIT&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt; rows affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;00&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;update &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; balance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;Query OK, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row affected (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;57&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;span&gt;Rows matched: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Changed: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;  Warnings: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们在更新&lt;code&gt;TX1&lt;&#x2F;code&gt;时自动进入阻塞状态，此时再去提交&lt;code&gt;TX2&lt;&#x2F;code&gt;之后锁被立即释放，因此&lt;code&gt;TX1&lt;&#x2F;code&gt;的更新操作阻塞取消并成功执行。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# TX1
&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;money &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span&gt; id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| id | owner | balance | currency | created_at          |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span&gt;|  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; | 汪淼  |      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt; | RMB      | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2023&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;02&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;07 13&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;51&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;43&lt;&#x2F;span&gt;&lt;span&gt; |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;----+-------+---------+----------+---------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt; row &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过上面的一些了演示，我们可以总结出以下关系。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20230206215754.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;MySQL&lt;&#x2F;code&gt;中，最低的隔离级别，未提交读允许所有4种现象发生,也就是说，这个级别的隔离机制可有可无一般。&lt;&#x2F;li&gt;
&lt;li&gt;已提交读只防止&lt;strong&gt;脏读&lt;&#x2F;strong&gt;，其余3种现象仍有可能发生。&lt;&#x2F;li&gt;
&lt;li&gt;可重复读取级别阻止了前3种现象：&lt;strong&gt;脏读、不可重复读取和幻象读取&lt;&#x2F;strong&gt;。但它仍然可能导致数据一致性问题。&lt;&#x2F;li&gt;
&lt;li&gt;最高的隔离级别：可序列化是最严格的。它可以防止所有4种现象，这么强大的背后多亏了锁定机制。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;文中用到的演示用数据库配套文件自取地址:&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;08820048&#x2F;Blog-Article-Materials&quot;&gt;&lt;code&gt;MySQL&lt;&#x2F;code&gt;事务与隔离级别配套&lt;code&gt;SQL&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</description>
      </item>
      <item>
          <title>Docker必知必会</title>
          <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/dockerbi-zhi-bi-hui/</link>
          <guid>https://ilikexff.cn/dockerbi-zhi-bi-hui/</guid>
          <description xml:base="https://ilikexff.cn/dockerbi-zhi-bi-hui/">&lt;h3 id=&quot;geng-xin-ri-zhi-tada&quot;&gt;更新日志🎉&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi-tada&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi-tada&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2023-2-4&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正了已知的错别字词&lt;&#x2F;li&gt;
&lt;li&gt;重新调整全部配图的上传源(七牛云)&lt;&#x2F;li&gt;
&lt;li&gt;调整排版、优化布局格式&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增docker网络&lt;&#x2F;li&gt;
&lt;li&gt;新增 Compose&lt;&#x2F;li&gt;
&lt;li&gt;新增 Portainer&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-8-14&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增&lt;code&gt;docker&lt;&#x2F;code&gt;[数据卷]内容&lt;&#x2F;li&gt;
&lt;li&gt;修正了一些已知的错误&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-8-15&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增&lt;code&gt;docker&lt;&#x2F;code&gt;常规软件的安装(&lt;code&gt;docker&lt;&#x2F;code&gt;踢馆记)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-8-26&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;部分的内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;an-zhuang-docker&quot;&gt;安装docker&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-zhuang-docker&quot; aria-label=&quot;Anchor link for: an-zhuang-docker&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;安装：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Docker 分为 CE 和 EE 两大版本。CE 即社区版（免费，支持周期 7 个月），EE 即企业版，强调安全，付费使用，支持周期 24 个月。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;**Docker CE 分为 **&lt;code&gt;stable&lt;&#x2F;code&gt;，&lt;code&gt;test&lt;&#x2F;code&gt; 和 &lt;code&gt;nightly&lt;&#x2F;code&gt; 三个更新频道。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;官方网站上有各种环境下的&lt;&#x2F;strong&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;install&#x2F;&quot;&gt;安装指南&lt;&#x2F;a&gt;，这里主要介绍 &lt;code&gt;DockerCE &lt;&#x2F;code&gt;在 &lt;code&gt;CentOS&lt;&#x2F;code&gt;上的安装。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;an-zhuang-qian-xie-zai&quot;&gt;安装前卸载&lt;a class=&quot;zola-anchor&quot; href=&quot;#an-zhuang-qian-xie-zai&quot; aria-label=&quot;Anchor link for: an-zhuang-qian-xie-zai&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;如果之前安装过旧版本的Docker，可以使用下面命令卸载：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;yum remove docker \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-client \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-client-latest \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-common \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-latest \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-latest-logrotate \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-logrotate \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-selinux \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-engine-selinux \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-engine \
&lt;&#x2F;span&gt;&lt;span&gt;                  docker-ce
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;首先需要大家虚拟机联网，安装yum工具&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;yum install -y yum-utils \
&lt;&#x2F;span&gt;&lt;span&gt;           device-mapper-persistent-data \
&lt;&#x2F;span&gt;&lt;span&gt;           lvm2 --skip-broken
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;然后更新本地镜像源：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 设置docker镜像源
&lt;&#x2F;span&gt;&lt;span&gt;yum-config-manager \
&lt;&#x2F;span&gt;&lt;span&gt;    --add-repo \
&lt;&#x2F;span&gt;&lt;span&gt;    https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;sed -i &amp;#39;s&#x2F;download.docker.com&#x2F;mirrors.aliyun.com\&#x2F;docker-ce&#x2F;g&amp;#39; &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;yum makecache fast
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;然后输入命令：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;yum install -y docker-ce
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;稍等片刻，docker即可安装成功。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yan-shi-demo&quot;&gt;演示demo&lt;a class=&quot;zola-anchor&quot; href=&quot;#yan-shi-demo&quot; aria-label=&quot;Anchor link for: yan-shi-demo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;按照官网&lt;&#x2F;strong&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;install&#x2F;centos&#x2F;&quot;&gt;https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;install&#x2F;centos&#x2F;&lt;&#x2F;a&gt;的文档地址，完成docker的启动、运行&lt;code&gt;hello-world&lt;&#x2F;code&gt;demo的示例,进一步体验以加深理解。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xie-zai-docker&quot;&gt;卸载docker&lt;a class=&quot;zola-anchor&quot; href=&quot;#xie-zai-docker&quot; aria-label=&quot;Anchor link for: xie-zai-docker&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;按照下面的步骤卸载docker&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 1.
&lt;&#x2F;span&gt;&lt;span&gt;yum remove docker-ce docker-ce-cli containerd.io docker-compose-plugin
&lt;&#x2F;span&gt;&lt;span&gt;# 2.
&lt;&#x2F;span&gt;&lt;span&gt;rm -rf &#x2F;var&#x2F;lib&#x2F;docker
&lt;&#x2F;span&gt;&lt;span&gt;# 3.
&lt;&#x2F;span&gt;&lt;span&gt;rm -rf &#x2F;var&#x2F;lib&#x2F;containerd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;卸载执行之前建议先停止docker&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;systemctl stop docker&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;pei-zhi-a-li-yun-jing-xiang-jia-su&quot;&gt;配置阿里云镜像加速&lt;a class=&quot;zola-anchor&quot; href=&quot;#pei-zhi-a-li-yun-jing-xiang-jia-su&quot; aria-label=&quot;Anchor link for: pei-zhi-a-li-yun-jing-xiang-jia-su&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;首先去阿里云官网获取自己的加速地址。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;cr.console.aliyun.com&#x2F;cn-hangzhou&#x2F;instances&#x2F;mirrors&quot;&gt;https:&#x2F;&#x2F;cr.console.aliyun.com&#x2F;cn-hangzhou&#x2F;instances&#x2F;mirrors&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;按照官方提供的步骤进行镜像地址的修改：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11920706785547519347-da3282cd.png&quot; alt=&quot;image-20220812120103204&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo mkdir -p &#x2F;etc&#x2F;docker
&lt;&#x2F;span&gt;&lt;span&gt;sudo tee &#x2F;etc&#x2F;docker&#x2F;daemon.json &amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https:&#x2F;&#x2F;zjv4zmyk.mirror.aliyuncs.com&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;EOF
&lt;&#x2F;span&gt;&lt;span&gt;sudo systemctl daemon-reload
&lt;&#x2F;span&gt;&lt;span&gt;sudo systemctl restart docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;上面执行之后运行下面的命令，执行&lt;&#x2F;strong&gt;&lt;code&gt;hello-world&lt;&#x2F;code&gt;程序。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;docker run hello-world
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5299290355025351570-8d428af0.png&quot; alt=&quot;image-20220812120510723&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如上表示成功运行！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;run的工作流程&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16566290565199026087-d055b8cd.png&quot; alt=&quot;image-20220812120754486&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;Docker常用命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-1&quot;&gt;帮助启动类命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;顾名思义，这类命令一般用来帮助启动和管理&lt;code&gt;docker&lt;&#x2F;code&gt;容器的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 启动docker
&lt;&#x2F;span&gt;&lt;span&gt;systemctl start docker
&lt;&#x2F;span&gt;&lt;span&gt;# 停止docker
&lt;&#x2F;span&gt;&lt;span&gt;systemctl stop docker
&lt;&#x2F;span&gt;&lt;span&gt;# 重启dcoker
&lt;&#x2F;span&gt;&lt;span&gt;systemctl restart docker
&lt;&#x2F;span&gt;&lt;span&gt;# 查看docker状态
&lt;&#x2F;span&gt;&lt;span&gt;systemctl status docker
&lt;&#x2F;span&gt;&lt;span&gt;# 开机启动
&lt;&#x2F;span&gt;&lt;span&gt;systemctl enable docker
&lt;&#x2F;span&gt;&lt;span&gt;# 查看docker概要信息
&lt;&#x2F;span&gt;&lt;span&gt;docker info
&lt;&#x2F;span&gt;&lt;span&gt;# 查看docker帮助命令
&lt;&#x2F;span&gt;&lt;span&gt;docker --help
&lt;&#x2F;span&gt;&lt;span&gt;# 具体的命令帮助
&lt;&#x2F;span&gt;&lt;span&gt;docker 具体的命令 --help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;-2&quot;&gt;镜像命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;顾名思义，就是用来操作和管理docker镜像的命令。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 显示本机上的镜像
&lt;&#x2F;span&gt;&lt;span&gt;docker images [options]
&lt;&#x2F;span&gt;&lt;span&gt;# options:
&lt;&#x2F;span&gt;&lt;span&gt;- a 列出所有本地镜像(含历史镜像层)
&lt;&#x2F;span&gt;&lt;span&gt;- q 只显示镜像ID 
&lt;&#x2F;span&gt;&lt;span&gt;# ————————————————————————————————————————————————
&lt;&#x2F;span&gt;&lt;span&gt;# 搜索镜像
&lt;&#x2F;span&gt;&lt;span&gt;docker search 镜像名称
&lt;&#x2F;span&gt;&lt;span&gt;# options
&lt;&#x2F;span&gt;&lt;span&gt;--limit number 镜像名称 默认显示点赞数高的前number个搜索结果
&lt;&#x2F;span&gt;&lt;span&gt;# 远程拉取镜像，如果镜像名称后面不指定版本号TAG，就会默认拉取最新版
&lt;&#x2F;span&gt;&lt;span&gt;docker pull 镜像名称
&lt;&#x2F;span&gt;&lt;span&gt;# 查看镜像&#x2F;容器&#x2F;数据卷所占的空间
&lt;&#x2F;span&gt;&lt;span&gt;docker system df
&lt;&#x2F;span&gt;&lt;span&gt;# 删除某个镜像
&lt;&#x2F;span&gt;&lt;span&gt;# 强制删除加上-f参数
&lt;&#x2F;span&gt;&lt;span&gt;docker rmi 镜像名称或者ID
&lt;&#x2F;span&gt;&lt;span&gt;# 全部删除的命令
&lt;&#x2F;span&gt;&lt;span&gt;docker rmi -f $(docker images -qa)[慎用]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;面试题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;谈谈什么是docker虚悬镜像？&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;仓库名、标签都是&lt;&#x2F;strong&gt;&lt;none&gt;&lt;strong&gt;的镜像，俗称虚悬镜像&lt;&#x2F;strong&gt;&lt;code&gt;dangling images&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;容器命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;顾名思义，就是用来操作和管理&lt;code&gt;docker&lt;&#x2F;code&gt;每一个具体容器的命令。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;这里以操作&lt;code&gt;ubuntu&lt;&#x2F;code&gt;容器作为演示实例。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;参数说明&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;—name=“容器的新名字” 为容器指定一个名称，不指定会随机分配一个&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;-d: 后台运行容器并返回容器的ID，也就是启动守护式容器(守护进程、后台运行)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;-i：以交互模式运行容器，通常与-t参数一起使用&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;-t: 为容器创新分配一个伪输入终端，通常与&lt;code&gt;-i&lt;&#x2F;code&gt;一起使用&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;-P ：随机端口映射，&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;-p:指定端口映射(如：-p 8080:8080)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 运行容器
&lt;&#x2F;span&gt;&lt;span&gt;docker run [参数options]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;需要注意的是，由于Ubuntu本身也是一个操作系统，如果需要，我们可以使用&lt;&#x2F;strong&gt;&lt;code&gt;-it&lt;&#x2F;code&gt;参数进入交互运行模式，容器启动后，会弹出一个属于&lt;code&gt;ubuntu&lt;&#x2F;code&gt;的操作终端。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10926752778261890752-2d85349c.png&quot; alt=&quot;image-20220812160349423&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意后面的&lt;&#x2F;strong&gt;&lt;code&gt;&#x2F;bin&#x2F;bash&lt;&#x2F;code&gt;用来指定交互使用的&lt;code&gt;shell&lt;&#x2F;code&gt;类型。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如果需要退出容器交互，使用&lt;&#x2F;strong&gt;&lt;code&gt;exit&lt;&#x2F;code&gt;命令。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 查看docker容器运行情况
&lt;&#x2F;span&gt;&lt;span&gt;docker ps [options]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;options&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;-a 列出当前所有正在运行的容器和历史运行过的容器&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;-l 显示最近创建的容器&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;-n 显示最近n个创建的容器&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;-q 静默模式，只显示容器的编号&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;更多命令请参考help&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 重启容器
&lt;&#x2F;span&gt;&lt;span&gt;docker restart 容器ID或名称
&lt;&#x2F;span&gt;&lt;span&gt;# 停止容器
&lt;&#x2F;span&gt;&lt;span&gt;docker stop 容器ID或名称
&lt;&#x2F;span&gt;&lt;span&gt;#强制停止容器
&lt;&#x2F;span&gt;&lt;span&gt;docker kill 容器ID或名称
&lt;&#x2F;span&gt;&lt;span&gt;# 删除容器
&lt;&#x2F;span&gt;&lt;span&gt;docker rm 容器ID或名称
&lt;&#x2F;span&gt;&lt;span&gt;# 一次性删除多个容器
&lt;&#x2F;span&gt;&lt;span&gt;docker rm -f$(docker ps -a -q)
&lt;&#x2F;span&gt;&lt;span&gt;docker ps -a -q | xargs docker rm
&lt;&#x2F;span&gt;&lt;span&gt;# 查看运行容器的日志
&lt;&#x2F;span&gt;&lt;span&gt;docker logs 容器ID或名称
&lt;&#x2F;span&gt;&lt;span&gt;# 查看容器内部运行细节
&lt;&#x2F;span&gt;&lt;span&gt;docker inspect 容器ID
&lt;&#x2F;span&gt;&lt;span&gt;# 后台运行模式进入容器内部
&lt;&#x2F;span&gt;&lt;span&gt;1.docker exec -it 容器ID 操作的shel类型(比如`bash`或者`zsh`)
&lt;&#x2F;span&gt;&lt;span&gt;2.docker attach 容器ID
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;推荐使用&lt;code&gt;docker exec&lt;&#x2F;code&gt;而不是&lt;code&gt;attach&lt;&#x2F;code&gt;，因为退出终端不会退出容器.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;attach&lt;&#x2F;code&gt;不会启动新进程，exit退出会导致容器停止，而exec则没有这种问题。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;有时候使用-d后台运行一个容器之后，在使用docker ps查看发现并没有运行记录，也就是已经退出，这是什么情况？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;docker 容器后台运行，必须有一个前台进程，容器运行的命令如果不是哪些一直挂起的命令(top,tail等),就会自动退出的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;所以可以通过交互模式运行。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;从容器拷贝文件到主机&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;docker cp 容器ID：容器内路径 目的主机路径
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意该操作是在主机上进行。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;导入&#x2F;导出容器&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;export&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;导出容器的内容流作为一个tar归档文件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;import&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;从tar包中的内容创建一个新的文件系统，再导入为镜像&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;命令操作&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;# 导出
&lt;&#x2F;span&gt;&lt;span&gt;docker export 容器ID &amp;gt; 文件名.tar
&lt;&#x2F;span&gt;&lt;span&gt;# 导入
&lt;&#x2F;span&gt;&lt;span&gt;cat 文件名.tar | docker import -镜像用户&#x2F;名：版本号
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7663123706109863513-ccc4b8a9.png&quot; alt=&quot;image-20220812173159310&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;Docker镜像(基础理论)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-5&quot;&gt;镜像的概念&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;镜像是一种轻量级、可执行的独立软件包，它包含了某个软件所需要的所有内容，我们把应用程序和配置依赖打包好，形成以一个可交付的运行环境，这个打包好的环境就是&lt;code&gt;image&lt;&#x2F;code&gt;镜像，其中包含了&lt;strong&gt;代码、运行时所需的库、环境变量和配置文件等&lt;&#x2F;strong&gt;内容。&lt;strong&gt;只有通过这个镜像文件才能生成&lt;code&gt;Docker&lt;&#x2F;code&gt;容器实例。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;unionfs&quot;&gt;文件联合系统(&lt;code&gt;UnionFS&lt;&#x2F;code&gt;)&lt;a class=&quot;zola-anchor&quot; href=&quot;#unionfs&quot; aria-label=&quot;Anchor link for: unionfs&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;UnionFS&lt;&#x2F;code&gt;是一种分层、轻量级并且高性能的文件系统，支持&lt;&#x2F;strong&gt;对文件系统的修改作为一次提交来一层层的叠加。同时可以将不同目录挂载到同一个虚拟文件系统下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;UnionFS&lt;&#x2F;code&gt;文件系统也是&lt;code&gt;docker&lt;&#x2F;code&gt;镜像的基础。镜像可以通过分层来进行继承，如此就可以基于基础镜像来制作各种具体的应用镜像。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;一次可以同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-6&quot;&gt;镜像加载原理&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt;的镜像实际上是由一层层的文件系统组成，即前面提到的&lt;code&gt;UnionFS&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;几个术语的概念&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bootfs(boot file system)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;主要包含&lt;&#x2F;strong&gt;&lt;code&gt;bootloader&lt;&#x2F;code&gt;和&lt;code&gt;kernel,bootloader&lt;&#x2F;code&gt;主要是引导加载&lt;code&gt;kernel,Linux&lt;&#x2F;code&gt;刚启动时会加载&lt;code&gt;bootfs&lt;&#x2F;code&gt;文件系统，在**Docker镜像的最底层是引导文件系统&lt;code&gt;bootfs&lt;&#x2F;code&gt;。**这一层与经典的&lt;code&gt;Linux&#x2F;Unix&lt;&#x2F;code&gt;系统是一样的，包含了&lt;code&gt;boot&lt;&#x2F;code&gt;&lt;strong&gt;加载器和内核&lt;&#x2F;strong&gt;。当&lt;code&gt;boot&lt;&#x2F;code&gt;加载完成之后整个内核就都在内存中了，此时内存的使用权已由&lt;code&gt;bootfs&lt;&#x2F;code&gt;转交给内核，同时系统也会卸载&lt;code&gt;bootfs&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rootfs(root file system)&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;在&lt;&#x2F;strong&gt;&lt;code&gt;bootfs&lt;&#x2F;code&gt;之上，包含的就是典型&lt;code&gt;Linux&lt;&#x2F;code&gt;系统中的&lt;code&gt;&#x2F;dev,&#x2F;proc,&#x2F;bin,&#x2F;etc&lt;&#x2F;code&gt;等标准目录文件。&lt;code&gt;rootfs&lt;&#x2F;code&gt;就是各种不同的操作系统发行版，比如&lt;code&gt;Ununtu&lt;&#x2F;code&gt;、&lt;code&gt;CentOS&lt;&#x2F;code&gt;等。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3047026354977519431-14a9815f.png&quot; alt=&quot;image-20220813133531384&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对于一个精简的OS，&lt;&#x2F;strong&gt;&lt;code&gt;rootfs&lt;&#x2F;code&gt;可以很小，只需要包括&lt;strong&gt;最基本的命令、工具和程序库&lt;&#x2F;strong&gt;就可以了，因为底层直接用&lt;code&gt;Host&lt;&#x2F;code&gt;的&lt;code&gt;kernel&lt;&#x2F;code&gt;，自己只需要提供 &lt;code&gt;rootfs&lt;&#x2F;code&gt;就行了。由此可见对于不同的&lt;code&gt;linux&lt;&#x2F;code&gt;发行版, &lt;code&gt;bootfs&lt;&#x2F;code&gt;基本是一致的, &lt;code&gt;rootfs&lt;&#x2F;code&gt;会有差别, 因此不同的发行版可以共用&lt;code&gt;bootfs&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-7&quot;&gt;分层结构的优势&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;镜像分层最大的一个好处就是&lt;strong&gt;资源共享&lt;&#x2F;strong&gt;，&lt;strong&gt;方便复制迁移和复用&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;比如说有多个镜像都从系统的base镜像构建而来，那么Docker Host只需要在磁盘保存一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-8&quot;&gt;重点，圈起来，要考&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;docker镜像都是只读的，容器层是可写的&lt;&#x2F;strong&gt;。当容器启动时，一个新的可写层被加载到镜像的顶部，这一层通常被称为&lt;strong&gt;容器层&lt;&#x2F;strong&gt;，容器层之下的都叫&lt;strong&gt;镜像层。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所有对&lt;strong&gt;容器层的改动(CRUD之类)都只会发生在容器层中&lt;&#x2F;strong&gt;，只有容器层是可写的，其下的所有镜像层都只是只读。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7838168480958821044-2699ed22.png&quot; alt=&quot;image-20220813155426943&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-9&quot;&gt;Docker的Commit命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-10&quot;&gt;实操案例&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;我们将在已有的&lt;code&gt;ubunutu&lt;&#x2F;code&gt;镜像的基础上，运行该镜像容器并在内部安装&lt;code&gt;vim&lt;&#x2F;code&gt;命令(原来的没有的)。安装之后通过&lt;code&gt;commit&lt;&#x2F;code&gt;命令将该镜像重新提交为副本镜像，此时该镜像就是一个已经包含有&lt;code&gt;vim&lt;&#x2F;code&gt;支持的&lt;code&gt;Ubuntu&lt;&#x2F;code&gt;镜像，同时也包含了所有之前宿主机上Ubuntu镜像的所有内容和功能。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;查看原始的Ubuntu镜像和容器情况。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8827317075400878678-bc4895e9.png&quot; alt=&quot;image-20220813153749129&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，&lt;code&gt;ID&lt;&#x2F;code&gt;尾号&lt;code&gt;29&lt;&#x2F;code&gt;的是我们原始的镜像，而正在运行的&lt;code&gt;ID&lt;&#x2F;code&gt;尾号的&lt;code&gt;0a&lt;&#x2F;code&gt;则是通过运行&lt;code&gt;29&lt;&#x2F;code&gt;镜像创建出来的新的镜像，我们在&lt;code&gt;0a&lt;&#x2F;code&gt;中安装&lt;code&gt;vim&lt;&#x2F;code&gt;命令支持后，通过&lt;code&gt;commit&lt;&#x2F;code&gt;重新构建。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4941418772468590502-ffe6a819.png&quot; alt=&quot;image-20220813154020123&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;构建过程如下:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;docker commit -m=&amp;#39;update vim cmd&amp;#39; -a=&amp;#39;八尺妖剑&amp;#39; 3cb0176c220a ubuntu&#x2F;myubuntu:1.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;解释一下命令：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;开局一个&lt;code&gt;docker commit&lt;&#x2F;code&gt; 装备全靠参数。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-m&lt;&#x2F;code&gt;参数用来指定提交的内容，类似于git中commit的提交信息&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;-a&lt;&#x2F;code&gt; 参数用来指定本此版本的提交作者。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;之后跟需要提交的镜像ID 再是本次提交的镜像版本情况。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11807712326428170689-44dbd88d.png&quot; alt=&quot;image-20220813155000053&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如上，构建提交之后，我们再次查看images的情况。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15598055540361177103-68476850.png&quot; alt=&quot;image-20220813155040338&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;是不是发现新的镜像已经成功构建，由于我们新增了&lt;code&gt;vim&lt;&#x2F;code&gt;功能的支持，再大小上，新版本的&lt;code&gt;ubuntu:1.0&lt;&#x2F;code&gt;也比原来的版本大了不少。如此，如果今后我们再使用自己&lt;code&gt;commit&lt;&#x2F;code&gt;的新版本的&lt;code&gt;ubuntu&lt;&#x2F;code&gt;镜像时，就会发现它自带了&lt;code&gt;vim&lt;&#x2F;code&gt;功能，且保留了原来一切的内容。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;当然，你也可以再在base镜像的基础上构建含有更多功能的其他版本镜像，也可以在新构建的镜像的基础上再次构建新的镜像，支持套娃操作，不过，在功能强大的同时，体积也不会拉跨！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-11&quot;&gt;本地镜像上传到阿里云&lt;a class=&quot;zola-anchor&quot; href=&quot;#-11&quot; aria-label=&quot;Anchor link for: -11&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;首先在阿里云开通自己的镜像仓库之后，创建命名空间。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12883805053204955031-9bd36134.png&quot; alt=&quot;image-20220813172115062&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;命名空间创建之后，我们在命名空间下创建一个新的镜像仓库，用来存储我们自己构建的镜像数据。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17868706244304431681-588ac5ff.png&quot; alt=&quot;image-20220813172232922&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;在镜像仓库创建结束之后，会自动跳转到官方提供的操作指南页，安装提示一步一步将我们的镜像上传到仓库中。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9653814762994880645-8d014765.png&quot; alt=&quot;image-20220813172349195&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;比如我将前面创建的&lt;code&gt;ubuntu:1.2&lt;&#x2F;code&gt;上传到自己的阿里云镜像仓库，操作如下：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16663582775326683632-26893b53.png&quot; alt=&quot;image-20220813172521572&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如此等待&lt;code&gt;pushing&lt;&#x2F;code&gt;完成即可在远程仓库中看到自己上传的镜像了，同时也可以自由拉取仓库中的镜像文件来使用，如果是公开的仓库，还可以给其他人进行使用，拉取的命令官方页提供了：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker pull registry.cn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hangzhou.aliyuncs.com&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;xu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;myubuntu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;[镜像版本号]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-12&quot;&gt;本地镜像推送到私有库&lt;a class=&quot;zola-anchor&quot; href=&quot;#-12&quot; aria-label=&quot;Anchor link for: -12&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-13&quot;&gt;Docker Registry&lt;a class=&quot;zola-anchor&quot; href=&quot;#-13&quot; aria-label=&quot;Anchor link for: -13&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Dockerhub&lt;&#x2F;code&gt;、阿里云这样的公共镜像仓库可能不太方便，涉及机密的公司不可能提供镜像给公网，所以需要创建一个本地私人仓库供给团队使用，基于公司内部项目构建镜像。&lt;code&gt;Docker Registry&lt;&#x2F;code&gt;是官方提供的工具，&lt;strong&gt;可以用于构建私有镜像仓库。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-14&quot;&gt;私有库搭建流程&lt;a class=&quot;zola-anchor&quot; href=&quot;#-14&quot; aria-label=&quot;Anchor link for: -14&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;拉取registry&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker pull registry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;运行私有库&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认情况，仓库被创建在容器的&lt;code&gt;&#x2F;var&#x2F;lib&#x2F;registry&lt;&#x2F;code&gt;目录下，建议自行用容器卷映射，方便与宿主机联调。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;docker run -d -p 5000:5000  -v &#x2F;ilikexff&#x2F;myregistry&#x2F;:&#x2F;tmp&#x2F;registry --privileged=true registry
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1164883366238816564-7ad663fb.png&quot; alt=&quot;image-20220813183441736&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;参数说明:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;-d 表示设为后台运行&lt;&#x2F;p&gt;
&lt;p&gt;-p 指定运行使用的端口号(宿主机端口号:容器内端口号)&lt;&#x2F;p&gt;
&lt;p&gt;-v 指定数据卷映射&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在启动私有仓库之后，为了能更好的理解整个push流程，下面我在源&lt;code&gt;ubuntu&lt;&#x2F;code&gt;镜像的基础上新&lt;code&gt;commit&lt;&#x2F;code&gt;一个镜像，该镜像新增一个&lt;&#x2F;strong&gt;&lt;code&gt;net-tools&lt;&#x2F;code&gt;工具，通过&lt;code&gt;ifconfig&lt;&#x2F;code&gt;命令可以查看当前容器的IP地址。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-1355004452767630664-306cbe0e.png&quot; alt=&quot;image-20220813212758367&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;能看到，&lt;code&gt;ID&lt;&#x2F;code&gt;为&lt;code&gt;346&lt;&#x2F;code&gt;的就是新创建的容器。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-5507794109957557169-44dbd50f.png&quot; alt=&quot;image-20220813213105721&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接下来我们将通过&lt;code&gt;commit&lt;&#x2F;code&gt;构建完成这个新的镜像，我给他命名为&lt;code&gt;myubuntu:1.2&lt;&#x2F;code&gt;,通过下面的命令提交构建。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker commit &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;update ifconfig cmd&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;八尺妖剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; 3f16668ea346 ubuntu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;myubuntu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-10272846739865788233-feb976fb.png&quot; alt=&quot;image-20220813213511867&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;下面就将该镜像作为新的镜像推送到私服仓库。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;在执行推送之前，我们最好查看一下远程私服仓库的镜像情况。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;curl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;XGET&lt;&#x2F;span&gt;&lt;span&gt; http&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;101.37.150.110:5000&#x2F;v2&#x2F;_catalog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意命令是在&lt;strong&gt;宿主机执行&lt;&#x2F;strong&gt;，记得&lt;code&gt;IP&lt;&#x2F;code&gt;改一下自己的。执行这个命令之后出现下面的情况表示该私服仓库&lt;strong&gt;还没有任何镜像&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-6388359107471626906-ff91fb5a.png&quot; alt=&quot;image-20220813215310368&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;血的教训：请关闭防火墙，放行5000端口！！！！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;血的教训：请关闭防火墙，放行5000端口！！！！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;血的教训：请关闭防火墙，放行5000端口！！！！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;~不然怕你命令执行几百次都没有响应，会激怒心中那头暴躁的小野兽!!嗷嗷~~~&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;按照下面的格式准备好新的镜像，&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;docker   tag   镜像:Tag   Host:Port&#x2F;Repository:Tag&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;所以有&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker tag ubuntu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;myubuntu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.2  101.37.150.110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;ubuntu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;myubuntu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-11407495650052434662-f0b08c3f.png&quot; alt=&quot;image-20220813221213222&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;先别急着&lt;code&gt;push&lt;&#x2F;code&gt;，出于安全考虑，&lt;code&gt;docker&lt;&#x2F;code&gt;是禁止使用&lt;code&gt;http&lt;&#x2F;code&gt;协议推送镜像的，所以这里需要先修改配置文件，暂时取消禁制。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 打开该文件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-2157136057553653815-ea70db06.png&quot; alt=&quot;image-20220813220544374&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如上，新增部分的内容我已经用蓝色框出来了，注意右边的逗号，需要符合&lt;code&gt;JSON&lt;&#x2F;code&gt;格式哈。还有&lt;code&gt;IP&lt;&#x2F;code&gt;改为自己的&lt;code&gt;IP&lt;&#x2F;code&gt;，别做无脑&lt;code&gt;CV&lt;&#x2F;code&gt;工程师。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;开始推送镜像到私服仓库。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;101.37.150.110&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;ubuntu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;myubuntu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果推送的时候遇到这种情况，原因是前面修改的文件可能没有生效，解决办法就是重启&lt;code&gt;docker&lt;&#x2F;code&gt;，然后运行&lt;strong&gt;docker registry&lt;&#x2F;strong&gt;私服，再次推送就成功了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;推送之后，可以再次查看私服中有哪些镜像。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -XGET&lt;&#x2F;span&gt;&lt;span&gt; http:&#x2F;&#x2F;101.37.150.110:5000&#x2F;v2&#x2F;_catalog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-09f5b244.png&quot; alt=&quot;image.png&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;至此向私服推送镜像就完成了，可以通过下面的方式从私服拉取刚刚&lt;code&gt;push&lt;&#x2F;code&gt;的镜像下来玩玩看看正不正常，这不是必须的步骤，主要是感受一下这个&lt;code&gt;commit&lt;&#x2F;code&gt;、&lt;code&gt;push、pull&lt;&#x2F;code&gt;的过程。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; pull 101.37.150.110:5000&#x2F;ubuntu&#x2F;myubuntu:1.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;-15&quot;&gt;数据卷&lt;a class=&quot;zola-anchor&quot; href=&quot;#-15&quot; aria-label=&quot;Anchor link for: -15&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-16&quot;&gt;概念&lt;a class=&quot;zola-anchor&quot; href=&quot;#-16&quot; aria-label=&quot;Anchor link for: -16&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;卷就是目录或者文件，存在于一个或者多个容器中，由&lt;code&gt;docker&lt;&#x2F;code&gt;挂载到容器，但&lt;strong&gt;不属于联合文件系统&lt;&#x2F;strong&gt;，因此能够绕过&lt;code&gt;UnionFS&lt;&#x2F;code&gt;,提供的一些用于持续存储或共享数据的特性。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;前面的内容可还有印象，归因于容器数据的备份，手动&lt;code&gt;cp&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;关于容器的导入导出的&lt;code&gt;impot&lt;&#x2F;code&gt;、&lt;code&gt;export&lt;&#x2F;code&gt;命令。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;上面的内容本质上都是为了对容器镜像数据进行备份而来的，但实际操作起来比较麻烦。所以卷设计的目的就是为了数据的持久化，完全独立于容器的生存周期，因此&lt;code&gt;Docker&lt;&#x2F;code&gt;&lt;strong&gt;不会再容器删除时把挂载的数据卷也顺走了&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;特点:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;1：数据卷可在容器之间共享或重用数据
2：卷中的更改可以直接实时生效
3：数据卷中的更改不会包含在镜像的更新中
4：数据卷的生命周期一直持续到没有容器使用它为止&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;运行一个带有容器卷存储功能的容器实例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;privileged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;宿主机绝对路径目录&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;容器内目录      镜像名
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;这里特别注意一下&lt;&#x2F;strong&gt;&lt;code&gt;--privileged=true&lt;&#x2F;code&gt;参数，它的作用就是开启数据卷的&lt;strong&gt;目录权限&lt;&#x2F;strong&gt;，否则数据卷在挂载使用的过程中可能会遇到一些权限不足等等乱七八糟的问题，所以保险起见，建议都带上它，人畜无害！&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-17&quot;&gt;使用示例&lt;a class=&quot;zola-anchor&quot; href=&quot;#-17&quot; aria-label=&quot;Anchor link for: -17&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;演示数据卷的大致使用过程以及一些需要注意的地方。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;先作这样一个约定：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我们在宿主机(&lt;code&gt;centos&lt;&#x2F;code&gt;)上运行一个&lt;code&gt;ubuntu&lt;&#x2F;code&gt;镜像，并通过数据卷挂载的方式将镜像的数据文件目录挂载到宿主机的&lt;code&gt;&#x2F;tmp&#x2F;dokcer_backup&lt;&#x2F;code&gt;目录下，对应于&lt;code&gt;ubuntu&lt;&#x2F;code&gt;镜像中的&lt;code&gt;&#x2F;tmp&#x2F;docker_data&lt;&#x2F;code&gt;目录。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;上面的约定可以简单的使用映射的方式表示：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&#x2F;tmp&#x2F;docker_backup:&#x2F;tmp&#x2F;docker_data &lt;strong&gt;冒号左边的部分表示宿主机的目录&lt;&#x2F;strong&gt;，右边部分表示映射的&lt;strong&gt;镜像内部&lt;&#x2F;strong&gt;的目录。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;完成上述的映射设置之后，理论上我们在&lt;code&gt;docker&lt;&#x2F;code&gt;容器内部&lt;code&gt;&#x2F;tmp&#x2F;docker_data&#x2F;&lt;&#x2F;code&gt;目录下产生的所有文件都会实时的更新到宿主机的&lt;code&gt;&#x2F;docker_backup&#x2F;&lt;&#x2F;code&gt;目录下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;具体的操作&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;挂载运行ubuntu镜像容器。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;docker run -it --privileged=true -v &#x2F;tmp&#x2F;docker_backup:&#x2F;tmp&#x2F;docker_data --name=myub1 ubuntu
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-1428822832276749836-3df23f28.png&quot; alt=&quot;image-20220814143227660&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;容器已经运行，我们在容器内进入指定的映射目录，看看是否真的存在&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-2249120678644538093-a005f784.png&quot; alt=&quot;image-20220814143329554&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;确实能找到这个路径，事实上，我们挂载的数据卷的目录，如果提前没有创建，那么系统会自动检测，不存在就会帮你自动创建，所以不用担心路径目录不存在的情况。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同理，在宿主机中也是可以找到&lt;code&gt;&#x2F;tmp&#x2F;docker_backup&#x2F;&lt;&#x2F;code&gt;目录的。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建数据文件&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;在容器内的指定目录下随意创建一个文件，回到宿主机的目录下看看是否真的能够同步过去。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;在容器内目录创建一个dockers.txt文件。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tmp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;docker_data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;touch dockers.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-5284680104238031988-5f22f783.png&quot; alt=&quot;image-20220814143906504&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;回到宿主机看看情况。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-4995985329528350771-4f7edc6e.png&quot; alt=&quot;image-20220814143945080&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;中国人不骗中国人，这个文件确实被同步到宿主机了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;那么，既然在容器内的文件数据能够同步到宿主机，宿主机上产生的数据会不会一样也能够被同步到容器内呢？？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;答案是肯定的，这里就不作演示了，自己试试就知道了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;查看挂载信息&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;挂载是挂载了，映射也没啥问题。但如果时间够长，操作够复杂，也难免会出现遗忘的情况，就是我可能不记得自己的宿主机挂载到容器哪个位置了，这时候就要用到之前的一个命令：&lt;&#x2F;strong&gt;&lt;code&gt;inspect&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker inspect 容器ID
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-12312341694518264738-e8e6e297.png&quot; alt=&quot;image-20220814145019188&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令执行的结果返回的是一个很长的&lt;code&gt;JSON&lt;&#x2F;code&gt;数据，但就本处的内容而言，只需要了解其中一小部分即可，如上图，&lt;code&gt;JSON&lt;&#x2F;code&gt;串中有一块名为&lt;code&gt;Mounts&lt;&#x2F;code&gt;的数据，这就是挂载的情况。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Source:宿主机对应的目录&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Destination：容器内映射的目录&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;其他信息…&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如果此时容器停止，宿主机文件有变动，再次重启容器，那么宿主机的变更也还会同步到容器内的哈&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;同时，-v参数可以有多个，也就是数据卷支持同时挂载多个&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-18&quot;&gt;权限调整&lt;a class=&quot;zola-anchor&quot; href=&quot;#-18&quot; aria-label=&quot;Anchor link for: -18&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;上面执行的挂载使用的默认规则，也就是挂载用的容器内部目录拥有&lt;code&gt;rw&lt;&#x2F;code&gt;读写权限。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;privileged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;宿主机绝对路径目录&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;容器内目录&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;rw      镜像名
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果说实际需要，我们还可以自己调整容器内目录的权限为&lt;code&gt;ro&lt;&#x2F;code&gt;即只读权限(&lt;code&gt;read only&lt;&#x2F;code&gt;)。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;it &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;privileged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;宿主机绝对路径目录&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;容器内目录&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;ro     镜像名
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;-19&quot;&gt;卷的继承&amp;amp;共享&lt;a class=&quot;zola-anchor&quot; href=&quot;#-19&quot; aria-label=&quot;Anchor link for: -19&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;假设我们对&lt;code&gt;Ubuntu1&lt;&#x2F;code&gt;和宿主机作了映射之后，再需要另外一个镜像来复用&lt;code&gt;Ubuntu1&lt;&#x2F;code&gt;的数据卷挂载信息，可以通过继承&lt;code&gt;Ubtuntu1&lt;&#x2F;code&gt;的方式实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;it  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;privileged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;volumes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;from 父类  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;name u2 ubuntu
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;特点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Ubuntu1&lt;&#x2F;code&gt;(简称&lt;code&gt;u1&lt;&#x2F;code&gt;)作为被&lt;code&gt;u2&lt;&#x2F;code&gt;继承的父镜像，他们和宿主机之间是可以信息互通的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;尽管&lt;code&gt;u2&lt;&#x2F;code&gt;继承自&lt;code&gt;u1&lt;&#x2F;code&gt;，如果&lt;code&gt;u1&lt;&#x2F;code&gt;挂掉了，此时并不会影响&lt;code&gt;u2&lt;&#x2F;code&gt;和宿主机之间的互通&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;若重启挂掉的&lt;code&gt;u2&lt;&#x2F;code&gt;之后，之前&lt;code&gt;u1&lt;&#x2F;code&gt;和宿主机之间的数据也会同步到&lt;code&gt;u2&lt;&#x2F;code&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-20&quot;&gt;Docker踢馆记&lt;a class=&quot;zola-anchor&quot; href=&quot;#-20&quot; aria-label=&quot;Anchor link for: -20&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;楔子&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;话说有一天，作为后起之秀的docker，觉得自己备受爱戴，牛逼坏了的它准备背起行囊，周游业内各国名将，所到之处，那是腥风血雨，寸草不生……&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-21&quot;&gt;安装Tomcat&lt;a class=&quot;zola-anchor&quot; href=&quot;#-21&quot; aria-label=&quot;Anchor link for: -21&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-22&quot;&gt;镜像拉取&lt;a class=&quot;zola-anchor&quot; href=&quot;#-22&quot; aria-label=&quot;Anchor link for: -22&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;镜像可以在官方的dockerhub搜索，然后按照上面的拉取命令拉取。官方镜像地址&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;hub.docker.com&#x2F;_&#x2F;tomcat&quot;&gt;https:&#x2F;&#x2F;hub.docker.com&#x2F;_&#x2F;tomcat&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-6169731484143770530-35b8aa51.png&quot; alt=&quot;image-20220815163954643&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;记住，如果在拉取时不指定版本号，那默认会拉取最新版本，但就tomcat最新的docker版来说，其实是有一些坑的，为了节约时间和篇幅(主要是我七牛云OSS空间东西太多，不想贴图了哈哈哈)我简单的说一下这个坑就好了。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们在拉取最新版的&lt;code&gt;tomcat&lt;&#x2F;code&gt;之后，一般情况下，只需要按照官方提供的运行命令直接启动&lt;code&gt;tomcat&lt;&#x2F;code&gt;，然后访问映射的端口号即可成功访问到它经典的猫页，可新版的&lt;code&gt;tomcat&lt;&#x2F;code&gt;在这些步骤完成之后访问发现出现了&lt;code&gt;404&lt;&#x2F;code&gt;。原因是在tomcat的配置文件&lt;code&gt;webapps&lt;&#x2F;code&gt;中的内容是空的，新的东西应该是&lt;code&gt;webapps.dist&lt;&#x2F;code&gt;，所以解决办法：把&lt;code&gt;webapps.dist&lt;&#x2F;code&gt;目录换成&lt;code&gt;webapps&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将原来的&lt;&#x2F;strong&gt;&lt;code&gt;webapps&lt;&#x2F;code&gt;目录删除&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;rm rf webapps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;将&lt;&#x2F;strong&gt;&lt;code&gt;webapps.dist&lt;&#x2F;code&gt;替换为&lt;code&gt;webapps&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;mv webapps.dist webapps
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;打完收工！！这次就能看在浏览器看到猫叔了。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-23&quot;&gt;免修改版本演示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-23&quot; aria-label=&quot;Anchor link for: -23&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;所以鉴于上，我直接演示其他版本的tomcat的整个安装流程。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;# 拉取免修改的tomcat版本，虽然我执行的是运行命令，但由于我本来就没有这个镜像，所以它会自动拉取
&lt;&#x2F;span&gt;&lt;span&gt;docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8080&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8080 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;name mytomcat8 billygoo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tomcat8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;jdk8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看启动成功之后，我们在浏览器访问ip:8080端口,看看能不能顺利的去到猫叔家。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-5426165259532121138-6c1d3dc5.png&quot; alt=&quot;image-20220815170335631&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;好，成功了，so easy to happy ！！&lt;&#x2F;p&gt;
&lt;p&gt;下面请跟着我打一套组合拳，一口气灭它9族，毕竟我是个莫得感情的机器人，你于我无用了，我就会无情的抛弃你。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;docker stop 容器ID
&lt;&#x2F;span&gt;&lt;span&gt;docker rm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;f 容器ID
&lt;&#x2F;span&gt;&lt;span&gt;docker rmi 镜像ID
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;打完收工，出发下一家！！！&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;此时轻松拿下猫叔的&lt;code&gt;docker&lt;&#x2F;code&gt;嘴角上扬，心想，猫叔都都不堪一击，接下来的&lt;code&gt;MySql&lt;&#x2F;code&gt;也不会棘手！！！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-24&quot;&gt;安装MySql&lt;a class=&quot;zola-anchor&quot; href=&quot;#-24&quot; aria-label=&quot;Anchor link for: -24&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;为了证明自己的实力，docker并不打算挑战最新版的&lt;code&gt;mysql&lt;&#x2F;code&gt;(毕竟新人经验不足),而是直接对线常胜将军&lt;code&gt;mysql:5.7&lt;&#x2F;code&gt;，它的资历虽比猫叔略逊那么一点点，但自己经验那叫一个老道，稳如老狗！于是乎，&lt;code&gt;mysql:5.7&lt;&#x2F;code&gt;也是欣然接受了·的挑战&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;# 拉取mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5.7
&lt;&#x2F;span&gt;&lt;span&gt;docker pull mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5.7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;运行容器实例&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;数据卷挂载的方式&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3306&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3306 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;privileged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tools&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;var&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tools&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;var&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tools&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;conf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;etc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;conf.d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MYSQL_ROOT_PASSWORD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;123456  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;name mysql mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5.7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-9455904427670233517-0fe5e675.png&quot; alt=&quot;image-20220815175037225&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一回合下来，&lt;code&gt;docker&lt;&#x2F;code&gt;感觉没有任何压力，轻松拿捏就是了！！！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-25&quot;&gt;基本配置&lt;a class=&quot;zola-anchor&quot; href=&quot;#-25&quot; aria-label=&quot;Anchor link for: -25&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;# 在宿主机上切到&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;conf目录
&lt;&#x2F;span&gt;&lt;span&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tools&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql.conf
&lt;&#x2F;span&gt;&lt;span&gt;# 新建my.cnf,通过挂载卷在宿主机操作容器
&lt;&#x2F;span&gt;&lt;span&gt;vim.cnf
&lt;&#x2F;span&gt;&lt;span&gt;# 添加文件内容
&lt;&#x2F;span&gt;&lt;span&gt;[client]
&lt;&#x2F;span&gt;&lt;span&gt;default_character_set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;utf8 
&lt;&#x2F;span&gt;&lt;span&gt;[mysqld]
&lt;&#x2F;span&gt;&lt;span&gt;collation_server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; utf8_general_ci
&lt;&#x2F;span&gt;&lt;span&gt;character_set_server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; utf8
&lt;&#x2F;span&gt;&lt;span&gt;# 重启实例，加载配置
&lt;&#x2F;span&gt;&lt;span&gt;docker restart mysql
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;第二回合就这样结束了。尽管&lt;code&gt;mysql&lt;&#x2F;code&gt;此时已伤痕累累，但&lt;code&gt;docker&lt;&#x2F;code&gt;额头也是渗出了豆大的汗珠，它暗自嘀咕:想不到这家伙确有两把刷子…&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-26&quot;&gt;使用测试&lt;a class=&quot;zola-anchor&quot; href=&quot;#-26&quot; aria-label=&quot;Anchor link for: -26&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;# 进入容器内部
&lt;&#x2F;span&gt;&lt;span&gt;docker exec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;it mysql bash
&lt;&#x2F;span&gt;&lt;span&gt;# 登录mysql
&lt;&#x2F;span&gt;&lt;span&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;uroot &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p
&lt;&#x2F;span&gt;&lt;span&gt;# 键入密码....
&lt;&#x2F;span&gt;&lt;span&gt;# 成功登录
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-1478160933299215099-02b8954e.png&quot; alt=&quot;image-20220815180306326&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;# 查看字符集是否设置生效
&lt;&#x2F;span&gt;&lt;span&gt;# docker安装完MySQL并run出容器后，建议请先修改完字符集编码后再新建mysql库&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;表&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;插数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;SHOW VARIABLES LIKE &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;character%&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-13053466134966946764-faaf7d80.png&quot; alt=&quot;image-20220815180730126&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 建库建表
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CREATE DATABASE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t1
&lt;&#x2F;span&gt;&lt;span&gt;USE t1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CREATE TABLE &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;(id &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;,name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;varchar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-5307588143745079317-b2e2ddfa.png&quot; alt=&quot;image-20220815181117122&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;&#x2F;strong&gt;&lt;code&gt;navcat&lt;&#x2F;code&gt;客户端连接该数据库进行基本测试&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-3456468250938236248-a7ce5701.png&quot; alt=&quot;image-20220815181834976&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 新增和查询
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;INSERT&lt;&#x2F;span&gt;&lt;span&gt; user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;VALUES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ilikexff&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;INSERT&lt;&#x2F;span&gt;&lt;span&gt; user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;VALUES&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;八尺妖剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span&gt; id,name 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; user
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-2169595883318097734-7371eab1.png&quot; alt=&quot;image-20220815182611587&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;第三回合下来，此时的&lt;code&gt;docker&lt;&#x2F;code&gt;可谓是伤敌一千，自损八百。它不曾想过，眼前这个&lt;code&gt;5.7&lt;&#x2F;code&gt;别看长的不怎么样，打起架来可是又狠又稳，一点也不含糊，甚至还请来了猫叔的远房亲戚&lt;code&gt;navcat&lt;&#x2F;code&gt;大表哥助阵。可为了面子，&lt;code&gt;docker&lt;&#x2F;code&gt;还得装作啥事没有的表情，迎接&lt;code&gt;5.7&lt;&#x2F;code&gt;的最后一击……&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-27&quot;&gt;数据持久化测试&lt;a class=&quot;zola-anchor&quot; href=&quot;#-27&quot; aria-label=&quot;Anchor link for: -27&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;可以看到，在宿主机中已经有了数据库的数据文件。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17854143796692009672-8ba14694.png&quot; alt=&quot;image-20220815183756511&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;# 对mysql进行删库跑路，再重启，以测试之前的数据卷映射是否起到了数据持久化备份的功能
&lt;&#x2F;span&gt;&lt;span&gt;docker rm &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;f mysql
&lt;&#x2F;span&gt;&lt;span&gt;# 重新运行mysql
&lt;&#x2F;span&gt;&lt;span&gt;docker run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;p &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3306&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3306 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;privileged&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tools&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;var&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tools&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;var&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;lib&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;v &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;tools&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;conf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;etc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;conf.d &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;e &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MYSQL_ROOT_PASSWORD&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;123456  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span&gt;name mysql mysql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;5.7
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2515771610511412997-2fcab004.png&quot; alt=&quot;image-20220815184105977&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;哇哦，数据果然都在，真不错！有点东西啊。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这是最后一个回合了，一架下来，&lt;code&gt;mysql:5.7&lt;&#x2F;code&gt;的伤势严重，五脏六腑都被&lt;code&gt;docker&lt;&#x2F;code&gt;摸了个遍，它捂着胸口喘息:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;docker&lt;&#x2F;code&gt;兄不愧为开发界的后起之秀，在下佩服！话毕，它又一口老血喷出，把扶着它的远方大表哥喷了一脸都是。&lt;&#x2F;p&gt;
&lt;p&gt;固为亲戚,大表哥嘴上不说，心里一阵嘀咕:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;淦！！你再喷一个试试，信不信劳资反手一个大嘴巴子直接把你送走。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;docker&lt;&#x2F;code&gt;实在是伤的不轻，它也顾不得面子，赶紧掏出不时之需的金疮药往肚皮上就是顿贴，毕竟自己太傲娇，常年没有健身的它早就大腹便便，这次倒好，被&lt;code&gt;mysql&lt;&#x2F;code&gt;这家伙捅了几个洞，海水直流:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;mysql&lt;&#x2F;code&gt;,你江湖人称稳如老狗的名号果然不是盖的，你是个值得尊重的对手，这次就不杀你了，我得保留体力，后面还要挑战&lt;code&gt;redis&lt;&#x2F;code&gt;和&lt;code&gt;nginx&lt;&#x2F;code&gt;，他们也非等闲之辈！！说完就走了…..&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-28&quot;&gt;安装Redis&lt;a class=&quot;zola-anchor&quot; href=&quot;#-28&quot; aria-label=&quot;Anchor link for: -28&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;尽管和&lt;code&gt;mysql&lt;&#x2F;code&gt;那一战自己受了重伤，但好在&lt;code&gt;docker&lt;&#x2F;code&gt;有祖传的秘书，一重启又是一个全新的&lt;code&gt;docker&lt;&#x2F;code&gt;之身。它长途跋涉，来到&lt;code&gt;redis&lt;&#x2F;code&gt;家门口，悄悄门，此时一个年轻的小伙子打开了门：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;你就是Redis？docker道。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;小伙子摇摇头，我是&lt;code&gt;jedis&lt;&#x2F;code&gt;,我师傅在健身房等候你多时了，这边请…&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在&lt;code&gt;jedis&lt;&#x2F;code&gt;的带领下，二人来到了一处宽敞的屋子，里面摆着各式各样的健身器材。场地中央，只见一人正在举着什么东西，细看去，原来是一对哑铃，分别标着&lt;code&gt;RDB&lt;&#x2F;code&gt;&lt;strong&gt;和&lt;&#x2F;strong&gt;&lt;code&gt;AOF&lt;&#x2F;code&gt;字样，一看就知道有些分量。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;docker&lt;&#x2F;code&gt;二话不说，身上的包袱一甩，奔着&lt;code&gt;redis&lt;&#x2F;code&gt;后脑勺就是一沙包大的拳头抡过去，两个年轻人的战斗就此拉开…&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-29&quot;&gt;安装Nginx&lt;a class=&quot;zola-anchor&quot; href=&quot;#-29&quot; aria-label=&quot;Anchor link for: -29&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;待更新….&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-30&quot;&gt;Dockerfile&lt;a class=&quot;zola-anchor&quot; href=&quot;#-30&quot; aria-label=&quot;Anchor link for: -30&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-31&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-31&quot; aria-label=&quot;Anchor link for: -31&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;是用来构建&lt;code&gt;Docker&lt;&#x2F;code&gt;镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220826105611886.png&quot; alt=&quot;image-20220826105611886&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;官网：https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;builder&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;构建步骤：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;编写Dockerfile文件&lt;&#x2F;li&gt;
&lt;li&gt;docker build命令构建镜像&lt;&#x2F;li&gt;
&lt;li&gt;docker run 依镜像运行容器实例&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;-32&quot;&gt;Dockerfile构建过程&lt;a class=&quot;zola-anchor&quot; href=&quot;#-32&quot; aria-label=&quot;Anchor link for: -32&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-33&quot;&gt;Docklerfile基础知识&lt;a class=&quot;zola-anchor&quot; href=&quot;#-33&quot; aria-label=&quot;Anchor link for: -33&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;每条保留字指令都必须是&lt;strong&gt;大写字母&lt;&#x2F;strong&gt;且后面要跟随至少一个参数。&lt;&#x2F;li&gt;
&lt;li&gt;指令从上到下顺序执行&lt;&#x2F;li&gt;
&lt;li&gt;# 表示注释内容&lt;&#x2F;li&gt;
&lt;li&gt;每条指令都会创建一个新的镜像层并对镜像进行提交&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;-34&quot;&gt;执行Dockerfile的大致流程&lt;a class=&quot;zola-anchor&quot; href=&quot;#-34&quot; aria-label=&quot;Anchor link for: -34&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker&lt;&#x2F;code&gt;从基础镜像运行一个容器&lt;&#x2F;li&gt;
&lt;li&gt;执行一条指令并对容器作出修改&lt;&#x2F;li&gt;
&lt;li&gt;执行类似&lt;code&gt;docker commit&lt;&#x2F;code&gt;的操作提交一个新的镜像层&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;&#x2F;code&gt;在基于刚提交的镜像运行一个新的容器&lt;&#x2F;li&gt;
&lt;li&gt;执行&lt;code&gt;dockerfile&lt;&#x2F;code&gt;中的下一条指令直到所有指令都执行完成。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;所有指令执行完成。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-35&quot;&gt;扩展&lt;a class=&quot;zola-anchor&quot; href=&quot;#-35&quot; aria-label=&quot;Anchor link for: -35&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;从应用软件的角度来看，&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;、&lt;code&gt;Docker&lt;&#x2F;code&gt;镜像与&lt;code&gt;Docker&lt;&#x2F;code&gt;容器分别代表软件的三个不同阶段，&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;是软件的原材料&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt;镜像是软件的交付品&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt;容器则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例
&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;面向开发，&lt;code&gt;Docker&lt;&#x2F;code&gt;镜像成为交付标准，&lt;code&gt;Docker&lt;&#x2F;code&gt;容器则涉及部署与运维，三者缺一不可，合力充当&lt;code&gt;Docker&lt;&#x2F;code&gt;体系的基石。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220826114215288.png&quot; alt=&quot;image-20220826114215288&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;，需要定义一个&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;，&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;定义了进程需要的一切东西。&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计&lt;code&gt;namespace&lt;&#x2F;code&gt;的权限控制)等等;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt;镜像，在用&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;定义一个文件之后，&lt;code&gt;docker build&lt;&#x2F;code&gt;时会产生一个&lt;code&gt;Docker&lt;&#x2F;code&gt;镜像，当运行 &lt;code&gt;Docker&lt;&#x2F;code&gt;镜像时会真正开始提供服务;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Docker&lt;&#x2F;code&gt;容器，容器是直接提供服务的。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;-36&quot;&gt;Dockerfile常用保留字&lt;a class=&quot;zola-anchor&quot; href=&quot;#-36&quot; aria-label=&quot;Anchor link for: -36&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;下面列出的保留字都可以在官网查看。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;FROM&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;基础镜像，当前镜像是基于哪个镜像的，指定一个已经存在的镜像最为模板，第一条必须是FROM。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MAINTAINER&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;镜像维护者的姓名和邮箱地址。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;RUN&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;容器构建时需要运行的命令。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;格式&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;shell&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220826114832066.png&quot; alt=&quot;image-20220826114832066&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;exec&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220826114842611.png&quot; alt=&quot;image-20220826114842611&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;RUN是在docker build时运行。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;EXPOSE&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;当前容器对外暴露的端口号。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;WORKDIR&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;指定在创建容器之后，终端默认登录进来的工作目录，作为一个起始落脚点。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;USER&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;指定该镜像以什么样的用户去执行，如果都不指定，默认是root。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ENV&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;用来在构建镜像过程中设置环境变量。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ENV MY_PATH &#x2F;usr&#x2F;mytest&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个环境变量可以在后续的任何&lt;code&gt;RUN&lt;&#x2F;code&gt;指令中使用，这就如同在命令前面指定了环境变量前缀一样；
也可以在其它指令中直接使用这些环境变量，&lt;&#x2F;p&gt;
&lt;p&gt;比如：&lt;code&gt;WORKDIR $MY_PATH&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ADD&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;COPY&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类似ADD，拷贝文件和目录到镜像中。
将从构建上下文目录中 &amp;lt;源路径&amp;gt; 的文件&#x2F;目录复制到新的一层的镜像内的 &amp;lt;目标路径&amp;gt; 位置。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;COPY src dest&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;COPY [&quot;src&quot;, &quot;dest&quot;]&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&amp;lt;src源路径&amp;gt;：源文件或者源目录
&amp;lt;dest目标路径&amp;gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;VOLUME&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;容器数据卷，用于数据保存和持久化工作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CMD&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;指定容器启动后的要做的事情。&lt;&#x2F;li&gt;
&lt;li&gt;注意
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Dockerfile &lt;&#x2F;code&gt;中可以有多个 &lt;code&gt;CMD &lt;&#x2F;code&gt;指令，但只有最后一个生效，&lt;code&gt;CMD &lt;&#x2F;code&gt;会被 &lt;code&gt;docker run &lt;&#x2F;code&gt;之后的参数替换&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;它和前面RUN命令的区别
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CMD&lt;&#x2F;code&gt;是在&lt;code&gt;docker run &lt;&#x2F;code&gt;时运行。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;RUN&lt;&#x2F;code&gt;是在 &lt;code&gt;docker build&lt;&#x2F;code&gt;时运行。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;ENTRYPOINT&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;也是用来指定一个容器启动时要运行的命令&lt;&#x2F;p&gt;
&lt;p&gt;类似于 &lt;code&gt;CMD &lt;&#x2F;code&gt;指令，但是&lt;code&gt;ENTRYPOINT&lt;&#x2F;code&gt;不会被&lt;code&gt;docker run&lt;&#x2F;code&gt;后面的命令覆盖，
而且这些命令行参数会被当作参数送给 &lt;code&gt;ENTRYPOINT &lt;&#x2F;code&gt;指令指定的程序。&lt;&#x2F;p&gt;
&lt;p&gt;命令格式&#x2F;案例&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令格式：
&lt;code&gt;ENTRYPOINT&lt;&#x2F;code&gt;可以和&lt;code&gt;CMD&lt;&#x2F;code&gt;一起用，一般是变参才会使用 &lt;code&gt;CMD &lt;&#x2F;code&gt;，这里的 &lt;code&gt;CMD &lt;&#x2F;code&gt;等于是在给 &lt;code&gt;ENTRYPOINT &lt;&#x2F;code&gt;传参。
当指定了&lt;code&gt;ENTRYPOINT&lt;&#x2F;code&gt;后，&lt;code&gt;CMD&lt;&#x2F;code&gt;的含义就发生了变化，不再是直接运行其命令而是将&lt;code&gt;CMD&lt;&#x2F;code&gt;的内容作为参数传递给&lt;code&gt;ENTRYPOINT&lt;&#x2F;code&gt;指令，他两个组合会变成&lt;&#x2F;p&gt;
&lt;p&gt;案例如下：假设已通过 &lt;code&gt;Dockerfile &lt;&#x2F;code&gt;构建了 &lt;code&gt;nginx:test &lt;&#x2F;code&gt;镜像：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220826115931550.png&quot; alt=&quot;image-20220826115931550&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;是否传参&lt;&#x2F;th&gt;&lt;th&gt;按照&lt;code&gt;dockerfile&lt;&#x2F;code&gt;编写执行&lt;&#x2F;th&gt;&lt;th&gt;传参运行&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Docker命令&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;docker run  nginx:test&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;docker run  nginx:test -c &#x2F;etc&#x2F;nginx&#x2F;new.conf&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;衍生出的实际命令&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;nginx -c &#x2F;etc&#x2F;nginx&#x2F;nginx.conf&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;td&gt;&lt;code&gt;nginx -c &#x2F;etc&#x2F;nginx&#x2F;new.conf&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;优点&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;在执行&lt;code&gt;docker run&lt;&#x2F;code&gt;的时候可以指定 &lt;code&gt;ENTRYPOINT &lt;&#x2F;code&gt;运行所需的参数。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;注意&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Dockerfile &lt;&#x2F;code&gt;中如果存在多个 &lt;code&gt;ENTRYPOINT &lt;&#x2F;code&gt;指令，仅最后一个生效。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-37&quot;&gt;案例演示&lt;a class=&quot;zola-anchor&quot; href=&quot;#-37&quot; aria-label=&quot;Anchor link for: -37&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-38&quot;&gt;构建需求&lt;a class=&quot;zola-anchor&quot; href=&quot;#-38&quot; aria-label=&quot;Anchor link for: -38&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;基于最新版的&lt;code&gt;centos&lt;&#x2F;code&gt;镜像构建，使具备&lt;code&gt;vim+ifconfig+jdk11&lt;&#x2F;code&gt;支持。&lt;&#x2F;p&gt;
&lt;p&gt;具体版本:&lt;code&gt;jdk-11.0.16_linux-x64_bin.tar.gz&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;关于&lt;code&gt;JDK&lt;&#x2F;code&gt;的下载地址&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;www.oracle.com&#x2F;java&#x2F;technologies&#x2F;downloads&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我将上面下载的JDK放到了&#x2F;root目录下。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;-39&quot;&gt;文件编写&lt;a class=&quot;zola-anchor&quot; href=&quot;#-39&quot; aria-label=&quot;Anchor link for: -39&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;编写内容之前先pull一下&lt;code&gt;centos&lt;&#x2F;code&gt;镜像。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; pull centos
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; centos:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;7
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MAINTAINER &lt;&#x2F;span&gt;&lt;span&gt;八尺妖剑&amp;lt;ilikexff@163.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#6e2e32;color:#839496;&quot;&gt; &lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ENV &lt;&#x2F;span&gt;&lt;span&gt;MYPATH &#x2F;usr&#x2F;local
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;WORKDIR &lt;&#x2F;span&gt;&lt;span&gt;$MYPATH
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#安装vim编辑器
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;yum -y install vim
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#安装ifconfig命令查看网络IP
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;yum -y install net-tools
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#安装java8及lib库
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;yum -y install glibc.i686
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;mkdir &#x2F;usr&#x2F;local&#x2F;java
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#ADD 是相对路径jar,把jdk-11.0.16_linux-x64_bin.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ADD &lt;&#x2F;span&gt;&lt;span&gt;jdk-11.0.16_linux-x64_bin.tar.gz &#x2F;usr&#x2F;local&#x2F;java&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#配置java环境变量
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ENV &lt;&#x2F;span&gt;&lt;span&gt;JAVA_HOME &#x2F;usr&#x2F;local&#x2F;java&#x2F;jdk-11.0.16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ENV &lt;&#x2F;span&gt;&lt;span&gt;JRE_HOME $JAVA_HOME&#x2F;jre
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ENV &lt;&#x2F;span&gt;&lt;span&gt;CLASSPATH $JAVA_HOME&#x2F;lib&#x2F;dt.jar:$JAVA_HOME&#x2F;lib&#x2F;tools.jar:$JRE_HOME&#x2F;lib:$CLASSPATH
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ENV &lt;&#x2F;span&gt;&lt;span&gt;PATH $JAVA_HOME&#x2F;bin:$PATH
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;EXPOSE &lt;&#x2F;span&gt;&lt;span&gt;80
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span&gt;echo $MYPATH
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span&gt;echo &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;success--------------ok&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同样的，Dockerfile文件也放在和JDK相同的&#x2F;root目录下。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-40&quot;&gt;构建Dockerfile&lt;a class=&quot;zola-anchor&quot; href=&quot;#-40&quot; aria-label=&quot;Anchor link for: -40&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; centosjava11:1.5 .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;格式:docker build -t 新镜像名字:TAG .&lt;&#x2F;p&gt;
&lt;p&gt;注意TAG后面有一个空格再加上.(半角)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;构建过程&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220826192853279.png&quot; alt=&quot;image-20220826192853279&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;能看到确实已经执行到了文件脚本的最后一行并打印了成功的输出。查看镜像发现，确实已经成功构建&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220826193004880.png&quot; alt=&quot;image-20220826193004880&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;那么是不是真的具有了前面需求中的功能，我们验验货。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -it&lt;&#x2F;span&gt;&lt;span&gt; 容器ID &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220826193421296.png&quot; alt=&quot;image-20220826193421296&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;验证通过，需求提到的所有功能已经全部支持。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-41&quot;&gt;虚悬镜像体验&lt;a class=&quot;zola-anchor&quot; href=&quot;#-41&quot; aria-label=&quot;Anchor link for: -41&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;概念&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;仓库名、标签都是&lt;none&gt;的镜像，俗称dangling&lt;&#x2F;p&gt;
&lt;p&gt;来自己创建一个虚悬镜像体验一下。下面的&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;的内容:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; ubuntu
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;CMD&lt;&#x2F;span&gt;&lt;span&gt; echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;action is success&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;运行：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; build .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;查看镜像&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 专门查看虚悬镜像的命令
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image ls&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -f&lt;&#x2F;span&gt;&lt;span&gt; dangling=true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220826194502455.png&quot; alt=&quot;image-20220826194502455&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一般情况下，虚悬镜像可能由于我们再创建和输删除镜像的过程中出现异常产生的，本身并没有实用价值，所以如果出现虚悬镜像，建议直接删除，不要留恋！！&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;删除虚悬镜像&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; image prune
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-42&quot;&gt;Docker微服务实战&lt;a class=&quot;zola-anchor&quot; href=&quot;#-42&quot; aria-label=&quot;Anchor link for: -42&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-43&quot;&gt;通过IDEA新建一个普通微服务模块&lt;a class=&quot;zola-anchor&quot; href=&quot;#-43&quot; aria-label=&quot;Anchor link for: -43&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;maven配置&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;?&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;xml &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;encoding&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;UTF-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;project &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;xmlns&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;xmlns:xsi&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;         &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;xsi:schemaLocation&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 https:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;modelVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;4.0.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;modelVersion&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;org.springframework.boot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;spring-boot-starter-parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;2.7.3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;relativePath&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&amp;gt; &amp;lt;!-- lookup parent from repository --&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;com.docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;docker-boot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;0.0.1-SNAPSHOT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;docker-boot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;Demo project for Spring Boot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;description&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;java.version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;11&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;java.version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;org.springframework.boot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;spring-boot-starter-web&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;org.springframework.boot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;spring-boot-starter-test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;scope&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;org.springframework.boot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;spring-boot-maven-plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;plugin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;plugins&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;project&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;application.properties&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;yaml&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-yaml &quot;&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;server.port=8081
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;blog.addr=https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;helloController.java&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;com.waer.docker.dockerboot.controller&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;springframework&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;beans&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;factory&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;annotation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;springframework&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;web&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;annotation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;GetMapping&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;org&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;springframework&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;web&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;annotation&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RestController&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;8&#x2F;29 18:09
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;RestController
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;helloController &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;${server.port}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;port;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;${blog.addr}&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;addr;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;GetMapping&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;hello&#x2F;docker&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;helloDocker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;服务端口号:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; port &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+ &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;博客地址:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; addr;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-44&quot;&gt;将项目打成jar包&lt;a class=&quot;zola-anchor&quot; href=&quot;#-44&quot; aria-label=&quot;Anchor link for: -44&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220829183742924.png&quot; alt=&quot;image-20220829183742924&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-45&quot;&gt;编写Dockerfile文件并上传&lt;a class=&quot;zola-anchor&quot; href=&quot;#-45&quot; aria-label=&quot;Anchor link for: -45&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;dockerfile&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-dockerfile &quot;&gt;&lt;code class=&quot;language-dockerfile&quot; data-lang=&quot;dockerfile&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 基础镜像使用java
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span&gt; java:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 作者
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MAINTAINER &lt;&#x2F;span&gt;&lt;span&gt;八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# VOLUME 指定临时文件目录为&#x2F;tmp，在主机&#x2F;var&#x2F;lib&#x2F;docker目录下创建了一个临时文件并链接到容器的&#x2F;tmp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;VOLUME &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;tmp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 将jar包添加到容器中并更名为hello_docker.jar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ADD &lt;&#x2F;span&gt;&lt;span&gt;docker-boot-0.0.1-SNAPSHOT.jar hello_docker.jar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 运行jar包
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;RUN &lt;&#x2F;span&gt;&lt;span&gt;bash -c &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;touch &#x2F;hello_docker.jar&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ENTRYPOINT &lt;&#x2F;span&gt;&lt;span&gt;[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;-jar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;&#x2F;hello_docker.jar&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#暴露8081端口作为微服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;EXPOSE &lt;&#x2F;span&gt;&lt;span&gt;8081
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;CMD &lt;&#x2F;span&gt;&lt;span&gt;echo &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;构建完成.....build success!&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;之后将写好得文件上传到&lt;code&gt;&#x2F;root&#x2F;docker&lt;&#x2F;code&gt;目录下，当然这个目录你可以自定义，但是建议把jar包和dockerfile放到相同目录下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220829190639024.png&quot; alt=&quot;image-20220829190639024&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-46&quot;&gt;构建镜像&lt;a class=&quot;zola-anchor&quot; href=&quot;#-46&quot; aria-label=&quot;Anchor link for: -46&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -t&lt;&#x2F;span&gt;&lt;span&gt; hello_docker:1.5 .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220829191258216.png&quot; alt=&quot;image-20220829191258216&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker images&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220829191342153.png&quot; alt=&quot;image-20220829191342153&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-47&quot;&gt;运行容器&lt;a class=&quot;zola-anchor&quot; href=&quot;#-47&quot; aria-label=&quot;Anchor link for: -47&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;运行命令之前请确保8081端口已经打开。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -d -p&lt;&#x2F;span&gt;&lt;span&gt; 8081:8081 hello_docker:1.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220829194859285.png&quot; alt=&quot;image-20220829194859285&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;如果在运行是遇到下的问题&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220829194944787.png&quot; alt=&quot;image-20220829194944787&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这是由于打包的本地&lt;code&gt;Java&lt;&#x2F;code&gt;版本和&lt;code&gt;FROM &lt;&#x2F;code&gt;的&lt;code&gt;Java&lt;&#x2F;code&gt;版本不一致导致的，严格地说就是使用高版本打包的&lt;code&gt;jar&lt;&#x2F;code&gt;运行在低版本的&lt;code&gt;java&lt;&#x2F;code&gt;环境得不到支持。解决方法是修改本地&lt;code&gt;pom.xml&lt;&#x2F;code&gt;：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;java.version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;1.8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;java.version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;properties&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;修改为&lt;code&gt;1.8&lt;&#x2F;code&gt;再刷新&lt;code&gt;maven&lt;&#x2F;code&gt;之后重新打包上传即可解决。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-48&quot;&gt;Docker网络&lt;a class=&quot;zola-anchor&quot; href=&quot;#-48&quot; aria-label=&quot;Anchor link for: -48&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-49&quot;&gt;开局一条命(令)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-49&quot; aria-label=&quot;Anchor link for: -49&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;在宿主机上启动docker之后，我们通过&lt;code&gt;ifconfig&lt;&#x2F;code&gt;命令查看主机的网络情况：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220827180000423.png&quot; alt=&quot;image-20220827180000423&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;你会发现这里多了一个名为&lt;code&gt;docker0&lt;&#x2F;code&gt;的网络模块。不严格的说，这个就是docker的网络。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;查看网络模式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;docker默认有三大网络模式，通过下面的命令可以查看。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; network ls
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220827180746719.png&quot; alt=&quot;image-20220827180746719&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;分别是桥接、主机、空模式。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-50&quot;&gt;装备全靠help&lt;a class=&quot;zola-anchor&quot; href=&quot;#-50&quot; aria-label=&quot;Anchor link for: -50&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;了解关于&lt;code&gt;doker&lt;&#x2F;code&gt;网络的基本命令的使用，最快的方式就是官方的&lt;code&gt;help&lt;&#x2F;code&gt;命令。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; network COMMAND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --help
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220827181152203.png&quot; alt=&quot;image-20220827181152203&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过一个小案例实际操作一遍上面的大部分命令。我们自己创建一个docker网络。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shll&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-shll &quot;&gt;&lt;code class=&quot;language-shll&quot; data-lang=&quot;shll&quot;&gt;&lt;span&gt;docker network create mynet
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看网络&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; network ls
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;查看网络数据源&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-sh &quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; network inspect mynet
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;删除网络&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; network rm mynet
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;docker网络可以作容器的互联和通信、端口映射。容器IP变动时可以通过服务名称直接进行网络通信，而不受到影响。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-51&quot;&gt;网络模式&lt;a class=&quot;zola-anchor&quot; href=&quot;#-51&quot; aria-label=&quot;Anchor link for: -51&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220827182448518.png&quot; alt=&quot;image-20220827182448518&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上面列出的四种模式分别使用下面的方式进行指定：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;--network&lt;&#x2F;span&gt;&lt;span&gt; bridge 指定，默认使用docker0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;--network&lt;&#x2F;span&gt;&lt;span&gt; host指定
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;--network&lt;&#x2F;span&gt;&lt;span&gt; none指定
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;--network&lt;&#x2F;span&gt;&lt;span&gt; container:NAME或者容器ID指定
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;容器实例内默认网络IP生成规则&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;先启动两个容器&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220827184218063.png&quot; alt=&quot;image-20220827184218063&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再通过&lt;code&gt;docker inspect 容器名&lt;&#x2F;code&gt;来查看容器的网络情况。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220827184410564.png&quot; alt=&quot;image-20220827184410564&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220827184551683.png&quot; alt=&quot;image-20220827184551683&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到两个都是采用&lt;code&gt;bridge&lt;&#x2F;code&gt;桥接模式且公用一个网关，但各自的IP是不一样的。也就是说&lt;strong&gt;docker容器内部的ip是有可能会发生改变的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-52&quot;&gt;bridge&lt;a class=&quot;zola-anchor&quot; href=&quot;#-52&quot; aria-label=&quot;Anchor link for: -52&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;Docker &lt;&#x2F;code&gt;服务默认会创建一个 &lt;code&gt;docker0&lt;&#x2F;code&gt; 网桥（其上有一个 &lt;code&gt;docker0&lt;&#x2F;code&gt; 内部接口），该桥接网络的名称为&lt;code&gt;docker0&lt;&#x2F;code&gt;，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。&lt;code&gt;Docker &lt;&#x2F;code&gt;默认指定了 &lt;code&gt;docker0 &lt;&#x2F;code&gt;接口 的 &lt;code&gt;IP &lt;&#x2F;code&gt;地址和子网掩码，让主机和容器之间可以通过网桥相互通信。&lt;&#x2F;p&gt;
&lt;p&gt;查看 &lt;code&gt;bridge &lt;&#x2F;code&gt;网络的详细信息，并通过 &lt;code&gt;grep &lt;&#x2F;code&gt;获取名称项&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; network inspect bridge &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; name或者ifcong &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span&gt; docker
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220827185858829.png&quot; alt=&quot;image-20220827185858829&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-53&quot;&gt;Docker-compose容器编排&lt;a class=&quot;zola-anchor&quot; href=&quot;#-53&quot; aria-label=&quot;Anchor link for: -53&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-54&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-54&quot; aria-label=&quot;Anchor link for: -54&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Compose &lt;&#x2F;code&gt;是 &lt;code&gt;Docker &lt;&#x2F;code&gt;公司推出的一个工具软件，可以管理多个 &lt;code&gt;Docker &lt;&#x2F;code&gt;容器组成一个应用。你需要定义一个 &lt;code&gt;YAML &lt;&#x2F;code&gt;格式的配置文件&lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt;，写好多个容器之间的调用关系。然后，只要一个命令，就能同时启动&#x2F;关闭这些容器。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;docker&lt;&#x2F;code&gt;建议我们每一个容器中只运行一个服务,因为&lt;code&gt;docker&lt;&#x2F;code&gt;容器本身占用资源极少,所以最好是将每个服务单独的分割开来但是这样我们又面临了一个问题？如果我需要同时部署好多个服务,难道要每个服务单独写&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;然后在构建镜像,构建容器,这样累都累死了,所以&lt;code&gt;docker&lt;&#x2F;code&gt;官方给我们提供了&lt;code&gt;docker-compose&lt;&#x2F;code&gt;多服务部署的工具。&lt;&#x2F;p&gt;
&lt;p&gt;例如要实现一个Web微服务项目，除了&lt;code&gt;Web&lt;&#x2F;code&gt;服务容器本身，往往还需要再加上后端的数据库&lt;code&gt;mysql&lt;&#x2F;code&gt;服务容器，&lt;code&gt;redis&lt;&#x2F;code&gt;服务器，注册中心&lt;code&gt;eureka&lt;&#x2F;code&gt;，甚至还包括负载均衡容器等等。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Compose&lt;&#x2F;code&gt;允许用户通过一个单独的&lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt;模板文件（&lt;code&gt;YAML &lt;&#x2F;code&gt;格式）来定义一组相关联的应用容器为一个项目（&lt;code&gt;project&lt;&#x2F;code&gt;）。&lt;&#x2F;p&gt;
&lt;p&gt;可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。&lt;code&gt;Docker-Compose&lt;&#x2F;code&gt; 解决了容器与容器之间如何管理编排的问题。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-55&quot;&gt;下载安装&lt;a class=&quot;zola-anchor&quot; href=&quot;#-55&quot; aria-label=&quot;Anchor link for: -55&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;下载安装学习，首选官方文档。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;install&#x2F;&quot;&gt;下载地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;docs.docker.com&#x2F;compose&#x2F;compose-file&#x2F;compose-file-v3&#x2F;&quot;&gt;文档地址&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;del&gt;注意先去官方文档看一下compose和docker版本之间的要求，别看着命令就是一顿瞎搞，结果下了个寂寞..&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-56&quot;&gt;具体命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-56&quot; aria-label=&quot;Anchor link for: -56&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 下载compose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -SL&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;v2.7.0&#x2F;docker-compose-linux-x86_64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;DOCKER_CONFIG&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;cli-plugins&#x2F;docker-compose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 提升权限
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 查看版本
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;-57&quot;&gt;核心概念&lt;a class=&quot;zola-anchor&quot; href=&quot;#-57&quot; aria-label=&quot;Anchor link for: -57&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-58&quot;&gt;文件&lt;a class=&quot;zola-anchor&quot; href=&quot;#-58&quot; aria-label=&quot;Anchor link for: -58&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-59&quot;&gt;服务(service)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-59&quot; aria-label=&quot;Anchor link for: -59&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;一个个应用容器实例，比如订单服务、库存服务、&lt;code&gt;mysql&lt;&#x2F;code&gt;容器、&lt;code&gt;nginx&lt;&#x2F;code&gt;容器或者&lt;code&gt;redis&lt;&#x2F;code&gt;容器。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-60&quot;&gt;工程(project)&lt;a class=&quot;zola-anchor&quot; href=&quot;#-60&quot; aria-label=&quot;Anchor link for: -60&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h4&gt;
&lt;p&gt;由一组关联的应用容器组成的一个完整的业务单元，在&lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt;中定义。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-61&quot;&gt;使用步骤&lt;a class=&quot;zola-anchor&quot; href=&quot;#-61&quot; aria-label=&quot;Anchor link for: -61&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;编写&lt;code&gt;Dockerfile&lt;&#x2F;code&gt;定义各个微服务应用并构建出对应的镜像文件。&lt;&#x2F;li&gt;
&lt;li&gt;使用&lt;code&gt;docker-compose.yml&lt;&#x2F;code&gt;定义一个完整的业务单元，安排好整体应用中的各个容器服务。&lt;&#x2F;li&gt;
&lt;li&gt;执行&lt;code&gt;docker-compose up&lt;&#x2F;code&gt;命令来启动并运行整个应用程序，完成一键部署上线。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-62&quot;&gt;Compose常用命令&lt;a class=&quot;zola-anchor&quot; href=&quot;#-62&quot; aria-label=&quot;Anchor link for: -62&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 帮助
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 启动所有的docker-compose服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; up
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 启动服务并保持后台运行
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; up&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -d
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 停止并删除容器、网络、卷、镜像
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; down
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 进入容器实例内部
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; exec &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;docker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;compose.yml文件中写的服务id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 展示当前docker-compose编排过的运行的所有容器
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; ps
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 展示当前docker-compose编排过的容器进程
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; top
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 检查配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 检查配置，有问题才有输出
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; config&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -q
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 重启服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; restart   
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 启动服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; start     
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# 停止服务
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker-compose&lt;&#x2F;span&gt;&lt;span&gt; stop      
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-63&quot;&gt;Portainer&lt;a class=&quot;zola-anchor&quot; href=&quot;#-63&quot; aria-label=&quot;Anchor link for: -63&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-64&quot;&gt;概述&lt;a class=&quot;zola-anchor&quot; href=&quot;#-64&quot; aria-label=&quot;Anchor link for: -64&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;code&gt;Portainer &lt;&#x2F;code&gt;是一款轻量级的应用，它提供了图形化界面，用于方便地管理Docker环境，包括单机环境和集群环境。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;docs.portainer.io&#x2F;v&#x2F;ce-2.9&#x2F;start&#x2F;install&#x2F;server&#x2F;docker&#x2F;linux&quot;&gt;官方文档&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-65&quot;&gt;下载安装&lt;a class=&quot;zola-anchor&quot; href=&quot;#-65&quot; aria-label=&quot;Anchor link for: -65&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;具体的安装细节可以参考官方文档，执行下面的命令可以直接安装之。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -d -p&lt;&#x2F;span&gt;&lt;span&gt; 8000:8000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; 9000:9000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span&gt; portainer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;     --restart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;always&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;     -v&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;var&#x2F;run&#x2F;docker.sock:&#x2F;var&#x2F;run&#x2F;docker.sock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;     -v&lt;&#x2F;span&gt;&lt;span&gt; portainer_data:&#x2F;data     portainer&#x2F;portainer
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其实本质上就是跑了一个容器，注意需要打开9000和8000端口。容器跑起来之后，浏览器访问&lt;code&gt;IP:9000&lt;&#x2F;code&gt;即可打开管理页面。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220901155124820.png&quot; alt=&quot;image-20220901155124820&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;设置密码注册之后可以看到主模板概览如下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220901155246297.png&quot; alt=&quot;image-20220901155246297&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;至此安装完毕！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-66&quot;&gt;使用Portainer安装Ngnix&lt;a class=&quot;zola-anchor&quot; href=&quot;#-66&quot; aria-label=&quot;Anchor link for: -66&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220901155640473.png&quot; alt=&quot;image-20220901155640473&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;基本的配置就是这样，如果对网络、数据卷挂载等复杂的操作，把页面下拉就可以看到，如果了解了命令行的使用方式以及基本原理，那么可视化就更容易理解了。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;这篇博客全部内容就暂时固定了，后面有时间会补更一些实战方面的内容，毕竟纸上得来终觉浅！&lt;&#x2F;p&gt;
</description>
      </item>
      <item>
          <title>详解设计模式_单例的进化之路</title>
          <pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/xiang-jie-she-ji-mo-shi-dan-li-de-jin-hua-zhi-lu/</link>
          <guid>https://ilikexff.cn/xiang-jie-she-ji-mo-shi-dan-li-de-jin-hua-zhi-lu/</guid>
          <description xml:base="https://ilikexff.cn/xiang-jie-she-ji-mo-shi-dan-li-de-jin-hua-zhi-lu/">&lt;h2 id=&quot;gai-nian&quot;&gt;概念&lt;a class=&quot;zola-anchor&quot; href=&quot;#gai-nian&quot; aria-label=&quot;Anchor link for: gai-nian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;单例模式&lt;&#x2F;strong&gt;(&lt;code&gt;Singleton Pattern&lt;&#x2F;code&gt;)是设计模式中一个重要的模式之一，是确保一个类在任何情况下都绝对&lt;strong&gt;只有一个实例。&lt;strong&gt;单例模式一般会屏&lt;&#x2F;strong&gt;蔽构造器&lt;&#x2F;strong&gt;，单例对象提供一个全局访问点，属于&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F&#x2F;22912595?fr=aladdin&quot;&gt;创建型模式&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;根据初始化时间的不同，可以将单例模式分为两类：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;饿汉式单例&lt;&#x2F;li&gt;
&lt;li&gt;懒汉式单例&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;当然，除了上面的两个分类之外，处于对性能、安全等方面的考量，单例模式还演化出了各种实现版本，每一种版本的演进，都是单例的一次**进化与升级，**下面就来看看单例模式的进化之路上都经历了哪些挑战与对抗。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;e-yi-shi-dan-li&quot;&gt;饿汉式单例&lt;a class=&quot;zola-anchor&quot; href=&quot;#e-yi-shi-dan-li&quot; aria-label=&quot;Anchor link for: e-yi-shi-dan-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;饿汉式单例，特指在 &lt;strong&gt;类加载的时候就立即初始化并创建单例对象&lt;&#x2F;strong&gt;的一种单例模式写法。由于是在&lt;strong&gt;线程还没有出现之前&lt;&#x2F;strong&gt;就被实例化了，所以这种模式下的单例是线程绝对安全的，不存在访问安全的问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;根据具体的实现方式划分，饿汉式单例可以通过 &lt;strong&gt;私有化构造器&lt;&#x2F;strong&gt;以及 &lt;strong&gt;使用静态代码块&lt;&#x2F;strong&gt;的方式具体实现。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;私有化构造器写法：&lt;code&gt;HungrySingleton.java&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2023&#x2F;1&#x2F;31 9:32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @Description: 饿汉式单例-构造器私有化写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HungrySingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungrySingleton &lt;&#x2F;span&gt;&lt;span&gt;hungrSingleton  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new HungrySingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HungrySingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungrySingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; hungrSingleton;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的代码中，我们将构造器进行了私有化之后，无法再通过&lt;code&gt;new&lt;&#x2F;code&gt;来创建对象，这种实现下，只能通过提供的&lt;code&gt;getInstance()&lt;&#x2F;code&gt;方法来获得单例对象。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;静态代码块写法:&lt;code&gt;HungryStaticSingleton.java&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;设计模式.单例模式.饿汉式单例&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2022&#x2F;4&#x2F;23 8:36
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @description: 饿汉式单例静态块写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HungryStaticSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungryStaticSingleton &lt;&#x2F;span&gt;&lt;span&gt;hungryStaticSingleton;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        hungryStaticSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new HungryStaticSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HungryStaticSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungryStaticSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; hungryStaticSingleton;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;测试类&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ltd.waer.javabaseforio.PatternDesign&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2023&#x2F;1&#x2F;31 9:42
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @Description: 饿汉式单例测试类
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;HungrySingletonTest &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;私有构造器写法
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungrySingleton&lt;&#x2F;span&gt;&lt;span&gt; hungrySingleton1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungrySingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungrySingleton&lt;&#x2F;span&gt;&lt;span&gt; hungrySingleton2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungrySingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;hungrySingleton1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; hungrySingleton2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;静态块初始化写法
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungryStaticSingleton&lt;&#x2F;span&gt;&lt;span&gt; singleton3 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungryStaticSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungryStaticSingleton&lt;&#x2F;span&gt;&lt;span&gt; singleton4 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;HungryStaticSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;singleton3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt;singleton4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;测试结果:true。说明两种方式实现的单例都是有效的，因为不论我们调用多少次 &lt;code&gt;getInstance &lt;&#x2F;code&gt;方法最后&lt;strong&gt;返回的就是同一个对象&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;优缺点：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建的对象没有添加任何锁，执行效率高。&lt;&#x2F;p&gt;
&lt;p&gt;由于是在类加载的时候就初始化了，所以不管我们使用与否，它都将占有一定的内存空间，这种情况下，通过项目中存在了大量的单例，那么所占用的内存量就&lt;strong&gt;很可观了&lt;&#x2F;strong&gt;，着实浪费。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lan-yi-shi-dan-li&quot;&gt;懒汉式单例&lt;a class=&quot;zola-anchor&quot; href=&quot;#lan-yi-shi-dan-li&quot; aria-label=&quot;Anchor link for: lan-yi-shi-dan-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;那么针对上述&lt;strong&gt;饿汉式单例&lt;&#x2F;strong&gt;存在的空间占用问题，有没有合适的替换或者解决方案呢？那么有请&lt;strong&gt;懒汉&lt;&#x2F;strong&gt;出场。&lt;&#x2F;p&gt;
&lt;p&gt;见名知意， &lt;strong&gt;懒汉式单例&lt;&#x2F;strong&gt;与&lt;strong&gt;饿汉式单例&lt;&#x2F;strong&gt;的理念刚好相反。它不会在 &lt;strong&gt;类加载的时候就初始化&lt;&#x2F;strong&gt;，而是等到用到了才会初始化，就这点来说，确实很 &lt;strong&gt;懒汉&lt;&#x2F;strong&gt;，不饿不吃饭(&lt;del&gt;似乎有点道理??我不饿的时候也不想吃饭&lt;&#x2F;del&gt;)。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;到这里，单例模式就开始自己的进化之路了，下面列一下&lt;strong&gt;进化路线&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;进化主线：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;普通非线程安全单例
&lt;ul&gt;
&lt;li&gt;sync线程安全单例
&lt;ul&gt;
&lt;li&gt;双重检查锁单例
&lt;ul&gt;
&lt;li&gt;内部类单例
&lt;ul&gt;
&lt;li&gt;枚举式单例&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;打野副本:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;内部类单例
&lt;ul&gt;
&lt;li&gt;注册式单例&lt;&#x2F;li&gt;
&lt;li&gt;单线程安全单例
&lt;ul&gt;
&lt;li&gt;枚举式单例&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;1-pu-tong-fei-xian-cheng-an-quan-dan-li&quot;&gt;1. &lt;strong&gt;普通非线程安全单例&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#1-pu-tong-fei-xian-cheng-an-quan-dan-li&quot; aria-label=&quot;Anchor link for: 1-pu-tong-fei-xian-cheng-an-quan-dan-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ltd.waer.javabaseforio.PatternDesign.LazySingleton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2023&#x2F;1&#x2F;31 9:47
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @Description: 版本一:非线程安全
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LazySingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazySingleton &lt;&#x2F;span&gt;&lt;span&gt;lazySingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LazySingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazySingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; lazySingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;           lazySingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new LazySingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; lazySingleton;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazySingleton&lt;&#x2F;span&gt;&lt;span&gt; instance1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazySingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazySingleton&lt;&#x2F;span&gt;&lt;span&gt; instance2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazySingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;instance1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; instance2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面是单例的最简单写法，也是最初的一种版本，在开始时将实例赋值为&lt;code&gt;null&lt;&#x2F;code&gt;，并没有进行初始化，而是在调用&lt;code&gt;getInstance&lt;&#x2F;code&gt;方法的时候才会初始化，虽然实现简单，但也存在线程安全问题，&lt;strong&gt;多线程环境下有一定几率会返回多个单例对象&lt;&#x2F;strong&gt;，这显然违背了单例的原则，进一步的解决办法就是下面这种实现。使用&lt;code&gt;synchronizeed&lt;&#x2F;code&gt;关键字保证线程安全。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-syncxian-cheng-an-quan-dan-li&quot;&gt;2. &lt;code&gt;sync&lt;&#x2F;code&gt;&lt;strong&gt;线程安全单例&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#2-syncxian-cheng-an-quan-dan-li&quot; aria-label=&quot;Anchor link for: 2-syncxian-cheng-an-quan-dan-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ltd.waer.javabaseforio.PatternDesign.LazySingleton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2023&#x2F;1&#x2F;31 9:51
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @Description: 线程安全的懒汉式单例-synchronized
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LazySyncSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazySyncSingleton &lt;&#x2F;span&gt;&lt;span&gt;lazySyncSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LazySyncSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public synchronized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazySyncSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; lazySyncSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            lazySyncSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new LazySyncSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; lazySyncSingleton;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的实现也非常简单，在前面一种写法的基础山加了一个&lt;code&gt;synchronized&lt;&#x2F;code&gt;关键字即可，这样确实解决了线程安全的问题，但也引出了一个新的问题，&lt;strong&gt;假如单例对象的创建非常复杂耗时的情况下，一旦并发量上来了，CPU压力上升，那么可能会导致大批量线程出现阻塞的情况，从而导致程序的允许性能大幅下降&lt;&#x2F;strong&gt;，解决方法是**双重检查锁(double-checked locking)**单例写法，如下：&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-shuang-zhong-jian-cha-suo-dan-li&quot;&gt;3. &lt;strong&gt;双重检查锁单例&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#3-shuang-zhong-jian-cha-suo-dan-li&quot; aria-label=&quot;Anchor link for: 3-shuang-zhong-jian-cha-suo-dan-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ltd.waer.javabaseforio.PatternDesign.LazySingleton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2023&#x2F;1&#x2F;31 9:59
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @Description: 解决写法2的问题，双重检查锁写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LazyDoubleCheckSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private volatile static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyDoubleCheckSingleton &lt;&#x2F;span&gt;&lt;span&gt;lazyDoubleCheckSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LazyDoubleCheckSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyDoubleCheckSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;( &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; lazyDoubleCheckSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;synchronized &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyDoubleCheckSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; lazyDoubleCheckSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    lazyDoubleCheckSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new LazyDoubleCheckSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; lazyDoubleCheckSingleton;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这种写法中，较于上面的写法做了两个地方的改变。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在&lt;code&gt;lazyDoubleCheckSingleton&lt;&#x2F;code&gt;属性加上了&lt;code&gt;volatile&lt;&#x2F;code&gt;关键字，原因就是为了解决&lt;strong&gt;多线程下可见性问题&lt;&#x2F;strong&gt;，因为我们的&lt;code&gt;getInstance&lt;&#x2F;code&gt;方法在判断&lt;code&gt;lazyDoubleCheckSingleton&lt;&#x2F;code&gt;是否为&lt;code&gt;null&lt;&#x2F;code&gt;时并没有加锁，所以假如线程&lt;code&gt;1&lt;&#x2F;code&gt;初始化了对象，另外线程&lt;code&gt;2&lt;&#x2F;code&gt;是无法感知的，而加上了&lt;code&gt;volatile&lt;&#x2F;code&gt;之后便可以解决这个问题。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;把&lt;code&gt;synchronized&lt;&#x2F;code&gt;&lt;strong&gt;关键字移到了方法内部，尽可能缩小加锁的代码块，提升效率&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;迭代了这几个版本，到这里是否就已经完美了呢？其实不是，这种写法依旧存在问题，那就是&lt;strong&gt;指令重排&lt;&#x2F;strong&gt;问题。&lt;&#x2F;p&gt;
&lt;p&gt;上面&lt;code&gt;new&lt;&#x2F;code&gt;对象只有一行代码，然而这行代码在&lt;code&gt;JVM&lt;&#x2F;code&gt;底层却分成了3步：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;分配内存来创建对象，即&lt;code&gt;new&lt;&#x2F;code&gt;操作。&lt;&#x2F;li&gt;
&lt;li&gt;创建一个对象&lt;code&gt;lazyDoubleCheckSingleton&lt;&#x2F;code&gt;此时&lt;code&gt;lazyDoubleCheckSingleton==nul&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;将&lt;code&gt;new&lt;&#x2F;code&gt;出来的对象赋给&lt;code&gt;lazyDoubleCheckSingleton&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;但实际运行的时候为了提升效率，这&lt;code&gt;3&lt;&#x2F;code&gt;步并&lt;strong&gt;不会按照实际顺序&lt;&#x2F;strong&gt;来运行。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;假如线程&lt;code&gt;t1&lt;&#x2F;code&gt;进入同步代码块正在创建对象，而此时执行了后面&lt;code&gt;2&lt;&#x2F;code&gt;步，也即是此时&lt;code&gt;lazyDoubleCheckSingleton&lt;&#x2F;code&gt;依已经不为&lt;code&gt;null&lt;&#x2F;code&gt;了，但是对象却没有创建结束，这时候又来了一个线程&lt;code&gt;t2&lt;&#x2F;code&gt;进入&lt;code&gt;getInstance&lt;&#x2F;code&gt;方法，这时候&lt;code&gt;if&lt;&#x2F;code&gt;条件不再成立，线程&lt;code&gt;t2&lt;&#x2F;code&gt;会直接返回一个&lt;strong&gt;残缺不全的对象&lt;&#x2F;strong&gt;，自然会出现报错。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;为了解决这个问题，下面引出了第四个单例版本，即&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-nei-bu-lei-dan-li&quot;&gt;4. &lt;strong&gt;内部类单例&lt;&#x2F;strong&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#4-nei-bu-lei-dan-li&quot; aria-label=&quot;Anchor link for: 4-nei-bu-lei-dan-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ltd.waer.javabaseforio.PatternDesign.LazySingleton&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Serializable&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;lang&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;reflect&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Constructor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @date: 2023&#x2F;1&#x2F;31 10:48
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; * @Description: 内部类懒汉式单例-解决指令重排问题
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LazyInnerClassSingleton  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Serializable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LazyInnerClassSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyInnerClassSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return InnerLazy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;LAZY&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;InnerLazy &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyInnerClassSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;LAZY &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new LazyInnerClassSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这种写法巧妙的利用了&lt;strong&gt;内部类会等到外部调用时才会被初始化的特性&lt;&#x2F;strong&gt;，用饿汉式单例的思想实现了懒汉式单例。&lt;&#x2F;p&gt;
&lt;p&gt;这种写法看起来已经是高效完美，但其实存在安全隐患，比如可以通过&lt;strong&gt;反射&lt;&#x2F;strong&gt;的方式破坏这种写法，测试代码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt; throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Class&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; clazz &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyInnerClassSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Constructor&lt;&#x2F;span&gt;&lt;span&gt; constructor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; clazz.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getDeclaredConstructor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    constructor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;setAccessible&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; o1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; constructor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;newInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; o2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyInnerClassSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;o1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; o2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到，虽然构造方法被私有化了，但是我们仍然可以&lt;strong&gt;利用反射来破坏单例&lt;&#x2F;strong&gt;。为了防止反射破坏单例，我们将上面的写法再改造一下。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;5-gai-jin-ban-de-nei-bu-lei-dan-li&quot;&gt;5. 改进版的内部类单例&lt;a class=&quot;zola-anchor&quot; href=&quot;#5-gai-jin-ban-de-nei-bu-lei-dan-li&quot; aria-label=&quot;Anchor link for: 5-gai-jin-ban-de-nei-bu-lei-dan-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;``java
public class LazyInnerClassSingleton {&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;private LazyInnerClassSingleton(){
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F;防止反射破坏单例
&lt;&#x2F;span&gt;&lt;span&gt;     if(null != InnerLazy.LAZY){
&lt;&#x2F;span&gt;&lt;span&gt;       throw new RuntimeException(&amp;quot;不允许通过反射类构造单例对象&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;public static final LazyInnerClassSingleton getInstance(){
&lt;&#x2F;span&gt;&lt;span&gt;    return InnerLazy.LAZY;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;private static class InnerLazy{
&lt;&#x2F;span&gt;&lt;span&gt;    private static final LazyInnerClassSingleton LAZY = new LazyInnerClassSingleton();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;尽管如此，但假如我们的单例对象实现了 `Serializable `接口，那么内部类的写法就还是能**通过序列化来破坏**。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 6. 实现了`Serializable`接口的内部类单例
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;``java
&lt;&#x2F;span&gt;&lt;span&gt;package singleton.lazy;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;import java.io.Serializable;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;public class LazyInnerClassSingleton implements Serializable {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    private LazyInnerClassSingleton(){
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F;防止反射破坏单例
&lt;&#x2F;span&gt;&lt;span&gt;         if(null != InnerLazy.LAZY){
&lt;&#x2F;span&gt;&lt;span&gt;           throw new RuntimeException(&amp;quot;不允许通过反射类构造单例对象&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;         }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public static final LazyInnerClassSingleton getInstance(){
&lt;&#x2F;span&gt;&lt;span&gt;        return InnerLazy.LAZY;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    private static class InnerLazy {
&lt;&#x2F;span&gt;&lt;span&gt;        private static final LazyInnerClassSingleton LAZY = new LazyInnerClassSingleton();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;由于实现了序列化的接口，所以内部类的写法依然可以通过序列化来进行破坏，比如使用下面这段测试代码。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;singleton.lazy&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FileInputStream&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FileOutputStream&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ObjectInputStream&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ObjectOutputStream&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TestLazyInnerClassSingleton2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;序列化攻击内部类式单例
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyInnerClassSingleton&lt;&#x2F;span&gt;&lt;span&gt; s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyInnerClassSingleton&lt;&#x2F;span&gt;&lt;span&gt; s2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyInnerClassSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FileOutputStream&lt;&#x2F;span&gt;&lt;span&gt; fos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            fos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new FileOutputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;LazyInnerClassSingleton.text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ObjectOutputStream&lt;&#x2F;span&gt;&lt;span&gt; oos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ObjectOutputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;fos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            oos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;writeObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;s2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            oos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;flush&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            oos.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;FileInputStream&lt;&#x2F;span&gt;&lt;span&gt; fis &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new FileInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;LazyInnerClassSingleton.text&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ObjectInputStream&lt;&#x2F;span&gt;&lt;span&gt; ois &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ObjectInputStream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;fis&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LazyInnerClassSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;ois.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;readObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            ois.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; s2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;输出：false
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;            e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上面示例中 &lt;code&gt;s1&lt;&#x2F;code&gt; 是通过我们自己提供的全局入口创建的对象，而 &lt;code&gt;s2&lt;&#x2F;code&gt; 是通过序列化的方式创建的对象，不相等说明这是两个对象，也就是说序列化破坏了单例模式。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;解决办法就是在 &lt;code&gt;LazyInnerClassSingleton&lt;&#x2F;code&gt; 类中加一个 &lt;code&gt;readResolve&lt;&#x2F;code&gt; 方法，防止序列化破坏单例。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;7-zai-gai-jin-ban-de-nei-bu-lei-dan-li&quot;&gt;7. 再改进版的内部类单例&lt;a class=&quot;zola-anchor&quot; href=&quot;#7-zai-gai-jin-ban-de-nei-bu-lei-dan-li&quot; aria-label=&quot;Anchor link for: 7-zai-gai-jin-ban-de-nei-bu-lei-dan-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;``java
package singleton.lazy;&lt;&#x2F;p&gt;
&lt;p&gt;import java.io.Serializable;&lt;&#x2F;p&gt;
&lt;p&gt;public class LazyInnerClassSingleton implements Serializable {&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;private LazyInnerClassSingleton(){
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F;防止反射破坏单例
&lt;&#x2F;span&gt;&lt;span&gt;     if(null != InnerLazy.LAZY){
&lt;&#x2F;span&gt;&lt;span&gt;       throw new RuntimeException(&amp;quot;不允许通过反射类构造单例对象&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;     }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;public static final LazyInnerClassSingleton getInstance(){
&lt;&#x2F;span&gt;&lt;span&gt;    return InnerLazy.LAZY;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;private static class InnerLazy {
&lt;&#x2F;span&gt;&lt;span&gt;    private static final LazyInnerClassSingleton LAZY = new LazyInnerClassSingleton();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;防止通过序列化破坏单例
&lt;&#x2F;span&gt;&lt;span&gt;private Object readResolve(){
&lt;&#x2F;span&gt;&lt;span&gt;    return InnerLazy.LAZY;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;}&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;这次返回了 `true`，也就是序列化没有破坏单例了。原因是因为 `JDK `源码中在序列化的时候会检验一个类中是否存在一个 `readResolve` 方法，如果存在，则会放弃通过序列化产生的对象，而返回原本的对象。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;这种方式虽然保证了单例，但是在校验是否存在 `readResolve` 方法前还是会产生一个对象，只不过这个对象会在发现类中存在 `readResolve` 方法后丢掉，然后返回原本的单例对象。这种写法只是保证了结果的唯一，但是过程中依然会**被实例化多次**，假如创建对象的频率增大，**就意味着内存分配的开销也随之增大。**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;**上面介绍了这么多种写法，看起来每种写法似乎都存在问题，难道就没有一种最优雅、安全、高效的方法吗？这就是我们最后要介绍的枚举式单例，不过在介绍枚举式单例之前，我们先刷一下副本，看看其它写法。**
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;### 8. 注册式单例
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;将每一个实例都保存起来，然后在需要使用的时候直接通过唯一的标识获取实例，这便是注册式单例。
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;```java
&lt;&#x2F;span&gt;&lt;span&gt;import java.util.Map;
&lt;&#x2F;span&gt;&lt;span&gt;import java.util.concurrent.ConcurrentHashMap;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;public class ContainerSingleton {
&lt;&#x2F;span&gt;&lt;span&gt;    private ContainerSingleton(){
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    private static Map&amp;lt;String,Object&amp;gt; ioc = new ConcurrentHashMap&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    public static Object getBean(String className){
&lt;&#x2F;span&gt;&lt;span&gt;        synchronized (ioc){
&lt;&#x2F;span&gt;&lt;span&gt;            &#x2F;&#x2F;如果容器中不存在当前对象
&lt;&#x2F;span&gt;&lt;span&gt;            if(!ioc.containsKey(className)){
&lt;&#x2F;span&gt;&lt;span&gt;                Object obj = null;
&lt;&#x2F;span&gt;&lt;span&gt;                try {
&lt;&#x2F;span&gt;&lt;span&gt;                    obj = Class.forName(className).newInstance();
&lt;&#x2F;span&gt;&lt;span&gt;                    &#x2F;&#x2F;将className作为唯一标识存入容器
&lt;&#x2F;span&gt;&lt;span&gt;                    ioc.put(className,obj);
&lt;&#x2F;span&gt;&lt;span&gt;                }catch (Exception e) {
&lt;&#x2F;span&gt;&lt;span&gt;                    e.printStackTrace();
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                return obj;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F;如果容器中已经存在了单例对象，则直接返回
&lt;&#x2F;span&gt;&lt;span&gt;        return ioc.get(className);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;新建一个空对象 &lt;code&gt;MyObject.java&lt;&#x2F;code&gt;，用来测试单例。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;singleton.register&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;新建一个测试类 &lt;code&gt;TestContainerSingleton.java&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;singleton.register&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TestContainerSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MyObject&lt;&#x2F;span&gt;&lt;span&gt; myObject1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MyObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ContainerSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;singleton.register.MyObject&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MyObject&lt;&#x2F;span&gt;&lt;span&gt; myObject2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MyObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ContainerSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getBean&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;singleton.register.MyObject&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;myObject1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; myObject2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;输出：true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面返回 &lt;code&gt;true&lt;&#x2F;code&gt; 是因为我们加了 &lt;code&gt;synchronized&lt;&#x2F;code&gt; 关键字，实际上 &lt;code&gt;Spring &lt;&#x2F;code&gt;框架中用的就是容器式单例，默认是线程不安全的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;9-dan-xian-cheng-an-quan-dan-li&quot;&gt;9. 单线程安全单例&lt;a class=&quot;zola-anchor&quot; href=&quot;#9-dan-xian-cheng-an-quan-dan-li&quot; aria-label=&quot;Anchor link for: 9-dan-xian-cheng-an-quan-dan-li&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;基于&lt;code&gt;ThreadLocal&lt;&#x2F;code&gt;实现，该单例不能保证其创建的对象是全局唯一，但是能保证在单个线程中是唯一的，在单线程环境下线程天生安全。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;util&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;concurrent&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadFactory&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ThreadLocalSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ThreadLocalSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadLocal&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadLocalSingleton&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; singleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new ThreadLocal&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadLocalSingleton&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadLocalSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initialValue&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return new ThreadLocalSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadLocalSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; singleton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;测试类:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TestThreadLocalSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadLocalSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;主线程输出
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadLocalSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;主线程输出
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt; t1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadLocalSingleton&lt;&#x2F;span&gt;&lt;span&gt; singleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;ThreadLocalSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;currentThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() + &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; singleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;})&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        t1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;s2.loli.net&#x2F;2022&#x2F;04&#x2F;23&#x2F;MZraX8gnyDBl5cS.png&quot; alt=&quot;image-20220423105451698&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从上图可以看到，&lt;code&gt;main&lt;&#x2F;code&gt; 线程输出的和 &lt;code&gt;t1&lt;&#x2F;code&gt; 线程输出的并不是同一个对象，故而 &lt;code&gt;ThreadLocal&lt;&#x2F;code&gt; 式示例仅对单线程是安全的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;10. 枚举式单例&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;枚举式单例充分利用了枚举类的特性来创建单例对象，&lt;strong&gt;目前来说这是最优雅的一种写法。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;照例我们新建一个空的对象 &lt;code&gt;MyObject.java&lt;&#x2F;code&gt; 来测试单例。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;singleton.meiju&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;MyObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;EnumSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;INSTANCE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;MyObject &lt;&#x2F;span&gt;&lt;span&gt;myObject;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;EnumSingleton&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d33682;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.myObject &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new MyObject&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; myObject;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;EnumSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;INSTANCE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;新建测试类 &lt;code&gt;TestEnumSingleton.java&lt;&#x2F;code&gt; 进行测试。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#859900;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;singleton.meiju&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;TestEnumSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#93a1a1;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;throws Exception&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;EnumSingleton&lt;&#x2F;span&gt;&lt;span&gt; enumSingleton &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;EnumSingleton&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getInstance&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;enumSingleton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() ==&lt;&#x2F;span&gt;&lt;span&gt; enumSingleton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getData&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;())&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;&#x2F;&#x2F;输出：true
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出结果为 &lt;code&gt;true&lt;&#x2F;code&gt;，枚举式单例写法能有效的防止通过反射以及序列化手段的破坏，确实为目前最佳的单例实践之选。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;小结&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;尽管实现单例模式的具体思想和方法多种多样，也各有千秋和不足，但在实际的使用中，并不是最优的就是最合适的，在使用单例模式时，应该结合具体的项目需求以及场景来选择合适的实现方式。比如小项目追求线程安全又拥有足够空间的情况下使用&lt;strong&gt;饿汉式单例&lt;&#x2F;strong&gt;又何尝不可？&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;致谢&amp;amp;引用:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;dzone.com&#x2F;articles&#x2F;java-singletons-using-enum&quot;&gt;Java Singletons Using Enum&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.geeksforgeeks.org&#x2F;advantages-and-disadvantages-of-using-enum-as-singleton-in-java&#x2F;&quot;&gt;Advantages and Disadvantages of using Enum as Singleton in Java&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F&#x2F;22912595?fr=aladdin&quot;&gt;百度百科&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
      </item>
      <item>
          <title>PicGo配置各种图床</title>
          <pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate>
          <author>Unknown</author>
          <link>https://ilikexff.cn/picgo-pei-zhi-ge-chong-tu-chuang/</link>
          <guid>https://ilikexff.cn/picgo-pei-zhi-ge-chong-tu-chuang/</guid>
          <description xml:base="https://ilikexff.cn/picgo-pei-zhi-ge-chong-tu-chuang/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志&lt;a class=&quot;zola-anchor&quot; href=&quot;#geng-xin-ri-zhi&quot; aria-label=&quot;Anchor link for: geng-xin-ri-zhi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;2022-09-08 子时 于 杭州&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;对之前的内容进行了一些修补&lt;&#x2F;li&gt;
&lt;li&gt;新增了阿里云&lt;code&gt;OSS&lt;&#x2F;code&gt;图床的配置&lt;&#x2F;li&gt;
&lt;li&gt;修正了几个(其实有点多)已知的错别字&lt;&#x2F;li&gt;
&lt;li&gt;补了一张配图&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际的工作学习中，会遇到很多需要上传图片的场景，比如在写博客时，可能需要放一些配图，做笔记的时候也难免会有上传图片的需求。
由于个人用的主力编辑器是支持markdown语法格式的Typora，它清晰简洁的格式布局自然不用说，加之其简单易学的语法简直可以称神！！美中不足的是，Typora原生并不支持图片云存储，如果使用，需要自己配置。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;qi-niu-yun-ping-tai&quot;&gt;七牛云平台&lt;a class=&quot;zola-anchor&quot; href=&quot;#qi-niu-yun-ping-tai&quot; aria-label=&quot;Anchor link for: qi-niu-yun-ping-tai&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文选取的图片仓库为七牛云平台，为什么选择它，一个主要的原因是自己相对比较熟悉，所有步骤都是一次次踩坑得来的。当然，类似的图床有很多，就不再一一赘述，至于各个平台都有哪些优缺点，这个因人而异，这里不杠。自己喜欢的就是最重要的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zhun-bei-gong-zuo&quot;&gt;准备工作&lt;a class=&quot;zola-anchor&quot; href=&quot;#zhun-bei-gong-zuo&quot; aria-label=&quot;Anchor link for: zhun-bei-gong-zuo&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在正式教程开始之前，你&lt;strong&gt;可能&lt;&#x2F;strong&gt;需要准备一下工作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一个七牛云平台账号：自己注册&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;portal.qiniu.com&#x2F;home&quot;&gt;七牛云官网&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Typora编辑器(可选)：&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.typora.net&#x2F;&quot;&gt;Typora中文网&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;自己的域名(最好是已经备案，也是可选)&lt;&#x2F;li&gt;
&lt;li&gt;软件&lt;code&gt;PicGo2.3+&lt;&#x2F;code&gt;：&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Molunerfinn&#x2F;PicGo&#x2F;releases&quot;&gt;PicGo下载官网&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;jiao-cheng-kai-shi&quot;&gt;教程开始&lt;a class=&quot;zola-anchor&quot; href=&quot;#jiao-cheng-kai-shi&quot; aria-label=&quot;Anchor link for: jiao-cheng-kai-shi&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;chuang-jian-cun-chu-kong-jian&quot;&gt;创建存储空间&lt;a class=&quot;zola-anchor&quot; href=&quot;#chuang-jian-cun-chu-kong-jian&quot; aria-label=&quot;Anchor link for: chuang-jian-cun-chu-kong-jian&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;登录并进入官网首页，找到空间管理。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908195353332.png&quot; alt=&quot;image-20220908195353332&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;新建一个自己的存储空间。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908195452544.png&quot; alt=&quot;image-20220908195452544&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908195154917.png&quot; alt=&quot;image-20220908195154917&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;空间名称：自己填写一个符合要求的名称就好。
存储区域：选择一个距离你最近的区域。
访问控制：很简单，如果你上传的图片别人也可以看到，那就选公开，否则就选择私有。
点击确定，成功创建仓库空间。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;&quot;&gt;选择域名&lt;a class=&quot;zola-anchor&quot; href=&quot;#&quot; aria-label=&quot;Anchor link for: &quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;点击空间概览&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908195639582.png&quot; alt=&quot;image-20220908195639582&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;简单的说，就是配置一个图片访问的地址，如果你有自己的域名，就用自己的域名进行自定义配置(详细后面会说再发教程)如果没有自己的域名(大部分人应该是没有的)，那就选择七牛云提供的测试域名。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1249968323845599710-f95e5146.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-1&quot;&gt;配置PicGo&lt;a class=&quot;zola-anchor&quot; href=&quot;#-1&quot; aria-label=&quot;Anchor link for: -1&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在配置完七牛云空间之后，还需要一个载体，用来将本地需要上传的图片上传到刚刚配置好的仓库空间。
具体步骤：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在七牛云打开个人空间，找到密钥管理，查看并复制里面的两种密钥。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16389764976990109421-27802cf4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908195803236.png&quot; alt=&quot;image-20220908195803236&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;打开下载和好的&lt;code&gt;PicGo&lt;&#x2F;code&gt;,左侧菜单栏找到【图床设置】并展开。&lt;&#x2F;li&gt;
&lt;li&gt;找到并点击【七牛图床】，如下图
&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908195841373.png&quot; alt=&quot;image-20220908195841373&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;直接将你在七牛云配置好的贴上去就行，要和七牛云保持一致，别写错了。&lt;&#x2F;li&gt;
&lt;li&gt;设置访问网址：就是访问你图片的链接，将测试域名放进去即可。&lt;&#x2F;li&gt;
&lt;li&gt;后面两个参数是可选的，你可以自己根据情况填写，也可以不填。&lt;&#x2F;li&gt;
&lt;li&gt;最后点击确定就配置完了，接下来就是上传图片进行测试一下。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;配置Typora&lt;a class=&quot;zola-anchor&quot; href=&quot;#-2&quot; aria-label=&quot;Anchor link for: -2&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;​	既然都有了&lt;code&gt;picGo&lt;&#x2F;code&gt;了，为什么还要配置&lt;code&gt;typora&lt;&#x2F;code&gt;呢？如果你是重度的&lt;code&gt;typora&lt;&#x2F;code&gt;使用者，你会发现它有一个问题比较烦人。就是当我们在别处粘贴过去的图片，默认直接显示的时图标在本地存放的位置，类似于&lt;code&gt;c:&#x2F;User&#x2F;xxx&#x2F;xxx.png&lt;&#x2F;code&gt;这种，开始可能觉得没什么，反正也能正常显示，但是！如果你不小心清理电脑的时候把这个位置的路径删除了，那你的图片就没有了，如果是很重要的笔记配图，那岂不是白给。&lt;&#x2F;p&gt;
&lt;p&gt;​	所以我们需要把&lt;code&gt;typora&lt;&#x2F;code&gt;中的图片上传页配好，之后粘贴过来的图片它会自动帮我们直接上传到指定的远程仓库，再也不用担心图片找不到的情况，完美解决了上面的痛点,也能提高工作学习的效率。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;打开软件Typora&lt;&#x2F;li&gt;
&lt;li&gt;左上角打开【文件】找到【偏好设置】并打开。&lt;&#x2F;li&gt;
&lt;li&gt;选择图像，见下图：
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11955089193965830462-1136150d.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;上传服务：如图选择&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;PicGo&lt;&#x2F;code&gt;路径：选择你下载的【&lt;code&gt;PicGo&lt;&#x2F;code&gt;】所在的路径(包含&lt;code&gt;.exe&lt;&#x2F;code&gt;的那个文件夹)&lt;&#x2F;li&gt;
&lt;li&gt;完毕，喝咖啡。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;-3&quot;&gt;上传测试-PicGo&lt;a class=&quot;zola-anchor&quot; href=&quot;#-3&quot; aria-label=&quot;Anchor link for: -3&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;打开&lt;code&gt;PicGo&lt;&#x2F;code&gt;,左侧菜单点击【上传区】找到你要上传的图片。&lt;&#x2F;li&gt;
&lt;li&gt;在下面选择一个你需要返回的图片链接格式&lt;&#x2F;li&gt;
&lt;li&gt;拖进上传区域&lt;&#x2F;li&gt;
&lt;li&gt;上传之后会有一个上传进度条，如果收到如下的提示，表示图片已经成功上传到远程图片仓库了，接下来就可以在你需要的地方随意引用即可。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-570623146213129240-03cd0f96.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;注意，图片上传成功之后，该图片的地址已经默认被复制到剪切板。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;-4&quot;&gt;上传测试-Typora&lt;a class=&quot;zola-anchor&quot; href=&quot;#-4&quot; aria-label=&quot;Anchor link for: -4&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;去复制一张图片到你需要放置的位置直接粘贴，&lt;code&gt;typora&lt;&#x2F;code&gt;会自动识别并触发自动上传。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-5&quot;&gt;阿里云平台&lt;a class=&quot;zola-anchor&quot; href=&quot;#-5&quot; aria-label=&quot;Anchor link for: -5&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;考虑到使用阿里云&lt;code&gt;OSS&lt;&#x2F;code&gt;的也有不少，所以把这部分的教程也补一下吧！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-6&quot;&gt;准备工作&lt;a class=&quot;zola-anchor&quot; href=&quot;#-6&quot; aria-label=&quot;Anchor link for: -6&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;阿里云&lt;code&gt;OSS&lt;&#x2F;code&gt;账号和对应的桶。&lt;&#x2F;li&gt;
&lt;li&gt;上述两个软件
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PicGo&lt;&#x2F;code&gt;和&lt;code&gt;Typora&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-7&quot;&gt;教程开始&lt;a class=&quot;zola-anchor&quot; href=&quot;#-7&quot; aria-label=&quot;Anchor link for: -7&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-8&quot;&gt;获取一些列配置数据&lt;a class=&quot;zola-anchor&quot; href=&quot;#-8&quot; aria-label=&quot;Anchor link for: -8&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;创建子账户并获取两个密钥
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;AccessKey ID&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;AccessKey Secret&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908201332983.png&quot; alt=&quot;image-20220908201332983&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908203535939.png&quot; alt=&quot;image-20220908203535939&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908203624849.png&quot; alt=&quot;image-20220908203624849&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;授权&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;针对上面创建的子账户，我们需要它拥有对&lt;code&gt;OSS&lt;&#x2F;code&gt;的操作权限，否则无法正常调用上传的&lt;code&gt;API&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908203831069.png&quot; alt=&quot;image-20220908203831069&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908204056051.png&quot; alt=&quot;image-20220908204056051&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;创建桶。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908201923982.png&quot; alt=&quot;image-20220908201923982&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意其中有一项【读写权限】，这个根据自己的需求来，如果你不想别人看到你的图片，就【私有】，否则建议【公共读】，那个【公共读写】不建议选，当然如果你不介意大家伙一起享用你的仓库，当我没说话！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908202259840.png&quot; alt=&quot;image-20220908202259840&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;查看访问域名，在概览中找到&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908202501148.png&quot; alt=&quot;image-20220908202501148&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;从左到右分别是地域节点、Bucket域名。特别是地域节点，后面要用。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-9&quot;&gt;配置PicGo&lt;a class=&quot;zola-anchor&quot; href=&quot;#-9&quot; aria-label=&quot;Anchor link for: -9&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;打开软件，找到阿里云&lt;code&gt;OSS&lt;&#x2F;code&gt;部分。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20220908205132764.png&quot; alt=&quot;image-20220908205132764&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;图中的序号:1、2的位置填入上面第一步获取的两个密钥。&lt;&#x2F;li&gt;
&lt;li&gt;序号3的位置填写桶的名称。&lt;&#x2F;li&gt;
&lt;li&gt;序号4的地方需要注意一下，这里它需要的只是地域，后面的后缀不需要，所以如下，&lt;strong&gt;复制的时候不要带地域名称后面的部分，小数点也不要。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20220908205429690.png&quot; alt=&quot;image-20220908205429690&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;至于序号5、6、7的地方，是可选的，所以你可以什么都不做。如果需要自定义，请参照人家的提示就行。&lt;&#x2F;li&gt;
&lt;li&gt;别忘了点【确定】，如果有多个图床，你也可以点一下【设为默认图床】如果需要的话。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-10&quot;&gt;配置Typora&lt;a class=&quot;zola-anchor&quot; href=&quot;#-10&quot; aria-label=&quot;Anchor link for: -10&quot;&gt;🔗&lt;&#x2F;a&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;其实在前面配置七牛云部分的教程里，我们看到在&lt;code&gt;typora&lt;&#x2F;code&gt;部分。它是直接引用的&lt;code&gt;PicGo&lt;&#x2F;code&gt;的执行文件，所以那边能不能成功，完全取决于这边的&lt;code&gt;PicGo&lt;&#x2F;code&gt;的配置是否成功！所以只要保证在&lt;code&gt;Typora&lt;&#x2F;code&gt;中已经配置好了&lt;code&gt;PicGo&lt;&#x2F;code&gt;的路径，这里就不需要再重复配置了。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;配置好之后别忘了先在&lt;code&gt;PicGo&lt;&#x2F;code&gt;中进行上传测试。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20220908210136114.png&quot; alt=&quot;image-20220908210136114&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;这里直接提供了常用的场景选择，如果是在&lt;code&gt;typora&lt;&#x2F;code&gt;中，选择第一个，那么你上传的图片默认就是&lt;code&gt;md&lt;&#x2F;code&gt;格式的，这不难理解。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220908222711649.png&quot; alt=&quot;image-20220908222711649&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</description>
      </item>
    </channel>
</rss>
