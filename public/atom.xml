<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh">
    <title>慕予博客</title>
    <subtitle>简单是效率的灵魂</subtitle>
    <link rel="self" type="application/atom+xml" href="https://muyu-git-main-08820048s-projects.vercel.app/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-06-17T00:00:00+00:00</updated>
    <id>https://muyu-git-main-08820048s-projects.vercel.app/atom.xml</id>
    <entry xml:lang="zh">
        <title>Github 修炼小册</title>
        <published>2025-06-17T00:00:00+00:00</published>
        <updated>2025-06-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app/gitgithubxiao-ce/"/>
        <id>https://muyu-git-main-08820048s-projects.vercel.app/gitgithubxiao-ce/</id>
        
        <content type="html" xml:base="https://muyu-git-main-08820048s-projects.vercel.app/gitgithubxiao-ce/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志：&lt;&#x2F;h3&gt;
&lt;p&gt;2023-5-28 下午 星期日&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;新增如何移除已提交到暂存区的文件&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2023-3-10 晚 星期五&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增修复Ubuntu命令行环境下中文乱码问题的解决方案&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-8-30 晚 星期二&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修复已知错别字词&lt;&#x2F;li&gt;
&lt;li&gt;新增pull命令&lt;&#x2F;li&gt;
&lt;li&gt;新增踩坑实录&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-05-17 22:36:06 星期六&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正内容错字词情况&lt;&#x2F;li&gt;
&lt;li&gt;新增番外篇，踩坑实录板块&lt;&#x2F;li&gt;
&lt;li&gt;新增GitHub页面内容部分板块&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-05-22 08:36:06 星期日&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;细化git push 相关的内容&lt;&#x2F;li&gt;
&lt;li&gt;细化分支操作相关内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-06-02 21:39:23 星期四&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增git status终端显示中文编码异常的问题以及解决方法&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-06-04 21:30:14 星期六&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;新增[git命令部分的补充模块]&lt;&#x2F;li&gt;
&lt;li&gt;新模块添加了一点内容&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;zai-githubshang-chuang-jian-cang-ku&quot;&gt;在 &lt;code&gt;GitHub&lt;&#x2F;code&gt;上创建仓库&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这一步骤的前提是先注册一个 &lt;code&gt;GitHub&lt;&#x2F;code&gt;的账号，由于那都是小场面，就不再巴拉巴拉。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;说明一下，全文如果没有特别的单独说明，文中所有用【】括起来的内容都代表网页或者软件节点的操作按钮或者步骤选择项。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;打开 &lt;code&gt;GitHub&lt;&#x2F;code&gt;登录后在个人主页的右上角点击加号之后再点击：&lt;code&gt;【New respository】&lt;&#x2F;code&gt;顾名思义，创建一个新仓库。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9429936975745072856-68ce0629.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;页面打开之后，输入仓库的名称(英文)，具体看下图：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15443438604874816303-ce191006.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;最后点击【Create repository】完成仓库的创建。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9499386600859571714-28c2b0f3.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;创建成功之后大概是这样子的：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10092826344442102276-b6f022a2.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;Linux上安装Git&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本文基于Linux操作系统进行演示，如果需要安装Windows版本，自行Google或者百度。&lt;&#x2F;p&gt;
&lt;p&gt;我的操作系统具体情况：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;阿里云轻量 &lt;code&gt;CentOS8.2&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;2核4G&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;80GB&lt;&#x2F;code&gt;系统盘&lt;&#x2F;li&gt;
&lt;li&gt;bash使用的是 &lt;code&gt;zsh&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在安装之前，先通过下面的命令检查一下自己是不是已经安装过，是的话忽略这一步。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16314107400167235335-81c23a79.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-1&quot;&gt;添加SSH授权&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这里不得不提一下，自从2021年8月之后，&lt;code&gt;GitHiub&lt;&#x2F;code&gt;就不再支持使用账户密码操作了，所以必须使用 SSH 密钥登陆。我们可以在系统中创建 SSH 公私钥，并将公钥放到 GitHub 指定位置。如此操作即可生成 GitHub 账户对于当前系统中的 Git 授权。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在终端执行 &lt;code&gt;ssh-keygen&lt;&#x2F;code&gt;命令并按下几次回车之后生成私钥，公钥存放在主目录下的隐藏目录 &lt;code&gt;.ssh&lt;&#x2F;code&gt;中的两个文件中：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13983928793905489167-4cedf846.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;将 &lt;code&gt;~&#x2F;.ssh&#x2F;id_rsa.pub&lt;&#x2F;code&gt; 文件中的公钥内容复制之后打开 &lt;code&gt;GitHub&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15671545960668599527-64267a25.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击主页右上角加号之后点击【Settings】打开之后页面左侧菜单栏目有一个【SSH and GPG keys】&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15091020282709754855-97694223.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击【New SSH key】:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9276900667175524409-1a2f8cbf.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击【Add SSH key】之后可能会弹出密码的输入框，输入你注册的 &lt;code&gt;GitHub&lt;&#x2F;code&gt;的登录密码验证之后完成添加，页面如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9266894548528798671-b252fe32.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用SSH的主要好处：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;免密码推送，在执行 &lt;code&gt;git push&lt;&#x2F;code&gt;时不需要再验证用户名密码；&lt;&#x2F;li&gt;
&lt;li&gt;提高数据传输速度。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;-2&quot;&gt;克隆GitHub 仓库到本地&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;你将学会使用命令将GitHub上的仓库克隆到本地。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;就以我们前面创建的演示仓库为克隆的目标。使用下面的命令：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;仓库地址&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;即可。在克隆之前需要找到目标仓库在GitHub上的仓库地址。&lt;&#x2F;p&gt;
&lt;p&gt;回到仓库主页，按照下图的操作复制仓库的地址：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11449714339986446195-dc3123fa.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;注意：只有使用这种以git开头的地址来克隆仓库，SSH关联才会起作用。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在终端输入:&lt;code&gt;git clone git@github.com:xiaoyivip&#x2F;gitdemo.git &#x2F;Gits&#x2F;gitdemo&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在执行命令的过程中会弹出克隆确认链接的提示，输入 &lt;code&gt;yes&lt;&#x2F;code&gt;即可。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9564404370573729592-575bc1be.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;进入仓库主目录，如下图所示，仓库主目录中有个 &lt;code&gt;.git&lt;&#x2F;code&gt; 隐藏目录，它里面包含了仓库的全部信息，删掉这个目录，仓库就变成普通的目录了(相当于windows在某个目录下执行 &lt;code&gt;git init&lt;&#x2F;code&gt;初始化是一样的)。进入到仓库目录中，命令行前缀发生了一些变化，出现了红色的 master ，它就是当前所在的分支名：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9620095350685305748-26215263.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当我们在 &lt;code&gt;GitHub&lt;&#x2F;code&gt;上创建一个仓库时，同时生成了仓库默认主机名 &lt;code&gt;orgin&lt;&#x2F;code&gt;,b并创建了默认分支 &lt;code&gt;master&lt;&#x2F;code&gt;。&lt;code&gt;GitHub&lt;&#x2F;code&gt;可以看成是免费的Git服务器，在 &lt;code&gt;GitHub&lt;&#x2F;code&gt;上创建仓库，会自动生成一个仓库地址，主机就是指代这个仓库，主机名就等于这个仓库地址。克隆一个 &lt;code&gt;GitHub&lt;&#x2F;code&gt;仓库(或者叫远程仓库)到本地，本地则会自动关联到这个远程仓库。可以执行 &lt;code&gt;git remote -v&lt;&#x2F;code&gt; 命令查看本地仓库所管理的远程仓库信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14900095146715085484-3b2b56d8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Git 要求对本地仓库关联的每个远程主机都必须指定一个主机名（默认为 origin），用于本地仓库识别自己关联的主机，&lt;code&gt;git remote&lt;&#x2F;code&gt; 命令就用于管理本地仓库所关联的主机，一个本地仓库可以关联任意多个主机（即远程仓库）。&lt;&#x2F;p&gt;
&lt;p&gt;克隆远程仓库到本地时，还可以使用 &lt;code&gt;-o&lt;&#x2F;code&gt; 选项修改主机名，在地址后面加上一个字段作为本地仓库的主目录名，举例如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16923947166541691176-4df4c375.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-3&quot;&gt;Git基础操作&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-4&quot;&gt;分区介绍&lt;&#x2F;h3&gt;
&lt;p&gt;Git 本地仓库有三大区域：工作区、暂存区、版本区，下面的图可以辅助理解，刚开始不需要特别熟悉这写概念，学完git的基本操作之后就会逐渐理解了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2712640029327028861-8e4ead81.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所有的Git命令都是以 &lt;code&gt;git&lt;&#x2F;code&gt;开头的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;演示一次完整的修改、提交、推送操作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;首先，进入仓库主目录，执行 &lt;code&gt;git status&lt;&#x2F;code&gt; 查看整个仓库的状态：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看仓库状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; status
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13007768173336487344-83b3e2f4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到，我们仓库的仓库中目前还没有任何的文件变动。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;创建一个文件，然后再执行一次上述的命令：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15977794556869951699-53b8b09b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示的大致意思是提交为空，但是存在可以提交的文件，也就是我们刚刚新建的 &lt;code&gt;one.txt&lt;&#x2F;code&gt;这个文件，这表示工作区或暂存区有变化，对文件进行增删改操作都会出现这个星号，另外使用 &lt;code&gt;git status&lt;&#x2F;code&gt; 命令亦可查看详情。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-5&quot;&gt;&lt;strong&gt;添加修改到暂存区以及撤销修改&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;按照上图的提示，使用 &lt;code&gt;git add [文件名]&lt;&#x2F;code&gt; 命令跟踪此新建文件，即把新增文件添加到暂存区。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16870937100143863778-dc2c69fc.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果你有多个文件或者需要对整个目录进行了修改或者有提交的需求，可以使用 &lt;code&gt;git add .&lt;&#x2F;code&gt;命令全部提交到暂存区。当我们修改了工作区，&lt;code&gt;git add&lt;&#x2F;code&gt;命令是将这些修改添加到暂存区，暂存区记录的只是修改。如果要撤销暂存区的修改，请执行下面两个命令，选择其一即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 撤销暂存区的修改提交
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; reset -- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;我文件名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 或者
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cached &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;文件名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17850608299944643581-6895509e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：上面的命令中如果没有指定撤销的文件名，即为 &lt;code&gt;git reset --&lt;&#x2F;code&gt;命令时，表示将会撤销全部已经提交的到暂存区的文件。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-6&quot;&gt;&lt;strong&gt;git diff命令&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这个命令可以用来查看工作区被跟踪的文件的修改详情，此时新建的文件 &lt;code&gt;one.txt&lt;&#x2F;code&gt;没有被跟踪，而已被跟踪的 &lt;code&gt;README.md&lt;&#x2F;code&gt;文件无修改，所以看不到。只有在版本区中存在的文件才是被跟踪的文件。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# 查看被跟踪文件的修改详情
&lt;&#x2F;span&gt;&lt;span&gt;git diff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下面我们尝试修改 &lt;code&gt;README.md&lt;&#x2F;code&gt;文件。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;代码是敲不完的，但多敲几遍却可以学会一门新的技术，比如Git。&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt;&amp;gt; README.md
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-614987239386012497-1bf57762.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;接下来就可以使用 &lt;code&gt;git diff&lt;&#x2F;code&gt;命令了。执行命令之后会打开下面这样一个页面，如需退出请输入 &lt;code&gt;Q&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4990536508842611349-1cde9d67.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在，将工作区的两处修改（新增文件 &lt;code&gt;one.txt&lt;&#x2F;code&gt;，修改文件 &lt;code&gt;README.md&lt;&#x2F;code&gt;）全部添加到暂存区，并使用 &lt;code&gt;git diff --cached&lt;&#x2F;code&gt; 查看暂存区的全部修改:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; diff&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --cached
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11045270626685266001-d7450172.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-7&quot;&gt;&lt;strong&gt;查看历史提交&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;使用 &lt;code&gt;git log&lt;&#x2F;code&gt;来查看版本区的提交历史记录。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11884750730489264241-867906d8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到目前只有一个之前创建仓库时候的初始化提交记录。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;关于查看提交历史记录的命令，有些常用的选项介绍一下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git log [分支名]&lt;&#x2F;code&gt; 查看某分支的提交历史，不写分支名查看当前所在分支&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git log --oneline&lt;&#x2F;code&gt; 一行显示提交历史&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git log -n&lt;&#x2F;code&gt; 其中 n 是数字，查看最近 n 个提交&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git log --author [贡献者名字]&lt;&#x2F;code&gt; 查看指定贡献者的提交记录&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;git log --graph&lt;&#x2F;code&gt; 图示法显示提交历史&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-8&quot;&gt;配置个人信息&lt;&#x2F;h3&gt;
&lt;p&gt;对Git进行一些本地配置：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user.email&lt;&#x2F;code&gt;:注册GitHub时后的账号邮箱&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;user.name&lt;&#x2F;code&gt;:GitHub账号名称&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17581249722225102123-24889dae.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以使用 &lt;code&gt;git config -l&lt;&#x2F;code&gt;来查看配置信息。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;完成后，系统自动生成 Git 的配置文件，就是主目录中的隐藏文件 &lt;code&gt;.gitconfig&lt;&#x2F;code&gt; ：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2940854042814008577-22b1a9bb.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-9&quot;&gt;提交暂存区的修改&lt;&#x2F;h3&gt;
&lt;p&gt;执行 &lt;code&gt;git commit&lt;&#x2F;code&gt;命令把暂存区的修改提交到版本区，生成一个新版本。建议使用 &lt;code&gt;-m&lt;&#x2F;code&gt; 传输来提交本次提交的备注信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11127230975352837733-0b9c51f4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于这个命令，还有一个 &lt;code&gt;-a&lt;&#x2F;code&gt;参数，是将未提交到暂存区的修改(也就是工作区)一并提交到版本区，但一般不建议使用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提交后，暂存区的修改被清空，执行 &lt;code&gt;git log&lt;&#x2F;code&gt; 查看提交记录，紫色框中的十六进制序列号就是提交版本号，这是很重要的信息，每个提交都有自己单独的版本号：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7983839092928110599-ee186cfa.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;观察上图的提交信息，提交版本是按时间倒序排列的，也就是最近的提交排在最上面，你可能需要查看时间正序排列的信息，那么可以使用 &lt;code&gt;git log --reverse&lt;&#x2F;code&gt; 命令。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-10&quot;&gt;分支操作&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;命令&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看分支信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -avv
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 切换分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checked &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 合并分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 1.切换到接受修改的分支上
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;被合并的分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 2.执行merge命令
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; merge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;有新内容的分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5418453843178963511-50fc598f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;第二行：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;开头的 &lt;code&gt;*&lt;&#x2F;code&gt;表示当前所在的分支，绿色(绿色表示当前分支)的 &lt;code&gt;master&lt;&#x2F;code&gt;是分支名。后面 &lt;code&gt;3c336e0&lt;&#x2F;code&gt;表示版本号，第三项中括号中的蓝色部分表示此分支跟踪的远程分支的名字，这也是克隆远程仓库到本地时的默认设置 – 创建 master 分支并自动跟踪远程同名分支；冒号后面的文字表示本地分支领先其跟踪的远程分支的一个提交。最后是提交的备注信息。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;第三行：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是git指针信息，指向远程仓库的 &lt;code&gt;master&lt;&#x2F;code&gt;分支。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;第四行：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考第二行的解释。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-11&quot;&gt;推送到远程仓库&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用下面的命令将版本区中的文件提交到远程仓库中。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 推送命令
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;后面不需要任何选项和参数，此命令会把本地仓库 master 分支上的新增提交推送到远程仓库的同名分支上，因为当前所在的分支就是 master，而且上文提到，它已经跟踪了远程仓库的同名分支：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1172788798162207162-d224602c.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;push成功之后，通过前面介绍过的 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt;命令查看分支信息。通过对比下图紫色框中的版本号可以知道两个版本是否一致。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-80910746548442161-a4be79a0.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再去 &lt;code&gt;GitHub&lt;&#x2F;code&gt;看看情况。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15173227095348095106-70ccc935.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;OK！符合预期。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;以上就是使用git命令完成的一次修改-提交-推送的操作，主要用到了下面几个命令：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; status
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 添加到暂存区
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 提交到版本区
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;描述&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 推送到远程仓库
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看提交日志
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; log
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看分支信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -avv
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;-12&quot;&gt;情况一&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;我们在自己的电脑上通过 &lt;code&gt;git init&lt;&#x2F;code&gt;初始化一个本地的仓库，需要将该仓库的内容推送到指定的远程仓库。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 存储远程仓库地址并起个别名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; remote add &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;仓库地址别名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;远程仓库地址&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 将内容推送至远程仓库
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;地址别名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;] [&lt;&#x2F;span&gt;&lt;span&gt;对应的分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-13&quot;&gt;版本回退&lt;&#x2F;h2&gt;
&lt;p&gt;如果发现已经提交的版本存在错误，比如 &lt;code&gt;one.txt&lt;&#x2F;code&gt;中内容有误，可以修改文件之后再次提交到暂存区、提交、推送。还有一个比较省事的做法，那就是&lt;strong&gt;版本回退&lt;&#x2F;strong&gt;。说白了就是撤销上一次的提交，修改文件之后重新提交推送，下面即将演示这种方法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-14&quot;&gt;软退回&lt;&#x2F;h3&gt;
&lt;p&gt;执行 &lt;code&gt;git reset --soft HEAD^&lt;&#x2F;code&gt;撤销最近的一次提交，将修改还原到暂存区。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--soft&lt;&#x2F;code&gt;表示软退回，对应的还有一个后面会讲到的硬退回 &lt;code&gt;--hard&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;HEAD^&lt;&#x2F;code&gt;表示撤销最近一次提交，&lt;code&gt;HEAD^^&lt;&#x2F;code&gt;表示撤销两次提交，n次请使用 &lt;code&gt;HEAD~n&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;撤销执行之后再次执行 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt;查看分支信息。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-201203511134477285-0e43ed2a.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到本地仓库的 master 分支的版本号已经发生了变化，变成了前一次提交的版本号，中括号里也有提示信息，本地分支 master 落后其跟踪的远程分支 origin&#x2F;master 一个提交。&lt;&#x2F;p&gt;
&lt;p&gt;此时再执行 &lt;code&gt;git status&lt;&#x2F;code&gt;会发现，之前提交的修改又被打回了暂存区。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1979692076972205118-3db3cc47.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-15&quot;&gt;再次修改、提交&lt;&#x2F;h3&gt;
&lt;p&gt;我们对 &lt;code&gt;one.txt&lt;&#x2F;code&gt;作一个简单的修改操作(假装修改了一个天大的bug),然后使用添加修改，提交版本。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3663064259608941161-4c3c1f99.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;commit&lt;&#x2F;code&gt;之后先别急着 &lt;code&gt;push&lt;&#x2F;code&gt;，查看状态以及分支信息发现视乎出现了一点问题的样子。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11026165117653179107-9f987ef6.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3491200257374588426-cdd31d14.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-16&quot;&gt;处理 commit 时间线分叉&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;基于上面步骤尾中出现的问题，显示我们的提交分支出现了偏离，也就是本地仓库的 &lt;code&gt;master&lt;&#x2F;code&gt;分支与远程仓库的 &lt;code&gt;origin&#x2F;master&lt;&#x2F;code&gt;分支的在提交上出现了冲突，这种冲突有叫做提交时间线分叉。因为刚才的提交操作不是基于远程仓库 &lt;code&gt;origin&#x2F;master&lt;&#x2F;code&gt;分支的最新提交版本，而是撤回了一个版本，这种情况下也是可以将本地 &lt;code&gt;master&lt;&#x2F;code&gt;分支推送到远程查看库的，但需要用到一个 &lt;code&gt;-f&lt;&#x2F;code&gt;参数，他是 &lt;code&gt;--force&lt;&#x2F;code&gt;的缩写，也就是强制推送命令。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 强制推送
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18266690155363145730-3373cf14.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;推送成功！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意，这种解决方式可能会导致不可预料的问题，还有一种方式是先pull再push。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;看一下分支信息&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5202375484999585695-a57f7dad.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过版本号可以看到本地 master 与远程 master 的版本号一致，记住这个版本号，去网页看看是否如预期效果。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18050903518636718190-d2b46b7c.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;果然，没什么毛病！！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-17&quot;&gt;commit 变化记录&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;假设我们做完了上面的回退修改工作后，此时海绵宝宝发现情况不对，柯南也觉得之前的操作似乎有些大意了。若之前的那次版本号为 &lt;code&gt;3c336e0&lt;&#x2F;code&gt;的提交是正确的，刚才的版本回退操作全都是误操作，怎么办？再次执行一次版本回退吗？不需要。我们有 &lt;code&gt;git reflog&lt;&#x2F;code&gt; 命令，它会记录本地仓库所有分支的每一次版本变化。实际上只要本地仓库不被删除，随你怎么折腾，都能回退到任何地方。&lt;code&gt;reflog&lt;&#x2F;code&gt; 记录只存在于本地仓库中，本地仓库删除后，记录消失。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看变化记录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; reflog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5190544120765319618-5a262b62.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;所以怎么回退到 &lt;code&gt;3c336e0&lt;&#x2F;code&gt;版本？可以执行命令 &lt;code&gt;git reset --hard[版本号]&lt;&#x2F;code&gt;，如果记不清楚版本号，可以根据图中的第三行信息，执行 &lt;code&gt;git reset --hard HEAD@{2}&lt;&#x2F;code&gt;命令，其中的 &lt;code&gt;READ@{2}&lt;&#x2F;code&gt;就是上图第二行第二列所示的信息，该命令的意思就是回到当前分支最近两次提交版本变化前。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220420162300.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;假设现在反应过来，其实刚才修改的提交是正确的，那么再执行一次 &lt;code&gt;git reset --hard 6928b56&lt;&#x2F;code&gt;即可。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17521413282723458023-39f48a85.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;小结一下本节用到的一些命令：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看本地commit变更记录
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; reflog
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 强制推送
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 版本回退
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; reset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --soft&lt;&#x2F;span&gt;&lt;span&gt; HEAD^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-18&quot;&gt;拉取pull命令&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-19&quot;&gt;概述&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;用来拉取远程仓库内容到本地。&lt;strong&gt;git pull&lt;&#x2F;strong&gt; 其实就是 &lt;strong&gt;git fetch&lt;&#x2F;strong&gt; 和 &lt;strong&gt;git merge FETCH_HEAD&lt;&#x2F;strong&gt; 的简写。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-20&quot;&gt;格式&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git pull &amp;lt;远程主机名&amp;gt; &amp;lt;远程分支名&amp;gt;:&amp;lt;本地分支名&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-21&quot;&gt;常用操作&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;撤回已提交到暂存区的文件夹&#x2F;件&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; rm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r --cached &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;文件夹&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;新提交&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;更新仓库，可以用来将本地仓库与远程同步到最新状态。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull origin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;将远程的master分支拉取下来和本地的dev分支合并&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull origin master:dev
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 如果远程分支是与当前操作的分支合并的话，那么冒号后面的部分(包括冒号)可以省略不写
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull origin master
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-22&quot;&gt;Git分支操作&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-23&quot;&gt;为git命令设置别名&lt;&#x2F;h3&gt;
&lt;p&gt;通过上面的操作一路走来，大概你也发现了有些命令的重复度极高，比如 &lt;code&gt;git status&lt;&#x2F;code&gt; 和 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt; 等，Git 可以对这些命令设置别名，以便简化对它们的使用，设置别名的命令是 &lt;code&gt;git config --global alias.[别名] [原命令]&lt;&#x2F;code&gt;，如果原命令中有选项，需要加引号。别名是自定义的，可以随意命名，设置后，原命令和别名具有同等作用。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16063922586297950273-2f056515.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在就使用上面的别名来试一下水，看看是不是可用。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15582830812645582059-084fcd4a.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;果然生效了，效果和原命令不能说很像，只能说一模一样。&lt;strong&gt;注意了，git前缀命令还是需要的，不能直接写别名，那样是不生效的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果那一天记不住自己设置的别名了，可以使用 &lt;code&gt;git config -l&lt;&#x2F;code&gt;来查看。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-24&quot;&gt;git fetch 命令&lt;&#x2F;h3&gt;
&lt;p&gt;这个命令它的作用是将远程仓库的分支信息拉取到本地仓库，注意，仅仅是更新了本地的远程分支信息，也就是执行 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt; 命令时，查看到的 &lt;code&gt;remotes&lt;&#x2F;code&gt; 开头的行的分支信息。为了方便演示，举例说明一下，首先我们在 &lt;code&gt;GitHub &lt;&#x2F;code&gt;页面上对 &lt;code&gt;one.txt&lt;&#x2F;code&gt; 文件进行修改并增加一次提交。提交完成后，提交数变成 3 个，点下图紫色框中的链接可以看到提交记录：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16539097232290491987-70e80632.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17182750413149084730-5a9f478b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;执行 &lt;code&gt;git fetch&lt;&#x2F;code&gt; 命令，然后执行 &lt;code&gt;git branch -avv&lt;&#x2F;code&gt; 查看分支信息&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-6381421149274234158-cf0bd071.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，本地分支 master 的版本号无变化，而远程分支已经更新。所以，&lt;code&gt;fetch&lt;&#x2F;code&gt; 命令的作用是刷新保存在本地仓库的远程分支信息，此时若想使本地 &lt;code&gt;master&lt;&#x2F;code&gt;分支的提交版本为最新，可以通过执行 &lt;code&gt;git pull&lt;&#x2F;code&gt;命令来拉取远程分支到本地。&lt;&#x2F;p&gt;
&lt;p&gt;由于前面执行过 &lt;code&gt;git fetch&lt;&#x2F;code&gt;命令，这里也可以执行 &lt;code&gt;git rebase origin&#x2F;master&lt;&#x2F;code&gt;命令来实现同样的功能。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2569224816426375544-322a371d.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;现在再查看分支信息发现刷新成功。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-15432665369465569019-1b54b6c3.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-25&quot;&gt;创建新的本地分支&lt;&#x2F;h3&gt;
&lt;p&gt;分支在项目开发中作用重大，多人协作时尤其不可或缺。&lt;&#x2F;p&gt;
&lt;p&gt;首先，克隆远程仓库到本地，进入仓库主目录，执行 &lt;code&gt;git br&lt;&#x2F;code&gt;查看分支信息。这个吗，命令相信已经玩的很6了。&lt;&#x2F;p&gt;
&lt;p&gt;使用 &lt;code&gt;git branch [分支名]&lt;&#x2F;code&gt;来创建一个新的分支：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14096436788937288726-3f760f4e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;注意，新创建的分支并不会被自动切换，还是在之前的 &lt;code&gt;master&lt;&#x2F;code&gt;分支上。执行 &lt;code&gt;git checkout [分支名]&lt;&#x2F;code&gt; 切换分支，注意，我这把该命令设置一个别名 &lt;code&gt;ch&lt;&#x2F;code&gt;，后面用的时候都会使用该别名进行。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1142141978512328189-6fa64f75.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果觉得每次创建新的分支都要手动的去切换，那么你可以尝试使用下面的命令，它可以帮你实现分支的自动切换。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建分支并自动切换分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; checkout&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5089333401542797749-91345c3d.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10019706947900181127-aab73108.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;可以看到，在分支 &lt;code&gt;dev1&lt;&#x2F;code&gt;的前面出现一个 &lt;code&gt;*&lt;&#x2F;code&gt;，表示当前分支为 &lt;code&gt;dev1&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;如上图所示的分支信息，前两行是新建的本地分支信息，它们的版本号与主分支 master 一致，这是因为在哪个分支上创建新分支，新分支的提交记录就与哪个分支一致。新建分支并无跟踪任何远程分支，所以没有 master 分支中的中括号和括号内的蓝色远程分支名。&lt;&#x2F;p&gt;
&lt;p&gt;假设我们要在当前分支 &lt;code&gt;dev1 &lt;&#x2F;code&gt;上开发一个新的功能，需要增加一个文件 &lt;code&gt; new_one.txt&lt;&#x2F;code&gt;，然后生成一个新的提交。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220420173400.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1890489777260326451-ae3d36fd.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-26&quot;&gt;新分支commit的push操作&lt;&#x2F;h3&gt;
&lt;p&gt;在新分支 &lt;code&gt;dev1&lt;&#x2F;code&gt;中的版本区已经存在了一个新的内容，下一步便是将它push到远程仓库，逻辑上，我们应该将它推送到对应的 &lt;code&gt;dev1&lt;&#x2F;code&gt;仓库上，但问题是现在远程仓库中并没有这个分支，只有一个 &lt;code&gt;master&lt;&#x2F;code&gt;分支。&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8309328208194193048-9f27c6db.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;自然，方法总比问题多，你可以使用 &lt;code&gt;git push [主机名] [本地分支名]:[远程分支名]&lt;&#x2F;code&gt;来解决这个问题，它可以将本地分支推送到远程仓库分支中，冒号前后的分支名通常是相同的，通过相同可以省略 &lt;code&gt;:&lt;&#x2F;code&gt;后的 &lt;code&gt;:[远程分支名]&lt;&#x2F;code&gt;，如果该远程分支不存在会自动创建该分支并完成推送。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 自动创建远程分支并完成推送
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push origin dev1:dev1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11451462603832747773-11d810ce.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;显示推送成功，我们去网页上看看。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7465579268896825386-d5c5c63a.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;还是OK的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-27&quot;&gt;跟踪远程分支&lt;&#x2F;h3&gt;
&lt;p&gt;现在的问题是，如果我们使用 &lt;code&gt;dev1&lt;&#x2F;code&gt;分支提交、推送就还需要输入那段较长的命令，着实有些麻烦，所以现在有一个方法，可以能和 &lt;code&gt;master&lt;&#x2F;code&gt;分支一样跟踪远程同名分支，可以直接使用 &lt;code&gt;git push&lt;&#x2F;code&gt;命令进行推送。&lt;&#x2F;p&gt;
&lt;p&gt;命令:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;主机名&#x2F;远程分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;][&lt;&#x2F;span&gt;&lt;span&gt;本地分支名&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;命令将本地分支与远程分支做了一个关联，或者说使本地分支跟踪远程分支。如果是设置当前所在分支跟踪远程分支，最后一个参数本地分支名可以省略。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-6586883568645030439-37f51a74.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;当然，执行 &lt;code&gt;git branch --unset-upstream [分支名]&lt;&#x2F;code&gt; 可撤销该分支对远程分支的跟踪，同样地，如果撤销当前所在的分支的跟踪，分支名可以省略不写。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-250507523710923607-edcfe5cd.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;有没有办法在推送时就自动跟踪远程分支呢？当然有，只要在推送的时候，加个 &lt;code&gt;--set-upstream&lt;&#x2F;code&gt; 或其简写 &lt;code&gt;-u&lt;&#x2F;code&gt; 选项即可，现在切换到 &lt;code&gt;dev &lt;&#x2F;code&gt;分支试一下水。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 推送时自动跟踪分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; origin dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-545178229849817364-cd9eb54b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-28&quot;&gt;删除远程分支&lt;&#x2F;h3&gt;
&lt;p&gt;使用 &lt;code&gt;git push [主机名]:[远程分支名]&lt;&#x2F;code&gt;，如果想批量删除，&lt;code&gt;git push [主机名] :[远程分支名] :[远程分支名] :[远程分支名]&lt;&#x2F;code&gt;该命令的原理是向远程分支推送一个空分支。除此之外还有一个命令 &lt;code&gt;git push [主机名] -- delete[远程分支名]&lt;&#x2F;code&gt;。删除远程分支的命令可以在任意本地分支中进行，无需特地切换分支。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 方式一
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push origin :dev
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18362083536819613915-0812728b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 方式二
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; push origin&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --delete&lt;&#x2F;span&gt;&lt;span&gt; dev1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4557542496207430156-e310477f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;查看网页发现已经成功删除了 &lt;code&gt;dev1&lt;&#x2F;code&gt;和 &lt;code&gt;dev&lt;&#x2F;code&gt;分支。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10777682985398872594-ed1016b6.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-29&quot;&gt;本地分支的更名与删除&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;给本地分支改名使用 &lt;code&gt;git branch -m [原分支名] [新分支名]&lt;&#x2F;code&gt;如果修改当前所在分支的名字，原分支名可以省略不写。&lt;&#x2F;li&gt;
&lt;li&gt;删除本地分支使用 &lt;code&gt;git branch -D [分支名]&lt;&#x2F;code&gt;，同样也支持批量删除语法。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 给本地分支改名
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -m&lt;&#x2F;span&gt;&lt;span&gt; dev2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5589053181182695071-799c1825.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 删除本地分支
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; branch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -D&lt;&#x2F;span&gt;&lt;span&gt; dev2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意在执行删除分支之前，当前所在的分支不能被删除。切换到 master 分支，然后执行 &lt;code&gt;git branch -D dev2 dev1&lt;&#x2F;code&gt; 命令：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9810708312871403341-a79b885f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再查看分支信息：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5928182280263071147-f97d992f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;成功删除。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;现在一切又回到了最初的起点，可是你却再也回不去了，你已不再是原来的你，物是人非，现在的你已经学会了Git，想要回到解放前估计是不可能了，除非，你放弃自己！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-30&quot;&gt;多人协作&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-31&quot;&gt;GitHub篇&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-32&quot;&gt;创建仓库&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;本节将介绍 &lt;code&gt;GitHub &lt;&#x2F;code&gt;多人协作与相关 &lt;code&gt;Git &lt;&#x2F;code&gt;的操作建议大家准备两个浏览器和两个 &lt;code&gt;GitHub &lt;&#x2F;code&gt;账号以便模拟场景。我的账号 &lt;code&gt;xffvip&lt;&#x2F;code&gt;是一个用来测试的账号，假定这是项目组长的账号，&lt;code&gt;xiaoyivip&lt;&#x2F;code&gt;是组员的账号。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;此时我两个谷歌邮箱加持的俩谷歌浏览器：&lt;code&gt;爸爸爱你1号&lt;&#x2F;code&gt;和 &lt;code&gt;爸爸爱你2号&lt;&#x2F;code&gt;就来点作用了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7868774678960389599-db3cfc7c.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先，在组长账号中创建一个仓库，名为 work，在创建仓库时，需要说明第一节中提到的两个下拉框：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7980200658165846114-fc5a719e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3377566846819774842-f4f6ad42.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上边的忽略文件下拉框：我们在写代码时，总会出现一些不需要上传到仓库的垃圾文件、缓存文件、备份文件、环境文件等等，可以创建一个忽略文件将这些不需要被上传到远程仓库的文件忽略掉。忽略文件的名字是 &lt;code&gt;.gitignore&lt;&#x2F;code&gt;，它被放置在仓库主目录下，将不需上传的文件的名字写入其中，Git 就会自动忽略它们。比如这个仓库是用来 Windows 开发的，就在下拉框中选择 Windows，如果这是一个保存 Java 项目的仓库，就选择 Java。这样，在仓库创建成功后，忽略文件就自动出现了，这个忽略文件中有对应的语言或工具中绝大部分通用的忽略规则。当然了，你也可以自己手动增删改。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果在创建仓库时忘记了选择忽略文件，几个提交后突然想起来，怎么办？GitHub 上有人把忽略文件都做好了，打开链接 &lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;github&#x2F;gitignore&quot;&gt;github &#x2F; gitignore&lt;&#x2F;a&gt; ，这个仓库里有很多忽略文件，选择你需要的放到自己的仓库即可&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;下边的开源许可下拉框：关于开源许可证，这不是一时半会能说清楚的，建议自己搜索。我们的仓库不需要选择这一项。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;创建成功之后：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-3314126129415452354-dfa8a8e8.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;对上图右上角三个按钮进行说明：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Watch：这是一个下拉按钮，可以选择对此仓库关注、不关注、忽略等。&lt;&#x2F;p&gt;
&lt;p&gt;Star：如果觉得这个仓库很好，就点击这个按钮送一颗星，在淘宝提供刷星业务之前，仓库获得的星越多表示该项目越优秀。&lt;&#x2F;p&gt;
&lt;p&gt;Fork：在别人的仓库中点此按钮会克隆一个完全一样的仓库到你自己的账号中，包括所有分支、提交等，但不会克隆 issue（后面会讲到），当此仓库发生版本变化，不会自动同步到你克隆的仓库里，反之亦然。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-33&quot;&gt;添加协作者&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;现在在组长账号中增加该仓库的合作者，也就是组员。我就添加自己的另一个号 &lt;code&gt;xiaoyivip&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-16508093147771236775-f7a19f65.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4956971893658180951-f6238379.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在输入框中输入对方的用户名或者邮箱即可选择添加。添加之后进入组员的账号会收到一条邀请信息，打开如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18350574972287502776-9327c2be.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击绿色按钮。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1695260005354738172-b0ebd1b4.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;点击右上角 &lt;code&gt;Fork&lt;&#x2F;code&gt;，将该仓库克隆到自己的仓库中。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7433856181266986223-0651778b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-34&quot;&gt;添加 issue&lt;&#x2F;h4&gt;
&lt;p&gt;切换到组长的 &lt;code&gt;GitHub &lt;&#x2F;code&gt;页面，在仓库中添加一些项目任务或待解决问题，这些任务就是 &lt;code&gt;issue&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12084467760903937435-fd587ee3.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2594238524348847948-3978b5b2.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5639447697244761917-b9eb91a6.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;写好任务标题后，可以在右侧指派一位或多位项目参与者来完成，同样 GitHub 也会给被指派者发邮件的（可以在自己的 GitHub 账号上设置拒收哪类邮件）。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220420223612.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;组长仓库里的 issue 不会出现在组员仓库中。&lt;&#x2F;p&gt;
&lt;p&gt;此时组员会收到一条站内消息，页面如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8264579879650495062-23a0ef99.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以上就是多人协作 &lt;code&gt;GitHub&lt;&#x2F;code&gt;篇的内容。更多协作方面的操作请继续看下面的 &lt;code&gt;git&lt;&#x2F;code&gt;篇。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-35&quot;&gt;Git篇&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-36&quot;&gt;克隆仓库到本地&lt;&#x2F;h4&gt;
&lt;p&gt;以组员的身份克隆work仓库到本地环境。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 仓库地址
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git@github.com:xiaoyivip&#x2F;work.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;地址中的 &lt;code&gt;.git&lt;&#x2F;code&gt;是不需要的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-4483575900448362256-f3d89385.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;完成项目组长分配的 &lt;code&gt;issue&lt;&#x2F;code&gt;并推送到自己的仓库。注意每个 issue 在创建后都会生成一个编号，我们首先完成 1 号 issue。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-872965296456799276-98b356df.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 创建a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello you&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &amp;gt; a.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 添加
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; add .
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 提交
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; com &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;fix #1 添加文件a.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看状态
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; st
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 查看分支信息
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; br
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-17353214750728834457-c8935ed0.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;注意在执行 &lt;code&gt;commit &lt;&#x2F;code&gt;命令时，备注信息里有个 “fix #1”，这是必要的，当备注信息中含有此字样的 &lt;code&gt;commit &lt;&#x2F;code&gt;出现在组长仓库，仓库中编号为 #1 的 issue 就会自动关闭。类似的字样还有 “&lt;code&gt;fixes #xxx、fixed #xxx、closes #xxx、close #xxx、closed #xxx&lt;&#x2F;code&gt;”，这些并不重要，选择字母最少的 fix 就可以了。当然偶尔忘记写这个字样也不要紧的，issue 可以手动关闭，甚至关掉的 issue 还能再开。&lt;&#x2F;p&gt;
&lt;p&gt;完成以上操作，组员的 &lt;code&gt;GitHub &lt;&#x2F;code&gt;仓库会发生变化，新增一个版本号为 &lt;code&gt;efcca58&lt;&#x2F;code&gt;的提交：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-18421792841657355490-c32d26be.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-37&quot;&gt;提 PR &amp;amp; 检查合并 PR&lt;&#x2F;h4&gt;
&lt;p&gt;上面我们以组员的身份已经完成了组长派发的编号为#1的 &lt;code&gt;issue&lt;&#x2F;code&gt;并推送到了自己的仓库，那么接下来怎么把修改从组员仓库添加到组长仓库呢？&lt;&#x2F;p&gt;
&lt;p&gt;这将会用到 &lt;code&gt;pull request&lt;&#x2F;code&gt;命令，简称PR。可以理解为&lt;strong&gt;允许被拉取的请求&lt;&#x2F;strong&gt;，创建一个PR就是从甲分支向乙分支提交一个请求，该请求中有一个或多个提交，若对方(这里指组长)觉得这个提交请求没什么问题之后，就可以允许合并(merge)这个请求，也就是把请求中所有提交的修改增加到乙分支上，整个过程称为&lt;strong&gt;提PR&lt;&#x2F;strong&gt;，&lt;strong&gt;检查合并PR&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;提PR可以在仓库内，也可以跨用户仓库。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;好，现在我们从组员的 work 仓库 main 分支给组长的 work 仓库 main分支提一个 PR。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12563276839743572653-c835fe90.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如下图所示，仔细检查紫色框中的内容是否正确，再看绿色椭圆形框中的绿色字样 “&lt;code&gt;Able to merge&lt;&#x2F;code&gt;.”，说明这个 &lt;code&gt;PR &lt;&#x2F;code&gt;中的修改跟目标分支没有冲突&lt;&#x2F;p&gt;
&lt;p&gt;从上图还可得知一些信息：该 PR 里有 1 个提交，1 个文件改动，1 个贡献者。点击上图绿色按钮跳转到确认页面，再次点击下图绿色按钮即可完成本次 “提 &lt;code&gt;PR&lt;&#x2F;code&gt;” 工作：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13521426524017925060-f37b91cb.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220421094853.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;该页面只有参与项目协作的成员有权限进入，当前 &lt;code&gt;GitHub &lt;&#x2F;code&gt;的登录用户是组员，所以可见，且对这个仓库有完全的管理权限，除了删除仓库。当然了，检查合并 PR 的权限也是有的。重要的一点：提了 PR 之后，一定要求参与项目的其他成员来检查合并，不要自己来，尽管自己有权限。(当然，为了方便，我这里是自己以组员身份检查的合并)。&lt;&#x2F;p&gt;
&lt;p&gt;上图中绿色按钮是个下拉按钮，合并 PR 的方法有三种，分别解释一下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Create a merge commit&lt;&#x2F;code&gt; ：这种方式会在组长仓库的 master 分支上生成一个新的提交，且保留 PR 中的所有提交信息。这是一种常规操作，用得最多。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Squash and merge&lt;&#x2F;code&gt; ：压缩合并，它会把 PR 中的全部提交压缩成一个。此方法的优点就是让提交列表特别整洁。一个 PR 里有很多提交，每个提交都是很细小的改动，保留这些提交没什么意义，这种情况就使用此方法合并 PR。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Rebase and merge&lt;&#x2F;code&gt; ：这种方法不会生成新的提交，例如 PR 中有 6 个提交，用此方法合并后，组长仓库也会新增 6 个提交。注意，这些提交的版本号与组员的提交不同，此外完全一样。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;现在切换到组长身份，可以看到，之前的两个 &lt;code&gt;issue&lt;&#x2F;code&gt;现在只有一个了，说明合并成功后已经自动关闭该任务。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7061296705740790824-9dc12f30.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;以上就是一次完整的修改、提交、推送、提 PR、合并 PR 的过程。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;需要注意的一点：从 A 向 B 提 PR 后，在 PR 合并或关闭前，A 上所有新增的提交都会出现在 PR 里。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-38&quot;&gt;同步主仓库&lt;&#x2F;h4&gt;
&lt;p&gt;我们假设组长的main分支自己新增一些组员没有的提交，那么需要让组员的仓库同步组长的仓库，使它们的提交版本一致。作为组员，要时刻保持自己的分支与组长的一致，以避免在下次提 PR 时出现冲突，该操作叫做 “同步主仓库”，组长的仓库就是主仓库。&lt;&#x2F;p&gt;
&lt;p&gt;提 PR、合并 PR 只能在 &lt;code&gt;GitHub &lt;&#x2F;code&gt;页面上操作。同步主仓库是要用 &lt;code&gt;Git &lt;&#x2F;code&gt;操作的。现在回到终端中操作。首先，使用 &lt;code&gt;remote&lt;&#x2F;code&gt; 系列命令来增加一个关联主机，执行 &lt;code&gt;git remote add [主机名] [主仓库的地址]&lt;&#x2F;code&gt;，注意，主仓库的地址使用 &lt;code&gt;https &lt;&#x2F;code&gt;开头的：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5445914307986393756-5b1c750b.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如上图所示，主机名是随意定义的，只要不是 origin 就可以，因为自己的仓库地址对应的主机名是 origin，主仓库的主机名通常定义为 up 或 upstream，这个主机名其实就是一个变量，它的值就是仓库地址，例如 &lt;code&gt;git push origin main&lt;&#x2F;code&gt; 完全等于 &lt;code&gt;git push git@github.com:xiaoyivip&#x2F;work main&lt;&#x2F;code&gt; 。&lt;&#x2F;p&gt;
&lt;p&gt;现在可以使用前面介绍过的 &lt;code&gt;fetch&lt;&#x2F;code&gt; 命令来拉取主仓库的全部分支信息到本地仓库了。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; fetch up
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;同步主仓库有两种方法：一是执行 &lt;code&gt;git pull --rebase up master&lt;&#x2F;code&gt; ，此命令需联网，二是执行 &lt;code&gt;git rebase up&#x2F;master&lt;&#x2F;code&gt;，此命令不联网，因为前面已经执行了 &lt;code&gt;git fetch up&lt;&#x2F;code&gt; 这个需要联网的命令，本地已经有了最新的主仓库 master 分支信息，所以可以这么操作。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我这里使用方法二来同步&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; rebase up&#x2F;main
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;全剧终，再见！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-39&quot;&gt;番外，踩坑实录&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这部分的内容，主要记录一下在使用过程中遇到的一些坑吧，由于平台等因素，可能并不适用于任何人，仅供参考。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-40&quot;&gt;git push遇到的问题&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用环境&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Windows11&lt;&#x2F;code&gt;中基于 &lt;code&gt;wsl&lt;&#x2F;code&gt;的 &lt;code&gt;kaliLinux&lt;&#x2F;code&gt;系统。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;问题描述&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;切面步骤没问题，在执行git push时遇到&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;fatal: unable to access ‘https:&#x2F;&#x2F;github.com&#x2F;xiaoyivip&#x2F;gitdemo.git&#x2F;’: GnuTLS recv error (-110): The TLS connection was non-properly terminated.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;解决方法&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;编辑.&lt;code&gt;gitconfig&lt;&#x2F;code&gt;文件，添加下面的内容&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;[https]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sslVerify&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;true
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;问题解决。具体原因不详，待研究。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;一个可能的原因是我自己开启了科学上网的模式导致，仅供参考！&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;-41&quot;&gt;git status遇到的问题&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;使用环境&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;命令的使用环境是Windows版本的git客户端的Bash命令行。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;问题描述：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;使用git status时，如果内容中有中文内容，会显示八进制格式的返回结果，而不是中文，显然这不利于我们正常的使用。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13661521523231185062-35b5c82f.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;解决方法&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;1.修改配置文件并全局生效，命令如下：
&lt;code&gt;git config --global core.quotepath false&lt;&#x2F;code&gt; &lt;strong&gt;在linux环境下同样适用&lt;&#x2F;strong&gt;
2 .修改客户端编码
可以在终端窗口空白处双击，出现菜单选择Options-&amp;gt;Text
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12602547079990349008-cb311fcf.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;
解决之后的效果：
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13751329048976225819-0967decb.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-42&quot;&gt;git pull遇到问题&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830212821060.png&quot; alt=&quot;image-20220830212821060&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;解决方法:&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; pull origin master&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --allow-unrelated-histories
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-43&quot;&gt;GitHub页面部分续集&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;主要更新关于github的网页部分的内容。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;-44&quot;&gt;Git命令部分续集&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这个模块主要还是在前面git教程内容的基础上更新和补充关于git命令部分的一些内容和技巧。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;-45&quot;&gt;获取最近一次提交的内容&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过下面的命令可以直接返回最近一次commit的内容。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; show
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# 或者
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; log&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -n1 -p
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2566087545147917182-8c217f36.png&quot; alt=&quot;image-20220604212011585&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，如果你最近一次commit的内容较多，可能命令行一页展示不完，会进行多页展示，此时可以通过键盘上的空格键进行翻页，结束查看请输入 &lt;code&gt;q&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-46&quot;&gt;修改提交信息&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;下面的命令主要的作用场景是你的某一次提交中不小心写错了提交的备注信息并且还未进行push时，需要修改的情况下。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --amend --only
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-2852041928708778819-79f7f80e.png&quot; alt=&quot;image-20220604212456028&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;该命令会打开你设置的默认编辑器方便编辑，如图我的是vim，如果你不想这样做，也可以一行命令解决。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --amend --only -m &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;提交备注信息&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果说，你以及push了本次提交，那么一种方式是修改提交内容之后强推，也就是在推送是加上 &lt;code&gt;-f&lt;&#x2F;code&gt;参数，但一般不建议这样做。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Google Hacking</title>
        <published>2025-06-17T00:00:00+00:00</published>
        <updated>2025-06-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app/google-hacking/"/>
        <id>https://muyu-git-main-08820048s-projects.vercel.app/google-hacking/</id>
        
        <content type="html" xml:base="https://muyu-git-main-08820048s-projects.vercel.app/google-hacking/">&lt;h2 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志：&lt;&#x2F;h2&gt;
&lt;p&gt;2022-10-03&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修改文章名称&lt;&#x2F;li&gt;
&lt;li&gt;新增几条搜索技巧&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-09-26&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;调整目录结构&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;qian-qing-ti-yao&quot;&gt;前情提要&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如今科技网络如此发达的大环境，能学会一些非常实用的搜索技术,真的可以“为所欲为”，再者，我觉得不能让’找不到某某资源成为借口’，作为计算机专业的同学来说。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;【声明】:如果使用Google搜索引擎，那该部分很重要但不适合展示，请自行摸索….本文不提供任何&lt;strong&gt;help&lt;&#x2F;strong&gt;,&lt;strong&gt;亦不承担任何责任&lt;&#x2F;strong&gt;!还有一点，所谓的&lt;code&gt;Google Hacking&lt;&#x2F;code&gt; 并不是说只能使用 Google，只要是搜索引擎都可以使用，只是这名字是外国人起的，外国人更多的人使用 Google，我们当然也可以使用百度、搜狗、bing 等等其他的搜索引擎。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;sou-suo-ji-qiao&quot;&gt;搜索技巧&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;提到搜索引擎，度爷也是一个不可忽视的存在了，但现今的百度已经变味了【个人觉得】，打开百度、键入关键词、回车一气呵成，等着你的就是一堆广告。搜索引擎不再专注于搜索，不纯粹了！所以我选择了&lt;strong&gt;Google&lt;&#x2F;strong&gt;搜索。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220219115817.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;&quot;&gt;使用引号强制进行精确匹配搜索&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“what is Java?”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-10461995544372781941-6670a275.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-1&quot;&gt;使用And连接符&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;mysql AND Java&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-14504734167488444756-53312d1d.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-2&quot;&gt;使用OR操作符获取搜索词中某一个的结果&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;(Java OR C++) free course&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-472250761333355458-241c96a5.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-3&quot;&gt;操作符将排除包含搜索词的结果&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Javascript -css&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-1380911999494599259-f33910ad.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-4&quot;&gt;可以使用(*)通配符作为占位符，它将被任何单词或短语替换&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;“how to start * in 6 months”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-13092045242420342526-b72f6005.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-5&quot;&gt;在一个单一的网站搜索&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;site:baidu.com 中国&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-8020630060643892821-afa57228.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-6&quot;&gt;查找特定的文件类型&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;filetype:pdf learn java&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-6235979189838873316-c0c03a6e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-7&quot;&gt;搜索一个数字范围&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;ecmascript 2016..2022&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;solo-fetchupload-16261730749587081018-8daabba1.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;【注】&lt;&#x2F;strong&gt;：以上几个技巧来自知乎&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;355438850&quot;&gt;【工具】像大佬一样使用 Google&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-8&quot;&gt;intext:搜索文章内容&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125019967.png&quot; alt=&quot;image-20221003125019967&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-9&quot;&gt;intitle:搜索页面的标题&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125208356.png&quot; alt=&quot;image-20221003125208356&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-10&quot;&gt;cache:搜索已经被删除但是还留缓存的页面&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;由于搜索结果不宜展示，作了一些处理。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125531285.png&quot; alt=&quot;image-20221003125531285&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-11&quot;&gt;related:搜索与之相关的站点&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125720943.png&quot; alt=&quot;image-20221003125720943&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-12&quot;&gt;info:搜索某个网站的信息&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003125829490.png&quot; alt=&quot;image-20221003125829490&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-13&quot;&gt;inurl:匹配网站url中的关键字&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003130047559.png&quot; alt=&quot;image-20221003130047559&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;-14&quot;&gt;define:搜索某个词的定义&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;这个词我以前是不知道的，自从用了某特,发现了人性令人作呕的一面。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;imgsforme.oss-cn-hangzhou.aliyuncs.com&#x2F;imgs&#x2F;image-20221003130231654.png&quot; alt=&quot;image-20221003130231654&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-15&quot;&gt;不错的问题交流社区&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;&quot;&gt;stackoverflow&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;待更新…&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Java函数式编程</title>
        <published>2025-06-17T00:00:00+00:00</published>
        <updated>2025-06-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app/javahan-shu-shi-bian-cheng/"/>
        <id>https://muyu-git-main-08820048s-projects.vercel.app/javahan-shu-shi-bian-cheng/</id>
        
        <content type="html" xml:base="https://muyu-git-main-08820048s-projects.vercel.app/javahan-shu-shi-bian-cheng/">&lt;h2 id=&quot;1-gai-shu&quot;&gt;1.概述&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-1gai-nian&quot;&gt;1.1概念&lt;&#x2F;h3&gt;
&lt;p&gt;函数式编程是一种编程范式，即一切都是数学函数。在Java&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;so.csdn.net&#x2F;so&#x2F;search?q=%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1&amp;amp;spm=1001.2101.3001.7020&quot;&gt;面向对象&lt;&#x2F;a&gt;编程中，程序是一系列相互作用（方法）的对象，而在函数式编程中，程序会是一个无状态的函数组合序列。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-2-you-dian&quot;&gt;1.2 优点&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;大数量下处理集合效率高&lt;&#x2F;li&gt;
&lt;li&gt;代码可读性高&lt;&#x2F;li&gt;
&lt;li&gt;消灭嵌套地狱&lt;&#x2F;li&gt;
&lt;li&gt;降低代码量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;2-lambdabiao-da-shi&quot;&gt;2.Lambda表达式&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;2-1gai-shu&quot;&gt;2.1概述&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Lambda是JDK8中一个语法糖&lt;&#x2F;strong&gt;。他可以对某些匿名内部类的写法进行简化。它是函数式编程思想的一个重要体现。让我们不用关注是什么对象。而是更关注我们对数据进行了什么操作。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-2-he-xin-yuan-ze&quot;&gt;2.2 核心原则&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;可推导可省略原则。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;2-3-sheng-lue-gui-ze&quot;&gt;2.3 省略规则&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;参数类型可以省略&lt;&#x2F;li&gt;
&lt;li&gt;方法体只有一句代码时大括号&lt;code&gt;return&lt;&#x2F;code&gt;和唯一一句代码的分号可以省略&lt;&#x2F;li&gt;
&lt;li&gt;方法只有一个参数时小括号可以省略&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-4-ji-ben-yu-fa-ge-shi&quot;&gt;2.4 基本语法格式&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;参数列表&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;{代码}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-shi-li&quot;&gt;2.5 示例&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;通过具体的代码示例来了解&lt;code&gt;lambda&lt;&#x2F;code&gt;表达式的各种基本用法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;2-5-1-li-yi&quot;&gt;2.5.1 例一&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;启动线程&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;原始写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Runnable&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;惟有热爱,可抵岁月漫长!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;lambda写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;惟有热爱,可抵岁月漫长!&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-2-li-er&quot;&gt;2.5.2 例二&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;现有方法定义如下，其中&lt;code&gt;IntBinaryOperator&lt;&#x2F;code&gt;是一个接口。先使用匿名内部类的写法调用该方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;方法定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculateNum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IntBinaryOperator&lt;&#x2F;span&gt;&lt;span&gt; operator) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; operator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;applyAsInt&lt;&#x2F;span&gt;&lt;span&gt;(a,b);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;原始写法(匿名内部类写法)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculateNum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IntBinaryOperator&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;applyAsInt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; left &lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; right;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(i1);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Lmabda写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;calculateNum&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;left&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;right&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;left + right);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-3-li-san&quot;&gt;2.5.3 例三&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;现有方法定义如下，其中&lt;code&gt;IntPredicate&lt;&#x2F;code&gt;是一个接口。先使用匿名内部类的写法调用该方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;方法定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printNum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IntPredicate&lt;&#x2F;span&gt;&lt;span&gt; predicate){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int[]&lt;&#x2F;span&gt;&lt;span&gt; arr = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i : arr) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(predicate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;(i)){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;原始写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printNum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IntPredicate&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; value &lt;&#x2F;span&gt;&lt;span&gt;% &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;lambda写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printNum&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;value % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-4-li-si&quot;&gt;2.5.4 例四&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;现有方法定义如下，其中&lt;code&gt;Function&lt;&#x2F;code&gt;是一个接口。先使用匿名内部类的写法调用该方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;方法定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typeConver&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Function&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; function){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; str = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1235&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;R&lt;&#x2F;span&gt;&lt;span&gt; result = function.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(str);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;原始写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typeConver&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Function&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(s);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(res);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;lambda写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;typeConver&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueOf&lt;&#x2F;span&gt;&lt;span&gt;(s));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(res);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-5-5-li-wu&quot;&gt;2.5.5 例五&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;现有方法定义如下，其中&lt;code&gt;IntConsumer&lt;&#x2F;code&gt;是一个接口。先使用匿名内部类的写法调用该方法。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;方法定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foreachArr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IntConsumer&lt;&#x2F;span&gt;&lt;span&gt; consumer){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int[]&lt;&#x2F;span&gt;&lt;span&gt; arr = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i : arr) {
&lt;&#x2F;span&gt;&lt;span&gt;        consumer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;原始写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foreachArr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IntConsumer&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(value&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;lambda写法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;foreachArr&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(value + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;3-streamliu&quot;&gt;3.Stream流&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Java8&lt;&#x2F;code&gt;的&lt;code&gt;Stream&lt;&#x2F;code&gt;流使用的是函数式编程模式，如同他的名字一样，可以被用来对集合或数组进行链式操作，更方便让我们去操作集合或数组。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;3-1an-li-zhun-bei&quot;&gt;3.1案例准备&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;为了更好的学习和了解&lt;code&gt;Stream&lt;&#x2F;code&gt;流的操作，下面通过一个具体的案例，在案例中通过实现需求的方式去理解&lt;code&gt;Stream&lt;&#x2F;code&gt;流。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;maven依赖&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;xml&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-xml &quot;&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;org.projectlombok&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;groupId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;lombok&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;artifactId&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;1.18.16&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependency&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dependencies&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;两个实体类&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;com.waer.security.demo.pojo;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;lombok.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AllArgsConstructor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;lombok.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;lombok.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;EqualsAndHashCode&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;lombok.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NoArgsConstructor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @date: 2022&#x2F;8&#x2F;28 8:58
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AllArgsConstructor
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NoArgsConstructor
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EqualsAndHashCode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*ID*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;id;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*姓名*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*年龄*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;age;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*简介*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;intro;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*作品*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; books;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;com.waer.security.demo.pojo;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;lombok.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;AllArgsConstructor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;lombok.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Data&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;lombok.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;EqualsAndHashCode&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;lombok.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NoArgsConstructor&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @date: 2022&#x2F;8&#x2F;28 9:00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @email: ilikexff@gmail.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @blog: https:&#x2F;&#x2F;www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Data
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;AllArgsConstructor
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;NoArgsConstructor
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;EqualsAndHashCode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*ID*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Long &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;id;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*书名*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*分类*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;category;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*评分*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;score;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*简介*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;intro;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;初始化数据&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*数据初始化*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;蒙多&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;一个从菜刀中明悟哲理的祖安人&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;亚拉索&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;狂风也追逐不上他的思考速度&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;易&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;是这个世界在限制他的思维&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author4 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;易&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;是这个世界在限制他的思维&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*书籍列表*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; books1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; books2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; books3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    books1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;刀的两侧是光明与黑暗&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;哲学,爱情&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;88&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;用一把刀划分了爱恨&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;一个人不能死在同一把刀下&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;个人成长,爱情&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;99&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;讲述如何从失败中明悟真理&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    books2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;那风吹不到的地方&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;哲学&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;85&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;带你用思维去领略世界的尽头&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;那风吹不到的地方&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;哲学&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;85&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;带你用思维去领略世界的尽头&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;吹或不吹&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;爱情,个人传记&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;56&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;一个哲学家的恋爱观注定很难把他所在的时代理解&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    books3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;你的剑就是我的剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;爱情&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;56&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;无法想象一个武者能对他的伴侣这么的宽容&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;风与剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;个人传记&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    books3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;风与剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;个人传记&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setBooks&lt;&#x2F;span&gt;&lt;span&gt;(books1);
&lt;&#x2F;span&gt;&lt;span&gt;    author2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setBooks&lt;&#x2F;span&gt;&lt;span&gt;(books2);
&lt;&#x2F;span&gt;&lt;span&gt;    author3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setBooks&lt;&#x2F;span&gt;&lt;span&gt;(books3);
&lt;&#x2F;span&gt;&lt;span&gt;    author4.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setBooks&lt;&#x2F;span&gt;&lt;span&gt;(books3);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorList = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;asList&lt;&#x2F;span&gt;&lt;span&gt;(author,author2,author3,author4));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; authorList;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-2kuai-su-ti-yan&quot;&gt;3.2快速体验&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;3-2-1xu-qiu&quot;&gt;3.2.1需求&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;调用&lt;code&gt;getAuthors&lt;&#x2F;code&gt;方法获取到作家的集合。现在需要打印所有年龄小于18的作家的名字，并且要注意去重。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;3-2-2shi-xian&quot;&gt;3.2.2实现&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*需求：打印所有年龄小于18的作家名字，需要对数据去重处理*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*将集合转为Stream流*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*去重处理*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*过滤：年龄要小于18*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*遍历，打印符合要求的作家名*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;亚拉索
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;3-3chang-yong-cao-zuo&quot;&gt;3.3常用操作&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;3-3-1chuang-jian-liu&quot;&gt;3.3.1创建流&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;集合转stream：&lt;code&gt;集合对象.stream()&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*单列集合转Stream*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorList = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stream = authorList.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;数组转stream: &lt;code&gt;Arrays.stream(arr)或者Stream.of(arr)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*数组转stream*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; arr = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stream1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;(arr);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stream2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(arr);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;双列集合转stream  &lt;code&gt;转换成单列集合后再创建&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*双列集合转stream*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; map = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;师哥&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;小庄&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;天明&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*先转为单列集合再转stream*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; stream3 = map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;entrySet&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;3-3-2zhong-jian-cao-zuo&quot;&gt;3.3.2中间操作&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;filter&quot;&gt;filter&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印所有姓名长度大于1的作家的姓名.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
亚拉索&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;map&quot;&gt;map&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以把对流中的元素进行计算或转换。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印所有作家的姓名。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(name));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
亚拉索
易
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;将作家的年龄加10并打印。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(age));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;43
25
24
24&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;distinct&quot;&gt;distinct&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以去除流中的重复元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;注意：distinct方法是依赖Object的equals方法来判断是否是相同对象的。所以需要注意重写equals方法。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印所有作家的姓名，并且要求其中不能有重复元素。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
亚拉索
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;sorted&quot;&gt;sorted&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;对流中的元素进行排序。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果调用空参的sorted()方法，需要流中的元素是实现了Comparable。否则会抛异常&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compareTo&lt;&#x2F;span&gt;&lt;span&gt;(@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;NotNull Author&lt;&#x2F;span&gt;&lt;span&gt; o) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(o.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;()-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.age);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;o2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;()-o1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;33
15
14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;limit&quot;&gt;limit&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以设置流的最大长度，超出的部分将被抛弃。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对流中的元素按照年龄进行降序排序，并且要求不能有重复的元素,然后打印其中年龄最大的两个作家的姓名和年龄。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;o2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() - o2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;limit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;() + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多:33
亚拉索:15&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;skip&quot;&gt;skip&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;跳过流中的前n个元素，返回剩下的元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印除了年龄最大的作家外的其他作家姓名和年龄，要求不能有重复元素，并且按照年龄降序排序。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;() + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;亚拉索:15
易:14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;flatmap&quot;&gt;flatMap&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印所有书籍的名字。要求对重复的元素进行去重。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(book.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;吹或不吹
你的剑就是我的剑
风与剑&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;打印现有数据的所有分类。要求对分类进行去重。不能出现这种格式：哲学,爱情&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;(book.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getCategory&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;category&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(category));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;哲学
爱情
个人成长
个人传记&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;3-3-3zhong-jie-cao-zuo&quot;&gt;3.3.3终结操作&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;foreach&quot;&gt;forEach&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;对流中的元素进行遍历操作，我们通过传入的参数去指定对遍历到的元素进行什么具体操作。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;输出所有作家的名字。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(name));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
亚拉索
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;count&quot;&gt;count&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以用来获取当前流中元素的个数。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印这些作家的所出书籍的数目，注意删除重复元素。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;long&lt;&#x2F;span&gt;&lt;span&gt; count = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;count&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(count);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;6&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;min-max&quot;&gt;min&amp;amp;max&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以用来或者流中的最值。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;分别获取这些作家的所出书籍的最高分和最低分并打印。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; max = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;book &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; book.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getScore&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; score1 - score2);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; min = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;book &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; book.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getScore&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;score2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; score1 - score2);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(min.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(max.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;56&lt;&#x2F;p&gt;
&lt;p&gt;100&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;collect&quot;&gt;collect&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;将当前流转为一个集合。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取一个存放所有作者名字的List集合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; nameList = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collectors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toList&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(nameList);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[蒙多, 亚拉索, 易, 易]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;获取一个书名的Set集合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; bookSet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flatMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collectors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toSet&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(bookSet);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[Book(id=4, name=吹或不吹, category=爱情,个人传记, score=56, intro=一个哲学家的恋爱观注定很难把他所在的时代理解), Book(id=6, name=风与剑, category=个人传记, score=100, intro=两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？), Book(id=2, name=一个人不能死在同一把刀下, category=个人成长,爱情, score=99, intro=讲述如何从失败中明悟真理), Book(id=3, name=那风吹不到的地方, category=哲学, score=85, intro=带你用思维去领略世界的尽头), Book(id=5, name=你的剑就是我的剑, category=爱情, score=56, intro=无法想象一个武者能对他的伴侣这么的宽容), Book(id=1, name=刀的两侧是光明与黑暗, category=哲学,爱情, score=88, intro=用一把刀划分了爱恨)]&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;获取一个Map集合，map的key为作者名，value为List&lt;Book&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; map = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collectors&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toMap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(map);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;{亚拉索=[Book(id=3, name=那风吹不到的地方, category=哲学, score=85, intro=带你用思维去领略世界的尽头), Book(id=3, name=那风吹不到的地方, category=哲学, score=85, intro=带你用思维去领略世界的尽头), Book(id=4, name=吹或不吹, category=爱情,个人传记, score=56, intro=一个哲学家的恋爱观注定很难把他所在的时代理解)], 蒙多=[Book(id=1, name=刀的两侧是光明与黑暗, category=哲学,爱情, score=88, intro=用一把刀划分了爱恨), Book(id=2, name=一个人不能死在同一把刀下, category=个人成长,爱情, score=99, intro=讲述如何从失败中明悟真理)], 易=[Book(id=5, name=你的剑就是我的剑, category=爱情, score=56, intro=无法想象一个武者能对他的伴侣这么的宽容), Book(id=6, name=风与剑, category=个人传记, score=100, intro=两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？), Book(id=6, name=风与剑, category=个人传记, score=100, intro=两个哲学家灵魂和肉体的碰撞会激起怎么样的火花呢？)]}&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;anymatch&quot;&gt;anyMatch&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以用来判断是否有任意符合匹配条件的元素，结果为boolean类型。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断是否有年龄在29以上的作家。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;anyMatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(flag);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;true&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;allmatch&quot;&gt;allMatch&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以用来判断是否都符合匹配条件，结果为boolean类型，如果都符合为true，否则为false.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断是否所有的作家都是成年人！&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;allMatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(flag);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;false&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;nonematch&quot;&gt;noneMatch&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;可以判断流中的元素是否都不符合匹配条件。如果都不符合结果为true，否则结果为false&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断作家是否都没有超过100岁的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;noneMatch&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(flag);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;true&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;findany&quot;&gt;findAny&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;获取流中的任意一个元素。该方法没有办法保证获取的一定是流中的第一个元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取任意一个年龄大于18的作家，如果存在就输出他的名字。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; optionalAuthor = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;findAny&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;optionalAuthor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;findfirst&quot;&gt;findFirst&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;获取流中的第一个元素。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取一个年龄最小的作家并输出他的姓名。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;  first = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;o2&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; o1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;() - o2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;findFirst&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;first.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;reduce-gui-bing&quot;&gt;reduce(归并)&lt;&#x2F;h5&gt;
&lt;p&gt;​	&lt;strong&gt;对流中的数据按照你指定的计算方式计算出一个结果。（缩减操作）&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;strong&gt;reduce的作用是把stream中的元素给组合起来，我们可以传入一个初始值，它会按照我们的计算方式依次拿流中的元素和初始化值进行计算，计算结果再和后面的元素计算。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;​	&lt;strong&gt;reduce两个参数的重载形式内部的计算方式如下：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; result = identity;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; element : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt; stream)
&lt;&#x2F;span&gt;&lt;span&gt;	result = accumulator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(result, element)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; result;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;其中identity就是我们可以通过方法参数传入的初始值，accumulator的apply具体进行什么计算也是我们通过方法参数来确定的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用reduce计算所有作者的年龄和。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; sum = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;distinct&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result + element);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(sum);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;62&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;使用reduce求所有作者中年龄的最大值。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; maxAge = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MIN_VALUE&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ele&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; res &amp;lt; ele ? ele : res);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(maxAge);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;33&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;使用reduce求所有作者中年龄的最小值。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; minAge = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_VALUE&lt;&#x2F;span&gt;&lt;span&gt;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;res&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ele&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; res &amp;gt; ele ? ele : res);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(minAge);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;reduce一个参数的重载形式内部的计算。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; foundAny = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;T&lt;&#x2F;span&gt;&lt;span&gt; element : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt; stream) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!foundAny) {
&lt;&#x2F;span&gt;&lt;span&gt;        foundAny = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        result = element;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;        result = accumulator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;apply&lt;&#x2F;span&gt;&lt;span&gt;(result, element);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; foundAny ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(result) : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;如果用一个参数的重载方法去求最小值代码如下：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; minOptional = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;element&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result &amp;gt; element ? element : result);
&lt;&#x2F;span&gt;&lt;span&gt;minOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(age));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;3-3-4zhu-yi-shi-xiang&quot;&gt;3.3.4注意事项&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;惰性求值（如果没有终结操作，所有中间操作是不会得到执行的）&lt;&#x2F;li&gt;
&lt;li&gt;流是一次性的（一旦一个流对象经过一个终结操作后。这个流就不能再被使用）&lt;&#x2F;li&gt;
&lt;li&gt;不会影响原数据（我们在流中可以多数据做很多处理。但是正常情况下是不会影响原来集合中的元素的。这往往也是我们期望的）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;4-optional&quot;&gt;4.Optional&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;4-1-gai-shu&quot;&gt;4.1 概述&lt;&#x2F;h3&gt;
&lt;p&gt;我们在编写代码的时候出现最多的就是空指针异常。所以在很多情况下我们需要做各种非空的判断。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(author!=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;​	尤其是对象中的属性还是一个对象的情况下。这种判断会更多。&lt;&#x2F;p&gt;
&lt;p&gt;​	而过多的判断语句会让我们的代码显得臃肿不堪。&lt;&#x2F;p&gt;
&lt;p&gt;​	所以在&lt;code&gt;JDK8&lt;&#x2F;code&gt;中引入了&lt;code&gt;Optional&lt;&#x2F;code&gt;,养成使用&lt;code&gt;Optional&lt;&#x2F;code&gt;的习惯后你可以写出更优雅的代码来避免空指针异常。&lt;&#x2F;p&gt;
&lt;p&gt;​	并且在很多函数式编程相关的&lt;code&gt;API&lt;&#x2F;code&gt;中也都用到了&lt;code&gt;Optional&lt;&#x2F;code&gt;，如果不会使用&lt;code&gt;Optional&lt;&#x2F;code&gt;也会对函数式编程的学习造成影响。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;4-2-shi-yong&quot;&gt;4.2 使用&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;4-2-1-chuang-jian-dui-xiang&quot;&gt;4.2.1 创建对象&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Optional就好像是包装类，可以把我们的具体数据封装给Optional对象内部。然后我们去使用Optional中封装好的方法操作封装进去的数据就可以非常优雅的避免空指针异常。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们一般使用&lt;strong&gt;Optional&lt;&#x2F;strong&gt;的&lt;strong&gt;静态方法ofNullable&lt;&#x2F;strong&gt;来把数据封装成一个Optional对象。无论传入的参数是否为null都不会出现问题。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span&gt;(author);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;你可能会觉得还要加一行代码来封装数据比较麻烦。但是如果改造下&lt;code&gt;getAuthor&lt;&#x2F;code&gt;方法，让其它的返回值就是封装好的&lt;code&gt;Optional&lt;&#x2F;code&gt;的话，我们在使用时就会方便很多。而且在实际开发中我们的数据很多是从数据库获取的。&lt;code&gt;Mybatis&lt;&#x2F;code&gt;从3.5版本可以也已经支持&lt;code&gt;Optional&lt;&#x2F;code&gt;了。我们可以直接把&lt;code&gt;dao&lt;&#x2F;code&gt;方法的返回值类型定义成&lt;code&gt;Optional&lt;&#x2F;code&gt;类型，&lt;code&gt;MyBastis&lt;&#x2F;code&gt;会自己把数据封装成&lt;code&gt;Optional&lt;&#x2F;code&gt;对象返回。封装的过程也不需要我们自己操作。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	如果你&lt;strong&gt;确定一个对象不是空&lt;&#x2F;strong&gt;的则可以使用&lt;strong&gt;Optional&lt;&#x2F;strong&gt;的&lt;strong&gt;静态方法of&lt;&#x2F;strong&gt;来把数据封装成Optional对象。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; optional = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(author);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;​	但是一定要注意，如果使用of的时候传入的参数必须不为null。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果一个方法的返回值类型是Optional类型。而如果我们经判断发现某次计算得到的返回值为null，这个时候就需要把null封装成Optional对象返回。这时则可以使用&lt;strong&gt;Optional&lt;&#x2F;strong&gt;的&lt;strong&gt;静态方法empty&lt;&#x2F;strong&gt;来进行封装。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;empty&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;所以一套下来，还是&lt;code&gt;ofNullable&lt;&#x2F;code&gt;真香!!!!&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;4-2-1-an-quan-xiao-fei-zhi&quot;&gt;4.2.1 安全消费值&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;我们获取到一个&lt;code&gt;Optional&lt;&#x2F;code&gt;对象后肯定需要对其中的数据进行使用。这时候我们可以使用其&lt;code&gt;ifPresent&lt;&#x2F;code&gt;方法对来消费其中的值。这个方法会判断其内封装的数据是否为空，不为空时才会执行具体的消费代码。这样使用起来就更加安全了。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如,以下写法就优雅的避免了空指针异常。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;另外，如果我们想获取值自己进行处理可以使用get方法获取，但是不推荐。因为当Optional内部的数据为空的时候会出现异常。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;an-quan-huo-qu-zhi&quot;&gt;安全获取值&lt;&#x2F;h4&gt;
&lt;p&gt;如果我们期望安全的获取值。我们不推荐使用&lt;code&gt;get&lt;&#x2F;code&gt;方法，而是使用&lt;code&gt;Optional&lt;&#x2F;code&gt;提供的以下方法。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;orelseget&quot;&gt;orElseGet&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;获取数据并且设置数据为空时的默认值。如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建对象作为默认值返回。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author1 = authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;orElseGet&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;orelsethrow&quot;&gt;orElseThrow&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;获取数据，如果数据不为空就能获取到该数据。如果为空则根据你传入的参数来创建异常抛出。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author = authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;orElseThrow&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Supplier&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Throwable&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;) () &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;RuntimeException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;author为空&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;} &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Throwable &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;throwable&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    throwable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;printStackTrace&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;guo-lu&quot;&gt;过滤&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;我们可以使用&lt;code&gt;filter&lt;&#x2F;code&gt;方法对数据进行过滤。如果原本是有数据的，但是不符合判断，也会变成一个无数据的&lt;code&gt;Optional&lt;&#x2F;code&gt;对象。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;()&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;pan-duan&quot;&gt;判断&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;我们可以使用&lt;code&gt;isPresent&lt;&#x2F;code&gt;方法进行是否存在数据的判断。如果为空返回值为&lt;code&gt;false&lt;&#x2F;code&gt;,如果不为空，返回值为&lt;code&gt;true&lt;&#x2F;code&gt;。但是这种方式并不能体现&lt;code&gt;Optional&lt;&#x2F;code&gt;的好处，更推荐使用&lt;code&gt;ifPresent&lt;&#x2F;code&gt;方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOptional = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isPresent&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(authorOptional.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h5 id=&quot;shu-ju-zhuan-huan&quot;&gt;数据转换&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;strong&gt;Optional还提供了map可以让我们的对数据进行转换，并且转换得到的数据也还是被Optional包装好的，保证了我们的使用安全。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如我们想获取作家的书籍集合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;testMap&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorOperation = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthorOperation&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; optionalBooks = authorOperation.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getBooks&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;    optionalBooks.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ifPresent&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;books&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(books));
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;上面涉及到的两个方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthor&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;蒙多&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;一个从菜刀中明悟哲理的祖安人&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; author;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthorOperation&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt; author = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;蒙多&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span&gt;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;一个从菜刀中明悟哲理的祖安人&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Optional&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ofNullable&lt;&#x2F;span&gt;&lt;span&gt;(author);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;5-han-shu-shi-jie-kou&quot;&gt;5.函数式接口&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;5-1-gai-shu&quot;&gt;5.1 概述&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;只有一个抽象方法的接口称为函数接口&lt;&#x2F;strong&gt;在&lt;code&gt;JDK&lt;&#x2F;code&gt;的函数式接口都加上&lt;code&gt;@FunctionInterface&lt;&#x2F;code&gt;注解进行标识。但是无论是否加上该注解，只要接口中只有一个抽象方法。都是函数式接口。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;5-2-chang-jian-de-han-shu-shi-jie-kou&quot;&gt;5.2 常见的函数式接口&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;5-2-1-comsumerxiao-fei-jie-kou&quot;&gt;5.2.1 Comsumer消费接口&lt;&#x2F;h4&gt;
&lt;p&gt;根据抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数进行消费。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830085951417.png&quot; alt=&quot;image-20220830085951417&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;&quot;&gt;5.2.2 Function 计算转换接口&lt;&#x2F;h4&gt;
&lt;p&gt;根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数计算或转换，把结果返回。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830090053563.png&quot; alt=&quot;image-20220830090053563&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-1&quot;&gt;5.2.3 Predicate 判断接口&lt;&#x2F;h4&gt;
&lt;p&gt;根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中对传入的参数条件判断，返回判断结果。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830090128559.png&quot; alt=&quot;image-20220830090128559&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-2&quot;&gt;5.2.4 Supplier 生产型接口&lt;&#x2F;h4&gt;
&lt;p&gt;根据其中抽象方法的参数列表和返回值类型知道，我们可以在方法中创建对象，把创建好的对象返回。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220830090201854.png&quot; alt=&quot;image-20220830090201854&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-3&quot;&gt;5.3 常用的默认方法&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-4&quot;&gt;5.3.1 and&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;我们在使用Predicate接口时候可能需要进行判断条件的拼接。而and方法相当于是使用&amp;amp;&amp;amp;来拼接两个判断条件.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印作家中年龄大于17并且姓名的长度大于1的作家。当然，满足这个需求的实现方式不止这一种。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authorStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;and&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Author(id=1, name=蒙多, age=33, intro=一个从菜刀中明悟哲理的祖安人, books=[Book(id=1, name=刀的两侧是光明与黑暗, category=哲学,爱情, score=88, intro=用一把刀划分了爱恨), Book(id=2, name=一个人不能死在同一把刀下, category=个人成长,爱情, score=99, intro=讲述如何从失败中明悟真理)])&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-5&quot;&gt;5.3.2 or&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;我们在使用Predicate接口时候可能需要进行判断条件的拼接。而or方法相当于是使用||来拼接两个判断条件。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印作家中年龄大于17或者姓名的长度小于2的作家。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;蒙多
易
易&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-6&quot;&gt;5.3.4 negate&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;Predicate接口中的方法。negate方法相当于是在判断添加前面加了个! 表示取反。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;打印作家中年龄不大于17的作家。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Predicate&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;negate&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;()));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;15&lt;&#x2F;p&gt;
&lt;p&gt;14&lt;&#x2F;p&gt;
&lt;p&gt;14&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-7&quot;&gt;6.方法引用&lt;&#x2F;h2&gt;
&lt;p&gt;我们在使用lambda时，如果方法体中只有一个方法的调用的话（包括构造方法）,我们可以用方法引用进一步简化代码。&lt;&#x2F;p&gt;
&lt;p&gt;基本格式：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类名或者对象名::方法名。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-8&quot;&gt;6.1 语法详解&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;-9&quot;&gt;6.1.1 引用类的静态方法&lt;&#x2F;h4&gt;
&lt;p&gt;其实就是引用类的静态方法。&lt;&#x2F;p&gt;
&lt;p&gt;格式：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类名::方法名&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用前提&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果我们在重写方法的时候，方法体中只有&lt;strong&gt;一行代码&lt;&#x2F;strong&gt;，并且这行代码就是&lt;strong&gt;调用了某个具体方法&lt;&#x2F;strong&gt;，并且我们要把重写的&lt;strong&gt;抽象方法中所有的参数都按顺序传入这个静态方法中&lt;&#x2F;strong&gt;，这时候就可以引用类的静态方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;比如对下面代码的优化。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authorStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueOf&lt;&#x2F;span&gt;&lt;span&gt;(age));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，如果我们所重写的方法是没有参数的，调用的方法也是没有参数的也相当于符合以上规则。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authorStream
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;valueOf&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-10&quot;&gt;6.3.2 引用对象的实例方法&lt;&#x2F;h4&gt;
&lt;p&gt;格式：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;对象名::方法名&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-11&quot;&gt;使用前提&lt;&#x2F;h5&gt;
&lt;p&gt;​	如果我们在重写方法的时候，方法体中&lt;strong&gt;只有一行代码&lt;&#x2F;strong&gt;，并且这行代码是&lt;strong&gt;调用了某个对象的成员方法&lt;&#x2F;strong&gt;，并且我们把要重写的&lt;strong&gt;抽象方法中所有的参数都按照顺序传入了这个成员方法中&lt;&#x2F;strong&gt;，这个时候我们就可以引用对象的实例方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;优化下面代码&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StringBuilder&lt;&#x2F;span&gt;&lt;span&gt; sb = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StringBuilder&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authorStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;sb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(name));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;优化后&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authorStream = authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StringBuilder&lt;&#x2F;span&gt;&lt;span&gt; sb = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StringBuilder&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authorStream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(sb::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-12&quot;&gt;6.3.3 引用类的实例方法&lt;&#x2F;h4&gt;
&lt;p&gt;格式:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类名::方法名&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-13&quot;&gt;使用前提&lt;&#x2F;h5&gt;
&lt;p&gt;​	如果我们在重写方法的时候，方法体中&lt;strong&gt;只有一行代码&lt;&#x2F;strong&gt;，并且这行代码是&lt;strong&gt;调用了第一个参数的成员方法&lt;&#x2F;strong&gt;，并且我们把要&lt;strong&gt;重写的抽象方法中剩余的所有的参数都按照顺序传入了这个成员方法中&lt;&#x2F;strong&gt;，这个时候我们就可以引用类的实例方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;优化下面代码&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UseString&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subAuthorName&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; str, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UseString&lt;&#x2F;span&gt;&lt;span&gt; useString){
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; start = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; length = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; useString.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt;(str,start,length);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; args) {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subAuthorName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;八尺妖剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;UseString&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;start&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; str.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(start,length);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;优化后&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; args) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subAuthorName&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;八尺妖剑&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;substring&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-14&quot;&gt;6.3.4 构造器引用&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;如果方法体中的一行代码是构造器的话就可以使用构造器引用。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;格式：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;类名::new&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-15&quot;&gt;使用前提&lt;&#x2F;h5&gt;
&lt;p&gt;​	如果我们在重写方法的时候，方法体中&lt;strong&gt;只有一行代码&lt;&#x2F;strong&gt;，并且这行代码是&lt;strong&gt;调用了某个类的构造方法&lt;&#x2F;strong&gt;，并且我们把&lt;strong&gt;要重写的抽象方法中的所有的参数都按照顺序传入了这个构造方法中&lt;&#x2F;strong&gt;，这个时候我们就可以引用构造器。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;优化下面代码&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StringBuilder&lt;&#x2F;span&gt;&lt;span&gt;(name))
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;sb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-三更&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(str));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;优化后&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;StringBuilder&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;sb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-三更&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toString&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(str));
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-16&quot;&gt;7.高级用法&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;-17&quot;&gt;7.1 基本数据类型优化&lt;&#x2F;h3&gt;
&lt;p&gt;我们之前用到的很多&lt;code&gt;Stream&lt;&#x2F;code&gt;的方法由于都使用了泛型。所以涉及到的参数和返回值都是引用数据类型。&lt;&#x2F;p&gt;
&lt;p&gt;​	即使我们操作的是&lt;strong&gt;整数小数，&lt;strong&gt;但是实际用的都是他们的&lt;&#x2F;strong&gt;包装类&lt;&#x2F;strong&gt;。&lt;code&gt;JDK5&lt;&#x2F;code&gt;中引入的自动装箱和自动拆箱让我们在使用对应的包装类时就好像使用基本数据类型一样方便。但是你一定要知道&lt;strong&gt;装箱和拆箱肯定是要消耗时间的&lt;&#x2F;strong&gt;。虽然这个时间消耗很下。但是在&lt;strong&gt;大量的数据不断的重复装箱拆箱的时候，你就不能无视这个时间损耗了&lt;&#x2F;strong&gt;。所以为了让我们能够对这部分的时间消耗进行优化。&lt;code&gt;Stream&lt;&#x2F;code&gt;还提供了很多专门针对基本数据类型的方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如：&lt;code&gt;mapToInt&lt;&#x2F;code&gt;,&lt;code&gt;mapToLong&lt;&#x2F;code&gt;,&lt;code&gt;mapToDouble&lt;&#x2F;code&gt;,&lt;code&gt;flatMapToInt&lt;&#x2F;code&gt;,&lt;code&gt;flatMapToDouble&lt;&#x2F;code&gt;等。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test27&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; age + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;优化后的写法
&lt;&#x2F;span&gt;&lt;span&gt;    authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mapToInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; age + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;-18&quot;&gt;7.2 并行流&lt;&#x2F;h3&gt;
&lt;p&gt;当流中有大量元素时，我们可以使用并行流去提高操作的效率。其实&lt;strong&gt;并行流就是把任务分配给多个线程去完全&lt;&#x2F;strong&gt;。如果我们自己去用代码实现的话其实会非常的复杂，并且要求你对并发编程有足够的理解和认识。而如果我们使用&lt;code&gt;Stream&lt;&#x2F;code&gt;的话，我们只需要修改一个方法的调用就可以使用并行流来帮我们实现，从而提高效率。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;​	parallel方法可以把串行流转换成并行流。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test28&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; stream = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Stream&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt; sum = stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parallel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;peek&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Consumer&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;accept&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(num&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;currentThread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getName&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; num &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reduce&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;result&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ele&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; result + ele)
&lt;&#x2F;span&gt;&lt;span&gt;        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(sum);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;这里用到&lt;code&gt;peek()&lt;&#x2F;code&gt;方法来打印中间值，这是用来调试的一个方法，可以用在流操作的任何位置。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;blockquote&gt;
&lt;p&gt;也可以通过&lt;code&gt;parallelStream&lt;&#x2F;code&gt;直接获取并行流对象。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Author&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; authors = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAuthors&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;authors.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parallelStream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;author &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; author.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getAge&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; age + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;age+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;forEach&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;del&gt;初更全文完…&lt;&#x2F;del&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Java集合源码浅析</title>
        <published>2025-06-17T00:00:00+00:00</published>
        <updated>2025-06-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app/javaji-he-yuan-ma-qian-xi/"/>
        <id>https://muyu-git-main-08820048s-projects.vercel.app/javaji-he-yuan-ma-qian-xi/</id>
        
        <content type="html" xml:base="https://muyu-git-main-08820048s-projects.vercel.app/javaji-he-yuan-ma-qian-xi/">&lt;h3 id=&quot;geng-xin-ri-zhi-tada&quot;&gt;更新日志🎉&lt;&#x2F;h3&gt;
&lt;p&gt;2023-01-29 星期六&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正一些已知错误&lt;&#x2F;li&gt;
&lt;li&gt;调整文章布局结构&lt;&#x2F;li&gt;
&lt;li&gt;修正错别字词&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-05-26 10:20:23 星期四&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正语言表达逻辑&lt;&#x2F;li&gt;
&lt;li&gt;删除&#x2F;修改了错别字词&lt;&#x2F;li&gt;
&lt;li&gt;更新了部分配图&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-08-02&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修正错别字&lt;&#x2F;li&gt;
&lt;li&gt;修正语言表达逻辑&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;2022-08-22&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;还是修已知的正错别词语&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Java集合解读&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ideakuai-jie-jian&quot;&gt;IDEA快捷键&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;查看源码:F4&lt;&#x2F;p&gt;
&lt;p&gt;进入实现:Ctrl+Alt+B(鼠标点击)&lt;&#x2F;p&gt;
&lt;p&gt;添加实现类:空格&lt;&#x2F;p&gt;
&lt;p&gt;显示图:Ctrl+Alt+Shift+U&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;gai-lan&quot;&gt;概览&lt;&#x2F;h2&gt;
&lt;p&gt;**说明：**以下内容的源码分析，如没有特别说明，均来自JDK8.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;集合主要分为两组：单列集合和双列集合&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;但列集合一般是指存放单个对象的集合，而双列集合一般是以&amp;lt;k,v&amp;gt;键值对形式存放数据的集合。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Collection&lt;&#x2F;code&gt;接口下有两个重要的子接口&lt;code&gt;List&lt;&#x2F;code&gt;,&lt;code&gt;Set&lt;&#x2F;code&gt;，他们的实现子类都是单列集合。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Map&lt;&#x2F;code&gt;接口的实现子类有&lt;code&gt;HashTable&lt;&#x2F;code&gt;、&lt;code&gt;HashMap&lt;&#x2F;code&gt;、&lt;code&gt;TreeMap&lt;&#x2F;code&gt;,也都是双列集合。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;以下是集合类下两大主接口的类图关系。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;collectionxi&quot;&gt;&lt;strong&gt;Collection系&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220525092920.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Conllection接口下，派生出了三个主要的子接口，分别为无序集合&lt;code&gt;Set&lt;&#x2F;code&gt;,队列&lt;code&gt;Queue&lt;&#x2F;code&gt;和有序集合&lt;code&gt;List&lt;&#x2F;code&gt;。在三大子接口之下，还有着众多的实现子类或者派生的子接口，其中最常用的有：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;TreeSet&lt;&#x2F;li&gt;
&lt;li&gt;LinkedHashSet&lt;&#x2F;li&gt;
&lt;li&gt;HashSet&lt;&#x2F;li&gt;
&lt;li&gt;LinkedList&lt;&#x2F;li&gt;
&lt;li&gt;ArrayList&lt;&#x2F;li&gt;
&lt;li&gt;Stack&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;&quot;&gt;&lt;strong&gt;Map系&lt;&#x2F;strong&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220525092947.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Map&lt;&#x2F;code&gt;集合为双列集合。&lt;code&gt;Map&lt;&#x2F;code&gt;**没有直接继承的子接口,**主要有三个实现类，分别是&lt;code&gt;HashMap&lt;&#x2F;code&gt;、&lt;code&gt;HashTable&lt;&#x2F;code&gt;、&lt;code&gt;SortedMap&lt;&#x2F;code&gt;。在三个主要实现之下，比较常用的实现及其实现子类有：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HashMap&lt;&#x2F;code&gt;(性能高，非线程安全)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Hashtable&lt;&#x2F;code&gt;(性能较低，线程安全，但属于老旧的API，一般不推荐使用)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;TreeMap&lt;&#x2F;code&gt;(有序&lt;code&gt;map&lt;&#x2F;code&gt;)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;细说&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;collection&quot;&gt;&lt;code&gt;Collection&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;由于&lt;code&gt;Collection&lt;&#x2F;code&gt;接口直接继承了&lt;code&gt;Iterable&lt;&#x2F;code&gt;，它是没有实现的，它的所有方法都是由它的&lt;strong&gt;子接口&lt;&#x2F;strong&gt;的实现类进行实现，所以这里就以&lt;code&gt;Collection&lt;&#x2F;code&gt;下子接口&lt;code&gt;List&lt;&#x2F;code&gt;的实现类&lt;code&gt;ArrayList&lt;&#x2F;code&gt;来讲解。注意&lt;code&gt;List&lt;&#x2F;code&gt;是&lt;strong&gt;有序集合且元素可以重复&lt;&#x2F;strong&gt;，而&lt;code&gt;Set&lt;&#x2F;code&gt;则是&lt;strong&gt;无序集合，元素不可重复&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;讲解的方法列表&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;add:添加单个元素&lt;&#x2F;li&gt;
&lt;li&gt;remove：输出指定元素&lt;&#x2F;li&gt;
&lt;li&gt;contains:查找元素是否存在&lt;&#x2F;li&gt;
&lt;li&gt;size:获取元素个数&lt;&#x2F;li&gt;
&lt;li&gt;isEmpty:判断是否为空&lt;&#x2F;li&gt;
&lt;li&gt;clear:清空&lt;&#x2F;li&gt;
&lt;li&gt;addAll:添加多个元素&lt;&#x2F;li&gt;
&lt;li&gt;containsAll:查找多个元素是否都存在&lt;&#x2F;li&gt;
&lt;li&gt;removeAll:输出多个元素&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;基本用法演示&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt; list = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*添加单个元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;这里其实是一个自动装箱的操作:list.add(new Integer(10))
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;list:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+list);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*输出元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;输出&amp;quot;Jack&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;list.remove(0);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;指定输出某个元素
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;输出后的[list]:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+list);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*查找某个元素是否存在*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;contains&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*获取元素个数*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*判断集合是否为空*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;false
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isEmpty&lt;&#x2F;span&gt;&lt;span&gt;());
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*清空集合*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clear&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;清空后的[list]：[]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;清空后的[list]：&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+list);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*添加多个元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt; list2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;list2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;西游记&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;list2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;西厢记&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addAll&lt;&#x2F;span&gt;&lt;span&gt;(list2);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;添加多个元素后的[list]:[西游记, 西厢记]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;添加多个元素后的[list]:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+list);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*判断多个元素是否都存在*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;containsAll&lt;&#x2F;span&gt;&lt;span&gt;(list2));
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*输出多个元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;华强北&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;true
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;removeAll&lt;&#x2F;span&gt;&lt;span&gt;(list2));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;华强北
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(list);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;遍历用法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面的类图已经知道，&lt;code&gt;Collection&lt;&#x2F;code&gt;接口还有一个&lt;code&gt;Iterable&lt;&#x2F;code&gt;父接口。它的部分实现源码中第一个方法如下:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220320114101.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，该方法可以返回元素的&lt;code&gt;iterator&lt;&#x2F;code&gt;对象。只要是实现了接口的所有子类，都有一个&lt;code&gt;iterator()&lt;&#x2F;code&gt;方法。在对元素的遍历上，都可以采用迭代器的方式进行遍历。所以&lt;code&gt;Collection&lt;&#x2F;code&gt;&lt;strong&gt;及其所有子类实现&lt;&#x2F;strong&gt;，我们都可以获取到每个元素的迭代器并用在对元素的遍历操作上。需要注意的是，&lt;code&gt;iterator&lt;&#x2F;code&gt;&lt;strong&gt;仅用来遍历集合，本身并不存放任何对象。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;迭代器的执行原理&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;作为&lt;code&gt;Collection&lt;&#x2F;code&gt;的父接口，&lt;code&gt;Iterator&lt;&#x2F;code&gt;的方法如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220320141211.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我们一般在使用迭代器进行遍历的时候，都会用到一个&lt;code&gt;while&lt;&#x2F;code&gt;循环，循环的条件是&lt;code&gt;iterator.hasNext()&lt;&#x2F;code&gt;，也就是说，在每次得到遍历元素之前，&lt;code&gt;iterator&lt;&#x2F;code&gt;对象会调用自身的&lt;code&gt;hasNext()&lt;&#x2F;code&gt;方法，对集合里的元素进行判断，&lt;strong&gt;只有当存在下一个元素时，迭代器才会继续往下执行&lt;&#x2F;strong&gt;，否则，迭代结束。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220320140135.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，&lt;code&gt;Iterator&lt;&#x2F;code&gt;的&lt;code&gt;hasNext()&lt;&#x2F;code&gt;方法返回一个&lt;strong&gt;布尔值&lt;&#x2F;strong&gt;，如果该迭代对象还存在元素的情况下。这个方法就相当于一个指向集合元素的指针，每一次调用都会向下移动以检查&lt;strong&gt;是否到达集合尾部&lt;&#x2F;strong&gt;，在移动的同时，它还会调用&lt;code&gt;next()&lt;&#x2F;code&gt;方法，该方法会将移动后该指针指向位置上的元素进行返回。为了有效的防止空指针，每次在调用&lt;code&gt;Next()&lt;&#x2F;code&gt;之前，会先调用&lt;code&gt;hasNext()&lt;&#x2F;code&gt;,这是有必要的。如果说不存在下一个元素，则会抛出一个&lt;code&gt;NoSuchElementException&lt;&#x2F;code&gt;异常。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Iterator使用示例&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;collection;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @date: 2022&#x2F;3&#x2F;20 14:17
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @description: 演示迭代器[Iterator]的使用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span&gt;({&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CollectionIterator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; col &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C++ Primer Plus&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Stephen Prata&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;57.4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;程序员的数学&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;结城浩&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Java疯狂讲义&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;李刚&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;集合[col]:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;col);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*遍历集合*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;1.获取集合的迭代对象
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; iterator &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;2.while循环遍历数据
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hasNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;3.注意：iterator返回默认时一个Object类型(除非指定泛型)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; o &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[col]迭代返回:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;o);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;4.当退出while循环之后，此时的iterator指向最后一个元素，在调用next()方法会报NoSuchElementException异常。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;如果需要再次遍历，需要重置迭代器。方法如下：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;IDEA支持快速生成迭代方法，使用[Ctrl+j]快捷键进行查看
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        iterator &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hasNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; o1 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;  iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[col]再次迭代：&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;o1);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * 内部类
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;class  Book{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    private String name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    private String author;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    private double price;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    public Book(String name, String author, double price) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        this.name = name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        this.author = author;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        this.price = price;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    @Override
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    public String toString() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        return &amp;quot;Book{&amp;quot; +
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;                &amp;quot;name=&amp;#39;&amp;quot; + name + &amp;#39;\&amp;#39;&amp;#39; +
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;                &amp;quot;, author=&amp;#39;&amp;quot; + author + &amp;#39;\&amp;#39;&amp;#39; +
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;                &amp;quot;, price=&amp;quot; + price +
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;                &amp;#39;}&amp;#39;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    public String getName() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        return name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    public void setName(String name) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        this.name = name;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    public String getAuthor() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        return author;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    public void setAuthor(String author) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        this.author = author;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    public double getPrice() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        return price;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    public void setPrice(double price) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        this.price = price;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;一些需要注意的点，已经写在了注释当中。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;增强for&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓增强for，也就是针对普通for循环的增强。它可以替代&lt;code&gt;iterator&lt;&#x2F;code&gt;迭代器，相当于一个简化版的&lt;code&gt;iterator&lt;&#x2F;code&gt;,也正因为如此，&lt;strong&gt;增强for只能用于遍历集合或者数组&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;基本语法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt;(元素类型 元素名:集合或者数组名){
&lt;&#x2F;span&gt;&lt;span&gt;    访问元素;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;collection;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @date: 2022&#x2F;3&#x2F;20 14:56
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @description: 演示增强for的使用
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;CollectionFor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static void  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Collection&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; col &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C++ Primer Plus&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Stephen Prata&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;57.4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;程序员的数学&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;结城浩&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20.5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        col.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Book&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Java疯狂讲义&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;李刚&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*使用增强for进行集合的遍历*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; book&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;col){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;book=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;book);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;list&quot;&gt;&lt;code&gt;List&lt;&#x2F;code&gt;接口&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;常用实现及其方法一览&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Lists.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;List&lt;&#x2F;code&gt;接口是&lt;code&gt;Collection&lt;&#x2F;code&gt;的子接口，上面讲解的&lt;code&gt;ArrayList&lt;&#x2F;code&gt;的方法是来自&lt;code&gt;Collection&lt;&#x2F;code&gt;接口方法。而这些方在&lt;code&gt;Set&lt;&#x2F;code&gt;子接口中也可以使用。下面讲一下子接口&lt;code&gt;List&lt;&#x2F;code&gt;中的实现类，也是以&lt;code&gt;ArrayList&lt;&#x2F;code&gt;实现为例。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;List&lt;&#x2F;code&gt;集合类中的元素是有序(添加和取出顺序一致)的，且是可重复的。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;List&lt;&#x2F;code&gt;集合中的每一个元素都有其对应的顺序索引，即他是支持&lt;strong&gt;索引&lt;&#x2F;strong&gt;的一类集合。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;List&lt;&#x2F;code&gt;中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;List&lt;&#x2F;code&gt;子接口的主要常用实现类有&lt;code&gt;ArrayList&lt;&#x2F;code&gt;、&lt;code&gt;LinkedList&lt;&#x2F;code&gt;、&lt;code&gt;Vector&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;List的一些方法&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;List;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;: 八尺妖剑
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @date: 2022&#x2F;3&#x2F;20 16:57
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @description: List的方法演示
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ListMethod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; list &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;张无忌&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;张天志&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*在index位置插入元素e*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*注意：这里如果不指定下标的话，默认是以尾部追加的方式进行元素插入的*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Tisox&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;list=[张无忌, Tisox, 张天志]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;list=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;list);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*addAll(inr index,Collection e)：从index位置开始将元素e中的所有元素添加进来*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; list2 &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;蜘蛛侠&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;钢铁侠&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addAll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,list2);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;list=[张无忌, 蜘蛛侠, 钢铁侠, Tisox, 张天志]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;list=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;list);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*int intdexOf(Object obj):返回obj在当前集合中首次出现的位置*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;indexOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;蜘蛛侠&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*int lastIndexOf(Object obj):返回obj在当前集合中最后一次出现的位置*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;凋残&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lastIndexOf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;凋残&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*remove(int index):移除指定index位置的元素，并返回此元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;list=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;list);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*set(int index,Object ele):设置指定index位置出的元素为ele，相当于是替换元素*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;新的名字&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;list=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;list);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*subList(int fromIndex,int toIndex):返回从fromIndex到toIndex位置的子集合*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;返回一个左闭右开的区间
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; reslist &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;subList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;relist=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;reslist);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;List的三种遍历方式&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;由于&lt;code&gt;ArrayList&lt;&#x2F;code&gt;、&lt;code&gt;LinkedList&lt;&#x2F;code&gt;和&lt;code&gt;Vector&lt;&#x2F;code&gt;都是&lt;code&gt;List&lt;&#x2F;code&gt;的实现子类，以下方法可以&lt;strong&gt;无缝切换&lt;&#x2F;strong&gt;，效果是一样的。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;List;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;java.util.*;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;: Tisox
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @date: 2022&#x2F;3&#x2F;20 19:18
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @description: List的三种遍历方式
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * @blog:www.waer.ltd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ListFor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;({&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;all&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;List list =new Vector();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; list &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LinkedList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;List list = new ArrayList();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;jack&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tom&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;回锅肉&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;鱼香肉丝&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;砂锅粉&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*1.迭代器遍历*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; iterator &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;iterator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hasNext&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;()) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; next &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; iterator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[list]的[迭代器iterator]遍历=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;list);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;====================================&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*2.增强for遍历*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; o &lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; list) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[list]的[增强for]遍历=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;list);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;====================================&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*3.普通for循环遍历*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; i&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;i&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();i&lt;&#x2F;span&gt;&lt;span&gt;++&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;){
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[list]的[普通for循环]遍历=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(i));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;arraylist&quot;&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;&lt;strong&gt;允许存入&lt;code&gt;null&lt;&#x2F;code&gt;值。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt; arrayList = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;arrayList.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;arrayList.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;arrayList.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(arrayList);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;底层采用数组实现。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;线程不安全&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220320204436.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过它的源码可以看到，他是没有&lt;code&gt;synchronized&lt;&#x2F;code&gt;关键字修饰的。也正是因为如此，它的效率是比较高的，所以如果需要保证线程安全的场景下，不建议使用&lt;code&gt;ArrayList&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-2&quot;&gt;源码分析&lt;&#x2F;h5&gt;
&lt;p&gt;**&lt;code&gt;ArrayList&lt;&#x2F;code&gt;中维护了一个&lt;code&gt;Object&lt;&#x2F;code&gt;类型的数组&lt;code&gt;elementData[]&lt;&#x2F;code&gt;。**源码如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;transient &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; elementData;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里的&lt;code&gt;elementData[]&lt;&#x2F;code&gt;数组的类型是&lt;code&gt;Object&lt;&#x2F;code&gt;类型，也就是说，它可以存放任意类型的数据，因为&lt;code&gt;Object&lt;&#x2F;code&gt;类是&lt;strong&gt;所有类的父类&lt;&#x2F;strong&gt;，也就是顶级父类。 关键字&lt;code&gt;transient&lt;&#x2F;code&gt;的作用是去除序列化，当某个属性被加上该关键字即表示它在进行序列化时会被忽略，不参与序列化操作。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;-3&quot;&gt;底层扩容原理&lt;&#x2F;h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;底层采用数组这种数据结构来实现，必然会有容量的限制，那么在它的底层是如何实现自动扩容的呢？这里以其中的&lt;code&gt;add()&lt;&#x2F;code&gt;方法进行浅析。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;code&gt;ArrayList&lt;&#x2F;code&gt;有两个构造方法，分别是&lt;strong&gt;无参数构造和有参构造&lt;&#x2F;strong&gt;。下面是源码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;无参构造
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.elementData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;有参构造
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; initialCapacity) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(initialCapacity &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.elementData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;[initialCapacity];
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(initialCapacity == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.elementData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;EMPTY_ELEMENTDATA&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IllegalArgumentException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Illegal Capacity: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+
&lt;&#x2F;span&gt;&lt;span&gt;                                           initialCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;两个构造方法不仅在参数上有所区别，他们的底层扩容原理也是不一样的，先看一下无参数的&lt;code&gt; ArrayList()&lt;&#x2F;code&gt;构造。&lt;&#x2F;p&gt;
&lt;p&gt;可以看到，在&lt;strong&gt;无参构造的方法&lt;&#x2F;strong&gt;中，它将数组的初始容量设为&lt;code&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;code&gt;。也就是一个空对象数组。这一点可以从下面的源码得知。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220321195749.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下面尝试在集合中添加元素，来分析add方法的执行过程。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;使用无参构造对集合进行初始化
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt; list = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ArrayList&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;向其中添加10个元素
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;    list.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(i);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;执行过程和扩容原理&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;在初始化完成后，当我们触发add()时，它会先调用&lt;code&gt;valueOf()&lt;&#x2F;code&gt;方法对添加的元素进行一个&lt;strong&gt;装箱&lt;&#x2F;strong&gt;操作，这不是本次分析的重点，不再赘述。注意下面这个自动装箱的源码来自&lt;strong&gt;JDK11&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220321200829.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;装箱结束后，进入&lt;code&gt;add(E e)&lt;&#x2F;code&gt;这个方法，该方法是集合中的一个&lt;strong&gt;重载方法，接收一个泛型参数&lt;&#x2F;strong&gt;，源码如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensureCapacityInternal&lt;&#x2F;span&gt;&lt;span&gt;(size + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Increments modCount!!
&lt;&#x2F;span&gt;&lt;span&gt;    elementData[size++] = e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;首先，在执行正式的添加操作之前，会先执行&lt;code&gt;ensureCapacityInternal()&lt;&#x2F;code&gt;方法，该方法主要是用来&lt;strong&gt;确认集合的容量情况&lt;&#x2F;strong&gt;，决定是否需要扩容。再调用添加方法进行元素的添加。显然，这里出现的&lt;code&gt;ensureCapacityInternal()&lt;&#x2F;code&gt;方法是重点，源码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensureCapacityInternal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(elementData == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        minCapacity = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Math&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;max&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;, minCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensureExplicitCapacity&lt;&#x2F;span&gt;&lt;span&gt;(minCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;方法传入一个名为&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的&lt;code&gt;int&lt;&#x2F;code&gt;类型变量，表示数组最小容量。接着判断&lt;code&gt;elementData&lt;&#x2F;code&gt;是否是&lt;code&gt;DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;code&gt;默认值，由于我们选择的是无参构造，所以&lt;code&gt;if&lt;&#x2F;code&gt;语句中的条件是成立的。接下来&lt;code&gt;Math.max(DEFAULT_CAPACITY, minCapacity)&lt;&#x2F;code&gt;在&lt;strong&gt;默认容量&lt;&#x2F;strong&gt;和&lt;strong&gt;最小容量&lt;&#x2F;strong&gt;之间取一个最大值并赋给&lt;code&gt;minCapacity&lt;&#x2F;code&gt;，也就是更新&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值。关于默认容量&lt;code&gt;DEFAULT_CAPACITY&lt;&#x2F;code&gt;，下面是它的声明：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_CAPACITY &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;执行之后，&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值将更新为10;也就是说，这个方法目的是为了确认&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值，而在&lt;code&gt;if&lt;&#x2F;code&gt;之后，又出现了一个&lt;code&gt;ensureExplicitCapacity(minCapacity)&lt;&#x2F;code&gt;方法，在&lt;code&gt;if&lt;&#x2F;code&gt;判断条件不满足的情况下执行，参数就是上面更新后的&lt;code&gt;minCapacity&lt;&#x2F;code&gt;，可以猜测，这个方法应该也是对是否需要扩容进行一个判断的算法。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensureExplicitCapacity&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity) {
&lt;&#x2F;span&gt;&lt;span&gt;    modCount++;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(minCapacity - elementData.length &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span&gt;(minCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意,这里有一条为&lt;code&gt;modCount++;&lt;&#x2F;code&gt;的语句，他主要是记录当前集合被修改的次数，为了防止被多个线程操作，否则会抛异常。第4行中if的条件&lt;code&gt;minCapacity - elementData.length &amp;gt; 0&lt;&#x2F;code&gt;表示最小容量与当前数组元素容量的一个&lt;strong&gt;差值大于0是否成立&lt;&#x2F;strong&gt;，将会直接调用下一个方法进行扩容，也就是&lt;code&gt;grow()&lt;&#x2F;code&gt;方法。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;比方说，此时的&lt;code&gt;minCapacity=10&lt;&#x2F;code&gt;，&lt;code&gt;elementData=0&lt;&#x2F;code&gt;,显然&lt;code&gt;10-0&amp;gt;0&lt;&#x2F;code&gt;,也即是说，数组需要一个最小容量为10空间，而此时的容量为0，显然需要进行扩容操作。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;下面是&lt;code&gt;grow()&lt;&#x2F;code&gt;方法，也是扩容的核心实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity = elementData.length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(newCapacity - minCapacity &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        newCapacity = minCapacity;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(newCapacity - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_ARRAY_SIZE &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        newCapacity = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hugeCapacity&lt;&#x2F;span&gt;&lt;span&gt;(minCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; minCapacity is usually close to size, so this is a win:
&lt;&#x2F;span&gt;&lt;span&gt;    elementData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copyOf&lt;&#x2F;span&gt;&lt;span&gt;(elementData, newCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，方法开始会先将数组容量&lt;code&gt;elementData.length&lt;&#x2F;code&gt;赋值给一个中间变量&lt;code&gt;oldCapacity&lt;&#x2F;code&gt;。接着为变量&lt;code&gt;newCapacity&lt;&#x2F;code&gt;进行赋值，算法是将&lt;code&gt;oldCapacity&lt;&#x2F;code&gt;旧&lt;strong&gt;的容量+旧容量的二分之一&lt;&#x2F;strong&gt;赋值给该变量。注意这里&lt;code&gt;(oldCapacity &amp;gt;&amp;gt; 1)&lt;&#x2F;code&gt;表将&lt;code&gt;oldCapacity&lt;&#x2F;code&gt;右移一位，&lt;strong&gt;等同于除以2&lt;&#x2F;strong&gt;，用位运算可以提高执行效率。反过来，如果是左移的话，代表乘以&lt;code&gt;2&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;又由于前面已经知道&lt;code&gt;elemenatData&lt;&#x2F;code&gt;其实是等于&lt;code&gt;0&lt;&#x2F;code&gt;的，那么直接导致这条赋值语句结果为&lt;code&gt;0&lt;&#x2F;code&gt;，也就是&lt;code&gt;newCapacity==0&lt;&#x2F;code&gt;，所以它后面紧接着出现了两个判断。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果新的容量小于最小容量，那么将最小容量赋给这个新容量，&lt;strong&gt;完成一次扩容，此时数组的容量由0变为10.&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;如果&lt;code&gt;newCapacity &amp;gt; MAX_ARRAY_SIZE &lt;&#x2F;code&gt;,那么&lt;code&gt;newCpapcity&lt;&#x2F;code&gt;的值由方法&lt;code&gt;hugeCapacity()&lt;&#x2F;code&gt;决定。这个后面再说，我们继续当前的分析，在执行完上面的判断语句之后，最后对&lt;code&gt;elemantData&lt;&#x2F;code&gt;进行重新赋值，核心方法&lt;code&gt;Arrays.copyOf(elementData, newCapacity)&lt;&#x2F;code&gt;,该方法的作用是将&lt;code&gt;newCapacity&lt;&#x2F;code&gt;的值复制给&lt;code&gt;elementData&lt;&#x2F;code&gt;。之后&lt;code&gt;elementData&lt;&#x2F;code&gt;里面将会存在&lt;strong&gt;10个null&lt;&#x2F;strong&gt;值.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;就是说，当我们&lt;strong&gt;首次&lt;&#x2F;strong&gt;使用该集合的&lt;strong&gt;无参构造&lt;&#x2F;strong&gt;初始化集合时，其实并不会触发&lt;strong&gt;1.5倍的底层扩容机制&lt;&#x2F;strong&gt;。注意，这里使用&lt;code&gt;copyOf()&lt;&#x2F;code&gt;方法的作用也是为了&lt;strong&gt;保留扩容之前已经存在集合中的元素&lt;&#x2F;strong&gt;，换句话说，每次扩容并不会导致已存在的元素丢失，而是在这些元素之后添加&lt;code&gt;N&lt;&#x2F;code&gt;个值为&lt;code&gt;null&lt;&#x2F;code&gt;的元素空间。比如这样:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;null值得位置就是扩容的容量
&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;当以上扩容操作完成之后，执行会返回到之前的&lt;code&gt;add()&lt;&#x2F;code&gt;方法：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensureCapacityInternal&lt;&#x2F;span&gt;&lt;span&gt;(size + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Increments modCount!!
&lt;&#x2F;span&gt;&lt;span&gt;    elementData[size++] = e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时的&lt;code&gt;elementData&lt;&#x2F;code&gt;已经由最初的空数组扩容为大小为10的容量，当执行完&lt;code&gt;elementData[size++] = e;&lt;&#x2F;code&gt;之后，新的容量中第一个位置会被替换为元素&lt;code&gt;1&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意理解&lt;strong&gt;minCapacity&lt;&#x2F;strong&gt;和&lt;strong&gt;elementData&lt;&#x2F;strong&gt;的含义。前者的意思时我们用这个集合存放某些元素&lt;strong&gt;最少需要的空间&lt;&#x2F;strong&gt;，而后者表示此时这个集合&lt;strong&gt;本身拥有的空间&lt;&#x2F;strong&gt;，所以，扩容的目的在于扩张&lt;strong&gt;elementData&lt;&#x2F;strong&gt;的大小，以满足存放&lt;strong&gt;minCapacity&lt;&#x2F;strong&gt;所需。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;现在来看一下上面留下的**hugeCapacity(minCapacity)**方法，源码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hugeCapacity&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(minCapacity &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; overflow
&lt;&#x2F;span&gt;&lt;span&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;OutOfMemoryError&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(minCapacity &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_ARRAY_SIZE&lt;&#x2F;span&gt;&lt;span&gt;) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_VALUE &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_ARRAY_SIZE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;注意：以下是MAX_ARRAY_SIZE的常量定义。
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_ARRAY_SIZE &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_VALUE &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;2147483647是Integer.MAX_VALUE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这个方法其实就是对数组&lt;strong&gt;大小边界进行一个判断和限制&lt;&#x2F;strong&gt;，要求数组大小在&lt;code&gt;0&lt;&#x2F;code&gt;到&lt;code&gt;MAX_VALUE&lt;&#x2F;code&gt;之间。如果&lt;code&gt;&amp;lt;0&lt;&#x2F;code&gt;直接抛出一个&lt;code&gt;OutOfMemoryError&lt;&#x2F;code&gt;异常，否则返回一个值作为数组容量的上限，这里用了一个三元表达式作为返回语句。&lt;&#x2F;p&gt;
&lt;p&gt;如果&lt;code&gt;最小容量大于MAX_ARRAY_SIZE，&lt;&#x2F;code&gt;则将&lt;code&gt;Integer.MAX_VALUE&lt;&#x2F;code&gt;的值赋给它，否则还是用&lt;code&gt;MAX_ARRAY_SIZE。&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;再看一下&lt;strong&gt;为什么这里****MAX_ARRAY_SIZE&lt;&#x2F;strong&gt;是&lt;strong&gt;Integer.MAX_VALUE-8&lt;&#x2F;strong&gt;，也即是**2147483647-8=2,147,483,639****而不是减其他数值？**关于这个问题，其实再源码的注释中就已经写清楚了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220322112254.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;大致意思就是如果直接使用&lt;strong&gt;Integer.MAX_VALUE&lt;&#x2F;strong&gt;的话，在某些虚拟机中，可能会出现溢出的问题。不过一般情况下，我们还是认为它的值可以直接看作是与&lt;strong&gt;Integer.MAX_VALUE&lt;&#x2F;strong&gt;相同。以下是来自&lt;code&gt;stackoverflow&lt;&#x2F;code&gt;的一个解答，可以参考一下。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;35756277&#x2F;why-the-maximum-array-size-of-arraylist-is-integer-max-value-8&quot;&gt;Why the maximum array size of ArrayList is Integer.MAX_VALUE - 8?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;有参构造的扩容原理&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上面分析了调用&lt;strong&gt;无参构造器&lt;&#x2F;strong&gt;创建集合后，它底层的扩容原理，其实只要理解了之后。那么关于&lt;strong&gt;有参构造&lt;&#x2F;strong&gt;的扩容，就很容易理解了。&lt;&#x2F;p&gt;
&lt;p&gt;下面是它的有参构造器源码，前面也提到过。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * Constructs an empty list with the specified initial capacity.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;initialCapacity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;  the initial capacity of the list
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@throws &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;IllegalArgumentException if the specified initial capacity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *         is negative
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;public ArrayList(int initialCapacity) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    if (initialCapacity &amp;gt; 0) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        this.elementData = new Object[initialCapacity];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    } else if (initialCapacity == 0) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        this.elementData = EMPTY_ELEMENTDATA;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    } else {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        throw new IllegalArgumentException(&amp;quot;Illegal Capacity: &amp;quot;+initialCapacity);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码很容易理解，我们在调用该构造器进行初始化时传入一个初始大小&lt;code&gt;initialCapacity&lt;&#x2F;code&gt;作为数组的&lt;strong&gt;初始容量&lt;&#x2F;strong&gt;。如果该容量&lt;strong&gt;大于0，&lt;strong&gt;此时&lt;code&gt;elementData&lt;&#x2F;code&gt;数组会直接&lt;&#x2F;strong&gt;用该值作为数组的长度创建一个新的&lt;code&gt;Object&lt;&#x2F;code&gt;数组，以完成初始化&lt;&#x2F;strong&gt;。否则如果传入的初始值为&lt;code&gt;0&lt;&#x2F;code&gt;，会对&lt;code&gt;elementData&lt;&#x2F;code&gt;进行一个常量赋值操作，将数组初始化为&lt;code&gt;EMPTY_ELEMENTDATA&lt;&#x2F;code&gt;大小的数组，该常量定义如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;EMPTY_ELEMENTDATA &lt;&#x2F;span&gt;&lt;span&gt;= {};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;也就是创建一个空数组。如果不在以上两种情况之外的，直接抛一个&lt;strong&gt;IllegalArgumentException&lt;&#x2F;strong&gt;异常结束。但是一般情况下，既然我们决定调用了该构造器，一般不会直接甩个&lt;code&gt;0&lt;&#x2F;code&gt;进去，这样做的意义不大。&lt;&#x2F;p&gt;
&lt;p&gt;在初始化完成后，进入添加方法，方法会先对现有的数组容量进行检查，如果发现所&lt;strong&gt;需最小容量大于当前初始化传入的容量&lt;&#x2F;strong&gt;，则会先进入&lt;code&gt;grow()&lt;&#x2F;code&gt;方法完成扩容，这里扩容不会进入第一个&lt;code&gt;if&lt;&#x2F;code&gt;判断，因为初始化传入的&lt;code&gt;elementData&lt;&#x2F;code&gt;&lt;strong&gt;必然是大于0的&lt;&#x2F;strong&gt;，程序会直接执行源码中的&lt;strong&gt;int newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; 1);&lt;strong&gt;这行逻辑，&lt;strong&gt;直接采取1.5倍扩容的机制&lt;&#x2F;strong&gt;对数组进行扩容后，将扩容后的整个数组空间直接复制一份，该操作会在原有元素的基础上追加扩容部分的空间，&lt;strong&gt;该部分的值默认使用null来填充&lt;&#x2F;strong&gt;，这些和前面分析&lt;&#x2F;strong&gt;无参构造扩容&lt;&#x2F;strong&gt;时候是一样的。此时再返回添加方法内部执行添加，添加成功之后之前扩容的&lt;code&gt;null&lt;&#x2F;code&gt;部分会被刚添加的元素取代，以此类推，直到下一次容量不够时，又再一次触发&lt;code&gt;1.5&lt;&#x2F;code&gt;b倍的扩容机制。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity) {
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity = elementData.length;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; newCapacity = oldCapacity + (oldCapacity &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(newCapacity - minCapacity &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;     newCapacity = minCapacity;
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(newCapacity - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_ARRAY_SIZE &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;     newCapacity = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hugeCapacity&lt;&#x2F;span&gt;&lt;span&gt;(minCapacity);
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; minCapacity is usually close to size, so this is a win:
&lt;&#x2F;span&gt;&lt;span&gt; elementData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copyOf&lt;&#x2F;span&gt;&lt;span&gt;(elementData, newCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;实例演示&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过一个具体的例子，来解释帮助理解上面所说的扩容原理(无参构造)。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无参构造器&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;假设我们调用 了&lt;code&gt;ArrayList()&lt;&#x2F;code&gt;对集合&lt;code&gt;list&lt;&#x2F;code&gt;进行了初始化并尝试向其中添加元素，下面模拟这个大致过程：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;初始化完成，创建一个空的对象数组&lt;code&gt;elementData[] = {}&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;进入&lt;code&gt;add()&lt;&#x2F;code&gt;方法，根据当前添加元素所需空间对已有空间进行判断，显然我们添加第一个元素时，&lt;code&gt;minCapacity=1,&lt;&#x2F;code&gt;而&lt;code&gt;elementData=0。&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;此时不忙着执行添加，而是调用&lt;code&gt;ensureCapacityInternal()&lt;&#x2F;code&gt;方法：
&lt;ol&gt;
&lt;li&gt;该方法发现，初始化的&lt;code&gt;elementData=DEFAULTCAPACITY_EMPTY_ELEMENTDATA&lt;&#x2F;code&gt;，则执行一个&lt;code&gt;Math.max()&lt;&#x2F;code&gt;方法，该方法直接将&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值改为&lt;code&gt;10&lt;&#x2F;code&gt;。此时我们的&lt;code&gt;minCapacity=10&lt;&#x2F;code&gt;,而&lt;code&gt;elementData&lt;&#x2F;code&gt;还是&lt;code&gt;0&lt;&#x2F;code&gt;；&lt;&#x2F;li&gt;
&lt;li&gt;进入**&lt;code&gt;ensureExplicitCapacity()&lt;&#x2F;code&gt;**方法，满足判断条件发现，&lt;strong&gt;所需最小容量&amp;gt;当前容量&lt;&#x2F;strong&gt;，需要扩容，触发&lt;code&gt;grow()&lt;&#x2F;code&gt;方法。
&lt;ol&gt;
&lt;li&gt;检查并记录&lt;code&gt;elementData&lt;&#x2F;code&gt;的长度，发现此时该值为&lt;code&gt;0&lt;&#x2F;code&gt;，&lt;strong&gt;由于0的1.5倍还是0，此时扩容算法无意义不执行。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;进入第一个&lt;code&gt;if&lt;&#x2F;code&gt;判断，发现条件满足，直接将&lt;code&gt;minCapacity&lt;&#x2F;code&gt;的值赋给一个新的变量&lt;code&gt;newCapacity=10&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;执行数组的&lt;code&gt;copyOf()&lt;&#x2F;code&gt;方法，将会开辟一个容量为&lt;code&gt;10&lt;&#x2F;code&gt;的数组。&lt;&#x2F;li&gt;
&lt;li&gt;程序跳回&lt;code&gt;add()&lt;&#x2F;code&gt;方法，执行元素的添加。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;add()&lt;&#x2F;code&gt;方法执行结束。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;也就是说，如果我们调用无参构造器初始化集合，首次扩容并不会按照&lt;code&gt;1.5&lt;&#x2F;code&gt;倍的机制来，而是直接给你开一个大小为&lt;code&gt;10&lt;&#x2F;code&gt;的数组，只有当这&lt;code&gt;10&lt;&#x2F;code&gt;个空间全部用完之后，之后的每一次扩容，就都会采用&lt;code&gt;1.5&lt;&#x2F;code&gt;倍的机制进行扩容，因此首次调用的方法栈是比较绕的，但是从第二次开始，或者使用有参构造器初始化的时候就会少一些判断，空间不够，直接开始&lt;code&gt;1.5&lt;&#x2F;code&gt;倍扩容机制走起。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;h5 id=&quot;-4&quot;&gt;1.5倍扩容怎么算？&lt;&#x2F;h5&gt;
&lt;blockquote&gt;
&lt;p&gt;假设当前容量值为&lt;code&gt;8&lt;&#x2F;code&gt;，下一次扩容的值就是&lt;code&gt;12&lt;&#x2F;code&gt;，算法过程很简单：&lt;&#x2F;p&gt;
&lt;p&gt;12 = 8+8&#x2F;2&lt;&#x2F;p&gt;
&lt;p&gt;= 8+4&lt;&#x2F;p&gt;
&lt;p&gt;=12&lt;&#x2F;p&gt;
&lt;p&gt;只不过，在源代码中，算法使用右移&lt;code&gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt;代替除法，要知道，&lt;strong&gt;位运算的速度是远快于四则运算的&lt;&#x2F;strong&gt;。由此，如果需要再次扩容的话，&lt;code&gt;12&lt;&#x2F;code&gt;的容量会扩容为&lt;code&gt;12+6 = 18&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;vector&quot;&gt;&lt;code&gt;Vector&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;-5&quot;&gt;基本结构&lt;&#x2F;h5&gt;
&lt;p&gt;&lt;code&gt;Vector&lt;&#x2F;code&gt;类的定义，它实现自&lt;code&gt;List&lt;&#x2F;code&gt;接口。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;AbstractList&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RandomAccess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cloneable&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Serializable
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它的底层实现也是基于对象数组，它由&lt;code&gt;protected&lt;&#x2F;code&gt;修饰符修饰：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; elementData;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Vector&lt;&#x2F;code&gt;是线程安全的，它的操作方法都有&lt;code&gt;synchronized&lt;&#x2F;code&gt;修饰，该关键字可以实现线程同步和互斥，所以他是线程安全的。比如其源码中的&lt;code&gt;indexOf()&lt;&#x2F;code&gt;方法，因此，一般在开发中，如果有线程安全的需要，可以考虑使用&lt;code&gt;Vector&lt;&#x2F;code&gt;。当然，这也并非是必须的，关于线程安全的集合或者说实现，还有专门的类去管理，&lt;code&gt;Vector&lt;&#x2F;code&gt;在&lt;code&gt;JDK1.0&lt;&#x2F;code&gt;版本中就有的，算是一个老前辈了，尽管它线程安全，但也不一定就是最佳的选择。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public synchronized int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;indexOf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; o, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; index) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(o == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = index ; i &amp;lt; elementCount ; i++)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(elementData[i]==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = index ; i &amp;lt; elementCount ; i++)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(o.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(elementData[i]))
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;-6&quot;&gt;源码分析&lt;&#x2F;h5&gt;
&lt;h6 id=&quot;-7&quot;&gt;&lt;strong&gt;扩容机制&lt;&#x2F;strong&gt;&lt;&#x2F;h6&gt;
&lt;p&gt;&lt;strong&gt;默认10满后，按照2倍扩容。如果指定大小，则每次按2倍扩容。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;创建一个无参的vector之后，它会默认直接给你一个大小为10的空间。直截了当。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接着执行添加操作，跳转到&lt;code&gt;add()&lt;&#x2F;code&gt;方法(这里就不再提自动装箱的操作了)，源码如下,咋一看是不是和前面分析的&lt;code&gt;ArrayList&lt;&#x2F;code&gt;的源码如出一辙？除了一个&lt;code&gt;modCount++&lt;&#x2F;code&gt;之外，还是会在添加元素之前先执行一个名为&lt;code&gt;ensureCapacityHelper&lt;&#x2F;code&gt;的方法，基于前面&lt;code&gt;ArrayList&lt;&#x2F;code&gt;源码的阅读理解，这里不用多想也能猜到，这个方法的作用，无非就是对目前的数组容量进行判断，看看是不是需要扩容。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public synchronized boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e) {
&lt;&#x2F;span&gt;&lt;span&gt;    modCount++;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensureCapacityHelper&lt;&#x2F;span&gt;&lt;span&gt;(elementCount + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    elementData[elementCount++] = e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;进入&lt;code&gt;ensureCapacityHelper&lt;&#x2F;code&gt;的源码看看,可以看到这实现和&lt;code&gt;ArrayList&lt;&#x2F;code&gt;中的实现几乎一样，还是判断最小所需空间和当前数组的容量关系，显然，这里&lt;code&gt;elementData=10,&lt;&#x2F;code&gt;而&lt;code&gt;minCapacity=1&lt;&#x2F;code&gt;，&lt;strong&gt;不满足扩容的条件&lt;&#x2F;strong&gt;，因此这里不会进入&lt;code&gt;grow()&lt;&#x2F;code&gt;方法。直接返回&lt;code&gt;add()&lt;&#x2F;code&gt;执行元素的添加，一次添加执行结束。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ensureCapacityHelper&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(minCapacity - elementData.length &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span&gt;(minCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;下面我们假设，要添加第&lt;code&gt;11&lt;&#x2F;code&gt;个元素，此时原来的10个空间已经不够，自然会触发扩容机制，下面是该扩容方法的实现源码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 扩容方法
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grow&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; minCapacity) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; overflow-conscious code
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldCapacity = elementData.length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; newCapacity = oldCapacity + ((capacityIncrement &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) ? capacityIncrement : oldCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(newCapacity - minCapacity &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        newCapacity = minCapacity;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(newCapacity - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_ARRAY_SIZE &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        newCapacity = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hugeCapacity&lt;&#x2F;span&gt;&lt;span&gt;(minCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;    elementData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Arrays&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;copyOf&lt;&#x2F;span&gt;&lt;span&gt;(elementData, newCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 关于capacityIncrement的定义：
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * The amount by which the capacity of the vector is automatically
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * incremented when its size becomes greater than its capacity.  If
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * the capacity increment is less than or equal to zero, the capacity
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * of the vector is doubled each time it needs to grow.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@serial
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;     *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;    protected int capacityIncrement;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;根据源码了解到，它会先将&lt;code&gt;elementData&lt;&#x2F;code&gt;的长度放到一个名为&lt;code&gt;oldCapacity&lt;&#x2F;code&gt;的变量中并创建一个新的容量&lt;code&gt;newCapacity&lt;&#x2F;code&gt;,该变量的值就是扩容的核心原理，其中&lt;code&gt; int newCapacity = oldCapacity + ((capacityIncrement &amp;gt; 0) ? capacityIncrement : oldCapacity)&lt;&#x2F;code&gt;这段三元表达式会先判断&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;的值是否&lt;code&gt;&amp;gt;0&lt;&#x2F;code&gt;,如果成立，那么&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;的值保持不变，那么整个表达式就是&lt;code&gt;newCapacity = oldCapacity+capacityIncrement&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;否则将会是&lt;code&gt;newCapacity =oldCapacity+oldCapactity&lt;&#x2F;code&gt;,也就&lt;code&gt;newCapacity &lt;&#x2F;code&gt;会&lt;strong&gt;变为原来两倍的容量，&lt;strong&gt;最后依旧是采用&lt;code&gt;copyOf()&lt;&#x2F;code&gt;方法将扩容后的空间复制到原空间，完成扩容。关于其中两个&lt;code&gt;if&lt;&#x2F;code&gt;判断的逻辑和之前对&lt;code&gt;ArrayList&lt;&#x2F;code&gt;的分析是类似的，不再赘述。通过这个源码也发现了，这个&lt;code&gt;2&lt;&#x2F;code&gt;倍扩容的算法中，有一个名为&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;的&lt;&#x2F;strong&gt;容量增量&lt;&#x2F;strong&gt;，具体作用面会在下面有参构造器中进行分析。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;有参构造器源码分析&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;该构造器的源码如下，构造器是有两个参数的，其中一个便是上面提到的容量增量参数&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; initialCapacity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; capacityIncrement) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(initialCapacity &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;throw new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;IllegalArgumentException&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Illegal Capacity: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+
&lt;&#x2F;span&gt;&lt;span&gt;                                           initialCapacity);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.elementData = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;[initialCapacity];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;.capacityIncrement = capacityIncrement;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;方法体首先会先调用父类的无参构造。如果我们不指定&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;的值，它默认是&lt;code&gt;0&lt;&#x2F;code&gt;，也就是&lt;strong&gt;无增量&lt;&#x2F;strong&gt;，一般在调用无参构造器时就是属于这种情况，**在没有明确容量增量时，扩容会按照原容量的2两倍进行，**如果指定具体的值，我们在&lt;code&gt;grow()&lt;&#x2F;code&gt;方法中看到，&lt;code&gt;  int newCapacity = oldCapacity + ((capacityIncrement &amp;gt; 0) ? capacityIncrement : oldCapacity);&lt;&#x2F;code&gt;这个表达式将产生一个新的容量值，&lt;strong&gt;该值的大小由原来的容量+指定的容量增量决定&lt;&#x2F;strong&gt;。那么可能会开始疑惑， 既然说了是&lt;code&gt;2&lt;&#x2F;code&gt;倍扩容，那么加一个容量增量算怎么回事？&lt;&#x2F;p&gt;
&lt;p&gt;如果指定了该增量的值，不就改变了2倍扩容的机制了吗？其实不完全是，在&lt;code&gt;vector&lt;&#x2F;code&gt;源码中，其实存在三个构造器，上面这个便是可以指定扩容增量的构造器，如果你不需要指定第二个参数，那么还可以看到，它还有一个普通的带一个参数的构造，源码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; initialCapacity) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;(initialCapacity, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;该构造器尽管只需要一个参数，但它在创建之后会默认给&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;赋值为0，这也就是不管你是空参构造还是带参构造对&lt;code&gt;Vector&lt;&#x2F;code&gt;进行初始化，在扩容时都会用到&lt;code&gt;capacityIncrement&lt;&#x2F;code&gt;这样一个参数，这也是扩容算法中三元表达式的意义，&lt;strong&gt;你可以不写，但我必须得用&lt;&#x2F;strong&gt;，所以才会有默认的&lt;code&gt;0&lt;&#x2F;code&gt;,这是不冲突的。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*无参构造*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt; vector = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*指定一个参数：默认为集合的初始大小*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt; vector2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*指定两个参数：依次时集合大小和扩容时的容量增量*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt; vector3= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Vector&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;linkedlist&quot;&gt;&lt;code&gt;LinkedList&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;-8&quot;&gt;基本结构&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LinkedList&lt;&#x2F;code&gt;底层实现采用了&lt;strong&gt;双向链表&lt;&#x2F;strong&gt;和&lt;strong&gt;双端队列&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;可以添加任意元素且元素可以重复(因为实现自List接口)，同时包括&lt;code&gt;null&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;非线程安全的集合，没有实现同步。&lt;&#x2F;li&gt;
&lt;li&gt;在其中维护的两个属性&lt;code&gt;first&lt;&#x2F;code&gt;和&lt;code&gt;last&lt;&#x2F;code&gt;分别指向首尾节点，&lt;code&gt;prev&lt;&#x2F;code&gt;指向前驱节点，&lt;code&gt;next&lt;&#x2F;code&gt;指向后继节点。&lt;&#x2F;li&gt;
&lt;li&gt;因此&lt;code&gt;LinkedList&lt;&#x2F;code&gt;的元素&lt;strong&gt;删除和添加的操作效率相对较高&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h5 id=&quot;-9&quot;&gt;源码分析&lt;&#x2F;h5&gt;
&lt;p&gt;[待更新……]&lt;&#x2F;p&gt;
&lt;h4 id=&quot;-10&quot;&gt;如何选择&lt;&#x2F;h4&gt;
&lt;blockquote&gt;
&lt;p&gt;如何选择使用&lt;code&gt;ArrayList&lt;&#x2F;code&gt;和&lt;code&gt;LinkedList&lt;&#x2F;code&gt;?根据我们实际的使用场景或者需求&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;如果涉及改查操作比较多，建议&lt;code&gt;ArrayList&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;如果增删操作比较多，建议&lt;code&gt;LinkedList&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;一般来说，在程序中&lt;code&gt;80%~90%&lt;&#x2F;code&gt;都是查询操作，因此大部分情况下会选择使用&lt;code&gt;ArrayList&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;当然，选择哪一个并非一成不变，在实际的项目中，甚至可能出现&lt;code&gt;ArrayList&lt;&#x2F;code&gt;和&lt;code&gt;LinkedList&lt;&#x2F;code&gt;同时使用的情况，也是正常的，所以要求最好都会使用。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;set&quot;&gt;&lt;code&gt;Set&lt;&#x2F;code&gt;接口&lt;&#x2F;h4&gt;
&lt;p&gt;下面主要讲解&lt;code&gt;Set&lt;&#x2F;code&gt;子接口下的主要实现类。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;常用方法和实现&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;Set.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Set的基本介绍&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无序(元素的添加与取出的顺序不一致)，无索引。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意理解这里的无序的含义，并不是说，每一次取出的顺序都是随机的，而是指当执行了一次取出之后，今后的每一次相同的操作，它取出的元素顺序都与第一次相同，但&lt;strong&gt;这个顺序又和添加进去的顺序不保持一致&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;不允许重复元素。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;还有一点，由于它是&lt;code&gt;Collection&lt;&#x2F;code&gt;的子接口，自然也支持其父接口中的特性，比如迭代对象，增强for等等。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;hashset&quot;&gt;&lt;code&gt;HashSet&lt;&#x2F;code&gt;&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;-11&quot;&gt;基本结构&lt;&#x2F;h5&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;HashSet&lt;&#x2F;code&gt;作为&lt;code&gt;Set&lt;&#x2F;code&gt;典型的实现类之一，拥有&lt;code&gt;Set&lt;&#x2F;code&gt;的全部属性，这里不再赘述。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h5 id=&quot;-12&quot;&gt;源码解读&lt;&#x2F;h5&gt;
&lt;h6 id=&quot;-13&quot;&gt;初始化与基本原理&lt;&#x2F;h6&gt;
&lt;p&gt;我们先看一下&lt;code&gt;HashSet&lt;&#x2F;code&gt;的基本用法，其实，&lt;code&gt;HashSet&lt;&#x2F;code&gt;在实现上，就是一个&lt;code&gt;HashMap&lt;&#x2F;code&gt;,这一点可以从它的构造器说起。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; hashSet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;以下是&lt;code&gt;HashSet&lt;&#x2F;code&gt;的无参构造器源码，可以看到，当我们创建一个&lt;code&gt;HashSet&lt;&#x2F;code&gt;对象时，它在底层直接&lt;code&gt;new&lt;&#x2F;code&gt;了一个&lt;code&gt;HashMap&lt;&#x2F;code&gt;，这又不得不说一下&lt;code&gt;HashMap&lt;&#x2F;code&gt;的底层，它是由&lt;strong&gt;数组+链表+红黑树&lt;&#x2F;strong&gt;构成，所以相对来说是比较复杂的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220323200228.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    map = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;换句话说，要分析&lt;code&gt;HashSet&lt;&#x2F;code&gt;的源码，其实就是分析&lt;code&gt;HashMap&lt;&#x2F;code&gt;的原理。&lt;code&gt;HashSet&lt;&#x2F;code&gt;一个明显的特点就是不能添加重复的元素，但这里的&lt;strong&gt;重复&lt;&#x2F;strong&gt;也许不是你想象中的那么简单。&lt;&#x2F;p&gt;
&lt;p&gt;下面开始分析一下其中的添加元素的&lt;code&gt;add()&lt;&#x2F;code&gt;方法在底层是如何实现的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;添加一个元素时，会先得到一个&lt;code&gt;hash&lt;&#x2F;code&gt;值，根据该值转成一个索引值。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;找到存储数据表&lt;code&gt;table&lt;&#x2F;code&gt;，检查该索引是否已在&lt;code&gt;table&lt;&#x2F;code&gt;中存在有元素&lt;&#x2F;strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;如果没有，直接将该元素加入。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;如果有，会调用&lt;code&gt;equals&lt;&#x2F;code&gt;方法进行比较操作，如果比较结果为&lt;code&gt;true&lt;&#x2F;code&gt;,添加失败，否则，将会在末尾添加元素。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;在&lt;code&gt;Java8&lt;&#x2F;code&gt;中，如果一条链表的元素个数达到&lt;code&gt;TREEIFY_THRESHOLD&lt;&#x2F;code&gt;且&lt;code&gt;table&lt;&#x2F;code&gt;的大小&lt;code&gt;&amp;gt;=&lt;&#x2F;code&gt;MIN_TREEIFY_CAPACITY,就会触发树化机制，即会由单链表结构转换为一棵红黑树。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;为例更好的理解它的执行过程和原理，我们按照下面这几行代码来讲解:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt; hashSet = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HashSet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;hashSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;hashSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;C++&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;hashSet.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Java&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hashSet=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+hashSet);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;代码逻辑很简单，就是向&lt;code&gt;HashSet&lt;&#x2F;code&gt;中添加三个元素，其中有&lt;strong&gt;两个元素是重复&lt;&#x2F;strong&gt;的，这是为了理解它底层是如何判断元素重复的。&lt;&#x2F;p&gt;
&lt;p&gt;执行代码，首先会进入&lt;code&gt;HashSet&lt;&#x2F;code&gt;的构造器，直接创建一个值为空的&lt;code&gt;HashMap&lt;&#x2F;code&gt;，这点在上面已经说过。进入&lt;code&gt;add()&lt;&#x2F;code&gt;方法，它的实现源码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;HashSet中add方法的源码实现
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(e, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PRESENT&lt;&#x2F;span&gt;&lt;span&gt;)==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;方法很简单，直接调用了&lt;code&gt;map&lt;&#x2F;code&gt;的&lt;code&gt;put()&lt;&#x2F;code&gt;方法,注意到，这个方法除了我们需要添加的元素&lt;code&gt;e&lt;&#x2F;code&gt;之外，它还有一个名为&lt;code&gt;PRESENT&lt;&#x2F;code&gt;的常量参数，关于这个参数的理解，源码中是这样介绍的：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Dummy value to associate with an Object in the backing Map
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PRESENT &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;PRESENT&lt;&#x2F;code&gt;其实是一个&lt;code&gt;static final&lt;&#x2F;code&gt;修饰的对象，在上面的方法中作为&lt;code&gt;put(k,v)&lt;&#x2F;code&gt;中&lt;code&gt;value&lt;&#x2F;code&gt;的占位，并没有其他实际的作用。这里不必深究。不知道有没有注意到，&lt;code&gt;add&lt;&#x2F;code&gt;方法中将&lt;code&gt;map.put(e,PRESENT)==null&lt;&#x2F;code&gt;作为返回值，为什么这里会是&lt;code&gt;null&lt;&#x2F;code&gt;呢？这和&lt;code&gt;HashMap&lt;&#x2F;code&gt;底层实现有关系，我们先继续往下，后面自然就会明白了。下面进入&lt;code&gt;put&lt;&#x2F;code&gt;方法内部看看。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;HashSet中map.put(e,PERSENT)方法源码
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; value) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;putVal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;(key), key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;方法中有一个&lt;code&gt;putVal&lt;&#x2F;code&gt;的方法，可以看到其中的第一个参数&lt;code&gt;hash(key)&lt;&#x2F;code&gt;表示通过这个方法获取&lt;code&gt;key&lt;&#x2F;code&gt;的&lt;code&gt;hash&lt;&#x2F;code&gt;值。这里的&lt;code&gt;key&lt;&#x2F;code&gt;也就是我们传入的待添加的元素，进入该方法：果然，&lt;code&gt;hash&lt;&#x2F;code&gt;方法的作用就是计算&lt;code&gt;key&lt;&#x2F;code&gt;的&lt;code&gt;hash值&lt;&#x2F;code&gt;，算法都在这条三元表达式当中了，可以简单看一下。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;HashMap中的hash()方法实现
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; key) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; h;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(key == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: (h = key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hashCode&lt;&#x2F;span&gt;&lt;span&gt;()) ^ (h &amp;gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;核心算法&lt;code&gt;(key == null) ? 0 : (h = key.hashCode()) ^ (h &amp;gt;&amp;gt;&amp;gt; 16)&lt;&#x2F;code&gt;，意思就是如果传入的&lt;code&gt;key&lt;&#x2F;code&gt;为&lt;code&gt;null&lt;&#x2F;code&gt;,那么直接返回0，也就是不执行任何实际操作。&lt;strong&gt;否则会使用&lt;code&gt;hashCode()&lt;&#x2F;code&gt;方法获取&lt;code&gt;key&lt;&#x2F;code&gt;的哈希码和无符号右移16位之后的值进行一个异或操作&lt;&#x2F;strong&gt;，将该异或的结果返回作为&lt;code&gt;key&lt;&#x2F;code&gt;最终的&lt;code&gt;hash&lt;&#x2F;code&gt;值。这样作主要是为了保证&lt;strong&gt;高16位和低16未的特征，减少碰撞，减低&lt;code&gt;hash&lt;&#x2F;code&gt;冲突的几率&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;注意，&lt;code&gt;hash&lt;&#x2F;code&gt;和&lt;code&gt;hashCode&lt;&#x2F;code&gt;并不是一回事。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的&lt;code&gt;hash&lt;&#x2F;code&gt;仅仅是用来在&lt;code&gt;HashMap&lt;&#x2F;code&gt;中计算&lt;code&gt;key&lt;&#x2F;code&gt;对应的散列码。它的算法中用到了&lt;code&gt;hashCode()&lt;&#x2F;code&gt;这个方法，&lt;code&gt;hashCode&lt;&#x2F;code&gt;是在&lt;code&gt;Objct&lt;&#x2F;code&gt;中定义的，用来获取每个元素对应的散列值，&lt;strong&gt;底层使用的C语言作为实现&lt;&#x2F;strong&gt;,属于&lt;code&gt;native&lt;&#x2F;code&gt;方法。换句话说，使用&lt;code&gt;hashCode()&lt;&#x2F;code&gt;方法可以计算&lt;code&gt;Java&lt;&#x2F;code&gt;中每一个元素的一个哈希值。而&lt;code&gt;hash()&lt;&#x2F;code&gt;方法在这里的作就相对局限，使用的算法也相对简单很多，具体的关于&lt;code&gt;hash和hashCode()&lt;&#x2F;code&gt;的内容，可以自己研究，这里不作展开。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;理解了&lt;code&gt;hash&lt;&#x2F;code&gt;的计算方式之后，继续往后看，在获取到&lt;code&gt;key&lt;&#x2F;code&gt;的&lt;code&gt;hash&lt;&#x2F;code&gt;，方法会返回进入到&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法中，这是整个添加操作的底层实现的核心源码，也是一个难点。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;putVal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; hash, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; onlyIfAbsent,
&lt;&#x2F;span&gt;&lt;span&gt;               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; evict) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; tab; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((tab = table) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| (n = tab.length) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        n = (tab = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;()).length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((p = tab[i = (n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; hash]) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        tab[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span&gt;(hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; k;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(p.hash == hash &amp;amp;&amp;amp;((k = p.key) == key || (key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(k))))
&lt;&#x2F;span&gt;&lt;span&gt;            e = p;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(p instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            e = ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)p).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;putTreeVal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, tab, hash, key, value);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; binCount = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; ; ++binCount) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((e = p.next) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    p.next = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span&gt;(hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(binCount &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span&gt;(tab, hash);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e.hash == hash &amp;amp;&amp;amp;((k = e.key) == key || (key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(k))))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                p = e;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; existing mapping for key
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; oldValue = e.value;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!onlyIfAbsent || oldValue == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                e.value = value;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldValue;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    ++modCount;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(++size &amp;gt; threshold)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span&gt;(evict);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;在方法体的开始，定义了几个局部变量，以备后面使用(废话)。继续看下面的代码，这是方法体的第一个if判断，主要的作用是判断并创建一个&lt;code&gt;table&lt;&#x2F;code&gt;，注意，这里的&lt;code&gt;table&lt;&#x2F;code&gt;是一个数组+链表形式的结构，也就是数组每一个索引出的元素都是一条单链表的形式。这一点前面有提到。具体的逻辑是，&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((tab = table) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| (n = tab.length) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;     n = (tab = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;()).length;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先，对于&lt;code&gt;if&lt;&#x2F;code&gt;中的&lt;code&gt;(tab = table) == null &lt;&#x2F;code&gt;条件，程序先将&lt;code&gt;table&lt;&#x2F;code&gt;赋值给&lt;code&gt;tab&lt;&#x2F;code&gt;变量，判断集合中是否已经存在&lt;code&gt;table&lt;&#x2F;code&gt;数据，或者说该数组的长度是否为&lt;code&gt;0&lt;&#x2F;code&gt;。如果上述条件有一个成立，则表示&lt;strong&gt;这是第一次向集合中添加元素&lt;&#x2F;strong&gt;，&lt;code&gt;hashMap&lt;&#x2F;code&gt;会自动调用&lt;code&gt;resize()&lt;&#x2F;code&gt;方法对&lt;code&gt;table[]&lt;&#x2F;code&gt;进行首次扩容，以用来存放接下来的元素，所以，明白了这个判断的作用，也就不难推测，为什么这条&lt;code&gt;if&lt;&#x2F;code&gt;判断语句会放在方法的开始了，也可以推测，只要不是首次添加元素，就不再会进入该判断，直接走后面的逻辑。那么现在的关注点就该转移到这个&lt;code&gt;resize()&lt;&#x2F;code&gt;方法中，看一下它的源码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; oldTab = table;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldCap = (oldTab == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) ? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: oldTab.length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; oldThr = threshold;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; newCap, newThr = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(oldCap &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(oldCap &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAXIMUM_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            threshold = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_VALUE&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldTab;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;((newCap = oldCap &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                 oldCap &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            newThr = oldThr &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; double threshold
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(oldThr &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; initial capacity was placed in threshold
&lt;&#x2F;span&gt;&lt;span&gt;        newCap = oldThr;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{               &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; zero initial threshold signifies using defaults
&lt;&#x2F;span&gt;&lt;span&gt;        newCap = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        newThr = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_LOAD_FACTOR &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(newThr == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; ft = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)newCap * loadFactor;
&lt;&#x2F;span&gt;&lt;span&gt;        newThr = (newCap &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; ft &amp;lt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span&gt;?
&lt;&#x2F;span&gt;&lt;span&gt;                  (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)ft : &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Integer&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAX_VALUE&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    threshold = newThr;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span&gt;({&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rawtypes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unchecked&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; newTab = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;[newCap];
&lt;&#x2F;span&gt;&lt;span&gt;    table = newTab;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(oldTab != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; j &amp;lt; oldCap; ++j) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((e = oldTab[j]) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                oldTab[j] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e.next == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    newTab[e.hash &amp;amp; (newCap - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)] = e;
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(e instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                    ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)e).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, newTab, j, oldCap);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; preserve order
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; loHead = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, loTail = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; hiHead = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, hiTail = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; next;
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                        next = e.next;
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((e.hash &amp;amp; oldCap) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(loTail == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                                loHead = e;
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;                                loTail.next = e;
&lt;&#x2F;span&gt;&lt;span&gt;                            loTail = e;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(hiTail == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                                hiHead = e;
&lt;&#x2F;span&gt;&lt;span&gt;                            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;                                hiTail.next = e;
&lt;&#x2F;span&gt;&lt;span&gt;                            hiTail = e;
&lt;&#x2F;span&gt;&lt;span&gt;                        }
&lt;&#x2F;span&gt;&lt;span&gt;                    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;((e = next) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(loTail != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                        loTail.next = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        newTab[j] = loHead;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(hiTail != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                        hiTail.next = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                        newTab[j + oldCap] = hiHead;
&lt;&#x2F;span&gt;&lt;span&gt;                    }
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; newTab;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那就看下它的扩容原理吧。首先呢，如前面说所，它开始就创建了一个&lt;code&gt;table[]&lt;&#x2F;code&gt;。将该数组的引用赋给&lt;code&gt;oldTab&lt;&#x2F;code&gt;,&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; oldTab = table;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意这里这个数组首次定义并非在这个方法中，而是在&lt;code&gt;HashMap&lt;&#x2F;code&gt;源码中有做的一个定义，&lt;strong&gt;它也是不可被序列化的&lt;&#x2F;strong&gt;。接着会先判断该&lt;code&gt;table&lt;&#x2F;code&gt;是否是首次创建，如果是，直接初始化为0，否则就是&lt;code&gt;oldTab&lt;&#x2F;code&gt;的大小，为什么会这么说呢，因为这个&lt;code&gt;resize()&lt;&#x2F;code&gt;方法可不只是执行这一次，在&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法的后续的逻辑中还会用到，也就是会出现再次扩容的情况，那么存在一个&lt;code&gt;oldTab&lt;&#x2F;code&gt;的值也就不难理解了吧。&lt;&#x2F;p&gt;
&lt;p&gt;如果&lt;code&gt;oldCap&amp;gt;0&lt;&#x2F;code&gt;，进一步判断它是否&lt;code&gt;&amp;gt;=&lt;&#x2F;code&gt;最大容量&lt;code&gt;MAXNUM_CAPACITY&lt;&#x2F;code&gt;,关于&lt;code&gt;MAXNUM_CAPACITY&lt;&#x2F;code&gt;的定义如下&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;MAXIMUM_CAPACITY定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果该条件成立，会给&lt;code&gt;threshod&lt;&#x2F;code&gt;重新赋一个新的容量值，即&lt;code&gt;Integer&lt;&#x2F;code&gt;的上限，反之进入下一个判断&lt;code&gt; ((newCap = oldCap &amp;lt;&amp;lt; 1) &amp;lt; MAXIMUM_CAPACITY &amp;amp;&amp;amp;oldCap &amp;gt;= DEFAULT_INITIAL_CAPACITY)&lt;&#x2F;code&gt;,将&lt;code&gt;oldCap&lt;&#x2F;code&gt;左移1位,也就是两倍的&lt;code&gt;oldCap&lt;&#x2F;code&gt;赋给一个新的变量&lt;code&gt;newCap&lt;&#x2F;code&gt;,如果该值小于&lt;code&gt;MAXNUM_CAPACITY&lt;&#x2F;code&gt;并且原来的容量&lt;code&gt;oldCap&lt;&#x2F;code&gt;大于等于初始默认容量值&lt;code&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;code&gt;的话，就将新的&lt;code&gt;newThr&lt;&#x2F;code&gt;扩为原来(&lt;code&gt;oldThr&lt;&#x2F;code&gt;)的两倍大小。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;DEFAULT_INITIAL_CAPACITY定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_INITIAL_CAPACITY &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; aka 16
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;1&amp;lt;&amp;lt;4等价于1X2^4=2x2x2x2=16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这里先对上面源码中涉及到的几个变量简单说明一下&lt;&#x2F;strong&gt;，&lt;strong&gt;不然频繁的&lt;code&gt;=&lt;&#x2F;code&gt;赋值操作一波又一波，可能会给整懵圈。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;oldCap&lt;&#x2F;code&gt;:数组原先(准备扩容之前)的容量。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;oldThr&lt;&#x2F;code&gt;：其实就是&lt;code&gt;threshold&lt;&#x2F;code&gt;的一个暂存局部变量，用来暂存&lt;code&gt;threshold&lt;&#x2F;code&gt;的值。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;threshold&lt;&#x2F;code&gt;：这是一个定义在&lt;code&gt;HashMap&lt;&#x2F;code&gt;的的全局变量(&lt;strong&gt;可以这么说，实际上&lt;code&gt;Java&lt;&#x2F;code&gt;中没有全局变量这种概念&lt;&#x2F;strong&gt;),它用来存放&lt;code&gt;table[]&lt;&#x2F;code&gt;的一个容量值，或者说&lt;strong&gt;阈值&lt;&#x2F;strong&gt;。所以最终决定是否需要扩容取决于这个全局变量来判断。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;newCap&lt;&#x2F;code&gt;:同理于&lt;code&gt;oldCap&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;继续回到最外层&lt;code&gt;if&lt;&#x2F;code&gt;判断的&lt;code&gt;else if&lt;&#x2F;code&gt;逻辑中，这里先是对&lt;code&gt;newThr&lt;&#x2F;code&gt;是否大于0作了判断，如果&lt;code&gt;&amp;gt;0&lt;&#x2F;code&gt;成立，那么新的容量&lt;code&gt;newCap&lt;&#x2F;code&gt;的值沿用&lt;code&gt;oldThr&lt;&#x2F;code&gt;,否则将会执行下面这段代码,&lt;code&gt;newCap&lt;&#x2F;code&gt;的值默认设置为&lt;code&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;code&gt;也就是&lt;code&gt;16&lt;&#x2F;code&gt;,并且&lt;code&gt;newThr&lt;&#x2F;code&gt;的值更新为&lt;code&gt;(int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);&lt;&#x2F;code&gt;。这里参与&lt;code&gt;*&lt;&#x2F;code&gt;运算的除了初始默认容量&lt;code&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;code&gt;外，还有一个重要的常量参数&lt;code&gt;DEFAULT_LOAD_FACTOR&lt;&#x2F;code&gt;，我们称为&lt;strong&gt;负载因子&lt;&#x2F;strong&gt;，换句话说，这个因子的值决定了你每次扩容的具体大小。它是默认值为&lt;code&gt;0.75&lt;&#x2F;code&gt;,也就是说当我们数组占用量达到本身容量的75%时，就会触发首次扩容(&lt;code&gt;resize&lt;&#x2F;code&gt;)操作。当然，最后还进行了强制类型转换为&lt;code&gt;int&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;所以不难理解，如果我们是首次使用&lt;code&gt;HashMap&lt;&#x2F;code&gt;进行&lt;code&gt;put&lt;&#x2F;code&gt;操作，方法会直接进入这一步进行初始化。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; zero initial threshold signifies using defaults
&lt;&#x2F;span&gt;&lt;span&gt;    newCap = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    newThr = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_LOAD_FACTOR &lt;&#x2F;span&gt;&lt;span&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;具体一点说，当阈值达到&lt;code&gt;16*0.75&lt;&#x2F;code&gt;时，也即是16大小的容量用掉了12个大小时就会触发首次&lt;code&gt;resize&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;这个&lt;strong&gt;负载因子&lt;&#x2F;strong&gt;不是固定不变的，而且有一点需要说明的是，这个&lt;code&gt;resize()&lt;&#x2F;code&gt;方法中，&lt;strong&gt;负载因子是可以手动传入的&lt;&#x2F;strong&gt;，这一点在&lt;code&gt;HashMap&lt;&#x2F;code&gt;的另一个构造方法中有体现，当然，这个后面再说。这里主要讲的还是无参构造器的执行原理，你需要理解&lt;code&gt;resize()&lt;&#x2F;code&gt;方法的两个主要作用，第一个就是上面巴拉巴拉这一堆，&lt;strong&gt;主要是用来对数组进行初始化工作&lt;&#x2F;strong&gt;(当然，你也可以理解为首次扩容，这只是一种说法而已，一般我们会将首次扩容称为初始化，因为其实&lt;strong&gt;扩容的概念是建立在已有容量的基础上的&lt;&#x2F;strong&gt;)，而此后再调用&lt;code&gt;resize()&lt;&#x2F;code&gt;就执行的是扩容工作了，但它的扩容工作可没有初始化这么简单。&lt;&#x2F;p&gt;
&lt;p&gt;但为了能更清晰的理解，我们还是继续首次&lt;code&gt;put&lt;&#x2F;code&gt;操作的主线进行分析。接着上面说，初始化结束之后，会得到一个初始的阈值&lt;code&gt;newThr=16&lt;&#x2F;code&gt;,并将该阈值重新赋给全局&lt;code&gt;threshold&lt;&#x2F;code&gt;保存。计算出&lt;code&gt;table[]&lt;&#x2F;code&gt;的一个初始大小之后，利用该值直接创建一个大小为&lt;code&gt;newCap&lt;&#x2F;code&gt;的新的&lt;code&gt;newTab&lt;&#x2F;code&gt;给&lt;code&gt;table&lt;&#x2F;code&gt;返回，有了这个&lt;code&gt;table&lt;&#x2F;code&gt;，我们就可以在里面存放元素了，比如存放一个字符串&lt;code&gt;Java&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;threshold = newThr;
&lt;&#x2F;span&gt;&lt;span&gt;@&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SuppressWarnings&lt;&#x2F;span&gt;&lt;span&gt;({&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rawtypes&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unchecked&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; newTab = (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;[newCap];
&lt;&#x2F;span&gt;&lt;span&gt;table = newTab;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但光是初始化一个16大小的&lt;code&gt;table&lt;&#x2F;code&gt;是远远不够的。我们知道，既然是数组里面存放元素，是需要一个索引的，根据这个索引去找到一个对应的位置，再将该元素覆盖上去，完成元素的添加。&lt;&#x2F;p&gt;
&lt;p&gt;所以我们先回到上一个方法&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法：接着上面切入进来的&lt;code&gt;resize()&lt;&#x2F;code&gt;方法之后讲解。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((tab = table) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| (n = tab.length) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    n = (tab = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;()).length;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;上面这两行代码，也就是我们上面刚刚讲完的初始化操作的部分。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;看一下，在对&lt;code&gt;table&lt;&#x2F;code&gt;进行了初始化，并计算得到&lt;code&gt;key&lt;&#x2F;code&gt;的&lt;code&gt;hash&lt;&#x2F;code&gt;之后，后续的代码逻辑分解：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((p = tab[i = (n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; hash]) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    tab[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span&gt;(hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这里就是根据&lt;code&gt;hash&lt;&#x2F;code&gt;值计算一个索引&lt;code&gt;i&lt;&#x2F;code&gt;。方法是&lt;code&gt;(n-1) &amp;amp; hash&lt;&#x2F;code&gt;,在获得索引之后，检查该索引位置的值&lt;code&gt;tab[i]&lt;&#x2F;code&gt;赋给变量&lt;code&gt;p&lt;&#x2F;code&gt;并判断是否为&lt;code&gt;null&lt;&#x2F;code&gt;，如果为&lt;code&gt;null&lt;&#x2F;code&gt;表示没有被使用，后面一句&lt;code&gt;tab[i] = newNode(hash, key, value, null);&lt;&#x2F;code&gt;直接将元素&lt;code&gt;key&lt;&#x2F;code&gt;存进去,当然，存入的元素除了我们自己传入的数据之外，还有计算出来的&lt;code&gt;hash&lt;&#x2F;code&gt;和一个&lt;code&gt;value&lt;&#x2F;code&gt;，传入&lt;code&gt;hash&lt;&#x2F;code&gt;主要是为了&lt;strong&gt;下一次计算，用来确定下次传入的值是否为重复元素。&lt;strong&gt;至于其中还有一个值为&lt;code&gt;null&lt;&#x2F;code&gt;的值，表示&lt;&#x2F;strong&gt;链表的下一个结点指向&lt;&#x2F;strong&gt;，当然，这里是首次&lt;code&gt;put&lt;&#x2F;code&gt;，所以&lt;code&gt;next&lt;&#x2F;code&gt;是不存在的，也就是&lt;code&gt;null&lt;&#x2F;code&gt;。当上面这段代码执行完毕之后，元素就被成功添加到&lt;code&gt;table&lt;&#x2F;code&gt;中了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;C:&#x2F;Users&#x2F;22170&#x2F;AppData&#x2F;Roaming&#x2F;Typora&#x2F;typora-user-images&#x2F;image-20220325162444469.png&quot; alt=&quot;image-20220325162444469&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过&lt;code&gt;debug&lt;&#x2F;code&gt;可以看到,&lt;code&gt;key&lt;&#x2F;code&gt;计算出的&lt;code&gt;hash=2301537&lt;&#x2F;code&gt;.那么这个索引就可以根据&lt;code&gt;(16-1)&amp;amp;2301537&lt;&#x2F;code&gt;计算出来，它的值是为&lt;code&gt;1&lt;&#x2F;code&gt;的，也就是数组中第二个位置的索引。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;C:&#x2F;Users&#x2F;22170&#x2F;AppData&#x2F;Roaming&#x2F;Typora&#x2F;typora-user-images&#x2F;image-20220325162819682.png&quot; alt=&quot;image-20220325162819682&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;元素添加之后，程序逻辑会直接执行到下面的代码&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;++modCount;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(++size &amp;gt; threshold)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span&gt;(evict);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中的&lt;code&gt;++modCount&lt;&#x2F;code&gt;我在&lt;code&gt;ArrayList&lt;&#x2F;code&gt;源码分析的文章中已经提过，他们的作用是一样的。判断&lt;code&gt;if (++size &amp;gt; threshold)&lt;&#x2F;code&gt;，如果添加元素之后的数组容量&lt;code&gt;&amp;gt;&lt;&#x2F;code&gt;目前的阈值&lt;code&gt;threshold&lt;&#x2F;code&gt;，会触发&lt;code&gt;resize()&lt;&#x2F;code&gt;。关于&lt;code&gt;afterNodeInsertion(evict);&lt;&#x2F;code&gt;方法，是&lt;code&gt;HashMap&lt;&#x2F;code&gt;留给它的子类去实现的一个方法，所以它是个空的方法。类似的方法还有：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Callbacks to allow LinkedHashMap post-actions
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p) { }
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; evict) { }
&lt;&#x2F;span&gt;&lt;span&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeRemoval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p) { }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接着&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法最后返回一个&lt;code&gt;null&lt;&#x2F;code&gt;作为方法的结束。&lt;strong&gt;所以还记得前面留的一个问题吗&lt;&#x2F;strong&gt;？在&lt;code&gt;HashSet&lt;&#x2F;code&gt;源码中的&lt;code&gt;add()&lt;&#x2F;code&gt;方法的方法体里面，它的返回值是判断是否为&lt;code&gt;null&lt;&#x2F;code&gt;,再看一下吧还是。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public boolean &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span&gt; e) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; map.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;put&lt;&#x2F;span&gt;&lt;span&gt;(e, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PRESENT&lt;&#x2F;span&gt;&lt;span&gt;)==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;表示执行&lt;code&gt;HashSet&lt;&#x2F;code&gt;中的&lt;code&gt;add()&lt;&#x2F;code&gt;方法添加一个元素，它底层实际上调用了&lt;code&gt;HashMap&lt;&#x2F;code&gt;中的&lt;code&gt;put()&lt;&#x2F;code&gt;方法去实现，能否添加成功的依据就是该&lt;code&gt;put()&lt;&#x2F;code&gt;方法是否返回&lt;code&gt;null&lt;&#x2F;code&gt;,如果是，&lt;code&gt;HashSet&lt;&#x2F;code&gt;的&lt;code&gt;add()&lt;&#x2F;code&gt;方法就返回一个&lt;code&gt;true&lt;&#x2F;code&gt;,最终表示着我们利用&lt;code&gt;HashSet&lt;&#x2F;code&gt;成功的添加了一个元素。否则，添加失败！！&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h6 id=&quot;-14&quot;&gt;去重原理&lt;&#x2F;h6&gt;
&lt;blockquote&gt;
&lt;p&gt;在理解了&lt;code&gt;HashMap&lt;&#x2F;code&gt;底层&lt;code&gt;table[]&lt;&#x2F;code&gt;的初始化逻辑之后，当我们向其中&lt;code&gt;put()&lt;&#x2F;code&gt;第二个元素时，它的底层是如何判断元素是否重复的呢？下面就以这个问题为主线开始分析。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;由于同样是添加的操作，前面的的几个步骤就不再赘述，比如底层调用&lt;code&gt;map.put()&lt;&#x2F;code&gt;，然后是&lt;code&gt;hash&lt;&#x2F;code&gt;的计算。直接进入&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法开始看。这里再贴一遍它的源码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;putVal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; hash, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; onlyIfAbsent,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;boolean&lt;&#x2F;span&gt;&lt;span&gt; evict) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; tab; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, i;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((tab = table) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| (n = tab.length) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        n = (tab = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;()).length;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((p = tab[i = (n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; hash]) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        tab[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span&gt;(hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; k;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(p.hash == hash &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            ((k = p.key) == key || (key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(k))))
&lt;&#x2F;span&gt;&lt;span&gt;            e = p;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(p instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            e = ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)p).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;putTreeVal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, tab, hash, key, value);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; binCount = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; ; ++binCount) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((e = p.next) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                    p.next = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span&gt;(hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(binCount &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span&gt;(tab, hash);
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                }
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e.hash == hash &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                    ((k = e.key) == key || (key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(k))))
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;                p = e;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; existing mapping for key
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; oldValue = e.value;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!onlyIfAbsent || oldValue == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                e.value = value;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldValue;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    ++modCount;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(++size &amp;gt; threshold)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span&gt;(evict);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;鉴于前面我们在添加第一个元素&lt;code&gt;Java&lt;&#x2F;code&gt;的时候，已经完成了&lt;code&gt;table[]&lt;&#x2F;code&gt;的初始化工作，所以下面这段代码不会再执行;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((tab = table) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| (n = tab.length) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) n = (tab = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;()).length;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;而是直接带着前面计算得来得&lt;code&gt;Hash&lt;&#x2F;code&gt;通过与之前同样算法计算出元素&lt;code&gt;C++&lt;&#x2F;code&gt;(假设这是我们第二个添加的元素)在数组中的索引，代码如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((p = tab[i = (n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; hash]) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) tab[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span&gt;(hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;注意哈，这里的&lt;code&gt;n&lt;&#x2F;code&gt;在初始化的时候已经计算出来，还是等于16的，改变的是&lt;code&gt;hash&lt;&#x2F;code&gt;值，假设为&lt;code&gt;65762&lt;&#x2F;code&gt;。那么根据上述算法计算得到它的索引为&lt;code&gt;15&amp;amp;65762=2&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;好了，既然索引也有了，并且我们添加的这个元素和第一个元素&lt;code&gt;Java&lt;&#x2F;code&gt;明显是不相等的，所以不会进入到&lt;code&gt;else if&lt;&#x2F;code&gt;判断中，因为&lt;code&gt;if&lt;&#x2F;code&gt;已经成立，后面的逻辑就是将该元素值直接添加到数组中索引为&lt;code&gt;2&lt;&#x2F;code&gt;的位置，当然，元素也是一个&lt;code&gt;Node&amp;lt;k,v&amp;gt;&lt;&#x2F;code&gt;类型。注意，这里存入参数中的最后一个值依旧还是&lt;code&gt;null&lt;&#x2F;code&gt;，因为前后两个元素并没有存放在同一条链表上，自然不会出现在尾部挂载的情况。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;下面将会进行第三个元素的添加，假设我们添加的元素是&lt;code&gt;Java&lt;&#x2F;code&gt;,是的，和&lt;strong&gt;首次添加的元素是相同的&lt;&#x2F;strong&gt;，看一下底层将会如何处理。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;同样我们直接跳到&lt;code&gt;putVal()&lt;&#x2F;code&gt;方法中。程序首先会进入到第二个&lt;code&gt;if&lt;&#x2F;code&gt;判断里，开始计算索引并作判断，也就是下面这段代码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((p = tab[i = (n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; hash]) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    tab[i] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span&gt;(hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;注意了，由于首次计算得出&lt;code&gt;Java&lt;&#x2F;code&gt;对应的索引为&lt;code&gt;2&lt;&#x2F;code&gt;,那么这次的结果也是相同的值，所以&lt;code&gt;if&lt;&#x2F;code&gt;中的条件显然不可能成立，因为索引为&lt;code&gt;2&lt;&#x2F;code&gt;的位置已经被占用，自然不会为&lt;code&gt;null&lt;&#x2F;code&gt;。所以程序将会进入下面的逻辑中：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt; k;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(p.hash == hash &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;        ((k = p.key) == key || (key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(k))))
&lt;&#x2F;span&gt;&lt;span&gt;        e = p;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(p instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        e = ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)p).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;putTreeVal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, tab, hash, key, value);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; binCount = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; ; ++binCount) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((e = p.next) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;                p.next = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span&gt;(hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(binCount &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span&gt;(tab, hash);
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e.hash == hash &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;                ((k = e.key) == key || (key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(k))))
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;            p = e;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; existing mapping for key
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; oldValue = e.value;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!onlyIfAbsent || oldValue == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            e.value = value;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldValue;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;又是一堆&lt;code&gt;if else if&lt;&#x2F;code&gt;套娃操作。按照它的顺序，我们先分析第一个&lt;code&gt;if&lt;&#x2F;code&gt;的逻辑：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(p.hash == hash &amp;amp;&amp;amp;((k = p.key) == key || (key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(k))))
&lt;&#x2F;span&gt;&lt;span&gt;    e = p;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;鉴于&lt;code&gt;()&lt;&#x2F;code&gt;中涉及到了三处逻辑运算，方便理解，我们将它逐层进行拆分讲解。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;(k = p.key) == key || (key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(k))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先看&lt;code&gt;||&lt;&#x2F;code&gt;的左边&lt;code&gt;(k=p.key)==key&lt;&#x2F;code&gt;:意思是先将&lt;code&gt;p&lt;&#x2F;code&gt;中的&lt;code&gt;key&lt;&#x2F;code&gt;值赋给变量&lt;code&gt;k&lt;&#x2F;code&gt;,再与&lt;code&gt;key&lt;&#x2F;code&gt;进行一个比较，判断是否为同一个&lt;code&gt;key&lt;&#x2F;code&gt;值(对象)，注意了，这里的两个&lt;code&gt;key&lt;&#x2F;code&gt;的意思，前一个&lt;code&gt;key&lt;&#x2F;code&gt;(也就是&lt;code&gt;k&lt;&#x2F;code&gt;)**代表的是数组之前已经存在数组中的元素，**而后一个&lt;code&gt;key&lt;&#x2F;code&gt;&lt;strong&gt;就是当前传入的元素&lt;&#x2F;strong&gt;，具体的也就是指我们第一次存入的&lt;code&gt;Java&lt;&#x2F;code&gt;和本次存入的&lt;code&gt;Java&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;再看&lt;code&gt;||&lt;&#x2F;code&gt;右边&lt;code&gt;(key != null &amp;amp;&amp;amp; key.equals(k)&lt;&#x2F;code&gt;,这是一个&lt;code&gt;&amp;amp;&amp;amp;&lt;&#x2F;code&gt;操作,需要操作符两边的条件同时成立，整个条件才会成立。首先判断存入的&lt;code&gt;key&lt;&#x2F;code&gt;是否为&lt;code&gt;null&lt;&#x2F;code&gt;，再判断&lt;code&gt;key&lt;&#x2F;code&gt;和&lt;code&gt;k&lt;&#x2F;code&gt;是否为相同（注意这里用了&lt;code&gt;equals()&lt;&#x2F;code&gt;方法,该方法可被重写），判断是否为相同的内容。回到外层的&lt;code&gt;p.hash==hash&lt;&#x2F;code&gt;这个判断，就是将已有索引处对应的元素(元素是存在&lt;code&gt;Node&lt;&#x2F;code&gt;上的)的&lt;code&gt;hash&lt;&#x2F;code&gt;值取出与当前元素的&lt;code&gt;Hash&lt;&#x2F;code&gt;进行比较。&lt;&#x2F;p&gt;
&lt;p&gt;所以归纳起来也就是当二者&lt;code&gt;hash&lt;&#x2F;code&gt;相同并且&lt;code&gt;key&lt;&#x2F;code&gt;也相同(同一个对象)的情况下，执行&lt;code&gt;e=p&lt;&#x2F;code&gt;赋值操作，将原位置的值进行覆盖。&lt;&#x2F;p&gt;
&lt;p&gt;如果上面的条件不成立，会判断&lt;code&gt;p&lt;&#x2F;code&gt;是否是红黑树，如果是，就调用对应的添加方法&lt;code&gt;putTreeVal()&lt;&#x2F;code&gt;进行添加，也就是下面的代码。这里的 &lt;code&gt;instanceof&lt;&#x2F;code&gt;关键字用来判断一个对象是否为一个类的实例。另外，&lt;code&gt;putTreeVal()&lt;&#x2F;code&gt;方法内部涉及到大量红黑树的代码，相对复杂很多，如果跳进去的话，估计一时半会出不来，所以这里暂时不作探究，会另外分开来学习，还是围绕着主线继续分析。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;(p instanceof &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    e = ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;)p).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;putTreeVal&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;, tab, hash, key, value);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;否则，进入&lt;code&gt;else&lt;&#x2F;code&gt;逻辑中：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; binCount = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; ; ++binCount) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((e = p.next) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            p.next = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;newNode&lt;&#x2F;span&gt;&lt;span&gt;(hash, key, value, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(binCount &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span&gt;(tab, hash);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e.hash == hash &amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;            ((k = e.key) == key || (key != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; key.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;equals&lt;&#x2F;span&gt;&lt;span&gt;(k))))
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        p = e;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;开局一个&lt;code&gt;for&lt;&#x2F;code&gt;，目的明确，&lt;strong&gt;既然上面两种情况都不成立，那么说明该元素可能会在某一条链表节点上出现&lt;&#x2F;strong&gt;，比如下面这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Java&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;++-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Javascript&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Java
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;所以我们需要以遍历的方式去检查链表上的每一个节点，循环内部，通过&lt;code&gt;p&lt;&#x2F;code&gt;和&lt;code&gt;e&lt;&#x2F;code&gt;两个指针不停的循环比较。&lt;&#x2F;p&gt;
&lt;p&gt;如果过程中发现有一个和当前元素重复的元素，循环会立即结束，元素添加失败，否则就将当前元素直接挂到节点后面，完成添加。注意其中这段代码:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(binCount &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; -1 for 1st
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span&gt;(tab, hash);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;TREEIFY_THRESHOLD的定义
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这是在进行&lt;strong&gt;添加之后对当前这条链表进行一个判断&lt;&#x2F;strong&gt;，如果长度&lt;code&gt;&amp;gt;=(TREEIFY_THRESHOLD=8)-1&lt;&#x2F;code&gt;的话，会调用&lt;code&gt;treeifBin()&lt;&#x2F;code&gt;方法对当前链表进行树化(转红黑树)，但是注意，光是这个条件满足还不足以开始树化，在这个方法的实现中，还添加了其他的添加用来判断，&lt;code&gt;treeifBin()&lt;&#x2F;code&gt;源码：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; tab, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; hash) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, index; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(tab == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| (n = tab.length) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MIN_TREEIFY_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;((e = tab[index = (n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; hash]) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; hd = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, tl = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replacementTreeNode&lt;&#x2F;span&gt;&lt;span&gt;(e, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(tl == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                hd = p;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                p.prev = tl;
&lt;&#x2F;span&gt;&lt;span&gt;                tl.next = p;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            tl = p;
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;((e = e.next) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((tab[index] = hd) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            hd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;treeify&lt;&#x2F;span&gt;&lt;span&gt;(tab);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;就是说，就算前面的条件(&lt;code&gt;&amp;gt;=8&lt;&#x2F;code&gt;)已经成立，这里还会进行一个判断，具体逻辑如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(tab == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| (n = tab.length) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MIN_TREEIFY_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;它还会判断当前这个&lt;code&gt;table&lt;&#x2F;code&gt;的大小是否&lt;code&gt;&amp;lt;MIN_TREEIFY_CAPACITY&lt;&#x2F;code&gt;也就是是否&lt;code&gt;&amp;lt;64&lt;&#x2F;code&gt;。如果这个条件成立，那么会先对数组进行一个&lt;code&gt;resize()&lt;&#x2F;code&gt;扩容操作，而不是直接转红黑树。最后如果添加失败，会返回一个之前元素的&lt;code&gt;value&lt;&#x2F;code&gt;值。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(e != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; existing mapping for key
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt; oldValue = e.value;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(!onlyIfAbsent || oldValue == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        e.value = value;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeAccess&lt;&#x2F;span&gt;&lt;span&gt;(e);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; oldValue;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#bf616a;color:#2b303b;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h6 id=&quot;-15&quot;&gt;扩容原理&lt;&#x2F;h6&gt;
&lt;p&gt;前面对整个流程有了大致的了解之后，下面主要针对它的&lt;strong&gt;扩容原理&lt;&#x2F;strong&gt;进行一个简单的总结。&lt;&#x2F;p&gt;
&lt;p&gt;关于扩容的原理，先说结论：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HashSet&lt;&#x2F;code&gt;底层是&lt;code&gt;HashMap&lt;&#x2F;code&gt;，首次添加时，&lt;code&gt;table&lt;&#x2F;code&gt;数组的容量扩为16，初始临界值为12:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;threshold(阈值) = table.size()(table数组大小) * loadFactor(加载因子)&lt;&#x2F;p&gt;
&lt;p&gt;=16*0.75&lt;&#x2F;p&gt;
&lt;p&gt;=12&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;如果&lt;code&gt;table&lt;&#x2F;code&gt;数组使用的部分达到了阈值，就会触发扩容，具体的扩容为&lt;code&gt;16*2=32&lt;&#x2F;code&gt;,也就是&lt;strong&gt;会按照两倍的扩容&lt;&#x2F;strong&gt;方式进行，基于这个容量再次计算新的扩容阈值:&lt;code&gt;32*0.75=24&lt;&#x2F;code&gt;,也就是如果本次扩容后的容量(32)使用达到24之后，就会再次触发下一次的2倍扩容机制，以此类推。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;简单来说，以上就是&lt;code&gt;HashSet(本质HashMap)&lt;&#x2F;code&gt;的扩容原理，具体的，看下面源码分析。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;在resize()方法中有这样一段代码&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;((newCap = oldCap &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MAXIMUM_CAPACITY &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp;
&lt;&#x2F;span&gt;&lt;span&gt;         oldCap &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;DEFAULT_INITIAL_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    newThr = oldThr &amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; double threshold
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;可以看到，新的容量是在原有容量的基础作了一个左移的操作，也就是和乘2是等效的，但用位运算效率会快很多。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是在pustVal()源码的部分代码：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;++modCount;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(++size &amp;gt; threshold)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;afterNodeInsertion&lt;&#x2F;span&gt;&lt;span&gt;(evict);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;resize();就是触发扩容时调用的扩容方法。具体的源码前面有讲过，不再赘述。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在Java8中，如果一条链表的元素个数达到&lt;code&gt; TREEIFY_THRESHOLD&lt;&#x2F;code&gt;且此时&lt;code&gt;table&lt;&#x2F;code&gt;的大小&amp;gt;=&lt;code&gt;MIN_TREEIFY_CAPACITY&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;时就会触发链表转红黑树的操作。提高性能。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面涉及到的两个常量在源代码中的定义如下：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;TREEIFY_THRESHOLD &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MIN_TREEIFY_CAPACITY &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;64&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;转红黑树的方法源码如下，这里只需要看看大致的执行逻辑就好，关于红黑树具体的实现，不是本章的主要内容。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final&lt;&#x2F;span&gt;&lt;span&gt; void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;treeifyBin&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; tab, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; hash) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; n, index; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; e;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(tab == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null &lt;&#x2F;span&gt;&lt;span&gt;|| (n = tab.length) &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;MIN_TREEIFY_CAPACITY&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;resize&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else if &lt;&#x2F;span&gt;&lt;span&gt;((e = tab[index = (n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; hash]) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; hd = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;, tl = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;TreeNode&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; p = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replacementTreeNode&lt;&#x2F;span&gt;&lt;span&gt;(e, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(tl == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;                hd = p;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                p.prev = tl;
&lt;&#x2F;span&gt;&lt;span&gt;                tl.next = p;
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;            tl = p;
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;((e = e.next) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;((tab[index] = hd) != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;            hd.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;treeify&lt;&#x2F;span&gt;&lt;span&gt;(tab);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;注意如果只是满足链表长度达到8的条件时，它还是会采用&lt;code&gt;resize()&lt;&#x2F;code&gt;方法对数组扩容，而不是直接转红黑树。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;注意了！！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面提到的触发数组扩容的条件中，&lt;code&gt;size&lt;&#x2F;code&gt;的大小大于负载因子才会触发，这里的&lt;code&gt;size&lt;&#x2F;code&gt;指&lt;code&gt;的是数组和链表中元素的和&lt;&#x2F;code&gt;，也就是只要我们向其中添加一个元素，不论这个元素是存在数组第一个位置，还是存在链表中某个位置，&lt;code&gt;size都会自增1&lt;&#x2F;code&gt;，这是一个比较容易搞错的地方，&lt;strong&gt;不要认为size就是指数组的长度，这是错误的。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;为什么不直接使用&lt;code&gt;hash&lt;&#x2F;code&gt;来计算索引，而是要进行取模运算？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果将哈希码映射到数组中的一个索引。可能会因为&lt;code&gt;hash&lt;&#x2F;code&gt;值过大而因此导致索引超出范围。所以一个最简单的方法是对哈希码和数组的长度进行模运算，如&lt;code&gt;hash(key) % n&lt;&#x2F;code&gt;。如此可以&lt;strong&gt;确保索引i总是在0和n之间。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;但是Java在实现的时候，用的并不是上面说的算法，而是将&lt;strong&gt;数组的长度n减去1之后再与&lt;code&gt;hash&lt;&#x2F;code&gt;作&lt;code&gt;&amp;amp;&lt;&#x2F;code&gt;运算得到&lt;&#x2F;strong&gt;，实现代码如下:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span&gt;i = (n - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &amp;amp; hash;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h4 id=&quot;-16&quot;&gt;LinkedHashSet&lt;&#x2F;h4&gt;
&lt;h5 id=&quot;-17&quot;&gt;概述&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;是&lt;code&gt;Set&lt;&#x2F;code&gt;接口的一个实现子类，也是&lt;code&gt;HashSet&lt;&#x2F;code&gt;的子类。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;的底层是一个&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;，底层维护了一个&lt;strong&gt;数组+双向链表&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;根据元素的&lt;code&gt;hashCode&lt;&#x2F;code&gt;值来决定元素的存储位置，同时&lt;strong&gt;使用链表来维护元素的次序&lt;&#x2F;strong&gt;，这就使得元素看起来是以插入的顺序保存的。&lt;&#x2F;li&gt;
&lt;li&gt;其次，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;也&lt;strong&gt;不允许添加重复元素&lt;&#x2F;strong&gt;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;LinkedHashSet.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;中维护了一个&lt;code&gt;hash&lt;&#x2F;code&gt;表和双向链表，每一个节点有&lt;code&gt;pre&lt;&#x2F;code&gt;和&lt;code&gt;next&lt;&#x2F;code&gt;属性，这样可以形成双向链表。在添加元素时，先求&lt;code&gt;hash&lt;&#x2F;code&gt;值，再求索引，确定该元素在哈希表中的位置，然后将添加的元素加入到双向链表（如果已经存在，不添加(原理和&lt;code&gt;hashset类似&lt;&#x2F;code&gt;)）。&lt;&#x2F;p&gt;
&lt;h5 id=&quot;-18&quot;&gt;源码解读&lt;&#x2F;h5&gt;
&lt;ul&gt;
&lt;li&gt;通过下面的示例来配合讲解：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Set&lt;&#x2F;span&gt;&lt;span&gt; set = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;LinkedHashSet&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;李&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1001&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;123&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;set.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(set);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果断点的方式，我们可以看到，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;的一个基本结构如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426085807.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过上图可以发现，其中存在一个&lt;code&gt;tail&lt;&#x2F;code&gt;和&lt;code&gt;head&lt;&#x2F;code&gt;的属性，这是典型的双向链表中才会用到的两个引用，或者指针(c&#x2F;c++)，&lt;strong&gt;代表双向链表的头尾指针&lt;&#x2F;strong&gt;。即进一步验证了前面提到的&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;的是一个&lt;code&gt;HashTable&lt;&#x2F;code&gt;和双向链表的组合。&lt;&#x2F;p&gt;
&lt;p&gt;其中的&lt;code&gt;table&lt;&#x2F;code&gt;类型其实是一个&lt;code&gt;HashMap$Node[]&lt;&#x2F;code&gt;类型，而每一个节点又是维护的&lt;code&gt;LinkedHashMap$Entry[]&lt;&#x2F;code&gt;类型。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426090925.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为什么数组为&lt;code&gt;HashMap$Node[]数组类型&lt;&#x2F;code&gt;而存放的元素却是&lt;code&gt;LinkedHashMap$Entry[]&lt;&#x2F;code&gt;类型？&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;说明&lt;code&gt;LinkedHashMap$Entry[]&lt;&#x2F;code&gt;肯定继&lt;strong&gt;承或者实现&lt;&#x2F;strong&gt;了&lt;code&gt;HashMap$Node[]&lt;&#x2F;code&gt;的，即通过&lt;strong&gt;数组多态&lt;&#x2F;strong&gt;的方式实现。注意这里的&lt;code&gt;$&lt;&#x2F;code&gt;符号标识$之后的类作为&lt;code&gt;$&lt;&#x2F;code&gt;之前的一个静态内部类，也即表示在&lt;code&gt;LinkedHashMap$Entry&lt;&#x2F;code&gt;中，&lt;code&gt;Entry&lt;&#x2F;code&gt;是&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;的一个&lt;strong&gt;静态内部类。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;在&lt;code&gt;LinkdeHashMap&lt;&#x2F;code&gt;中我们可以找到对应的源码验证。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extends &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HashMap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; before, after;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(hash, key, value, next);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;从上述的源码中不仅说明&lt;code&gt;Entry&lt;&#x2F;code&gt;是&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;的内部类，也说明&lt;code&gt;LinkedHashMap$Entry[]&lt;&#x2F;code&gt;继承了&lt;code&gt;HashMap$Node[]&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;其中有两个&lt;code&gt;Entry&amp;lt;K,V&amp;gt;&lt;&#x2F;code&gt;类型的属性：&lt;code&gt;before&lt;&#x2F;code&gt;和&lt;code&gt;after&lt;&#x2F;code&gt;，可以理解为两个引用，主要用来完成各节点之间的连接。&lt;&#x2F;p&gt;
&lt;p&gt;同样，我们也可以通过查看&lt;code&gt;HashMap&lt;&#x2F;code&gt;的源码，验证上面的说法：&lt;code&gt;Node&lt;&#x2F;code&gt;同样作为其一个静态的内部类实现。并且该类还实现了其父接口&lt;code&gt;Map&lt;&#x2F;code&gt;中的&lt;code&gt;Entry&amp;lt;K,V&amp;gt;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;implements &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;hash;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;key;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;value;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; next;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;K&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;V&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.hash &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; hash;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.key &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; key;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.value &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; value;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;.next &lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt; next;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426092722.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;在存储元素时，每一个元素中依然是使用的&lt;code&gt;key&lt;&#x2F;code&gt;来存储，而&lt;code&gt;value&lt;&#x2F;code&gt;只是一个&lt;code&gt;object&lt;&#x2F;code&gt;类型的占位符，这里没有实际的意义。因为在&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;中，我们&lt;strong&gt;不需要显式的去像Map中存一个&lt;code&gt;K,V&lt;&#x2F;code&gt;形式的值。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;当我们添加一个重复元素时，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;会直接调用父类&lt;code&gt;HashSet&lt;&#x2F;code&gt;中的比较方法，对重复元素进行一个判断并去重，其实这里的原理和之前讲的&lt;code&gt;HashSet&lt;&#x2F;code&gt;原理是一样的，当添加元素是，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;还是会直接调用父类&lt;code&gt;HashSet&lt;&#x2F;code&gt;中的&lt;code&gt;add()&lt;&#x2F;code&gt;方法(该方法本质还是调用&lt;code&gt;HashMap&lt;&#x2F;code&gt;中的&lt;code&gt;put()&lt;&#x2F;code&gt;方法)，接着是&lt;code&gt;putVal()&lt;&#x2F;code&gt;关于这两个方法的源码在前面讲&lt;code&gt;HashSet&lt;&#x2F;code&gt;源码的时候就已经讲过，这里不再赘述。所以说，经管是不同的结构实现，但在元素判重的原理上其实使用的还是同一个逻辑。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;说白了，LinkedHashSet本质上大部分还是HashMap&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LinkedHashset&lt;&#x2F;code&gt;底层维护了一个&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;结构，这一点可以类比于&lt;code&gt;HashSet&lt;&#x2F;code&gt;底层维护一个&lt;code&gt;HashMap&lt;&#x2F;code&gt;来进行对比记忆。而前面我们已经知道，&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;其实就是&lt;code&gt;HashMap&lt;&#x2F;code&gt;的一个子类。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;对于&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;我们在理解了前面&lt;code&gt;HashSet&lt;&#x2F;code&gt;源码的基础上，只需要理解它底层的一个实现结构即可，也就是数组+双向链表的结构，回到一开始的哪个示例中，我们向set集合中添加了：&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“A”，120, User,123&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;之后，通过断点的方式可以看到他们之间的一个指向关系如下&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426100922.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;上图展示了内部元素节点中&lt;code&gt;after&lt;&#x2F;code&gt;和&lt;code&gt;before&lt;&#x2F;code&gt;的引用关系。仔细观察每一个&lt;code&gt;LinkedHashMap$Entry&lt;&#x2F;code&gt;后都会跟一个&lt;code&gt;@number&lt;&#x2F;code&gt;的标识，**这是用来标识该位置元素的一个唯一标记，或者你也可以理解为该元素在该结构中的一个地址。**因此，我们可以用该标识来唯一性的代表一元素值，注意其中每一各&lt;code&gt;after&lt;&#x2F;code&gt;或者&lt;code&gt;before&lt;&#x2F;code&gt;的指向关系，具体在后面我回画个图帮助理解。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;再跳出元素内部&lt;code&gt;Entry&lt;&#x2F;code&gt;，我们看到在&lt;code&gt;table&lt;&#x2F;code&gt;中有两个名为&lt;code&gt;head&lt;&#x2F;code&gt;和&lt;code&gt;tail&lt;&#x2F;code&gt;的引用属性。用来标识该双向链表的头尾节点。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;20220426101903.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;将上面的逻辑以图片的形式展示出来大概就是下面这样：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;LinkedHashSet.jpg&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;简单捋一下：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;每向&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;中添加一个元素，首先会根据该元素计算一个&lt;code&gt;hash&lt;&#x2F;code&gt;值，用来确定它在上面图中&lt;code&gt;table&lt;&#x2F;code&gt;数组中的索引位置。&lt;&#x2F;li&gt;
&lt;li&gt;通过上面的步骤添加多个元素之后，元素内部是一个&lt;code&gt;Entry[]&lt;&#x2F;code&gt;类型的结构，其中每一个元素都有一个&lt;code&gt;after&lt;&#x2F;code&gt;和&lt;code&gt;before&lt;&#x2F;code&gt;属性，用&lt;strong&gt;来指向它的前一个元素和后一个元素的位置。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;再通过两个属性&lt;code&gt;head&lt;&#x2F;code&gt;和&lt;code&gt;tail&lt;&#x2F;code&gt;来指向整个链表的头和尾，从而构成一个&lt;strong&gt;完整的含有头尾指针(引用)的双向链表。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;将该链表具象化出来可以大致表示为图中右边部分。换句话说，这里的&lt;code&gt;after&lt;&#x2F;code&gt;和&lt;code&gt;before&lt;&#x2F;code&gt;其实就相当于平时常用的&lt;code&gt;pre&lt;&#x2F;code&gt;和&lt;code&gt;next&lt;&#x2F;code&gt;指针，即前驱后继指针，只不过命名不同而已，没什么高深莫测的。&lt;&#x2F;li&gt;
&lt;li&gt;注意，和前面&lt;code&gt;HashSet&lt;&#x2F;code&gt;的数组+单链表的结构类似，每一个索引位都可以是一条完整的双向链表，就像图中索引为7的位置一样，而不是每个索引为只能有一个链表节点，这取决于元素计算出来的&lt;code&gt;hash&lt;&#x2F;code&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;正是由于双向链表的特性，使得我们添加的元素顺序是相对有序的，&lt;strong&gt;也就是添加的顺序和打印出来的顺序是一样的。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于扩容&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先，&lt;code&gt;LinkedHashSet&lt;&#x2F;code&gt;如果使用无参数构造器初始化，那么它默认会开辟一个&lt;code&gt;16&lt;&#x2F;code&gt;大小的空间，负载因子依旧是&lt;code&gt;0.74&lt;&#x2F;code&gt;，首次扩容的阈值为&lt;code&gt;12&lt;&#x2F;code&gt;。这些数值是不是很眼熟？如果你看了前面&lt;code&gt;HashSet&lt;&#x2F;code&gt;的源码分析的话。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;LinkedHashSet&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;.75&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;虽然讲的是&lt;code&gt;LinkdeHashSet&lt;&#x2F;code&gt;，但本质上分析的还是&lt;code&gt;HashSet&lt;&#x2F;code&gt;，再本质就是&lt;code&gt;LinkedHashMap&lt;&#x2F;code&gt;，再继续套娃你会发现，&lt;strong&gt;就是讲的&lt;code&gt;HashMap&lt;&#x2F;code&gt;，可见这家伙才是主角。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;未完待续……&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Spring Security</title>
        <published>2025-06-17T00:00:00+00:00</published>
        <updated>2025-06-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app/springsecurity/"/>
        <id>https://muyu-git-main-08820048s-projects.vercel.app/springsecurity/</id>
        
        <content type="html" xml:base="https://muyu-git-main-08820048s-projects.vercel.app/springsecurity/"></content>
        
    </entry>
    <entry xml:lang="zh">
        <title>SSM框架实现短信验证码功能集成</title>
        <published>2025-06-17T00:00:00+00:00</published>
        <updated>2025-06-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app/ssmkuang-jia-shi-xian-ji-cheng-duan-xin-yan-zheng-ma-gong-neng/"/>
        <id>https://muyu-git-main-08820048s-projects.vercel.app/ssmkuang-jia-shi-xian-ji-cheng-duan-xin-yan-zheng-ma-gong-neng/</id>
        
        <content type="html" xml:base="https://muyu-git-main-08820048s-projects.vercel.app/ssmkuang-jia-shi-xian-ji-cheng-duan-xin-yan-zheng-ma-gong-neng/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志&lt;&#x2F;h3&gt;
&lt;p&gt;2022-09-03 晚&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;本次更新无新内容，仅调整目录结构&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;yan-zheng-ma-gong-neng&quot;&gt;验证码功能&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;在实际开发中，验证码功能已经是一个很常见的模块了。
今天就来给自己的项目加一个属于自己的短信验证码功能。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;zhun-bei-gong-zuo&quot;&gt;准备工作&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;p&gt;在开始敲代码之前，你需要准备一下。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;www.yuntongxun.com&#x2F;?ly=baidu-pz-p&amp;amp;qd=cpc&amp;amp;cp=ppc&amp;amp;xl=ds&amp;amp;kw=12006270&quot;&gt;容联云&lt;&#x2F;a&gt;平台账号一个。&lt;&#x2F;li&gt;
&lt;li&gt;可以正常收发短信的手机一台。&lt;&#x2F;li&gt;
&lt;li&gt;一台可用的计算机。&lt;&#x2F;li&gt;
&lt;li&gt;怎么说也得会一点Java吧【本文以SSM项目集成为例】。&lt;&#x2F;li&gt;
&lt;li&gt;会一点JavaScript或者jQuery。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;kai-shi-lu&quot;&gt;开始撸&lt;&#x2F;h2&gt;
&lt;h4 id=&quot;xian-kan-kan-zui-hou-de-yang-shi&quot;&gt;先看看最后的样式&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10700891916562075776-7c2ef8f7.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;登录官网，进入控制台找到如下几个重要的key保存下来，后面需要用到。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-1220627229440284181-acd23658.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;找到页面中【开发手册】&amp;gt;【SDK参考】
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-12422133158768438033-a14ac3c0.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;如此打开便可以找到Java需要安装的依赖，将maven依赖复制过来，放入pom.xml文件中正确的位置。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;groupId&amp;gt;com.cloopen&amp;lt;&#x2F;groupId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;artifactId&amp;gt;java-sms-sdk&amp;lt;&#x2F;artifactId&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;version&amp;gt;1.0.3&amp;lt;&#x2F;version&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;dependency&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13592634646042885320-d414f365.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;&quot;&gt;处理后端核心业务&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;service层处理验证码发送逻辑&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;由于不涉及与数据库的交互，可以将下面的短信验证码的业务逻辑直接在服务层进行处理即可。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-11745832972173914333-55ae2419.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;具体的：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在如下位置将你对应的密钥填入。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span&gt;restAPI.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setAccount&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;你的countID&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 初始化主账号名称和主账号令牌
&lt;&#x2F;span&gt;&lt;span&gt;restAPI.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setAppId&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;你的countToken&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;以下部分是对所生成验证码范围的设置，我是随机六位，你可以自定义你的规则。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*生成随机六位验证码*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span&gt; random = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Random&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; codes = &amp;quot;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;; i++) {
&lt;&#x2F;span&gt;&lt;span&gt;  codes += random.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nextInt&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;使用短信验证码模板：由于我们是未上线的测试，所以可以使用的模板是由限定的。可以自己参考文档，具体的，我的配置如下。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; 请使用管理控制台中已创建应用的APPID
&lt;&#x2F;span&gt;&lt;span&gt;result = restAPI.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sendTemplateSMS&lt;&#x2F;span&gt;&lt;span&gt;(userPhone, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;[]{codes, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;设置验证码的有效期&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;实际开发中，验证码是不可以一直有效的，我们应该设置一个有效期限，比如2分钟有效，过期只能重新发送获取新的验证码，下面是我利用session进行的实现，提供参考，你也用可以缓存或者redis等方式实现。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre data-lang=&quot;Java&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-Java &quot;&gt;&lt;code class=&quot;language-Java&quot; data-lang=&quot;Java&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*设置验证码有效期为2分钟*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;setMaxInactiveInterval&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;120&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;处理前端页面和校验逻辑&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;后台核心业务结束之后，就可以进行前端页面的编写。首先，有一个提供输入手机号的控件是必须的【&lt;strong&gt;当然，特殊业务场景可能不一定需要显式的输入&lt;&#x2F;strong&gt;】 不要杠！！
总而言之，要发送短信验证码，你得有一个验证码的接收对象吧，这个对象便是一个可用的手机号。具体的：&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在页面中放一个输入验证码的控件，当然还需要一个发送验证码的按钮。
&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14383750180005044555-568cff4d.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;由于不可能让用户频繁的发送验证码，我们还需要对点击的按钮进行限制，一般的做法是，当用户点击一次发送按钮之后便将该按钮进行禁用掉，避免频繁的被点击，倒计时一分钟后解除禁用，可以再次发送。
这样的需求比较简单，可通过简单的JS进行实现。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;JavaScript&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-JavaScript &quot;&gt;&lt;code class=&quot;language-JavaScript&quot; data-lang=&quot;JavaScript&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;*短信再次发送倒计时*&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;outime&lt;&#x2F;span&gt;&lt;span&gt;(time) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;==&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;){
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#getCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#getCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;重新发送&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;        }&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;--;
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;#getCode&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;html&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;+&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;s后重新发送&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attr&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;disabled&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;setTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;outime&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;            },&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;以上实现只是一种参考，实现方式没有局限。
当时出于安全考虑，这样的前端校验是不够的，实际开发中，一般还会再服务端进行再一次的校验逻辑，实现也比较简单，具体不再赘述。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;添加测试的手机号
由于是测试用，所以不是所有手机号都可以接受到验证码的短信，需要在控制台绑定测试用的手机号，操作很简单，不再赘述。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-2&quot;&gt;来看看最终的成果。&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9567963583923876937-61c53beb.jpeg&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>提问的智慧</title>
        <published>2025-06-17T00:00:00+00:00</published>
        <updated>2025-06-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app/ti-wen-de-zhi-hui-zhuan-zai/"/>
        <id>https://muyu-git-main-08820048s-projects.vercel.app/ti-wen-de-zhi-hui-zhuan-zai/</id>
        
        <content type="html" xml:base="https://muyu-git-main-08820048s-projects.vercel.app/ti-wen-de-zhi-hui-zhuan-zai/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志&lt;&#x2F;h3&gt;
&lt;p&gt;2022-9-15 午时 于 杭州&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;在原文的基础结构上调整了文章目录结构&lt;&#x2F;li&gt;
&lt;li&gt;简单进行了一下md的格式化&lt;&#x2F;li&gt;
&lt;li&gt;修改封面配图&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;yin&quot;&gt;引&lt;&#x2F;h2&gt;
&lt;p&gt;​	在黑客世界里，当提出一个技术问题时，你能得到怎样的回答？这取决于挖出答案的难度，同样取决于你提问的方法。本指南旨在帮助你提高发问技巧，以获取你最想要的答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　首先你必须明白，黑客们只偏爱艰巨的任务，或者能激发他们思维的好问题。 如若不然，我们还来干吗？如果你有值得我们反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼，可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“问得好！”是发自内心的大力称赞。&lt;&#x2F;p&gt;
&lt;p&gt;　　尽管黑客们有蔑视简单问题和不友善的坏名声，有时看起来似乎我们对新手，对知识贫乏者怀有敌意，但其实不是那样的。&lt;&#x2F;p&gt;
&lt;p&gt;　　我们不想掩饰对这样一些人的蔑视–他们不愿思考，或者在发问前不去完成他们应该做的事。这种人只会谋杀时间–他们只愿索取，从不付出，无端消耗我们的时间，而我们本可以把时间用在更有趣的问题或者更值得回答的人身上。 我们称这样的人为“失败者”（由于历史原因，我们有时把它拼作“lusers”）。&lt;&#x2F;p&gt;
&lt;p&gt;　　我们在很大程度上属于志愿者，从繁忙的生活中抽出时间来解惑答疑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是抛弃那些看起来象失败者的家伙，以便更高效的利用时间来回答胜利者的问题。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你觉得我们过于傲慢的态度让你不爽，让你委屈，不妨设身处地想想。我们并没有要求你向我们屈服–事实上，我们中的大多数人最喜欢公平交易不过了，只要你付出小小努力来满足最起码的要求，我们就会欢迎你加入到我们的文化中来。但让我们帮助那些不愿意帮助自己的人是没有 意义的。如果你不能接受这种“歧视”，我们建议你花点钱找家商业公司签个技术支持协议得了，别向黑客乞求帮助。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你决定向我们求助，当然不希望被视为失败者，更不愿成为失败者中的一员。立刻得到有效答案的最好方法，就是象胜利者那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。&lt;&#x2F;p&gt;
&lt;p&gt;　　（欢迎对本指南提出改进意见。任何建议请E-mail至&lt;a href=&quot;mailto:esr@thyrsus.com&quot;&gt;esr@thyrsus.com&lt;&#x2F;a&gt;，然而 请注意，本文并非网络礼节的通用指南，我通常会拒绝无助于在技术论坛得到有用答案的建议。） （当然，如果你写中文，最好还是寄&lt;a href=&quot;mailto:DHGrand@hotmail.com&quot;&gt;DHGrand@hotmail.com&lt;&#x2F;a&gt;;-）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ti-wen-zhi-qian&quot;&gt;提问之前&lt;&#x2F;h2&gt;
&lt;p&gt;　　在通过电邮、新闻组或者聊天室提出技术问题前，检查你有没有做到：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;通读手册，试着自己找答案。&lt;&#x2F;li&gt;
&lt;li&gt;在FAQ里找答案（一份维护得好的FAQ可以包罗万象:）。&lt;&#x2F;li&gt;
&lt;li&gt;在网上搜索（个人推荐google~~~）。&lt;&#x2F;li&gt;
&lt;li&gt;向你身边精于此道的朋友打听。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;　　当你提出问题的时候，首先要说明在此之前你干了些什么；这将有助于树立你的形象：你不是一个妄图不劳而获的乞讨者，不愿浪费别人的时间。如果提问者能从答案中学到东西，我们更乐于回答他的问题。&lt;&#x2F;p&gt;
&lt;p&gt;　　周全的思考，准备好你的问题，草率的发问只能得到草率的回答，或者根本得不到任何答案。越表现出在寻求帮助前为解决问题付出的努力，你越能得到实质性的帮助。&lt;&#x2F;p&gt;
&lt;p&gt;　　小心别问错了问题。如果你的问题基于错误的假设，普通黑客（J. Random Hacker）通常会用无意义的字面解释来答复你，心里想着“蠢问题…”，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。&lt;&#x2F;p&gt;
&lt;p&gt;　　决不要自以为够资格得到答案，你没这种资格。毕竟你没有为这种服务支付任何报酬。你要自己去“挣”回一个答案，靠提出一个有内涵的，有趣的，有思维激励作用的问题–一个对社区的经验有潜在贡献的问题，而不仅仅是被动的从他人处索要知识–去挣到这个答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　另一方面，表明你愿意在找答案的过程中做点什么，是一个非常好的开端。“谁能给点提示？”、“我这个例子里缺了什么？”以及“我应该检查什么地方？”比“请把确切的过程贴出来”更容易得到答复。因为你显得只要有人指点正确的方向，你就有完成它的能力和决心。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zen-yang-ti-wen&quot;&gt;怎样提问&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;jin-shen-xuan-ze-lun-tan&quot;&gt;谨慎选择论坛&lt;&#x2F;h3&gt;
&lt;p&gt;　　小心选择提问的场合。如果象下面描述的那样，你很可能被忽略掉或者被看作失败者：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;在风马牛不相及的论坛贴出你的问题&lt;&#x2F;li&gt;
&lt;li&gt;在探讨高级技巧的论坛张贴非常初级的问题；反之亦然&lt;&#x2F;li&gt;
&lt;li&gt;在太多的不同新闻组交叉张贴&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;yong-ci-tie-qie-yu-fa-zheng-que-pin-xie-wu-wu&quot;&gt;用辞贴切，语法正确，拼写无误&lt;&#x2F;h3&gt;
&lt;p&gt;　　我们从经验中发现，粗心的写作者通常也是马虎的思考者（我敢打包票）。 回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。&lt;&#x2F;p&gt;
&lt;p&gt;　　正确的拼写，标点符号和大小写很重要。
　　更一般的说，如果你的提问写得象个半文盲，你很有可能被忽视。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你在使用非母语的论坛提问，你可以犯点拼写和语法上的小错–但决不能在思考上马虎（没错，我们能弄清两者的分别）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shi-yong-han-yi-feng-fu-miao-shu-zhun-que-de-biao-ti&quot;&gt;使用含义丰富，描述准确的标题&lt;&#x2F;h3&gt;
&lt;p&gt;　　在邮件列表或者新闻组中，大约50字以内的主题标题是抓住资深专家注意力 的黄金时机。别用喋喋不休的“帮帮忙”（更别说“救命啊！！！！！”这 样让人反感的话）来浪费这个机会。不要妄想用你的痛苦程度来打动我们， 别用空格代替问题的描述，哪怕是极其简短的描述。&lt;&#x2F;p&gt;
&lt;p&gt;　　蠢问题： 救命啊！我的膝上机不能正常显示了！
　　聪明问题： XFree86 4.1下鼠标光标变形，Fooware MV1005的显示芯片。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你在回复中提出问题，记得要修改内容标题，表明里面有一个问题。一个看起来象“Re：测试”或者“Re：新bug”的问题很难引起足够重视。另外，引用并删减前文的内容，给新来的读者留下线索。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jing-que-miao-shu-xin-xi-liang-da&quot;&gt;精确描述，信息量大&lt;&#x2F;h3&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;谨慎明确的描述症状。&lt;&#x2F;li&gt;
&lt;li&gt;提供问题发生的环境（机器配置、操作系统、应用程序以及别的什么）。&lt;&#x2F;li&gt;
&lt;li&gt;说明你在提问前是怎样去研究和理解这个问题的。&lt;&#x2F;li&gt;
&lt;li&gt;说明你在提问前采取了什么步骤去解决它。&lt;&#x2F;li&gt;
&lt;li&gt;罗列最近做过什么可能有影响的硬件、软件变更。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;　　尽量想象一个黑客会怎样反问你，在提问的时候预先给他答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　Simon Tatham写过一篇名为《如何有效的报告Bug》的出色短文。强力推荐你也读一读。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hua-bu-zai-duo&quot;&gt;话不在多&lt;&#x2F;h3&gt;
&lt;p&gt;　　你需要提供精确有效的信息。这并不是要求你简单的把成吨的出错代码或者数据完全转储摘录到你的提问中。如果你有庞大而复杂的测试条件，尽量把它剪裁得越小越好。&lt;&#x2F;p&gt;
&lt;p&gt;　　这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得 到回答的机会增加；第二，简化问题使你得到有用答案的机会增加；第三，在提炼 你的bug报告的过程中，也许你自己就能找出问题所在或作出更正。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhi-shuo-zheng-zhuang-bu-shuo-cai-xiang&quot;&gt;只说症状，不说猜想&lt;&#x2F;h3&gt;
&lt;p&gt;　　告诉黑客们你认为问题是怎样引起的没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，不要加进你自己的理解和推论。让黑客们来诊断吧。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;蠢问题： 我在内核编译中一次又一次遇到SIG11错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？
聪明问题： 我自制的一套K6&#x2F;233系统，主板是FIC-PA2007 （VIA Apollo VP2芯片组），256MB Corsair PC133 SDRAM，在内核编译中频频产生SIG11错误，从开机20分钟以后就有这种情况，开机 前20分钟内从没发生过。重启也没有用，但是关机一晚上就又能工作20分钟。所有 内存都换过了，没有效果。相关部分的典型编译记录如下…。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;an-shi-jian-shun-xu-lie-chu-zheng-zhuang&quot;&gt;按时间顺序列出症状&lt;&#x2F;h3&gt;
&lt;p&gt;　　对找出问题最有帮助的线索，往往就是问题发生前的一系列操作，因此，你的说明 应该包含操作步骤，以及电脑的反应，直到问题产生。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你的说明很长（超过四个段落），在开头简述问题会有所帮助，接下来按时间顺序详述。这样黑客们就知道该在你的说明中找什么。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ming-bai-ni-xiang-wen-shen-me&quot;&gt;明白你想问什么&lt;&#x2F;h3&gt;
&lt;p&gt;　　漫无边际的提问近乎无休无止的时间黑洞。最能给你有用答案的人也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞不太感冒，因此也可以说他们对漫无边际的提问不大感冒。&lt;&#x2F;p&gt;
&lt;p&gt;　　如果你明确表述需要回答者做什么（提供建议，发送一段代码，检查你的补丁或是别的），就最有可能得到有用的答案。这会定出一个时间和精力的上限，便于回答者集中精力来帮你，这很凑效。要理解专家们生活的世界，要把专业技能想象为充裕的资源，而回复的时间则是贫乏的资源。解决你的问题需要的时间越少，越能从忙碌的专家口中掏出答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　因此，优化问题的结构，尽量减少专家们解决它所需要的时间，会有很大的帮助–这通常和简化问题有所区别。因此，问“我想更好的理解X，能给点提示吗？”通常比问“你能解释一下X吗？”更好。如果你的代码不能工作，问问它有什么地方不对，比要求别人替你修改要明智得多。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bie-wen-ying-gai-zi-ji-jie-jue-de-wen-ti&quot;&gt;别问应该自己解决的问题&lt;&#x2F;h3&gt;
&lt;p&gt;　　黑客们总是善于分辨哪些问题应该由你自己解决；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qu-chu-wu-yi-yi-de-yi-wen&quot;&gt;去除无意义的疑问&lt;&#x2F;h3&gt;
&lt;p&gt;　　别用无意义的话结束提问，例如“有人能帮我吗？”或者“有答案吗？”。 首先：如果你对问题的描述不很合适，这样问更是画蛇添足。其次：由于这 样问是画蛇添足，黑客们会很厌烦你–而且通常会用逻辑上正确的回答来表 示他们的蔑视，例如：“没错，有人能帮你”或者“不，没答案”。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qian-xun-jue-mei-you-hai-chu-er-qie-chang-bang-da-mang&quot;&gt;谦逊绝没有害处，而且常帮大忙&lt;&#x2F;h3&gt;
&lt;p&gt;彬　　彬有礼，多用“请”和“先道个谢了”。让大家都知道你对他们花费时间义务提供帮助心存感激。然而，如果你有很多问题无法解决，礼貌将会增加你得到有用答案的机会。&lt;&#x2F;p&gt;
&lt;p&gt;　　（我们注意到，自从本指南发布后，从资深黑客处得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得“先谢了”的言外之意是过后就不会再感谢任何人了。我们的建议是：都道谢。）&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wen-ti-jie-jue-hou-jia-ge-jian-duan-shuo-ming&quot;&gt;问题解决后，加个简短说明&lt;&#x2F;h3&gt;
&lt;p&gt;　　问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个补充说明。补充说明不必很长或是很深入；简单的一句“你好，原来是网线出了问题！谢谢大家–Bill”比什么也不说要强。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇学术论文更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。除了表示礼貌和反馈信息以外，这种补充有助于他人在邮件列表&#x2F;新闻组&#x2F;论坛中搜索对你有过帮助的完整解决方案，这可能对他们也很有用。最后（至少？），这种补充有助于所有提供过帮助的人从中得到满足感。如果你自己不是老手或者黑客，那就相信我们，这种感觉对于那些你向他们求助的导师或者专家而言，是非常重要的。问题久拖未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次贴出新问题时尝到甜头。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;huan-shi-bu-dong&quot;&gt;还是不懂&lt;&#x2F;h3&gt;
&lt;p&gt;　　如果你不是很理解答案，别立刻要求对方解释。象你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），去理解它。如果你真的需要对方解释，记得表现出你已经学到了点什么。比方说，如果我回答你：“看来似乎是zEntry被阻塞了；你应该先清除它。”，然后：一个很糟的后续问题：“zEntry是什么？” 聪明的问法应该是这样：“哦~~~我看过帮助了但是只有-z和-p两个参数中提到了zEntry而且还都没有清楚的解释:&amp;lt;你是指这两个中的哪一个吗？还是我看漏了什么？”&lt;&#x2F;p&gt;
&lt;h2 id=&quot;san-si-er-hou-wen&quot;&gt;三思而后问&lt;&#x2F;h2&gt;
&lt;p&gt;以下是几个经典蠢问题，以及黑客在拒绝回答时的心中所想：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;问题：我能在哪找到X程序？
问题：我的程序&#x2F;配置&#x2F;SQL申明没有用
问题：我的Windows有问题，你能帮我吗？
问题：我在安装Linux（或者X）时有问题，你能帮我吗？
问题：我怎么才能破解root帐号&#x2F;窃取OP特权&#x2F;读别人的邮件呢？&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提问：我能在哪找到X程序？
回答：就在我找到它的地方啊蠢货–搜索引擎的那一头。天呐！还有人不会用Google吗？&lt;&#x2F;p&gt;
&lt;p&gt;提问：我的程序（配置、SQL申明）没有用
回答：这不算是问题吧，我对找出你的真正问题没兴趣–如果要我问你二十个问题才找得出来的话–我有更有意思的事要做呢。&lt;&#x2F;p&gt;
&lt;p&gt;在看到这类问题的时候，我的反应通常不外如下三种：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;你还有什么要补充的吗？&lt;&#x2F;li&gt;
&lt;li&gt;真糟糕，希望你能搞定。&lt;&#x2F;li&gt;
&lt;li&gt;这跟我有什么鸟相关？&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;提问：我的Windows有问题，你能帮我吗？
回答：能啊，扔掉萎软的垃圾，换Linux吧。&lt;&#x2F;p&gt;
&lt;p&gt;提问：我在安装Linux（或者X）时有问题，你能帮我吗？
回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的Linux用户组寻求手把手的指导吧（你能在这儿找到用户组的清单）。&lt;&#x2F;p&gt;
&lt;p&gt;提问：我怎么才能破解root帐号&#x2F;窃取OP特权&#x2F;读别人的邮件呢？
回答：想要这样做，说明你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！&lt;&#x2F;p&gt;
&lt;h2 id=&quot;hao-wen-ti-pi-wen-ti&quot;&gt;好问题，坏问题&lt;&#x2F;h2&gt;
&lt;p&gt;　　最后，我举一些例子来说明，怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。&lt;&#x2F;p&gt;
&lt;p&gt;蠢问题：我可以在哪儿找到关于Foonly Flurbamatic的资料？
&#x2F;&#x2F; 这种问法无非想得到“STFW”这样的回答。&lt;&#x2F;p&gt;
&lt;p&gt;聪明问题：我用Google搜索过“Foonly Flurbamatic 2600”，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？
&#x2F;&#x2F; 这个问题已经STFW过了，看起来他真的遇到了麻烦。&lt;&#x2F;p&gt;
&lt;p&gt;蠢问题：我从FOO项目找来的源码没法编译。它怎么这么烂？
&#x2F;&#x2F; 他觉得都是别人的错，这个傲慢自大的家伙&lt;&#x2F;p&gt;
&lt;p&gt;聪明问题：FOO项目代码在Nulix 6.2版下无法编译通过。我读过了FAQ，但里面没有提到跟Nulix有关的问题。这是我编译过程的记录，我有什么做得不对的地方吗？
&#x2F;&#x2F; 他讲明了环境，也读过了FAQ，还指明了错误，并且他没有把问题的责任推到别人头上，这个家伙值得留意。&lt;&#x2F;p&gt;
&lt;p&gt;蠢问题：我的主板有问题了，谁来帮我？
&#x2F;&#x2F; 普通黑客对这类问题的回答通常是：“好的，还要帮你拍拍背和换尿布吗？” ，然后按下删除键。&lt;&#x2F;p&gt;
&lt;p&gt;聪明问题：我在S2464主板上试过了X、Y和Z，但没什么作用，我又试了A、B和C。请注意当我尝试C时的奇怪现象。显然边带传输中出现了收缩，但结果出人意料。在多处理器主板上引起边带泄漏的通常原因是什么？谁有好主意接下来我该做些什么测试才能找出问题？
&#x2F;&#x2F; 这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。&lt;&#x2F;p&gt;
&lt;p&gt;　　在最后一个问题中，注意“告诉我答案”和“给我启示，指出我还应该做什么诊断工作”之间微妙而又重要的区别。事实上，后一个问题源自于2001年8月在Linux内核邮件列表上的一个真实的提问。我（Eric）就是那个提出问题的人。我在Tyan S2464主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决那一问题的重要信息。&lt;&#x2F;p&gt;
&lt;p&gt;　　通过我的提问方法，我给了大家值得玩味的东西；我让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，邀请他们与我共同探讨。我告诉他们我所走过的弯路，以避免他们再浪费时间，这是一种对他人时间价值的尊重。后来，当我向每个人表示感谢，并且赞赏这套程序（指邮件列表中的讨论 –译者注）运作得非常出色的时候，一个Linux内核邮件列（lkml）成员表示，问题得到解决并非由于我是这个列表中的“名人”，而是因为我用了正确的方式来提问。我们黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我象个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，给编写这个指南的人一些指导。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;zhao-bu-dao-da-an-zen-me-ban&quot;&gt;找不到答案怎么办&lt;&#x2F;h2&gt;
&lt;p&gt;　　如果仍得不到答案，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。&lt;&#x2F;p&gt;
&lt;p&gt;　　总的说来，简单的重复张贴问题是个很糟的想法。这将被视为无意义的喧闹。&lt;&#x2F;p&gt;
&lt;p&gt;　　你可以通过其它渠道获得帮助，这些渠道通常更适合初学者的需要。有许多网上的以及本地的用户组，由狂热的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。&lt;&#x2F;p&gt;
&lt;p&gt;　　另外，你可以向很多商业公司寻求帮助，不论公司大还是小（Red Hat 和LinuxCare 就是两个最常见的例子）。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了–完全可能如此–你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。&lt;&#x2F;p&gt;
&lt;p&gt;　　对大众化的软件，就象Linux之类而言，每个开发者至少会有上万名用户。根本不可能由一个人来处理来自上万名用户的求助电话。要知道，即使你要为帮助付费，同你必须购买同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开放源代码软件要高得多，且内容也不那么丰富）。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;转载源版权信息&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Copyright (C) 2001 by Eric S. Raymond
中文版 Copyleft 2001 by D.H.Grand(nOBODY&#x2F;Ginux)
英文版：&lt;a class=&quot;&quot; href=&quot;http:&#x2F;&#x2F;www.tuxedo.org&#x2F;~esr&#x2F;faqs&#x2F;smart-questions.html&quot;&gt;http:&#x2F;&#x2F;www.tuxedo.org&#x2F;~esr&#x2F;faqs&#x2F;smart-questions.html&lt;&#x2F;a&gt;
感谢 Eric 的耐心指点和同意，本文才得以完成并发布，
本指南 英文版版权为 Eric Steven Raymond 所有，
中文版版权由 D.H.Grand[nOBODY&#x2F;Ginux] 所有&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>Vim折腾之 PowerShell篇</title>
        <published>2025-06-17T00:00:00+00:00</published>
        <updated>2025-06-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app/vimzhe-teng-powershellpian/"/>
        <id>https://muyu-git-main-08820048s-projects.vercel.app/vimzhe-teng-powershellpian/</id>
        
        <content type="html" xml:base="https://muyu-git-main-08820048s-projects.vercel.app/vimzhe-teng-powershellpian/">&lt;h3 id=&quot;geng-xin-ri-zhi&quot;&gt;更新日志：&lt;&#x2F;h3&gt;
&lt;p&gt;2022-09-03 晚&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;调整目录结构&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;更新文章封面&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;shuo-ming&quot;&gt;说明&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;vim一直以来都被称为编辑器之神一样的存在。但用不用vim完全取决于你自己，但是作为一个学计算机的同学来说，免不了会和Linux打交道，而大部分的Linux操作系统都预装了vim作为编辑器，如果是简单的任务，其实vim只要会&lt;&#x2F;strong&gt;&lt;code&gt;:wq,i,o,w,q!,kjhl&lt;&#x2F;code&gt;足矣。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;正式开始下面的内容之前，你可以考虑下要不要折腾，或者说是不是真的爱vim，如果不爱请离开，就现在，因为它真的带刺，没有足够的热爱就不会有足够的耐心和精力去维护和学习，vim很难学，但属于那种学会了就离不开的类型。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;再说下，IDE，使用vim的衍生产品neovim作为核心，结合plug.vim插件管理工具，继承一个功能强大的IDEA开发环境(几乎支持绝大部分编程语言哈)。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;总结一句话，这注定是一个折腾和学习的过程，要不要来，你决定。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;windowsban-ben&quot;&gt;windows版本&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;相对来说，在windows系统上打造这样的环境相比于在Linxu上要麻烦得多，各种问题层出不穷，一言不合就就ERROR。所以这里先搞定windows操作系统，这里使用官方的&lt;&#x2F;strong&gt;&lt;code&gt;powershell&lt;&#x2F;code&gt;作为shell终端，使用新版的&lt;code&gt;windows terminal&lt;&#x2F;code&gt;作为操作终端。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;xiang-guan-ruan-jian-xia-zai&quot;&gt;相关软件下载&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;windows terminal&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;oh-my-posh&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;以上两个软件可以直接在微软商店下载，下载安装即可，不需要作任何配置。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于&lt;&#x2F;strong&gt;&lt;code&gt;oh-my-posh&lt;&#x2F;code&gt;其实是&lt;code&gt;zsh&lt;&#x2F;code&gt;美化版本的&lt;code&gt;oh-my-zsh&lt;&#x2F;code&gt;，在linux上是zsh,在powershell中就是&lt;code&gt;oh-my-posh&lt;&#x2F;code&gt;,这是用来美化终端命令显示的，提供很多内置的主题。比如我用的&lt;code&gt;xtoys&lt;&#x2F;code&gt;效果如下：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-10949903531096456410-d06f52e9.png&quot; alt=&quot;image-20220809095152202&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;&quot;&gt;配置oh-my-posh主题&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;为了更好的兼容性，建议设置windows terminal字体为：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-13057622274987666226-30fd89da.png&quot; alt=&quot;image-20220809102328823&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;具体的设置方法可以在终端设置中选择对于的终端，再选择外观设置。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;接下来打开&lt;&#x2F;strong&gt;&lt;code&gt;powershell&lt;&#x2F;code&gt;【为了方便，后面统一称为ps】。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;终端输入：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;notepad $PROFILE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;此时会弹出一个记事本，在里面输入：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;oh-my-posh init pwsh --config &amp;quot;$env:POSH_THEMES_PATH\zash.omp.json&amp;quot; | Invoke-Expression
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;保存之后输入&lt;&#x2F;strong&gt;&lt;code&gt;.$PROFILE&lt;&#x2F;code&gt;使配置文件立即生效。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;再次重启ps之后就能看到设置的主题已经有效果了，上面这段命令中默认设置的主题是&lt;&#x2F;strong&gt;&lt;code&gt;zash.omp.json&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;使用&lt;&#x2F;strong&gt;&lt;code&gt;Get-PoshThemes&lt;&#x2F;code&gt;可以在终端显示并查看所有主题效果，如果需要更换主题，找到对应的主题名称之后，替换掉前面配置文件中的&lt;code&gt;zash.omp.json&lt;&#x2F;code&gt;zash部分即可，这就是主题名称。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;更多内容可以阅读官方文档,官方文档才是最新鲜的第一手资料。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;ohmyposh.dev&#x2F;&quot;&gt;&lt;strong&gt;Oh My Posh&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-1&quot;&gt;&lt;strong&gt;Chocolatey&lt;&#x2F;strong&gt;的安装&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;Chocolatey&lt;&#x2F;code&gt;是ps中一款包管理工具，通过这种方式来安装后续的很多内容可以避免踩很多坑，血的教训。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;一下的所有命令请在管理员模式下的ps终端执行&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;安装****Chocolatey&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&amp;#39;https:&#x2F;&#x2F;community.chocolatey.org&#x2F;install.ps1&amp;#39;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用包管理工具安装下面几个软件&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;choco install git
&lt;&#x2F;span&gt;&lt;span&gt;choco install neovim
&lt;&#x2F;span&gt;&lt;span&gt;choco install python
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;注意上面的几个部分软件可能需要科学上网，请自己解决。在安装的过程中还会提示是否继续的操作指令提示，请全部选A，表示全部(ALL)继续的意思。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;关于内容移步官网：&lt;&#x2F;strong&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;chocolatey.org&#x2F;install#psdsc&quot;&gt;https:&#x2F;&#x2F;chocolatey.org&#x2F;install#psdsc&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;-2&quot;&gt;安装plug-vim&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;这是一款用来扩展nvim的插件管理器，nvim可以越发强大，主要就是靠插件的集成，也支持Lua脚本(对nvim和vim都有版本限制)，所以建议各位都安装vim8.3+或者neovim0.7+的版本。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;按照官方文档的说明，安装这个插件的方式，对于使用ps而已，可以使用下面的安装命令：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;iwr -useb https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;junegunn&#x2F;vim-plug&#x2F;master&#x2F;plug.vim |`
&lt;&#x2F;span&gt;&lt;span&gt;    ni &amp;quot;$(@($env:XDG_DATA_HOME, $env:LOCALAPPDATA)[$null -eq $env:XDG_DATA_HOME])&#x2F;nvim-data&#x2F;site&#x2F;autoload&#x2F;plug.vim&amp;quot; -Force
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;安装完成后，会在&lt;&#x2F;strong&gt;&lt;code&gt;$USER&#x2F;nvim-data&#x2F;site&#x2F;autoload&#x2F;&lt;&#x2F;code&gt;目录下生成一个&lt;code&gt;plug.vim&lt;&#x2F;code&gt;文件，注意&lt;code&gt;$USER&lt;&#x2F;code&gt;指的是你windows当前登录的用户所在的目录，这个USER指代的是当前用户的用户名，在C盘可以找到。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-7718162306806339053-c5920d0f.png&quot; alt=&quot;image-20220809113811322&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-3&quot;&gt;插件配置于安装&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;使用插件功能，我们需要初始化一个配置文件，在&lt;&#x2F;strong&gt;&lt;code&gt;C:$USER\AppData\Local\nvim\&lt;&#x2F;code&gt;目录下新建一个名为&lt;code&gt;init.vim&lt;&#x2F;code&gt;的配置文件。如果没有目录，就自己创建对应的目录。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;打开init.vim，添加下面的内容，其中第一行用来指定安装的插件存放的位置，这个位置可以自定义，这个位置很重要，错误了可能后面无法安装插件。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;call plug#begin(&amp;#39;~&#x2F;.AppData&#x2F;Local&#x2F;nvim&#x2F;plugged&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;插件名称&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;...&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;将所有插件安装在这里
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;call plug#end()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;插件安装位置: 在用户目录下，建立.AppData文件，在里面新建一个local文件，在local里新建一个nvim文件，在里新建一个plugged文件以存放下载的插件(C:\Users&lt;&#x2F;strong&gt;(&lt;strong&gt;你的用户名)&lt;&#x2F;strong&gt;.&lt;strong&gt;AppData\local\nvim\plugged)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;安装插件：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;好用的插件太多了，各位可以去自己摸索或者去这个插件库找，下面放一下我自己的配置吧，插件有点多，这里不展开说，考虑另外开一篇文章来说一下插件的用法。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;set nu
&lt;&#x2F;span&gt;&lt;span&gt;call plug#begin(&amp;#39;~&#x2F;.AppData&#x2F;Local&#x2F;nvim&#x2F;plugged&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;set nu
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 要安装的插件列表
&lt;&#x2F;span&gt;&lt;span&gt;call plug#begin(&amp;#39;~&#x2F;.vim&#x2F;plugged&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; tab键补全功能插件
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;ervandew&#x2F;supertab&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;akinsho&#x2F;toggleterm.nvim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;linluk&#x2F;vim-websearch&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;kyazdani42&#x2F;nvim-web-devicons&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Coc 智能补全插件引擎
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;neoclide&#x2F;coc.nvim&amp;#39;, {&amp;#39;branch&amp;#39;: &amp;#39;release&amp;#39;}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; vim-airline 标签栏插件
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;Vim-airline&#x2F;vim-airline&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; vim-airline 标签栏插件的主题插件
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;Vim-airline&#x2F;vim-airline-themes&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; ranger 文件浏览器
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;kevinhwang91&#x2F;rnvimr&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; vim-startify 插件
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;mhinz&#x2F;vim-startify&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; vim-snazzy 主题插件
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;connorholyday&#x2F;vim-snazzy&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; markdown 预览插件
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;iamcco&#x2F;markdown-preview.nvim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;preservim&#x2F;nerdtree&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;Yggdroot&#x2F;LeaderF&amp;#39;, { &amp;#39;do&amp;#39;: &amp;#39;.&#x2F;install.sh&amp;#39; }
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;preservim&#x2F;nerdcommenter&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;jiangmiao&#x2F;auto-pairs&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;thinca&#x2F;vim-quickrun&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;dhruvasagar&#x2F;vim-table-mode&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug  &amp;#39;luochen1990&#x2F;rainbow&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;mhinz&#x2F;vim-startify&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;honza&#x2F;vim-snippets&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;othree&#x2F;html5.vim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;shougo&#x2F;neomru.vim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;roxma&#x2F;vim-paste-easy&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;goolord&#x2F;alpha-nvim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;Plug &amp;#39;glepnir&#x2F;dashboard-nvim&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;cyrus-and&#x2F;gdb-dashboard&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Plug &amp;#39;lukaszkorecki&#x2F;vim-githubdashboard&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;call plug#end()
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 配置 vim-airline 标签栏插件
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:airline#extensions#tabline#enabled = 1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 配置 ranger 文件浏览器插件
&lt;&#x2F;span&gt;&lt;span&gt;let g:rnvimr_ex_enable = 1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Alt+o 打开 ranger
&lt;&#x2F;span&gt;&lt;span&gt;nnoremap &amp;lt;silent&amp;gt; &amp;lt;M-o&amp;gt; :RnvimrToggle&amp;lt;CR&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Alt+加号 切换至下一个标签，减号则是切换回上一个
&lt;&#x2F;span&gt;&lt;span&gt;nnoremap &amp;lt;M-+&amp;gt; :bp&amp;lt;CR&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;nnoremap &amp;lt;M--&amp;gt; :bn&amp;lt;CR&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;set background=light        &amp;quot; for the light version
&lt;&#x2F;span&gt;&lt;span&gt;let g:one_allow_italics = 1 &amp;quot; I love italic for comments
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;colorscheme one
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 配置 vim-snazzy 主题插件
&lt;&#x2F;span&gt;&lt;span&gt;colorscheme snazzy
&lt;&#x2F;span&gt;&lt;span&gt;let g:SnazzyTransparent = 1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 指定浏览器路径
&lt;&#x2F;span&gt;&lt;span&gt;let g:mkdp_path_to_chrome = &amp;quot;&amp;lt;此处填写chrome的安装路径&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 指定预览主题，默认Github
&lt;&#x2F;span&gt;&lt;span&gt;let g:mkdp_markdown_css=&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Add spaces after comment delimiters by default
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDSpaceDelims = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Use compact syntax for prettified multi-line comments
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDCompactSexyComs = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Align line-wise comment delimiters flush left instead of following code indentation
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDDefaultAlign = &amp;#39;left&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Set a language to use its alternate delimiters by default
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDAltDelims_java = 1
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Allow commenting and inverting empty lines (useful when commenting a region)
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDCommentEmptyLines = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Enable trimming of trailing whitespace when uncommenting
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDTrimTrailingWhitespace = 1
&lt;&#x2F;span&gt;&lt;span&gt;let g:coc_disable_startup_warning = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Enable NERDCommenterToggle to check all selected lines is commented or not
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDToggleCheckAllLines = 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; Add your own custom formats or override the defaults
&lt;&#x2F;span&gt;&lt;span&gt;let g:NERDCustomDelimiters = { &amp;#39;c&amp;#39;: { &amp;#39;left&amp;#39;: &amp;#39;&#x2F;**&amp;#39;,&amp;#39;right&amp;#39;: &amp;#39;*&#x2F;&amp;#39; } }
&lt;&#x2F;span&gt;&lt;span&gt;set laststatus=2  &amp;quot;永远显示状态栏
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_powerline_fonts = 1  &amp;quot; 支持 powerline 字体
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline#extensions#tabline#enabled = 1 &amp;quot;&amp;quot; 显示窗口tab和buffer
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:airline_theme=&amp;#39;moloai&amp;#39;  &amp;quot; murmur配色不错
&lt;&#x2F;span&gt;&lt;span&gt;if !exists(&amp;#39;g:airline_symbols&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_symbols = {}
&lt;&#x2F;span&gt;&lt;span&gt;endif
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_left_sep = &amp;#39;▶&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_left_alt_sep = &amp;#39;❯&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_right_sep = &amp;#39;◀&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_right_alt_sep = &amp;#39;❮&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_symbols.linenr = &amp;#39;¶&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:airline_symbols.branch = &amp;#39;⎇&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;map &amp;lt;C-n&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:airline_theme=&amp;#39;one&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 配置彩虹括号
&lt;&#x2F;span&gt;&lt;span&gt;let g:rainbow_active = 1 &amp;quot;0 if you want to enable it later via :RainbowToggle
&lt;&#x2F;span&gt;&lt;span&gt;let g:rainbow_conf = {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;guifgs&amp;#39;: [&amp;#39;royalblue3&amp;#39;, &amp;#39;darkorange3&amp;#39;, &amp;#39;seagreen3&amp;#39;, &amp;#39;firebrick&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;ctermfgs&amp;#39;: [&amp;#39;lightblue&amp;#39;, &amp;#39;lightyellow&amp;#39;, &amp;#39;lightcyan&amp;#39;, &amp;#39;lightmagenta&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;operators&amp;#39;: &amp;#39;_,_&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;parentheses&amp;#39;: [&amp;#39;start=&#x2F;(&#x2F; end=&#x2F;)&#x2F; fold&amp;#39;, &amp;#39;start=&#x2F;\[&#x2F; end=&#x2F;\]&#x2F; fold&amp;#39;, &amp;#39;start=&#x2F;{&#x2F; end=&#x2F;}&#x2F; fold&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;separately&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;*&amp;#39;: {},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;tex&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;parentheses&amp;#39;: [&amp;#39;start=&#x2F;(&#x2F; end=&#x2F;)&#x2F;&amp;#39;, &amp;#39;start=&#x2F;\[&#x2F; end=&#x2F;\]&#x2F;&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;lisp&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;guifgs&amp;#39;: [&amp;#39;royalblue3&amp;#39;, &amp;#39;darkorange3&amp;#39;, &amp;#39;seagreen3&amp;#39;, &amp;#39;firebrick&amp;#39;, &amp;#39;darkorchid3&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;vim&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;parentheses&amp;#39;: [&amp;#39;start=&#x2F;(&#x2F; end=&#x2F;)&#x2F;&amp;#39;, &amp;#39;start=&#x2F;\[&#x2F; end=&#x2F;\]&#x2F;&amp;#39;, &amp;#39;start=&#x2F;{&#x2F; end=&#x2F;}&#x2F; fold&amp;#39;, &amp;#39;start=&#x2F;(&#x2F; end=&#x2F;)&#x2F; containedin=vimFuncBody&amp;#39;, &amp;#39;start=&#x2F;\[&#x2F; end=&#x2F;\]&#x2F; containedin=vimFuncBody&amp;#39;, &amp;#39;start=&#x2F;{&#x2F; end=&#x2F;} fold containedin=vimFuncBody&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;html&amp;#39;: {
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;parentheses&amp;#39;: [&amp;#39;start=&#x2F;\v\&amp;lt;((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ &amp;gt;])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=(&amp;quot;[^&amp;quot;]*&amp;quot;|&amp;#39;.&amp;quot;&amp;#39;&amp;quot;.&amp;#39;[^&amp;#39;.&amp;quot;&amp;#39;&amp;quot;.&amp;#39;]*&amp;#39;.&amp;quot;&amp;#39;&amp;quot;.&amp;#39;|[^ &amp;#39;.&amp;quot;&amp;#39;&amp;quot;.&amp;#39;&amp;quot;&amp;gt;&amp;lt;=`]*))?)*\&amp;gt;&#x2F; end=#&amp;lt;&#x2F;\z1&amp;gt;# fold&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;\},
&lt;&#x2F;span&gt;&lt;span&gt;\&amp;#39;css&amp;#39;: 0,
&lt;&#x2F;span&gt;&lt;span&gt;\}
&lt;&#x2F;span&gt;&lt;span&gt;\}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:dashboard_custom_section={
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;\ &amp;#39;buffer_list&amp;#39;: [&amp;#39; Recently lase session SPC b b&amp;#39;],
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;\ }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;let g:dashboard_custom_shortcut={
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;\ &amp;#39;yes&amp;#39;        :  &amp;#39;SPC s l&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;\}
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;function! BUFFER_LIST()
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;Clap buffers
&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;endfunction
&lt;&#x2F;span&gt;&lt;span&gt;let g:dashboard_default_header = &amp;#39;commicgirl5&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;let g:web_search_command = &amp;quot;firefox&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;let g:web_search_query = &amp;quot;https:&#x2F;&#x2F;search.yahoo.com&#x2F;search;?p=&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;let g:startify_custom_header = [
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;+------------------------------+&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;|                              |&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;| 惟有热爱,可岁月漫长！        |&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;|                              |&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;+----------------+-------------+&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \]
&lt;&#x2F;span&gt;&lt;span&gt;let g:startify_custom_footer = [
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;+------------------------------+&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;|      八尺妖剑                 | &amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;    \ &amp;#39;|   https:&#x2F;&#x2F;www.waer.ltd         |&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \ &amp;#39;+----------------+-------------+&amp;#39;,
&lt;&#x2F;span&gt;&lt;span&gt;            \]
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;把上面的内容粘贴到你的&lt;&#x2F;strong&gt;&lt;code&gt;init.vim&lt;&#x2F;code&gt;中保存，然后重启nvim。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;在nvim命令模式下输入&lt;&#x2F;strong&gt;&lt;code&gt;:PlugInstall&lt;&#x2F;code&gt;，它会自己安装所有的插件，过程也需要科学上网，并且可能不会一次成功，多试几次就好了。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-14768138760641395538-eb6a9651.png&quot; alt=&quot;image-20220809120426366&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;更多关于&lt;&#x2F;strong&gt;&lt;code&gt;plug.vim&lt;&#x2F;code&gt;的管理命令参考官方:&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;junegunn&#x2F;vim-plug&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;junegunn&#x2F;vim-plug&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;-4&quot;&gt;安装coc插件&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意到上一步安装的插件中一个个名为coc.nvim的插件。官方项目项目地址有这么一句话：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-5424929863086008846-d7ce9195.png&quot; alt=&quot;image-20220809120924743&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;他是干什么用的现在懂了吧？？不过，有没有这种可能：你并不知道&lt;&#x2F;strong&gt;&lt;code&gt;VSCode是什么？&lt;&#x2F;code&gt;希望没有！！！&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;需要打造一款多语言环境的IDE，这小东西的可是功不可没。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;官网地址,英文版直接去github项目地址就好了。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;github.com&#x2F;neoclide&#x2F;coc.nvim&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;neoclide&#x2F;coc.nvim&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;另外还提供中文讨论社区：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a class=&quot;&quot; href=&quot;https:&#x2F;&#x2F;gitter.im&#x2F;neoclide&#x2F;coc-cn&quot;&gt;https:&#x2F;&#x2F;gitter.im&#x2F;neoclide&#x2F;coc-cn&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;遇事不决，量子力学(官网解决)&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;代码提示&#x2F;补全&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;由于 Coc 本身并不提供具体语言的补全功能，所以在安装完成后，我们需要安装具体的语言服务以支持对应的补全功能。例如想要配置 C++环境，我们就需要在 NeoVim 的命令模式下执行以下命令来安装相关的插件：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;:CocInstall coc-clangd # C++环境插件
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-cmake  # Cmake 支持
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;当然，你还可以安装：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;:CocInstall coc-git            # git 支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-highlight  # 高亮支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-jedi           # jedi
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-json          # json 文件支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-python     # python 环境支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-sh             # bash 环境支持
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-snippets   # python提供 snippets
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-vimlsp      # lsp
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-yaml         # yaml
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-sql        # sql
&lt;&#x2F;span&gt;&lt;span&gt;:CocInstall coc-java      # java支持
&lt;&#x2F;span&gt;&lt;span&gt;更多内容去官方。
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;上面的都安装完了，再次打开nvim，你会发现此时的vim已经是一款开发利器(我觉得是)。比如写个helloword.cpp试试看。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-8129814682304298084-0b6835d8.png&quot; alt=&quot;image-20220809122346987&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;说实话，这提示可不必IDEA的提示慢。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;b3logfile.com&#x2F;file&#x2F;2022&#x2F;08&#x2F;solo-fetchupload-9678909763547725093-28a6431e.png&quot; alt=&quot;&quot; loading=&quot;lazy&quot; decoding=&quot;async&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;本文卒！&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="zh">
        <title>效率工具 Markdown 快速入门</title>
        <published>2025-06-17T00:00:00+00:00</published>
        <updated>2025-06-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://muyu-git-main-08820048s-projects.vercel.app/xiao-lu-gong-ju-markdown/"/>
        <id>https://muyu-git-main-08820048s-projects.vercel.app/xiao-lu-gong-ju-markdown/</id>
        
        <content type="html" xml:base="https://muyu-git-main-08820048s-projects.vercel.app/xiao-lu-gong-ju-markdown/">&lt;!-- ## 概念概述

[百科链接](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;markdown&#x2F;3245829?fr=aladdin)

`Markdown`是一种[轻量级标记语言](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;轻量级标记语言&#x2F;52671915)，创始人为约翰·格鲁伯（英语：`John Gruber`）。 它允许人们使用易读易写的[纯文本格式](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;纯文本格式&#x2F;9862288)编写文档，然后转换成有效的`XHTML`（或者`HTML`）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。

由于`Markdown`的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用`Markdown`来撰写帮助文档或是用于论坛上发表消息。 如[GitHub](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;GitHub&#x2F;10145341)、[Reddit](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;Reddit&#x2F;1272010)、[Diaspora](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;Diaspora&#x2F;10726893)、[Stack Exchange](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;Stack Exchange&#x2F;13777796)、[OpenStreetMap](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;OpenStreetMap&#x2F;3171606) 、[SourceForge](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;SourceForge&#x2F;6562141)、[简书](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;简书&#x2F;5782216)等，甚至还能被使用来撰写[电子书](https:&#x2F;&#x2F;baike.baidu.com&#x2F;item&#x2F;电子书&#x2F;346054)。

## 标题格式

* 用#号开头并空一格输入文字表示标题
* 一个井号代表一级标题，以此类推

&gt; 实例：
&gt;
&gt; # h1
&gt;
&gt; ## h2
&gt;
&gt; #### h4

## 文本格式

- 两个*号包围表示字体加粗
- 三个星或者下划线号表示斜体

## 有序列表

一个加号减号或者星号开头代表有序列表

&gt; 实例：
&gt;
&gt; - Java
&gt; - C++
&gt; - JS

## 无序列表

使用数字+.+一个空格

&gt; 实例：
&gt;
&gt; 1. 学习
&gt; 2. 游戏
&gt; 3. 听音乐

## 代码

三个```开头即可插入代码

三个```编程语言名称即可插入指定编程语言的代码块

```c++
cout&lt;&lt;&quot;hello Tisox&quot;&lt;&lt;endl;
```

## 数学公式

如果要在文本行中插入数学公式

在公式前后加上一个$符号

如果要插入一个数学区块，在公式前后分别加上两个$$符号

$$
f(x)=x^2+3
$$

## 表格

| 表头   | 表头   |
| ------ | ------ |
| 单元格 | 单元格 |
| 单元格 | 单元格 |

&gt; 实例：
&gt; 竖线&#x27;|&#x27;构造表格列结构
&gt; 多虚线&#x27;----&#x27;构造表格行结构

## 链接

&gt; 格式：&#x27;\[]()&#x27;
&gt; [] 中书写超链接的名称
&gt; () 中书写超链接地址

[八尺妖剑的博客](https:&#x2F;&#x2F;www.waer.ltd)

## 图片

&gt; 格式：&#x27;\!\[]()&#x27;

- 开头一个感叹号 !
- 接着一个方括号，里面放上图片的替代文字
- 接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 &#x27;title&#x27; 属性的文字。

## 转义字符

Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：

![image-20220906143617280](https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;image-20220906143617280.png)

## 案例

| 名称 | 列表                 | 元祖               | 字典                       | 集合               |
| ---- | -------------------- | ------------------ | -------------------------- | ------------------ |
| 英文 | list                 | tuple              | dict                       | set                |
| 表示 | \[]                  | \()                | \{key1:value1,key2:value2} | \{,,,}             |
| 特点 | 不需要具有相同的类型 | 元祖的元素不能修改 | 键值对形式                 | 无序的不重复元素列 |

****

## 使用技巧

### 技巧一

&gt; 如何在序列表之后插入代码块。实现下面的效果：

1. 下面是一段代码

   ```java
   while(day++ &lt; life.length) {
       love++;&#x2F;&#x2F;♥♥♥
   }
   return FGTWDLHNN_1000;
   ```

2. 下面还是一段代码块

   ```cpp
   while(day++ &lt; life.length) {
       love++;&#x2F;&#x2F;♥♥♥
   }
   return FGTWDLHNN_1000;
   ```

   ****

**实现方式**

&gt; - 按照有序列表的语法打出第1个序号，后跟需要的文字说明。
&gt; - 在上一步的文字说明写完之后直接按下&lt;kbd&gt;回车键&lt;&#x2F;kbd&gt;此时会在下一行形成序号2，但这不是我们想要的，我们需要在这个序号2的位置放一块代码片段。
&gt; - 接着上一步的&lt;kbd&gt;回车&lt;&#x2F;kbd&gt;操作之后出现序号2，此时我们再按一下&lt;kbd&gt;Tab&lt;&#x2F;kbd&gt;,之后会把新的序号2变成序号1的子序号1.
&gt; - 紧接上一步，出现子序号1时，我们按下&lt;kbd&gt;删除&lt;&#x2F;kbd&gt;把子序号删除掉，保持删除后的光标位置不要动
&gt; - 在上一步删除操作结束后，我们直接在光标处开始使用代码块的\```languageType语法正常插入自己的代码。
&gt; - 到这里，你已经成功在序号1后插入一段代码块了，那么我们光标移出代码块的位置，直接按下&lt;kbd&gt;回车&lt;&#x2F;kbd&gt;
&gt; - 你会发现它会自动工具上一条序号的大小自动排版下一个序号，也就是序号2，到此为止，我们重复上面的步骤，就可以如此往复的在每一个序号之后插入代码块，实现上面这种效果了。

**动图演示**

![md](https:&#x2F;&#x2F;images.waer.ltd&#x2F;img&#x2F;md.gif)

[视频版地址](https:&#x2F;&#x2F;clipchamp.com&#x2F;watch&#x2F;zprdxKQOycu)

****

##  参考&#x2F;资源

- [markdown官网](https:&#x2F;&#x2F;www.markdownguide.org&#x2F;)
- [Typora软件下载](https:&#x2F;&#x2F;www.typora.io&#x2F;) --&gt;
</content>
        
    </entry>
</feed>
